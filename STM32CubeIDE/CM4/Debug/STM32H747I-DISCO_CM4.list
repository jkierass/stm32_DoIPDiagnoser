
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   00001630  38000000  38000000  00022000  2**2
                  ALLOC
  2 .text         0001c930  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003244  0811cbd0  0811cbd0  0001dbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0811fe14  0811fe14  00020e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0811fe1c  0811fe1c  00020e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0811fe24  0811fe24  00020e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000090  10000000  0811fe28  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00011e44  10000090  0811feb8  00021090  2**2
                  ALLOC
  9 ._user_heap_stack 00002004  10011ed4  0811feb8  00021ed4  2**0
                  ALLOC
 10 .lwip_sec     00024b83  10020000  10020000  00022000  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005368e  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000af53  00000000  00000000  0007474e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000037c8  00000000  00000000  0007f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002b8d  00000000  00000000  00082e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00055e15  00000000  00000000  000859fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004b86a  00000000  00000000  000db812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001e95e7  00000000  00000000  0012707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00310663  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fcd0  00000000  00000000  003106a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00320378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000090 	.word	0x10000090
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0811cbb8 	.word	0x0811cbb8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000094 	.word	0x10000094
 81002dc:	0811cbb8 	.word	0x0811cbb8

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8100390:	b580      	push	{r7, lr}
 8100392:	b082      	sub	sp, #8
 8100394:	af00      	add	r7, sp, #0
 8100396:	6078      	str	r0, [r7, #4]
    if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 8100398:	687b      	ldr	r3, [r7, #4]
 810039a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810039e:	2b00      	cmp	r3, #0
 81003a0:	d005      	beq.n	81003ae <HAL_HSEM_FreeCallback+0x1e>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81003a2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81003a6:	f009 f893 	bl	81094d0 <HAL_HSEM_ActivateNotification>
        /* New message received */
        prvCoreInterruptHandler();
 81003aa:	f000 f845 	bl	8100438 <prvCoreInterruptHandler>
    }

    if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0)
 81003ae:	687b      	ldr	r3, [r7, #4]
 81003b0:	2b00      	cmp	r3, #0
 81003b2:	da05      	bge.n	81003c0 <HAL_HSEM_FreeCallback+0x30>
    {
	/* Re-Activate HSEM notification */
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 81003b4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 81003b8:	f009 f88a 	bl	81094d0 <HAL_HSEM_ActivateNotification>
	/* TX queue is empty => wake-up task trying to send a message */
	prvCoreWakeupInterruptHandler();
 81003bc:	f000 f860 	bl	8100480 <prvCoreWakeupInterruptHandler>
    }
}
 81003c0:	bf00      	nop
 81003c2:	3708      	adds	r7, #8
 81003c4:	46bd      	mov	sp, r7
 81003c6:	bd80      	pop	{r7, pc}

081003c8 <ipc_init>:

int ipc_init(void)
{
 81003c8:	b580      	push	{r7, lr}
 81003ca:	b082      	sub	sp, #8
 81003cc:	af02      	add	r7, sp, #8
#ifdef CORE_CM7
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
#endif
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 81003ce:	4b0e      	ldr	r3, [pc, #56]	@ (8100408 <ipc_init+0x40>)
 81003d0:	9300      	str	r3, [sp, #0]
 81003d2:	4b0e      	ldr	r3, [pc, #56]	@ (810040c <ipc_init+0x44>)
 81003d4:	2201      	movs	r2, #1
 81003d6:	2100      	movs	r1, #0
 81003d8:	f44f 602f 	mov.w	r0, #2800	@ 0xaf0
 81003dc:	f00e f962 	bl	810e6a4 <xStreamBufferGenericCreateStatic>
 81003e0:	4603      	mov	r3, r0
 81003e2:	4a0b      	ldr	r2, [pc, #44]	@ (8100410 <ipc_init+0x48>)
 81003e4:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 81003e6:	4b0b      	ldr	r3, [pc, #44]	@ (8100414 <ipc_init+0x4c>)
 81003e8:	9300      	str	r3, [sp, #0]
 81003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8100418 <ipc_init+0x50>)
 81003ec:	2201      	movs	r2, #1
 81003ee:	2100      	movs	r1, #0
 81003f0:	f44f 602f 	mov.w	r0, #2800	@ 0xaf0
 81003f4:	f00e f956 	bl	810e6a4 <xStreamBufferGenericCreateStatic>
 81003f8:	4603      	mov	r3, r0
 81003fa:	4a05      	ldr	r2, [pc, #20]	@ (8100410 <ipc_init+0x48>)
 81003fc:	6053      	str	r3, [r2, #4]

    return 0;
 81003fe:	2300      	movs	r3, #0
}
 8100400:	4618      	mov	r0, r3
 8100402:	46bd      	mov	sp, r7
 8100404:	bd80      	pop	{r7, pc}
 8100406:	bf00      	nop
 8100408:	38000008 	.word	0x38000008
 810040c:	38000050 	.word	0x38000050
 8100410:	38000000 	.word	0x38000000
 8100414:	3800002c 	.word	0x3800002c
 8100418:	38000b40 	.word	0x38000b40

0810041c <ipc_start>:

int ipc_start(void){
 810041c:	b580      	push	{r7, lr}
 810041e:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 8100420:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8100424:	f009 f854 	bl	81094d0 <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8100428:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 810042c:	f009 f850 	bl	81094d0 <HAL_HSEM_ActivateNotification>
    return 0;
 8100430:	2300      	movs	r3, #0
}
 8100432:	4618      	mov	r0, r3
 8100434:	bd80      	pop	{r7, pc}
	...

08100438 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 8100438:	b580      	push	{r7, lr}
 810043a:	b082      	sub	sp, #8
 810043c:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 810043e:	2300      	movs	r3, #0
 8100440:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 8100442:	4b0d      	ldr	r3, [pc, #52]	@ (8100478 <prvCoreInterruptHandler+0x40>)
 8100444:	681b      	ldr	r3, [r3, #0]
 8100446:	2b00      	cmp	r3, #0
 8100448:	d012      	beq.n	8100470 <prvCoreInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferSendCompletedFromISR(xrx_data_buf, &xHigherPriorityTaskWoken);
 810044a:	4b0b      	ldr	r3, [pc, #44]	@ (8100478 <prvCoreInterruptHandler+0x40>)
 810044c:	681b      	ldr	r3, [r3, #0]
 810044e:	1d3a      	adds	r2, r7, #4
 8100450:	4611      	mov	r1, r2
 8100452:	4618      	mov	r0, r3
 8100454:	f00e fb82 	bl	810eb5c <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8100458:	687b      	ldr	r3, [r7, #4]
 810045a:	2b00      	cmp	r3, #0
 810045c:	d009      	beq.n	8100472 <prvCoreInterruptHandler+0x3a>
 810045e:	4b07      	ldr	r3, [pc, #28]	@ (810047c <prvCoreInterruptHandler+0x44>)
 8100460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8100464:	601a      	str	r2, [r3, #0]
 8100466:	f3bf 8f4f 	dsb	sy
 810046a:	f3bf 8f6f 	isb	sy
 810046e:	e000      	b.n	8100472 <prvCoreInterruptHandler+0x3a>
    	return;
 8100470:	bf00      	nop
}
 8100472:	3708      	adds	r7, #8
 8100474:	46bd      	mov	sp, r7
 8100476:	bd80      	pop	{r7, pc}
 8100478:	38000000 	.word	0x38000000
 810047c:	e000ed04 	.word	0xe000ed04

08100480 <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 8100480:	b580      	push	{r7, lr}
 8100482:	b082      	sub	sp, #8
 8100484:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8100486:	2300      	movs	r3, #0
 8100488:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 810048a:	4b0d      	ldr	r3, [pc, #52]	@ (81004c0 <prvCoreWakeupInterruptHandler+0x40>)
 810048c:	685b      	ldr	r3, [r3, #4]
 810048e:	2b00      	cmp	r3, #0
 8100490:	d012      	beq.n	81004b8 <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferReceiveCompletedFromISR(xtx_data_buf, &xHigherPriorityTaskWoken);
 8100492:	4b0b      	ldr	r3, [pc, #44]	@ (81004c0 <prvCoreWakeupInterruptHandler+0x40>)
 8100494:	685b      	ldr	r3, [r3, #4]
 8100496:	1d3a      	adds	r2, r7, #4
 8100498:	4611      	mov	r1, r2
 810049a:	4618      	mov	r0, r3
 810049c:	f00e fba2 	bl	810ebe4 <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 81004a0:	687b      	ldr	r3, [r7, #4]
 81004a2:	2b00      	cmp	r3, #0
 81004a4:	d009      	beq.n	81004ba <prvCoreWakeupInterruptHandler+0x3a>
 81004a6:	4b07      	ldr	r3, [pc, #28]	@ (81004c4 <prvCoreWakeupInterruptHandler+0x44>)
 81004a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81004ac:	601a      	str	r2, [r3, #0]
 81004ae:	f3bf 8f4f 	dsb	sy
 81004b2:	f3bf 8f6f 	isb	sy
 81004b6:	e000      	b.n	81004ba <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 81004b8:	bf00      	nop
}
 81004ba:	3708      	adds	r7, #8
 81004bc:	46bd      	mov	sp, r7
 81004be:	bd80      	pop	{r7, pc}
 81004c0:	38000000 	.word	0x38000000
 81004c4:	e000ed04 	.word	0xe000ed04

081004c8 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 81004c8:	b580      	push	{r7, lr}
 81004ca:	b084      	sub	sp, #16
 81004cc:	af00      	add	r7, sp, #0
 81004ce:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 81004d0:	687b      	ldr	r3, [r7, #4]
 81004d2:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81004d4:	f3bf 8f4f 	dsb	sy
}
 81004d8:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 81004da:	4b12      	ldr	r3, [pc, #72]	@ (8100524 <vGenerateRemoteInterrupt+0x5c>)
 81004dc:	685b      	ldr	r3, [r3, #4]
 81004de:	68fa      	ldr	r2, [r7, #12]
 81004e0:	429a      	cmp	r2, r3
 81004e2:	d10b      	bne.n	81004fc <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 81004e4:	211b      	movs	r1, #27
 81004e6:	201d      	movs	r0, #29
 81004e8:	f008 ffba 	bl	8109460 <HAL_HSEM_Take>
 81004ec:	4603      	mov	r3, r0
 81004ee:	2b00      	cmp	r3, #0
 81004f0:	d114      	bne.n	810051c <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 81004f2:	211b      	movs	r1, #27
 81004f4:	201d      	movs	r0, #29
 81004f6:	f008 ffd7 	bl	81094a8 <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 81004fa:	e00f      	b.n	810051c <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 81004fc:	4b09      	ldr	r3, [pc, #36]	@ (8100524 <vGenerateRemoteInterrupt+0x5c>)
 81004fe:	681b      	ldr	r3, [r3, #0]
 8100500:	68fa      	ldr	r2, [r7, #12]
 8100502:	429a      	cmp	r2, r3
 8100504:	d10a      	bne.n	810051c <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 8100506:	211b      	movs	r1, #27
 8100508:	201e      	movs	r0, #30
 810050a:	f008 ffa9 	bl	8109460 <HAL_HSEM_Take>
 810050e:	4603      	mov	r3, r0
 8100510:	2b00      	cmp	r3, #0
 8100512:	d103      	bne.n	810051c <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 8100514:	211b      	movs	r1, #27
 8100516:	201e      	movs	r0, #30
 8100518:	f008 ffc6 	bl	81094a8 <HAL_HSEM_Release>
}
 810051c:	bf00      	nop
 810051e:	3710      	adds	r7, #16
 8100520:	46bd      	mov	sp, r7
 8100522:	bd80      	pop	{r7, pc}
 8100524:	38000000 	.word	0x38000000

08100528 <ipc_sendmsg>:

size_t ipc_sendmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8100528:	b580      	push	{r7, lr}
 810052a:	b086      	sub	sp, #24
 810052c:	af00      	add	r7, sp, #0
 810052e:	60f8      	str	r0, [r7, #12]
 8100530:	60b9      	str	r1, [r7, #8]
 8100532:	607a      	str	r2, [r7, #4]
	size_t len;

    if(xtx_data_buf == 0)
 8100534:	4b0f      	ldr	r3, [pc, #60]	@ (8100574 <ipc_sendmsg+0x4c>)
 8100536:	685b      	ldr	r3, [r3, #4]
 8100538:	2b00      	cmp	r3, #0
 810053a:	d101      	bne.n	8100540 <ipc_sendmsg+0x18>
      return 0;
 810053c:	2300      	movs	r3, #0
 810053e:	e015      	b.n	810056c <ipc_sendmsg+0x44>

    if(timeout < 0)
 8100540:	687b      	ldr	r3, [r7, #4]
 8100542:	2b00      	cmp	r3, #0
 8100544:	da09      	bge.n	810055a <ipc_sendmsg+0x32>
    	len = xMessageBufferSend(xtx_data_buf, msg, size, portMAX_DELAY);
 8100546:	4b0b      	ldr	r3, [pc, #44]	@ (8100574 <ipc_sendmsg+0x4c>)
 8100548:	6858      	ldr	r0, [r3, #4]
 810054a:	f04f 33ff 	mov.w	r3, #4294967295
 810054e:	68ba      	ldr	r2, [r7, #8]
 8100550:	68f9      	ldr	r1, [r7, #12]
 8100552:	f00e f961 	bl	810e818 <xStreamBufferSend>
 8100556:	6178      	str	r0, [r7, #20]
 8100558:	e007      	b.n	810056a <ipc_sendmsg+0x42>
    else
    	len = xMessageBufferSend(xtx_data_buf, msg, size, (TickType_t)timeout);
 810055a:	4b06      	ldr	r3, [pc, #24]	@ (8100574 <ipc_sendmsg+0x4c>)
 810055c:	6858      	ldr	r0, [r3, #4]
 810055e:	687b      	ldr	r3, [r7, #4]
 8100560:	68ba      	ldr	r2, [r7, #8]
 8100562:	68f9      	ldr	r1, [r7, #12]
 8100564:	f00e f958 	bl	810e818 <xStreamBufferSend>
 8100568:	6178      	str	r0, [r7, #20]

    return len;
 810056a:	697b      	ldr	r3, [r7, #20]
}
 810056c:	4618      	mov	r0, r3
 810056e:	3718      	adds	r7, #24
 8100570:	46bd      	mov	sp, r7
 8100572:	bd80      	pop	{r7, pc}
 8100574:	38000000 	.word	0x38000000

08100578 <ipc_recvmsg>:

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8100578:	b580      	push	{r7, lr}
 810057a:	b086      	sub	sp, #24
 810057c:	af00      	add	r7, sp, #0
 810057e:	60f8      	str	r0, [r7, #12]
 8100580:	60b9      	str	r1, [r7, #8]
 8100582:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 8100584:	687b      	ldr	r3, [r7, #4]
 8100586:	2b00      	cmp	r3, #0
 8100588:	da09      	bge.n	810059e <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 810058a:	4b0b      	ldr	r3, [pc, #44]	@ (81005b8 <ipc_recvmsg+0x40>)
 810058c:	6818      	ldr	r0, [r3, #0]
 810058e:	f04f 33ff 	mov.w	r3, #4294967295
 8100592:	68ba      	ldr	r2, [r7, #8]
 8100594:	68f9      	ldr	r1, [r7, #12]
 8100596:	f00e fa26 	bl	810e9e6 <xStreamBufferReceive>
 810059a:	6178      	str	r0, [r7, #20]
 810059c:	e007      	b.n	81005ae <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 810059e:	4b06      	ldr	r3, [pc, #24]	@ (81005b8 <ipc_recvmsg+0x40>)
 81005a0:	6818      	ldr	r0, [r3, #0]
 81005a2:	687b      	ldr	r3, [r7, #4]
 81005a4:	68ba      	ldr	r2, [r7, #8]
 81005a6:	68f9      	ldr	r1, [r7, #12]
 81005a8:	f00e fa1d 	bl	810e9e6 <xStreamBufferReceive>
 81005ac:	6178      	str	r0, [r7, #20]

    return len;
 81005ae:	697b      	ldr	r3, [r7, #20]
}
 81005b0:	4618      	mov	r0, r3
 81005b2:	3718      	adds	r7, #24
 81005b4:	46bd      	mov	sp, r7
 81005b6:	bd80      	pop	{r7, pc}
 81005b8:	38000000 	.word	0x38000000

081005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81005bc:	b580      	push	{r7, lr}
 81005be:	b082      	sub	sp, #8
 81005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81005c2:	4b30      	ldr	r3, [pc, #192]	@ (8100684 <main+0xc8>)
 81005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005c8:	4a2e      	ldr	r2, [pc, #184]	@ (8100684 <main+0xc8>)
 81005ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81005ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81005d2:	4b2c      	ldr	r3, [pc, #176]	@ (8100684 <main+0xc8>)
 81005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81005dc:	607b      	str	r3, [r7, #4]
 81005de:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81005e0:	2001      	movs	r0, #1
 81005e2:	f008 ff75 	bl	81094d0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81005e6:	f009 fd0f 	bl	810a008 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81005ea:	2201      	movs	r2, #1
 81005ec:	2102      	movs	r1, #2
 81005ee:	2000      	movs	r0, #0
 81005f0:	f009 fc90 	bl	8109f14 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81005f4:	4b24      	ldr	r3, [pc, #144]	@ (8100688 <main+0xcc>)
 81005f6:	681b      	ldr	r3, [r3, #0]
 81005f8:	091b      	lsrs	r3, r3, #4
 81005fa:	f003 030f 	and.w	r3, r3, #15
 81005fe:	2b07      	cmp	r3, #7
 8100600:	d108      	bne.n	8100614 <main+0x58>
 8100602:	4b22      	ldr	r3, [pc, #136]	@ (810068c <main+0xd0>)
 8100604:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100608:	4a20      	ldr	r2, [pc, #128]	@ (810068c <main+0xd0>)
 810060a:	f043 0301 	orr.w	r3, r3, #1
 810060e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100612:	e007      	b.n	8100624 <main+0x68>
 8100614:	4b1d      	ldr	r3, [pc, #116]	@ (810068c <main+0xd0>)
 8100616:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810061a:	4a1c      	ldr	r2, [pc, #112]	@ (810068c <main+0xd0>)
 810061c:	f043 0301 	orr.w	r3, r3, #1
 8100620:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100624:	f006 fd5e 	bl	81070e4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8100628:	f000 f898 	bl	810075c <_ZL12MX_MDMA_Initv>
  MX_GPIO_Init();
 810062c:	f000 f8b0 	bl	8100790 <_ZL12MX_GPIO_Initv>
  MX_I2C4_Init();
 8100630:	f000 f846 	bl	81006c0 <_ZL12MX_I2C4_Initv>
  /* USER CODE BEGIN 2 */
  ipc_init();
 8100634:	f7ff fec8 	bl	81003c8 <ipc_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100638:	f00b fdb8 	bl	810c1ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_EDaemonN */
 Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 810063c:	4a14      	ldr	r2, [pc, #80]	@ (8100690 <main+0xd4>)
 810063e:	2100      	movs	r1, #0
 8100640:	4814      	ldr	r0, [pc, #80]	@ (8100694 <main+0xd8>)
 8100642:	f00b fe12 	bl	810c26a <osThreadNew>
 8100646:	4603      	mov	r3, r0
 8100648:	4a13      	ldr	r2, [pc, #76]	@ (8100698 <main+0xdc>)
 810064a:	6013      	str	r3, [r2, #0]

 /* creation of Task_EventMgrM4 */
 Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 810064c:	4a13      	ldr	r2, [pc, #76]	@ (810069c <main+0xe0>)
 810064e:	2100      	movs	r1, #0
 8100650:	4813      	ldr	r0, [pc, #76]	@ (81006a0 <main+0xe4>)
 8100652:	f00b fe0a 	bl	810c26a <osThreadNew>
 8100656:	4603      	mov	r3, r0
 8100658:	4a12      	ldr	r2, [pc, #72]	@ (81006a4 <main+0xe8>)
 810065a:	6013      	str	r3, [r2, #0]

 /* creation of Task_EConnMgr */
 Task_EConnMgrHandle = osThreadNew(StartTask_EthernetConnMgr, NULL, &Task_EConnMgr_attributes);
 810065c:	4a12      	ldr	r2, [pc, #72]	@ (81006a8 <main+0xec>)
 810065e:	2100      	movs	r1, #0
 8100660:	4812      	ldr	r0, [pc, #72]	@ (81006ac <main+0xf0>)
 8100662:	f00b fe02 	bl	810c26a <osThreadNew>
 8100666:	4603      	mov	r3, r0
 8100668:	4a11      	ldr	r2, [pc, #68]	@ (81006b0 <main+0xf4>)
 810066a:	6013      	str	r3, [r2, #0]

  /* creation of Task_CTemp */
  Task_CTempHandle = osThreadNew(StartTask_CTemp, NULL, &Task_CTemp_attributes);
 810066c:	4a11      	ldr	r2, [pc, #68]	@ (81006b4 <main+0xf8>)
 810066e:	2100      	movs	r1, #0
 8100670:	4811      	ldr	r0, [pc, #68]	@ (81006b8 <main+0xfc>)
 8100672:	f00b fdfa 	bl	810c26a <osThreadNew>
 8100676:	4603      	mov	r3, r0
 8100678:	4a10      	ldr	r2, [pc, #64]	@ (81006bc <main+0x100>)
 810067a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 810067c:	f00b fdba 	bl	810c1f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100680:	bf00      	nop
 8100682:	e7fd      	b.n	8100680 <main+0xc4>
 8100684:	58024400 	.word	0x58024400
 8100688:	e000ed00 	.word	0xe000ed00
 810068c:	58026400 	.word	0x58026400
 8100690:	0811fb60 	.word	0x0811fb60
 8100694:	081037dd 	.word	0x081037dd
 8100698:	10000100 	.word	0x10000100
 810069c:	0811fb84 	.word	0x0811fb84
 81006a0:	08101269 	.word	0x08101269
 81006a4:	10000104 	.word	0x10000104
 81006a8:	0811fba8 	.word	0x0811fba8
 81006ac:	08100ecd 	.word	0x08100ecd
 81006b0:	10000108 	.word	0x10000108
 81006b4:	0811fbcc 	.word	0x0811fbcc
 81006b8:	08104a85 	.word	0x08104a85
 81006bc:	1000010c 	.word	0x1000010c

081006c0 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 81006c0:	b580      	push	{r7, lr}
 81006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 81006c4:	4b22      	ldr	r3, [pc, #136]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 81006c6:	4a23      	ldr	r2, [pc, #140]	@ (8100754 <_ZL12MX_I2C4_Initv+0x94>)
 81006c8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 81006ca:	4b21      	ldr	r3, [pc, #132]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 81006cc:	4a22      	ldr	r2, [pc, #136]	@ (8100758 <_ZL12MX_I2C4_Initv+0x98>)
 81006ce:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 81006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 81006d2:	2200      	movs	r2, #0
 81006d4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 81006d8:	2201      	movs	r2, #1
 81006da:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 81006de:	2200      	movs	r2, #0
 81006e0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 81006e2:	4b1b      	ldr	r3, [pc, #108]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 81006e4:	2200      	movs	r2, #0
 81006e6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81006e8:	4b19      	ldr	r3, [pc, #100]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 81006ea:	2200      	movs	r2, #0
 81006ec:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81006ee:	4b18      	ldr	r3, [pc, #96]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 81006f0:	2200      	movs	r2, #0
 81006f2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81006f4:	4b16      	ldr	r3, [pc, #88]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 81006f6:	2200      	movs	r2, #0
 81006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 81006fa:	4815      	ldr	r0, [pc, #84]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 81006fc:	f008 ff14 	bl	8109528 <HAL_I2C_Init>
 8100700:	4603      	mov	r3, r0
 8100702:	2b00      	cmp	r3, #0
 8100704:	bf14      	ite	ne
 8100706:	2301      	movne	r3, #1
 8100708:	2300      	moveq	r3, #0
 810070a:	b2db      	uxtb	r3, r3
 810070c:	2b00      	cmp	r3, #0
 810070e:	d001      	beq.n	8100714 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8100710:	f000 f8c4 	bl	810089c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100714:	2100      	movs	r1, #0
 8100716:	480e      	ldr	r0, [pc, #56]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 8100718:	f009 fb64 	bl	8109de4 <HAL_I2CEx_ConfigAnalogFilter>
 810071c:	4603      	mov	r3, r0
 810071e:	2b00      	cmp	r3, #0
 8100720:	bf14      	ite	ne
 8100722:	2301      	movne	r3, #1
 8100724:	2300      	moveq	r3, #0
 8100726:	b2db      	uxtb	r3, r3
 8100728:	2b00      	cmp	r3, #0
 810072a:	d001      	beq.n	8100730 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 810072c:	f000 f8b6 	bl	810089c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 2) != HAL_OK)
 8100730:	2102      	movs	r1, #2
 8100732:	4807      	ldr	r0, [pc, #28]	@ (8100750 <_ZL12MX_I2C4_Initv+0x90>)
 8100734:	f009 fba1 	bl	8109e7a <HAL_I2CEx_ConfigDigitalFilter>
 8100738:	4603      	mov	r3, r0
 810073a:	2b00      	cmp	r3, #0
 810073c:	bf14      	ite	ne
 810073e:	2301      	movne	r3, #1
 8100740:	2300      	moveq	r3, #0
 8100742:	b2db      	uxtb	r3, r3
 8100744:	2b00      	cmp	r3, #0
 8100746:	d001      	beq.n	810074c <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8100748:	f000 f8a8 	bl	810089c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 810074c:	bf00      	nop
 810074e:	bd80      	pop	{r7, pc}
 8100750:	100000ac 	.word	0x100000ac
 8100754:	58001c00 	.word	0x58001c00
 8100758:	10c0ecff 	.word	0x10c0ecff

0810075c <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 810075c:	b480      	push	{r7}
 810075e:	b083      	sub	sp, #12
 8100760:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8100762:	4b0a      	ldr	r3, [pc, #40]	@ (810078c <_ZL12MX_MDMA_Initv+0x30>)
 8100764:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100768:	4a08      	ldr	r2, [pc, #32]	@ (810078c <_ZL12MX_MDMA_Initv+0x30>)
 810076a:	f043 0301 	orr.w	r3, r3, #1
 810076e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100772:	4b06      	ldr	r3, [pc, #24]	@ (810078c <_ZL12MX_MDMA_Initv+0x30>)
 8100774:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100778:	f003 0301 	and.w	r3, r3, #1
 810077c:	607b      	str	r3, [r7, #4]
 810077e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8100780:	bf00      	nop
 8100782:	370c      	adds	r7, #12
 8100784:	46bd      	mov	sp, r7
 8100786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810078a:	4770      	bx	lr
 810078c:	58024400 	.word	0x58024400

08100790 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100790:	b480      	push	{r7}
 8100792:	b089      	sub	sp, #36	@ 0x24
 8100794:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100796:	4b37      	ldr	r3, [pc, #220]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 8100798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810079c:	4a35      	ldr	r2, [pc, #212]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 810079e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81007a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007a6:	4b33      	ldr	r3, [pc, #204]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 81007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81007b0:	61fb      	str	r3, [r7, #28]
 81007b2:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81007b4:	4b2f      	ldr	r3, [pc, #188]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 81007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007ba:	4a2e      	ldr	r2, [pc, #184]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 81007bc:	f043 0310 	orr.w	r3, r3, #16
 81007c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007c4:	4b2b      	ldr	r3, [pc, #172]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 81007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007ca:	f003 0310 	and.w	r3, r3, #16
 81007ce:	61bb      	str	r3, [r7, #24]
 81007d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81007d2:	4b28      	ldr	r3, [pc, #160]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 81007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007d8:	4a26      	ldr	r2, [pc, #152]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 81007da:	f043 0304 	orr.w	r3, r3, #4
 81007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007e2:	4b24      	ldr	r3, [pc, #144]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 81007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007e8:	f003 0304 	and.w	r3, r3, #4
 81007ec:	617b      	str	r3, [r7, #20]
 81007ee:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81007f0:	4b20      	ldr	r3, [pc, #128]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 81007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007f6:	4a1f      	ldr	r2, [pc, #124]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 81007f8:	f043 0301 	orr.w	r3, r3, #1
 81007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100800:	4b1c      	ldr	r3, [pc, #112]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 8100802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100806:	f003 0301 	and.w	r3, r3, #1
 810080a:	613b      	str	r3, [r7, #16]
 810080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810080e:	4b19      	ldr	r3, [pc, #100]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 8100810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100814:	4a17      	ldr	r2, [pc, #92]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 8100816:	f043 0302 	orr.w	r3, r3, #2
 810081a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810081e:	4b15      	ldr	r3, [pc, #84]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 8100820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100824:	f003 0302 	and.w	r3, r3, #2
 8100828:	60fb      	str	r3, [r7, #12]
 810082a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 810082c:	4b11      	ldr	r3, [pc, #68]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 810082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100832:	4a10      	ldr	r2, [pc, #64]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 8100834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810083c:	4b0d      	ldr	r3, [pc, #52]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 810083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100846:	60bb      	str	r3, [r7, #8]
 8100848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810084a:	4b0a      	ldr	r3, [pc, #40]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 810084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100850:	4a08      	ldr	r2, [pc, #32]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 8100852:	f043 0308 	orr.w	r3, r3, #8
 8100856:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810085a:	4b06      	ldr	r3, [pc, #24]	@ (8100874 <_ZL12MX_GPIO_Initv+0xe4>)
 810085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100860:	f003 0308 	and.w	r3, r3, #8
 8100864:	607b      	str	r3, [r7, #4]
 8100866:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100868:	bf00      	nop
 810086a:	3724      	adds	r7, #36	@ 0x24
 810086c:	46bd      	mov	sp, r7
 810086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100872:	4770      	bx	lr
 8100874:	58024400 	.word	0x58024400

08100878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100878:	b580      	push	{r7, lr}
 810087a:	b082      	sub	sp, #8
 810087c:	af00      	add	r7, sp, #0
 810087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100880:	687b      	ldr	r3, [r7, #4]
 8100882:	681b      	ldr	r3, [r3, #0]
 8100884:	4a04      	ldr	r2, [pc, #16]	@ (8100898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100886:	4293      	cmp	r3, r2
 8100888:	d101      	bne.n	810088e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810088a:	f006 fc89 	bl	81071a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810088e:	bf00      	nop
 8100890:	3708      	adds	r7, #8
 8100892:	46bd      	mov	sp, r7
 8100894:	bd80      	pop	{r7, pc}
 8100896:	bf00      	nop
 8100898:	40001000 	.word	0x40001000

0810089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810089c:	b480      	push	{r7}
 810089e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 81008a0:	b672      	cpsid	i
}
 81008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81008a4:	bf00      	nop
 81008a6:	e7fd      	b.n	81008a4 <Error_Handler+0x8>

081008a8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 81008a8:	b580      	push	{r7, lr}
 81008aa:	b082      	sub	sp, #8
 81008ac:	af00      	add	r7, sp, #0
 81008ae:	6078      	str	r0, [r7, #4]
 81008b0:	6039      	str	r1, [r7, #0]
 81008b2:	687b      	ldr	r3, [r7, #4]
 81008b4:	2b01      	cmp	r3, #1
 81008b6:	d124      	bne.n	8100902 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 81008b8:	683b      	ldr	r3, [r7, #0]
 81008ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81008be:	4293      	cmp	r3, r2
 81008c0:	d11f      	bne.n	8100902 <_Z41__static_initialization_and_destruction_0ii+0x5a>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(64, sizeof(SMessage));
 81008c2:	2200      	movs	r2, #0
 81008c4:	2118      	movs	r1, #24
 81008c6:	2040      	movs	r0, #64	@ 0x40
 81008c8:	f00c feef 	bl	810d6aa <xQueueGenericCreate>
 81008cc:	4603      	mov	r3, r0
 81008ce:	4a0f      	ldr	r2, [pc, #60]	@ (810090c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 81008d0:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 81008d2:	2200      	movs	r2, #0
 81008d4:	2118      	movs	r1, #24
 81008d6:	2010      	movs	r0, #16
 81008d8:	f00c fee7 	bl	810d6aa <xQueueGenericCreate>
 81008dc:	4603      	mov	r3, r0
 81008de:	4a0c      	ldr	r2, [pc, #48]	@ (8100910 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 81008e0:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToEthernetConnMgr = xQueueCreate(16, sizeof(SMessage));
 81008e2:	2200      	movs	r2, #0
 81008e4:	2118      	movs	r1, #24
 81008e6:	2010      	movs	r0, #16
 81008e8:	f00c fedf 	bl	810d6aa <xQueueGenericCreate>
 81008ec:	4603      	mov	r3, r0
 81008ee:	4a09      	ldr	r2, [pc, #36]	@ (8100914 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 81008f0:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToTemperature = xQueueCreate(4, sizeof(SMessage));
 81008f2:	2200      	movs	r2, #0
 81008f4:	2118      	movs	r1, #24
 81008f6:	2004      	movs	r0, #4
 81008f8:	f00c fed7 	bl	810d6aa <xQueueGenericCreate>
 81008fc:	4603      	mov	r3, r0
 81008fe:	4a06      	ldr	r2, [pc, #24]	@ (8100918 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8100900:	6013      	str	r3, [r2, #0]
}
 8100902:	bf00      	nop
 8100904:	3708      	adds	r7, #8
 8100906:	46bd      	mov	sp, r7
 8100908:	bd80      	pop	{r7, pc}
 810090a:	bf00      	nop
 810090c:	10000110 	.word	0x10000110
 8100910:	10000114 	.word	0x10000114
 8100914:	10000118 	.word	0x10000118
 8100918:	1000011c 	.word	0x1000011c

0810091c <_GLOBAL__sub_I_hi2c4>:
 810091c:	b580      	push	{r7, lr}
 810091e:	af00      	add	r7, sp, #0
 8100920:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8100924:	2001      	movs	r0, #1
 8100926:	f7ff ffbf 	bl	81008a8 <_Z41__static_initialization_and_destruction_0ii>
 810092a:	bd80      	pop	{r7, pc}

0810092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810092c:	b580      	push	{r7, lr}
 810092e:	b082      	sub	sp, #8
 8100930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100932:	4b10      	ldr	r3, [pc, #64]	@ (8100974 <HAL_MspInit+0x48>)
 8100934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100938:	4a0e      	ldr	r2, [pc, #56]	@ (8100974 <HAL_MspInit+0x48>)
 810093a:	f043 0302 	orr.w	r3, r3, #2
 810093e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100942:	4b0c      	ldr	r3, [pc, #48]	@ (8100974 <HAL_MspInit+0x48>)
 8100944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100948:	f003 0302 	and.w	r3, r3, #2
 810094c:	607b      	str	r3, [r7, #4]
 810094e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100950:	2200      	movs	r2, #0
 8100952:	210f      	movs	r1, #15
 8100954:	f06f 0001 	mvn.w	r0, #1
 8100958:	f006 fd0e 	bl	8107378 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 7, 0);
 810095c:	2200      	movs	r2, #0
 810095e:	2107      	movs	r1, #7
 8100960:	207e      	movs	r0, #126	@ 0x7e
 8100962:	f006 fd09 	bl	8107378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100966:	207e      	movs	r0, #126	@ 0x7e
 8100968:	f006 fd20 	bl	81073ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810096c:	bf00      	nop
 810096e:	3708      	adds	r7, #8
 8100970:	46bd      	mov	sp, r7
 8100972:	bd80      	pop	{r7, pc}
 8100974:	58024400 	.word	0x58024400

08100978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8100978:	b580      	push	{r7, lr}
 810097a:	b0bc      	sub	sp, #240	@ 0xf0
 810097c:	af00      	add	r7, sp, #0
 810097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100980:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100984:	2200      	movs	r2, #0
 8100986:	601a      	str	r2, [r3, #0]
 8100988:	605a      	str	r2, [r3, #4]
 810098a:	609a      	str	r2, [r3, #8]
 810098c:	60da      	str	r2, [r3, #12]
 810098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100990:	f107 0310 	add.w	r3, r7, #16
 8100994:	22c8      	movs	r2, #200	@ 0xc8
 8100996:	2100      	movs	r1, #0
 8100998:	4618      	mov	r0, r3
 810099a:	f01b fabe 	bl	811bf1a <memset>
  if(hi2c->Instance==I2C4)
 810099e:	687b      	ldr	r3, [r7, #4]
 81009a0:	681b      	ldr	r3, [r3, #0]
 81009a2:	4a27      	ldr	r2, [pc, #156]	@ (8100a40 <HAL_I2C_MspInit+0xc8>)
 81009a4:	4293      	cmp	r3, r2
 81009a6:	d146      	bne.n	8100a36 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 81009a8:	f04f 0210 	mov.w	r2, #16
 81009ac:	f04f 0300 	mov.w	r3, #0
 81009b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 81009b4:	2300      	movs	r3, #0
 81009b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81009ba:	f107 0310 	add.w	r3, r7, #16
 81009be:	4618      	mov	r0, r3
 81009c0:	f009 fd34 	bl	810a42c <HAL_RCCEx_PeriphCLKConfig>
 81009c4:	4603      	mov	r3, r0
 81009c6:	2b00      	cmp	r3, #0
 81009c8:	d001      	beq.n	81009ce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 81009ca:	f7ff ff67 	bl	810089c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81009ce:	4b1d      	ldr	r3, [pc, #116]	@ (8100a44 <HAL_I2C_MspInit+0xcc>)
 81009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009d4:	4a1b      	ldr	r2, [pc, #108]	@ (8100a44 <HAL_I2C_MspInit+0xcc>)
 81009d6:	f043 0308 	orr.w	r3, r3, #8
 81009da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81009de:	4b19      	ldr	r3, [pc, #100]	@ (8100a44 <HAL_I2C_MspInit+0xcc>)
 81009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009e4:	f003 0308 	and.w	r3, r3, #8
 81009e8:	60fb      	str	r3, [r7, #12]
 81009ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 81009ec:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 81009f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81009f4:	2312      	movs	r3, #18
 81009f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009fa:	2300      	movs	r3, #0
 81009fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a00:	2300      	movs	r3, #0
 8100a02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8100a06:	2304      	movs	r3, #4
 8100a08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100a0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100a10:	4619      	mov	r1, r3
 8100a12:	480d      	ldr	r0, [pc, #52]	@ (8100a48 <HAL_I2C_MspInit+0xd0>)
 8100a14:	f008 fa6a 	bl	8108eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8100a18:	4b0a      	ldr	r3, [pc, #40]	@ (8100a44 <HAL_I2C_MspInit+0xcc>)
 8100a1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a1e:	4a09      	ldr	r2, [pc, #36]	@ (8100a44 <HAL_I2C_MspInit+0xcc>)
 8100a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100a24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100a28:	4b06      	ldr	r3, [pc, #24]	@ (8100a44 <HAL_I2C_MspInit+0xcc>)
 8100a2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100a32:	60bb      	str	r3, [r7, #8]
 8100a34:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8100a36:	bf00      	nop
 8100a38:	37f0      	adds	r7, #240	@ 0xf0
 8100a3a:	46bd      	mov	sp, r7
 8100a3c:	bd80      	pop	{r7, pc}
 8100a3e:	bf00      	nop
 8100a40:	58001c00 	.word	0x58001c00
 8100a44:	58024400 	.word	0x58024400
 8100a48:	58020c00 	.word	0x58020c00

08100a4c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8100a4c:	b580      	push	{r7, lr}
 8100a4e:	b082      	sub	sp, #8
 8100a50:	af00      	add	r7, sp, #0
 8100a52:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8100a54:	687b      	ldr	r3, [r7, #4]
 8100a56:	681b      	ldr	r3, [r3, #0]
 8100a58:	4a0c      	ldr	r2, [pc, #48]	@ (8100a8c <HAL_I2C_MspDeInit+0x40>)
 8100a5a:	4293      	cmp	r3, r2
 8100a5c:	d111      	bne.n	8100a82 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8100a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8100a90 <HAL_I2C_MspDeInit+0x44>)
 8100a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a64:	4a0a      	ldr	r2, [pc, #40]	@ (8100a90 <HAL_I2C_MspDeInit+0x44>)
 8100a66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8100a6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8100a6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8100a72:	4808      	ldr	r0, [pc, #32]	@ (8100a94 <HAL_I2C_MspDeInit+0x48>)
 8100a74:	f008 fbea 	bl	810924c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8100a78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8100a7c:	4805      	ldr	r0, [pc, #20]	@ (8100a94 <HAL_I2C_MspDeInit+0x48>)
 8100a7e:	f008 fbe5 	bl	810924c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8100a82:	bf00      	nop
 8100a84:	3708      	adds	r7, #8
 8100a86:	46bd      	mov	sp, r7
 8100a88:	bd80      	pop	{r7, pc}
 8100a8a:	bf00      	nop
 8100a8c:	58001c00 	.word	0x58001c00
 8100a90:	58024400 	.word	0x58024400
 8100a94:	58020c00 	.word	0x58020c00

08100a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a98:	b580      	push	{r7, lr}
 8100a9a:	b090      	sub	sp, #64	@ 0x40
 8100a9c:	af00      	add	r7, sp, #0
 8100a9e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100aa0:	687b      	ldr	r3, [r7, #4]
 8100aa2:	2b0f      	cmp	r3, #15
 8100aa4:	d827      	bhi.n	8100af6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8100aa6:	2200      	movs	r2, #0
 8100aa8:	6879      	ldr	r1, [r7, #4]
 8100aaa:	2036      	movs	r0, #54	@ 0x36
 8100aac:	f006 fc64 	bl	8107378 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8100ab0:	2036      	movs	r0, #54	@ 0x36
 8100ab2:	f006 fc7b 	bl	81073ac <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8100ab6:	4a29      	ldr	r2, [pc, #164]	@ (8100b5c <HAL_InitTick+0xc4>)
 8100ab8:	687b      	ldr	r3, [r7, #4]
 8100aba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8100abc:	4b28      	ldr	r3, [pc, #160]	@ (8100b60 <HAL_InitTick+0xc8>)
 8100abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100ac2:	4a27      	ldr	r2, [pc, #156]	@ (8100b60 <HAL_InitTick+0xc8>)
 8100ac4:	f043 0310 	orr.w	r3, r3, #16
 8100ac8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100acc:	4b24      	ldr	r3, [pc, #144]	@ (8100b60 <HAL_InitTick+0xc8>)
 8100ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100ad2:	f003 0310 	and.w	r3, r3, #16
 8100ad6:	60fb      	str	r3, [r7, #12]
 8100ad8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100ada:	f107 0210 	add.w	r2, r7, #16
 8100ade:	f107 0314 	add.w	r3, r7, #20
 8100ae2:	4611      	mov	r1, r2
 8100ae4:	4618      	mov	r0, r3
 8100ae6:	f009 fc5f 	bl	810a3a8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100af0:	2b00      	cmp	r3, #0
 8100af2:	d106      	bne.n	8100b02 <HAL_InitTick+0x6a>
 8100af4:	e001      	b.n	8100afa <HAL_InitTick+0x62>
    return HAL_ERROR;
 8100af6:	2301      	movs	r3, #1
 8100af8:	e02b      	b.n	8100b52 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100afa:	f009 fc3f 	bl	810a37c <HAL_RCC_GetPCLK1Freq>
 8100afe:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100b00:	e004      	b.n	8100b0c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100b02:	f009 fc3b 	bl	810a37c <HAL_RCC_GetPCLK1Freq>
 8100b06:	4603      	mov	r3, r0
 8100b08:	005b      	lsls	r3, r3, #1
 8100b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100b0e:	4a15      	ldr	r2, [pc, #84]	@ (8100b64 <HAL_InitTick+0xcc>)
 8100b10:	fba2 2303 	umull	r2, r3, r2, r3
 8100b14:	0c9b      	lsrs	r3, r3, #18
 8100b16:	3b01      	subs	r3, #1
 8100b18:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8100b1a:	4b13      	ldr	r3, [pc, #76]	@ (8100b68 <HAL_InitTick+0xd0>)
 8100b1c:	4a13      	ldr	r2, [pc, #76]	@ (8100b6c <HAL_InitTick+0xd4>)
 8100b1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100b20:	4b11      	ldr	r3, [pc, #68]	@ (8100b68 <HAL_InitTick+0xd0>)
 8100b22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8100b26:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8100b28:	4a0f      	ldr	r2, [pc, #60]	@ (8100b68 <HAL_InitTick+0xd0>)
 8100b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100b2c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8100b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8100b68 <HAL_InitTick+0xd0>)
 8100b30:	2200      	movs	r2, #0
 8100b32:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100b34:	4b0c      	ldr	r3, [pc, #48]	@ (8100b68 <HAL_InitTick+0xd0>)
 8100b36:	2200      	movs	r2, #0
 8100b38:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8100b3a:	480b      	ldr	r0, [pc, #44]	@ (8100b68 <HAL_InitTick+0xd0>)
 8100b3c:	f00b f824 	bl	810bb88 <HAL_TIM_Base_Init>
 8100b40:	4603      	mov	r3, r0
 8100b42:	2b00      	cmp	r3, #0
 8100b44:	d104      	bne.n	8100b50 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8100b46:	4808      	ldr	r0, [pc, #32]	@ (8100b68 <HAL_InitTick+0xd0>)
 8100b48:	f00b f880 	bl	810bc4c <HAL_TIM_Base_Start_IT>
 8100b4c:	4603      	mov	r3, r0
 8100b4e:	e000      	b.n	8100b52 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100b50:	2301      	movs	r3, #1
}
 8100b52:	4618      	mov	r0, r3
 8100b54:	3740      	adds	r7, #64	@ 0x40
 8100b56:	46bd      	mov	sp, r7
 8100b58:	bd80      	pop	{r7, pc}
 8100b5a:	bf00      	nop
 8100b5c:	1000001c 	.word	0x1000001c
 8100b60:	58024400 	.word	0x58024400
 8100b64:	431bde83 	.word	0x431bde83
 8100b68:	10000120 	.word	0x10000120
 8100b6c:	40001000 	.word	0x40001000

08100b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100b70:	b480      	push	{r7}
 8100b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100b74:	bf00      	nop
 8100b76:	e7fd      	b.n	8100b74 <NMI_Handler+0x4>

08100b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100b78:	b480      	push	{r7}
 8100b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100b7c:	bf00      	nop
 8100b7e:	e7fd      	b.n	8100b7c <HardFault_Handler+0x4>

08100b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100b80:	b480      	push	{r7}
 8100b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100b84:	bf00      	nop
 8100b86:	e7fd      	b.n	8100b84 <MemManage_Handler+0x4>

08100b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100b88:	b480      	push	{r7}
 8100b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100b8c:	bf00      	nop
 8100b8e:	e7fd      	b.n	8100b8c <BusFault_Handler+0x4>

08100b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100b90:	b480      	push	{r7}
 8100b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100b94:	bf00      	nop
 8100b96:	e7fd      	b.n	8100b94 <UsageFault_Handler+0x4>

08100b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100b98:	b480      	push	{r7}
 8100b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100b9c:	bf00      	nop
 8100b9e:	46bd      	mov	sp, r7
 8100ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ba4:	4770      	bx	lr
	...

08100ba8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8100ba8:	b580      	push	{r7, lr}
 8100baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8100bac:	4802      	ldr	r0, [pc, #8]	@ (8100bb8 <TIM6_DAC_IRQHandler+0x10>)
 8100bae:	f00b f8c5 	bl	810bd3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8100bb2:	bf00      	nop
 8100bb4:	bd80      	pop	{r7, pc}
 8100bb6:	bf00      	nop
 8100bb8:	10000120 	.word	0x10000120

08100bbc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8100bbc:	b580      	push	{r7, lr}
 8100bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8100bc0:	4802      	ldr	r0, [pc, #8]	@ (8100bcc <ETH_IRQHandler+0x10>)
 8100bc2:	f006 ffeb 	bl	8107b9c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8100bc6:	bf00      	nop
 8100bc8:	bd80      	pop	{r7, pc}
 8100bca:	bf00      	nop
 8100bcc:	1000025c 	.word	0x1000025c

08100bd0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8100bd0:	b580      	push	{r7, lr}
 8100bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8100bd4:	4802      	ldr	r0, [pc, #8]	@ (8100be0 <ETH_WKUP_IRQHandler+0x10>)
 8100bd6:	f006 ffe1 	bl	8107b9c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8100bda:	bf00      	nop
 8100bdc:	bd80      	pop	{r7, pc}
 8100bde:	bf00      	nop
 8100be0:	1000025c 	.word	0x1000025c

08100be4 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100be4:	b580      	push	{r7, lr}
 8100be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100be8:	f008 fc84 	bl	81094f4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100bec:	bf00      	nop
 8100bee:	bd80      	pop	{r7, pc}

08100bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100bf0:	b480      	push	{r7}
 8100bf2:	af00      	add	r7, sp, #0
	return 1;
 8100bf4:	2301      	movs	r3, #1
}
 8100bf6:	4618      	mov	r0, r3
 8100bf8:	46bd      	mov	sp, r7
 8100bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bfe:	4770      	bx	lr

08100c00 <_kill>:

int _kill(int pid, int sig)
{
 8100c00:	b480      	push	{r7}
 8100c02:	b083      	sub	sp, #12
 8100c04:	af00      	add	r7, sp, #0
 8100c06:	6078      	str	r0, [r7, #4]
 8100c08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8100c0a:	4b05      	ldr	r3, [pc, #20]	@ (8100c20 <_kill+0x20>)
 8100c0c:	2216      	movs	r2, #22
 8100c0e:	601a      	str	r2, [r3, #0]
	return -1;
 8100c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100c14:	4618      	mov	r0, r3
 8100c16:	370c      	adds	r7, #12
 8100c18:	46bd      	mov	sp, r7
 8100c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c1e:	4770      	bx	lr
 8100c20:	10011ecc 	.word	0x10011ecc

08100c24 <_exit>:

void _exit (int status)
{
 8100c24:	b580      	push	{r7, lr}
 8100c26:	b082      	sub	sp, #8
 8100c28:	af00      	add	r7, sp, #0
 8100c2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8100c30:	6878      	ldr	r0, [r7, #4]
 8100c32:	f7ff ffe5 	bl	8100c00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8100c36:	bf00      	nop
 8100c38:	e7fd      	b.n	8100c36 <_exit+0x12>

08100c3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100c3a:	b580      	push	{r7, lr}
 8100c3c:	b086      	sub	sp, #24
 8100c3e:	af00      	add	r7, sp, #0
 8100c40:	60f8      	str	r0, [r7, #12]
 8100c42:	60b9      	str	r1, [r7, #8]
 8100c44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100c46:	2300      	movs	r3, #0
 8100c48:	617b      	str	r3, [r7, #20]
 8100c4a:	e00a      	b.n	8100c62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8100c4c:	f3af 8000 	nop.w
 8100c50:	4601      	mov	r1, r0
 8100c52:	68bb      	ldr	r3, [r7, #8]
 8100c54:	1c5a      	adds	r2, r3, #1
 8100c56:	60ba      	str	r2, [r7, #8]
 8100c58:	b2ca      	uxtb	r2, r1
 8100c5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100c5c:	697b      	ldr	r3, [r7, #20]
 8100c5e:	3301      	adds	r3, #1
 8100c60:	617b      	str	r3, [r7, #20]
 8100c62:	697a      	ldr	r2, [r7, #20]
 8100c64:	687b      	ldr	r3, [r7, #4]
 8100c66:	429a      	cmp	r2, r3
 8100c68:	dbf0      	blt.n	8100c4c <_read+0x12>
	}

return len;
 8100c6a:	687b      	ldr	r3, [r7, #4]
}
 8100c6c:	4618      	mov	r0, r3
 8100c6e:	3718      	adds	r7, #24
 8100c70:	46bd      	mov	sp, r7
 8100c72:	bd80      	pop	{r7, pc}

08100c74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100c74:	b580      	push	{r7, lr}
 8100c76:	b086      	sub	sp, #24
 8100c78:	af00      	add	r7, sp, #0
 8100c7a:	60f8      	str	r0, [r7, #12]
 8100c7c:	60b9      	str	r1, [r7, #8]
 8100c7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100c80:	2300      	movs	r3, #0
 8100c82:	617b      	str	r3, [r7, #20]
 8100c84:	e009      	b.n	8100c9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8100c86:	68bb      	ldr	r3, [r7, #8]
 8100c88:	1c5a      	adds	r2, r3, #1
 8100c8a:	60ba      	str	r2, [r7, #8]
 8100c8c:	781b      	ldrb	r3, [r3, #0]
 8100c8e:	4618      	mov	r0, r3
 8100c90:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100c94:	697b      	ldr	r3, [r7, #20]
 8100c96:	3301      	adds	r3, #1
 8100c98:	617b      	str	r3, [r7, #20]
 8100c9a:	697a      	ldr	r2, [r7, #20]
 8100c9c:	687b      	ldr	r3, [r7, #4]
 8100c9e:	429a      	cmp	r2, r3
 8100ca0:	dbf1      	blt.n	8100c86 <_write+0x12>
	}
	return len;
 8100ca2:	687b      	ldr	r3, [r7, #4]
}
 8100ca4:	4618      	mov	r0, r3
 8100ca6:	3718      	adds	r7, #24
 8100ca8:	46bd      	mov	sp, r7
 8100caa:	bd80      	pop	{r7, pc}

08100cac <_close>:

int _close(int file)
{
 8100cac:	b480      	push	{r7}
 8100cae:	b083      	sub	sp, #12
 8100cb0:	af00      	add	r7, sp, #0
 8100cb2:	6078      	str	r0, [r7, #4]
	return -1;
 8100cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100cb8:	4618      	mov	r0, r3
 8100cba:	370c      	adds	r7, #12
 8100cbc:	46bd      	mov	sp, r7
 8100cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cc2:	4770      	bx	lr

08100cc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100cc4:	b480      	push	{r7}
 8100cc6:	b083      	sub	sp, #12
 8100cc8:	af00      	add	r7, sp, #0
 8100cca:	6078      	str	r0, [r7, #4]
 8100ccc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8100cce:	683b      	ldr	r3, [r7, #0]
 8100cd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100cd4:	605a      	str	r2, [r3, #4]
	return 0;
 8100cd6:	2300      	movs	r3, #0
}
 8100cd8:	4618      	mov	r0, r3
 8100cda:	370c      	adds	r7, #12
 8100cdc:	46bd      	mov	sp, r7
 8100cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ce2:	4770      	bx	lr

08100ce4 <_isatty>:

int _isatty(int file)
{
 8100ce4:	b480      	push	{r7}
 8100ce6:	b083      	sub	sp, #12
 8100ce8:	af00      	add	r7, sp, #0
 8100cea:	6078      	str	r0, [r7, #4]
	return 1;
 8100cec:	2301      	movs	r3, #1
}
 8100cee:	4618      	mov	r0, r3
 8100cf0:	370c      	adds	r7, #12
 8100cf2:	46bd      	mov	sp, r7
 8100cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cf8:	4770      	bx	lr

08100cfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100cfa:	b480      	push	{r7}
 8100cfc:	b085      	sub	sp, #20
 8100cfe:	af00      	add	r7, sp, #0
 8100d00:	60f8      	str	r0, [r7, #12]
 8100d02:	60b9      	str	r1, [r7, #8]
 8100d04:	607a      	str	r2, [r7, #4]
	return 0;
 8100d06:	2300      	movs	r3, #0
}
 8100d08:	4618      	mov	r0, r3
 8100d0a:	3714      	adds	r7, #20
 8100d0c:	46bd      	mov	sp, r7
 8100d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d12:	4770      	bx	lr

08100d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100d14:	b480      	push	{r7}
 8100d16:	b087      	sub	sp, #28
 8100d18:	af00      	add	r7, sp, #0
 8100d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100d1c:	4a14      	ldr	r2, [pc, #80]	@ (8100d70 <_sbrk+0x5c>)
 8100d1e:	4b15      	ldr	r3, [pc, #84]	@ (8100d74 <_sbrk+0x60>)
 8100d20:	1ad3      	subs	r3, r2, r3
 8100d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100d24:	697b      	ldr	r3, [r7, #20]
 8100d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100d28:	4b13      	ldr	r3, [pc, #76]	@ (8100d78 <_sbrk+0x64>)
 8100d2a:	681b      	ldr	r3, [r3, #0]
 8100d2c:	2b00      	cmp	r3, #0
 8100d2e:	d102      	bne.n	8100d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100d30:	4b11      	ldr	r3, [pc, #68]	@ (8100d78 <_sbrk+0x64>)
 8100d32:	4a12      	ldr	r2, [pc, #72]	@ (8100d7c <_sbrk+0x68>)
 8100d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100d36:	4b10      	ldr	r3, [pc, #64]	@ (8100d78 <_sbrk+0x64>)
 8100d38:	681a      	ldr	r2, [r3, #0]
 8100d3a:	687b      	ldr	r3, [r7, #4]
 8100d3c:	4413      	add	r3, r2
 8100d3e:	693a      	ldr	r2, [r7, #16]
 8100d40:	429a      	cmp	r2, r3
 8100d42:	d205      	bcs.n	8100d50 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8100d44:	4b0e      	ldr	r3, [pc, #56]	@ (8100d80 <_sbrk+0x6c>)
 8100d46:	220c      	movs	r2, #12
 8100d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8100d4e:	e009      	b.n	8100d64 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8100d50:	4b09      	ldr	r3, [pc, #36]	@ (8100d78 <_sbrk+0x64>)
 8100d52:	681b      	ldr	r3, [r3, #0]
 8100d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100d56:	4b08      	ldr	r3, [pc, #32]	@ (8100d78 <_sbrk+0x64>)
 8100d58:	681a      	ldr	r2, [r3, #0]
 8100d5a:	687b      	ldr	r3, [r7, #4]
 8100d5c:	4413      	add	r3, r2
 8100d5e:	4a06      	ldr	r2, [pc, #24]	@ (8100d78 <_sbrk+0x64>)
 8100d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100d62:	68fb      	ldr	r3, [r7, #12]
}
 8100d64:	4618      	mov	r0, r3
 8100d66:	371c      	adds	r7, #28
 8100d68:	46bd      	mov	sp, r7
 8100d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d6e:	4770      	bx	lr
 8100d70:	10048000 	.word	0x10048000
 8100d74:	00001000 	.word	0x00001000
 8100d78:	1000016c 	.word	0x1000016c
 8100d7c:	10011ed8 	.word	0x10011ed8
 8100d80:	10011ecc 	.word	0x10011ecc

08100d84 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8100d84:	b480      	push	{r7}
 8100d86:	b083      	sub	sp, #12
 8100d88:	af00      	add	r7, sp, #0
 8100d8a:	6078      	str	r0, [r7, #4]
 8100d8c:	6039      	str	r1, [r7, #0]
 8100d8e:	683b      	ldr	r3, [r7, #0]
 8100d90:	4618      	mov	r0, r3
 8100d92:	370c      	adds	r7, #12
 8100d94:	46bd      	mov	sp, r7
 8100d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d9a:	4770      	bx	lr

08100d9c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8100d9c:	b480      	push	{r7}
 8100d9e:	b083      	sub	sp, #12
 8100da0:	af00      	add	r7, sp, #0
 8100da2:	6078      	str	r0, [r7, #4]
 8100da4:	687b      	ldr	r3, [r7, #4]
 8100da6:	4618      	mov	r0, r3
 8100da8:	370c      	adds	r7, #12
 8100daa:	46bd      	mov	sp, r7
 8100dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100db0:	4770      	bx	lr

08100db2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8100db2:	b480      	push	{r7}
 8100db4:	b083      	sub	sp, #12
 8100db6:	af00      	add	r7, sp, #0
 8100db8:	6078      	str	r0, [r7, #4]
 8100dba:	687b      	ldr	r3, [r7, #4]
 8100dbc:	4618      	mov	r0, r3
 8100dbe:	370c      	adds	r7, #12
 8100dc0:	46bd      	mov	sp, r7
 8100dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dc6:	4770      	bx	lr

08100dc8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8100dc8:	b580      	push	{r7, lr}
 8100dca:	b082      	sub	sp, #8
 8100dcc:	af00      	add	r7, sp, #0
 8100dce:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8100dd0:	687b      	ldr	r3, [r7, #4]
 8100dd2:	689b      	ldr	r3, [r3, #8]
 8100dd4:	2b00      	cmp	r3, #0
 8100dd6:	d005      	beq.n	8100de4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8100dd8:	687b      	ldr	r3, [r7, #4]
 8100dda:	689b      	ldr	r3, [r3, #8]
 8100ddc:	6878      	ldr	r0, [r7, #4]
 8100dde:	6879      	ldr	r1, [r7, #4]
 8100de0:	2203      	movs	r2, #3
 8100de2:	4798      	blx	r3
    }
 8100de4:	687b      	ldr	r3, [r7, #4]
 8100de6:	4618      	mov	r0, r3
 8100de8:	3708      	adds	r7, #8
 8100dea:	46bd      	mov	sp, r7
 8100dec:	bd80      	pop	{r7, pc}
	...

08100df0 <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa>:
static struct tcp_pcb *tcp_client_pcb;
static char received_message[100] = {0};
static uint8_t connection_active = 0;

/* Funkcja wywoływana przy odbiorze danych */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8100df0:	b580      	push	{r7, lr}
 8100df2:	b084      	sub	sp, #16
 8100df4:	af00      	add	r7, sp, #0
 8100df6:	60f8      	str	r0, [r7, #12]
 8100df8:	60b9      	str	r1, [r7, #8]
 8100dfa:	607a      	str	r2, [r7, #4]
 8100dfc:	70fb      	strb	r3, [r7, #3]
    if (p == NULL) {
 8100dfe:	687b      	ldr	r3, [r7, #4]
 8100e00:	2b00      	cmp	r3, #0
 8100e02:	d107      	bne.n	8100e14 <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x24>
        // Serwer zamknął połączenie
        tcp_close(tpcb);
 8100e04:	68b8      	ldr	r0, [r7, #8]
 8100e06:	f014 fae3 	bl	81153d0 <tcp_close>
        connection_active = 0;
 8100e0a:	4b12      	ldr	r3, [pc, #72]	@ (8100e54 <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x64>)
 8100e0c:	2200      	movs	r2, #0
 8100e0e:	701a      	strb	r2, [r3, #0]
        return ERR_OK;
 8100e10:	2300      	movs	r3, #0
 8100e12:	e01b      	b.n	8100e4c <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x5c>
    }

    /* Kopiuj dane do zmiennej */
    if (p->len < sizeof(received_message)) {
 8100e14:	687b      	ldr	r3, [r7, #4]
 8100e16:	895b      	ldrh	r3, [r3, #10]
 8100e18:	2b63      	cmp	r3, #99	@ 0x63
 8100e1a:	d80d      	bhi.n	8100e38 <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x48>
        strncpy(received_message, (char *)p->payload, p->len);
 8100e1c:	687b      	ldr	r3, [r7, #4]
 8100e1e:	6859      	ldr	r1, [r3, #4]
 8100e20:	687b      	ldr	r3, [r7, #4]
 8100e22:	895b      	ldrh	r3, [r3, #10]
 8100e24:	461a      	mov	r2, r3
 8100e26:	480c      	ldr	r0, [pc, #48]	@ (8100e58 <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x68>)
 8100e28:	f01b f87f 	bl	811bf2a <strncpy>
        received_message[p->len] = '\0';
 8100e2c:	687b      	ldr	r3, [r7, #4]
 8100e2e:	895b      	ldrh	r3, [r3, #10]
 8100e30:	461a      	mov	r2, r3
 8100e32:	4b09      	ldr	r3, [pc, #36]	@ (8100e58 <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x68>)
 8100e34:	2100      	movs	r1, #0
 8100e36:	5499      	strb	r1, [r3, r2]
        // Odebrano wiadomość, zapisana do zmiennej received_message
    }

    /* Zwalnij bufor */
    tcp_recved(tpcb, p->len);
 8100e38:	687b      	ldr	r3, [r7, #4]
 8100e3a:	895b      	ldrh	r3, [r3, #10]
 8100e3c:	4619      	mov	r1, r3
 8100e3e:	68b8      	ldr	r0, [r7, #8]
 8100e40:	f014 fc16 	bl	8115670 <tcp_recved>
    pbuf_free(p);
 8100e44:	6878      	ldr	r0, [r7, #4]
 8100e46:	f013 fd27 	bl	8114898 <pbuf_free>
    return ERR_OK;
 8100e4a:	2300      	movs	r3, #0
}
 8100e4c:	4618      	mov	r0, r3
 8100e4e:	3710      	adds	r7, #16
 8100e50:	46bd      	mov	sp, r7
 8100e52:	bd80      	pop	{r7, pc}
 8100e54:	100001d8 	.word	0x100001d8
 8100e58:	10000174 	.word	0x10000174

08100e5c <_ZL15tcp_client_sentPvP7tcp_pcbt>:

/* Funkcja wywoływana przy wysłaniu danych */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 8100e5c:	b480      	push	{r7}
 8100e5e:	b085      	sub	sp, #20
 8100e60:	af00      	add	r7, sp, #0
 8100e62:	60f8      	str	r0, [r7, #12]
 8100e64:	60b9      	str	r1, [r7, #8]
 8100e66:	4613      	mov	r3, r2
 8100e68:	80fb      	strh	r3, [r7, #6]
    // Dane wysłane
    return ERR_OK;
 8100e6a:	2300      	movs	r3, #0
}
 8100e6c:	4618      	mov	r0, r3
 8100e6e:	3714      	adds	r7, #20
 8100e70:	46bd      	mov	sp, r7
 8100e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e76:	4770      	bx	lr

08100e78 <_ZL20tcp_client_connectedPvP7tcp_pcba>:

/* Funkcja wywoływana po połączeniu z serwerem */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err) {
 8100e78:	b580      	push	{r7, lr}
 8100e7a:	b084      	sub	sp, #16
 8100e7c:	af00      	add	r7, sp, #0
 8100e7e:	60f8      	str	r0, [r7, #12]
 8100e80:	60b9      	str	r1, [r7, #8]
 8100e82:	4613      	mov	r3, r2
 8100e84:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK) {
 8100e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100e8a:	2b00      	cmp	r3, #0
 8100e8c:	d008      	beq.n	8100ea0 <_ZL20tcp_client_connectedPvP7tcp_pcba+0x28>
        // Błąd połączenia
        tcp_close(tpcb);
 8100e8e:	68b8      	ldr	r0, [r7, #8]
 8100e90:	f014 fa9e 	bl	81153d0 <tcp_close>
        connection_active = 0;
 8100e94:	4b0a      	ldr	r3, [pc, #40]	@ (8100ec0 <_ZL20tcp_client_connectedPvP7tcp_pcba+0x48>)
 8100e96:	2200      	movs	r2, #0
 8100e98:	701a      	strb	r2, [r3, #0]
        return err;
 8100e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100e9e:	e00b      	b.n	8100eb8 <_ZL20tcp_client_connectedPvP7tcp_pcba+0x40>
    }

    // Połączono z serwerem TCP
    connection_active = 1;
 8100ea0:	4b07      	ldr	r3, [pc, #28]	@ (8100ec0 <_ZL20tcp_client_connectedPvP7tcp_pcba+0x48>)
 8100ea2:	2201      	movs	r2, #1
 8100ea4:	701a      	strb	r2, [r3, #0]

    /* Ustaw funkcje odbioru i wysłania */
    tcp_recv(tpcb, tcp_client_recv);
 8100ea6:	4907      	ldr	r1, [pc, #28]	@ (8100ec4 <_ZL20tcp_client_connectedPvP7tcp_pcba+0x4c>)
 8100ea8:	68b8      	ldr	r0, [r7, #8]
 8100eaa:	f015 fbbf 	bl	811662c <tcp_recv>
    tcp_sent(tpcb, tcp_client_sent);
 8100eae:	4906      	ldr	r1, [pc, #24]	@ (8100ec8 <_ZL20tcp_client_connectedPvP7tcp_pcba+0x50>)
 8100eb0:	68b8      	ldr	r0, [r7, #8]
 8100eb2:	f015 fbdd 	bl	8116670 <tcp_sent>

    return ERR_OK;
 8100eb6:	2300      	movs	r3, #0
}
 8100eb8:	4618      	mov	r0, r3
 8100eba:	3710      	adds	r7, #16
 8100ebc:	46bd      	mov	sp, r7
 8100ebe:	bd80      	pop	{r7, pc}
 8100ec0:	100001d8 	.word	0x100001d8
 8100ec4:	08100df1 	.word	0x08100df1
 8100ec8:	08100e5d 	.word	0x08100e5d

08100ecc <_Z25StartTask_EthernetConnMgrPv>:

void StartTask_EthernetConnMgr(void *argument) {
 8100ecc:	b590      	push	{r4, r7, lr}
 8100ece:	b087      	sub	sp, #28
 8100ed0:	af00      	add	r7, sp, #0
 8100ed2:	6078      	str	r0, [r7, #4]
    MX_LWIP_Init();
 8100ed4:	f002 ff44 	bl	8103d60 <MX_LWIP_Init>

    ip_addr_t server_ip;
    err_t err;

    IP4_ADDR(&server_ip, 192, 168, 1, 10);  // Adres serwera
 8100ed8:	4b28      	ldr	r3, [pc, #160]	@ (8100f7c <_Z25StartTask_EthernetConnMgrPv+0xb0>)
 8100eda:	60fb      	str	r3, [r7, #12]

    /* Infinite loop */
    for (;;) {
        if (!connection_active) {
 8100edc:	4b28      	ldr	r3, [pc, #160]	@ (8100f80 <_Z25StartTask_EthernetConnMgrPv+0xb4>)
 8100ede:	781b      	ldrb	r3, [r3, #0]
 8100ee0:	2b00      	cmp	r3, #0
 8100ee2:	d12d      	bne.n	8100f40 <_Z25StartTask_EthernetConnMgrPv+0x74>
            /* Utwórz nowe PCB */
            tcp_client_pcb = tcp_new();
 8100ee4:	f015 fb9a 	bl	811661c <tcp_new>
 8100ee8:	4603      	mov	r3, r0
 8100eea:	4a26      	ldr	r2, [pc, #152]	@ (8100f84 <_Z25StartTask_EthernetConnMgrPv+0xb8>)
 8100eec:	6013      	str	r3, [r2, #0]
            if (tcp_client_pcb == NULL) {
 8100eee:	4b25      	ldr	r3, [pc, #148]	@ (8100f84 <_Z25StartTask_EthernetConnMgrPv+0xb8>)
 8100ef0:	681b      	ldr	r3, [r3, #0]
 8100ef2:	2b00      	cmp	r3, #0
 8100ef4:	d104      	bne.n	8100f00 <_Z25StartTask_EthernetConnMgrPv+0x34>
                // Nie udało się utworzyć PCB TCP
                osDelay(5000);
 8100ef6:	f241 3088 	movw	r0, #5000	@ 0x1388
 8100efa:	f00b fa48 	bl	810c38e <osDelay>
                continue;
 8100efe:	e03b      	b.n	8100f78 <_Z25StartTask_EthernetConnMgrPv+0xac>
            }
            /* Ustaw timeout dla PCB */
            tcp_poll(tcp_client_pcb, NULL, 4);
 8100f00:	4b20      	ldr	r3, [pc, #128]	@ (8100f84 <_Z25StartTask_EthernetConnMgrPv+0xb8>)
 8100f02:	681b      	ldr	r3, [r3, #0]
 8100f04:	2204      	movs	r2, #4
 8100f06:	2100      	movs	r1, #0
 8100f08:	4618      	mov	r0, r3
 8100f0a:	f015 fbd3 	bl	81166b4 <tcp_poll>

            /* Połącz z serwerem */
            err = tcp_connect(tcp_client_pcb, &server_ip, SERVER_PORT, tcp_client_connected);
 8100f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8100f84 <_Z25StartTask_EthernetConnMgrPv+0xb8>)
 8100f10:	6818      	ldr	r0, [r3, #0]
 8100f12:	f107 010c 	add.w	r1, r7, #12
 8100f16:	4b1c      	ldr	r3, [pc, #112]	@ (8100f88 <_Z25StartTask_EthernetConnMgrPv+0xbc>)
 8100f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8100f1c:	f014 fc40 	bl	81157a0 <tcp_connect>
 8100f20:	4603      	mov	r3, r0
 8100f22:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8100f24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8100f28:	2b00      	cmp	r3, #0
 8100f2a:	d022      	beq.n	8100f72 <_Z25StartTask_EthernetConnMgrPv+0xa6>
                // Błąd podczas łączenia
                tcp_close(tcp_client_pcb);
 8100f2c:	4b15      	ldr	r3, [pc, #84]	@ (8100f84 <_Z25StartTask_EthernetConnMgrPv+0xb8>)
 8100f2e:	681b      	ldr	r3, [r3, #0]
 8100f30:	4618      	mov	r0, r3
 8100f32:	f014 fa4d 	bl	81153d0 <tcp_close>
                osDelay(5000);
 8100f36:	f241 3088 	movw	r0, #5000	@ 0x1388
 8100f3a:	f00b fa28 	bl	810c38e <osDelay>
                continue;
 8100f3e:	e01b      	b.n	8100f78 <_Z25StartTask_EthernetConnMgrPv+0xac>
            }

            // Próba połączenia z serwerem
        } else {
            /* Wyślij wiadomość co 100 ms */
            const char *message = "Zapytanie od STM32\n";
 8100f40:	4b12      	ldr	r3, [pc, #72]	@ (8100f8c <_Z25StartTask_EthernetConnMgrPv+0xc0>)
 8100f42:	617b      	str	r3, [r7, #20]
            err = tcp_write(tcp_client_pcb, message, strlen(message), TCP_WRITE_FLAG_COPY);
 8100f44:	4b0f      	ldr	r3, [pc, #60]	@ (8100f84 <_Z25StartTask_EthernetConnMgrPv+0xb8>)
 8100f46:	681c      	ldr	r4, [r3, #0]
 8100f48:	6978      	ldr	r0, [r7, #20]
 8100f4a:	f7ff f9c9 	bl	81002e0 <strlen>
 8100f4e:	4603      	mov	r3, r0
 8100f50:	b29a      	uxth	r2, r3
 8100f52:	2301      	movs	r3, #1
 8100f54:	6979      	ldr	r1, [r7, #20]
 8100f56:	4620      	mov	r0, r4
 8100f58:	f018 fa5a 	bl	8119410 <tcp_write>
 8100f5c:	4603      	mov	r3, r0
 8100f5e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_OK) {
 8100f60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8100f64:	2b00      	cmp	r3, #0
 8100f66:	d104      	bne.n	8100f72 <_Z25StartTask_EthernetConnMgrPv+0xa6>
                tcp_output(tcp_client_pcb);
 8100f68:	4b06      	ldr	r3, [pc, #24]	@ (8100f84 <_Z25StartTask_EthernetConnMgrPv+0xb8>)
 8100f6a:	681b      	ldr	r3, [r3, #0]
 8100f6c:	4618      	mov	r0, r3
 8100f6e:	f019 f839 	bl	8119fe4 <tcp_output>
            } else {
                // Błąd wysyłania danych
            }
        }

        osDelay(100);  // Czekaj 100 ms
 8100f72:	2064      	movs	r0, #100	@ 0x64
 8100f74:	f00b fa0b 	bl	810c38e <osDelay>
    }
 8100f78:	e7b0      	b.n	8100edc <_Z25StartTask_EthernetConnMgrPv+0x10>
 8100f7a:	bf00      	nop
 8100f7c:	0a01a8c0 	.word	0x0a01a8c0
 8100f80:	100001d8 	.word	0x100001d8
 8100f84:	10000170 	.word	0x10000170
 8100f88:	08100e79 	.word	0x08100e79
 8100f8c:	0811cc0c 	.word	0x0811cc0c

08100f90 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8100f90:	b580      	push	{r7, lr}
 8100f92:	b082      	sub	sp, #8
 8100f94:	af00      	add	r7, sp, #0
 8100f96:	6078      	str	r0, [r7, #4]
 8100f98:	687b      	ldr	r3, [r7, #4]
 8100f9a:	4618      	mov	r0, r3
 8100f9c:	f7ff ff14 	bl	8100dc8 <_ZNSt14_Function_baseD1Ev>
 8100fa0:	687b      	ldr	r3, [r7, #4]
 8100fa2:	4618      	mov	r0, r3
 8100fa4:	3708      	adds	r7, #8
 8100fa6:	46bd      	mov	sp, r7
 8100fa8:	bd80      	pop	{r7, pc}

08100faa <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8100faa:	b480      	push	{r7}
 8100fac:	b083      	sub	sp, #12
 8100fae:	af00      	add	r7, sp, #0
 8100fb0:	6078      	str	r0, [r7, #4]
 8100fb2:	687b      	ldr	r3, [r7, #4]
 8100fb4:	461a      	mov	r2, r3
 8100fb6:	2300      	movs	r3, #0
 8100fb8:	6013      	str	r3, [r2, #0]
 8100fba:	6053      	str	r3, [r2, #4]
 8100fbc:	687b      	ldr	r3, [r7, #4]
 8100fbe:	2200      	movs	r2, #0
 8100fc0:	609a      	str	r2, [r3, #8]
 8100fc2:	687b      	ldr	r3, [r7, #4]
 8100fc4:	4618      	mov	r0, r3
 8100fc6:	370c      	adds	r7, #12
 8100fc8:	46bd      	mov	sp, r7
 8100fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fce:	4770      	bx	lr

08100fd0 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100fd0:	b480      	push	{r7}
 8100fd2:	b083      	sub	sp, #12
 8100fd4:	af00      	add	r7, sp, #0
 8100fd6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100fd8:	687b      	ldr	r3, [r7, #4]
 8100fda:	4618      	mov	r0, r3
 8100fdc:	370c      	adds	r7, #12
 8100fde:	46bd      	mov	sp, r7
 8100fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe4:	4770      	bx	lr

08100fe6 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100fe6:	b480      	push	{r7}
 8100fe8:	b083      	sub	sp, #12
 8100fea:	af00      	add	r7, sp, #0
 8100fec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	4618      	mov	r0, r3
 8100ff2:	370c      	adds	r7, #12
 8100ff4:	46bd      	mov	sp, r7
 8100ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ffa:	4770      	bx	lr

08100ffc <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100ffc:	b480      	push	{r7}
 8100ffe:	b083      	sub	sp, #12
 8101000:	af00      	add	r7, sp, #0
 8101002:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	4618      	mov	r0, r3
 8101008:	370c      	adds	r7, #12
 810100a:	46bd      	mov	sp, r7
 810100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101010:	4770      	bx	lr

08101012 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8101012:	b580      	push	{r7, lr}
 8101014:	b082      	sub	sp, #8
 8101016:	af00      	add	r7, sp, #0
 8101018:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810101a:	6878      	ldr	r0, [r7, #4]
 810101c:	f7ff febe 	bl	8100d9c <_ZNSt9_Any_data9_M_accessEv>
 8101020:	4603      	mov	r3, r0
 8101022:	4618      	mov	r0, r3
 8101024:	3708      	adds	r7, #8
 8101026:	46bd      	mov	sp, r7
 8101028:	bd80      	pop	{r7, pc}

0810102a <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 810102a:	b480      	push	{r7}
 810102c:	b083      	sub	sp, #12
 810102e:	af00      	add	r7, sp, #0
 8101030:	6078      	str	r0, [r7, #4]
 8101032:	687b      	ldr	r3, [r7, #4]
 8101034:	689b      	ldr	r3, [r3, #8]
 8101036:	2b00      	cmp	r3, #0
 8101038:	bf0c      	ite	eq
 810103a:	2301      	moveq	r3, #1
 810103c:	2300      	movne	r3, #0
 810103e:	b2db      	uxtb	r3, r3
 8101040:	4618      	mov	r0, r3
 8101042:	370c      	adds	r7, #12
 8101044:	46bd      	mov	sp, r7
 8101046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810104a:	4770      	bx	lr

0810104c <_ZN8EventBusC1EP15QueueDefinition12EEventClient>:
#include "EventBus.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBus::EventBus(QueueHandle_t queueSelf, EEventClient senderSelf)
 810104c:	b480      	push	{r7}
 810104e:	b085      	sub	sp, #20
 8101050:	af00      	add	r7, sp, #0
 8101052:	60f8      	str	r0, [r7, #12]
 8101054:	60b9      	str	r1, [r7, #8]
 8101056:	4613      	mov	r3, r2
 8101058:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 810105a:	68fb      	ldr	r3, [r7, #12]
 810105c:	68ba      	ldr	r2, [r7, #8]
 810105e:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8101060:	68fb      	ldr	r3, [r7, #12]
 8101062:	79fa      	ldrb	r2, [r7, #7]
 8101064:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 8101066:	4b05      	ldr	r3, [pc, #20]	@ (810107c <_ZN8EventBusC1EP15QueueDefinition12EEventClient+0x30>)
 8101068:	681a      	ldr	r2, [r3, #0]
 810106a:	68fb      	ldr	r3, [r7, #12]
 810106c:	609a      	str	r2, [r3, #8]
 810106e:	68fb      	ldr	r3, [r7, #12]
 8101070:	4618      	mov	r0, r3
 8101072:	3714      	adds	r7, #20
 8101074:	46bd      	mov	sp, r7
 8101076:	f85d 7b04 	ldr.w	r7, [sp], #4
 810107a:	4770      	bx	lr
 810107c:	10000110 	.word	0x10000110

08101080 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>:

bool EventBus::send(EEventType event, UMessageData message, EEventClient eventReceiver)
{
 8101080:	b082      	sub	sp, #8
 8101082:	b590      	push	{r4, r7, lr}
 8101084:	b08b      	sub	sp, #44	@ 0x2c
 8101086:	af00      	add	r7, sp, #0
 8101088:	6078      	str	r0, [r7, #4]
 810108a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 810108e:	e880 000c 	stmia.w	r0, {r2, r3}
 8101092:	460b      	mov	r3, r1
 8101094:	807b      	strh	r3, [r7, #2]
	if(queue_event_manager)
 8101096:	687b      	ldr	r3, [r7, #4]
 8101098:	689b      	ldr	r3, [r3, #8]
 810109a:	2b00      	cmp	r3, #0
 810109c:	d020      	beq.n	81010e0 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x60>
	{
		SMessage msg = {event, message, sender_self, eventReceiver};
 810109e:	887b      	ldrh	r3, [r7, #2]
 81010a0:	81bb      	strh	r3, [r7, #12]
 81010a2:	f107 0410 	add.w	r4, r7, #16
 81010a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 81010aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81010ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81010b0:	687b      	ldr	r3, [r7, #4]
 81010b2:	791b      	ldrb	r3, [r3, #4]
 81010b4:	f887 3020 	strb.w	r3, [r7, #32]
 81010b8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 81010bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		BaseType_t ret = xQueueSend(queue_event_manager, static_cast<void*>(&msg), static_cast<TickType_t>(10));
 81010c0:	687b      	ldr	r3, [r7, #4]
 81010c2:	6898      	ldr	r0, [r3, #8]
 81010c4:	f107 010c 	add.w	r1, r7, #12
 81010c8:	2300      	movs	r3, #0
 81010ca:	220a      	movs	r2, #10
 81010cc:	f00c fc72 	bl	810d9b4 <xQueueGenericSend>
 81010d0:	6278      	str	r0, [r7, #36]	@ 0x24
		if( ret != pdPASS)
 81010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81010d4:	2b01      	cmp	r3, #1
 81010d6:	d001      	beq.n	81010dc <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x5c>
		{
			return false;
 81010d8:	2300      	movs	r3, #0
 81010da:	e002      	b.n	81010e2 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x62>
		}
		return true;
 81010dc:	2301      	movs	r3, #1
 81010de:	e000      	b.n	81010e2 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x62>
	}
	return false;
 81010e0:	2300      	movs	r3, #0
}
 81010e2:	4618      	mov	r0, r3
 81010e4:	372c      	adds	r7, #44	@ 0x2c
 81010e6:	46bd      	mov	sp, r7
 81010e8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 81010ec:	b002      	add	sp, #8
 81010ee:	4770      	bx	lr

081010f0 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>:

void EventBus::receive(OnEventFunction on_event_function)
{
 81010f0:	b590      	push	{r4, r7, lr}
 81010f2:	b08f      	sub	sp, #60	@ 0x3c
 81010f4:	af04      	add	r7, sp, #16
 81010f6:	6078      	str	r0, [r7, #4]
 81010f8:	6039      	str	r1, [r7, #0]
	if(queue_self)
 81010fa:	687b      	ldr	r3, [r7, #4]
 81010fc:	681b      	ldr	r3, [r3, #0]
 81010fe:	2b00      	cmp	r3, #0
 8101100:	d027      	beq.n	8101152 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x62>
	{
		SMessage msg;
		BaseType_t ret = pdTRUE;
 8101102:	2301      	movs	r3, #1
 8101104:	627b      	str	r3, [r7, #36]	@ 0x24

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8101106:	e014      	b.n	8101132 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x42>
		{
			on_event_function(msg.event_type, msg.message_data, msg.event_sender, msg.event_receiver);
 8101108:	89bc      	ldrh	r4, [r7, #12]
 810110a:	f897 3020 	ldrb.w	r3, [r7, #32]
 810110e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8101112:	9203      	str	r2, [sp, #12]
 8101114:	9302      	str	r3, [sp, #8]
 8101116:	466a      	mov	r2, sp
 8101118:	f107 0318 	add.w	r3, r7, #24
 810111c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8101120:	e882 0003 	stmia.w	r2, {r0, r1}
 8101124:	f107 0310 	add.w	r3, r7, #16
 8101128:	cb0c      	ldmia	r3, {r2, r3}
 810112a:	4621      	mov	r1, r4
 810112c:	6838      	ldr	r0, [r7, #0]
 810112e:	f000 f814 	bl	810115a <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8101132:	687b      	ldr	r3, [r7, #4]
 8101134:	681b      	ldr	r3, [r3, #0]
 8101136:	f107 010c 	add.w	r1, r7, #12
 810113a:	2200      	movs	r2, #0
 810113c:	4618      	mov	r0, r3
 810113e:	f00c fe69 	bl	810de14 <xQueueReceive>
 8101142:	4603      	mov	r3, r0
 8101144:	2b01      	cmp	r3, #1
 8101146:	bf0c      	ite	eq
 8101148:	2301      	moveq	r3, #1
 810114a:	2300      	movne	r3, #0
 810114c:	b2db      	uxtb	r3, r3
 810114e:	2b00      	cmp	r3, #0
 8101150:	d1da      	bne.n	8101108 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x18>
		}
	}
}
 8101152:	bf00      	nop
 8101154:	372c      	adds	r7, #44	@ 0x2c
 8101156:	46bd      	mov	sp, r7
 8101158:	bd90      	pop	{r4, r7, pc}

0810115a <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 810115a:	b082      	sub	sp, #8
 810115c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8101160:	b085      	sub	sp, #20
 8101162:	af02      	add	r7, sp, #8
 8101164:	6078      	str	r0, [r7, #4]
 8101166:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 810116a:	e880 000c 	stmia.w	r0, {r2, r3}
 810116e:	460b      	mov	r3, r1
 8101170:	807b      	strh	r3, [r7, #2]
      {
	if (_M_empty())
 8101172:	687b      	ldr	r3, [r7, #4]
 8101174:	4618      	mov	r0, r3
 8101176:	f7ff ff58 	bl	810102a <_ZNKSt14_Function_base8_M_emptyEv>
 810117a:	4603      	mov	r3, r0
 810117c:	2b00      	cmp	r3, #0
 810117e:	d001      	beq.n	8101184 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_+0x2a>
	  __throw_bad_function_call();
 8101180:	f01a fc55 	bl	811ba2e <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8101184:	687b      	ldr	r3, [r7, #4]
 8101186:	68dc      	ldr	r4, [r3, #12]
 8101188:	687d      	ldr	r5, [r7, #4]
 810118a:	1cbb      	adds	r3, r7, #2
 810118c:	4618      	mov	r0, r3
 810118e:	f7ff ff1f 	bl	8100fd0 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8101192:	4606      	mov	r6, r0
 8101194:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8101198:	f7ff ff25 	bl	8100fe6 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 810119c:	4680      	mov	r8, r0
 810119e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 81011a2:	4618      	mov	r0, r3
 81011a4:	f7ff ff2a 	bl	8100ffc <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81011a8:	4681      	mov	r9, r0
 81011aa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 81011ae:	4618      	mov	r0, r3
 81011b0:	f7ff ff24 	bl	8100ffc <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81011b4:	4603      	mov	r3, r0
 81011b6:	9300      	str	r3, [sp, #0]
 81011b8:	464b      	mov	r3, r9
 81011ba:	4642      	mov	r2, r8
 81011bc:	4631      	mov	r1, r6
 81011be:	4628      	mov	r0, r5
 81011c0:	47a0      	blx	r4
 81011c2:	bf00      	nop
      }
 81011c4:	370c      	adds	r7, #12
 81011c6:	46bd      	mov	sp, r7
 81011c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81011cc:	b002      	add	sp, #8
 81011ce:	4770      	bx	lr

081011d0 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 81011d0:	b580      	push	{r7, lr}
 81011d2:	b082      	sub	sp, #8
 81011d4:	af00      	add	r7, sp, #0
 81011d6:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 81011d8:	687b      	ldr	r3, [r7, #4]
 81011da:	2200      	movs	r2, #0
 81011dc:	701a      	strb	r2, [r3, #0]
      _M_reset();
 81011de:	6878      	ldr	r0, [r7, #4]
 81011e0:	f000 f805 	bl	81011ee <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 81011e4:	687b      	ldr	r3, [r7, #4]
 81011e6:	4618      	mov	r0, r3
 81011e8:	3708      	adds	r7, #8
 81011ea:	46bd      	mov	sp, r7
 81011ec:	bd80      	pop	{r7, pc}

081011ee <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 81011ee:	b480      	push	{r7}
 81011f0:	b083      	sub	sp, #12
 81011f2:	af00      	add	r7, sp, #0
 81011f4:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 81011f6:	687b      	ldr	r3, [r7, #4]
 81011f8:	2200      	movs	r2, #0
 81011fa:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 81011fc:	687a      	ldr	r2, [r7, #4]
 81011fe:	687b      	ldr	r3, [r7, #4]
 8101200:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8101202:	687a      	ldr	r2, [r7, #4]
 8101204:	687b      	ldr	r3, [r7, #4]
 8101206:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8101208:	687b      	ldr	r3, [r7, #4]
 810120a:	2200      	movs	r2, #0
 810120c:	611a      	str	r2, [r3, #16]
    }
 810120e:	bf00      	nop
 8101210:	370c      	adds	r7, #12
 8101212:	46bd      	mov	sp, r7
 8101214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101218:	4770      	bx	lr

0810121a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 810121a:	b580      	push	{r7, lr}
 810121c:	b082      	sub	sp, #8
 810121e:	af00      	add	r7, sp, #0
 8101220:	6078      	str	r0, [r7, #4]
 8101222:	687b      	ldr	r3, [r7, #4]
 8101224:	4618      	mov	r0, r3
 8101226:	f000 f92b 	bl	8101480 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 810122a:	687b      	ldr	r3, [r7, #4]
 810122c:	4618      	mov	r0, r3
 810122e:	3708      	adds	r7, #8
 8101230:	46bd      	mov	sp, r7
 8101232:	bd80      	pop	{r7, pc}

08101234 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8101234:	b580      	push	{r7, lr}
 8101236:	b082      	sub	sp, #8
 8101238:	af00      	add	r7, sp, #0
 810123a:	6078      	str	r0, [r7, #4]
 810123c:	687b      	ldr	r3, [r7, #4]
 810123e:	4618      	mov	r0, r3
 8101240:	f7ff ffeb 	bl	810121a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8101244:	687b      	ldr	r3, [r7, #4]
 8101246:	4618      	mov	r0, r3
 8101248:	3708      	adds	r7, #8
 810124a:	46bd      	mov	sp, r7
 810124c:	bd80      	pop	{r7, pc}

0810124e <_ZN19EventManagerCM4TaskC1Ev>:
	{
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
	};

	EventManagerCM4Task() {};
 810124e:	b580      	push	{r7, lr}
 8101250:	b082      	sub	sp, #8
 8101252:	af00      	add	r7, sp, #0
 8101254:	6078      	str	r0, [r7, #4]
 8101256:	687b      	ldr	r3, [r7, #4]
 8101258:	4618      	mov	r0, r3
 810125a:	f7ff ffeb 	bl	8101234 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 810125e:	687b      	ldr	r3, [r7, #4]
 8101260:	4618      	mov	r0, r3
 8101262:	3708      	adds	r7, #8
 8101264:	46bd      	mov	sp, r7
 8101266:	bd80      	pop	{r7, pc}

08101268 <_Z20StartTask_EventMgrM4Pv>:

extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;

void StartTask_EventMgrM4(void *argument)
{
 8101268:	b580      	push	{r7, lr}
 810126a:	b088      	sub	sp, #32
 810126c:	af00      	add	r7, sp, #0
 810126e:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 8101270:	f107 0308 	add.w	r3, r7, #8
 8101274:	4618      	mov	r0, r3
 8101276:	f7ff ffea 	bl	810124e <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 810127a:	4b09      	ldr	r3, [pc, #36]	@ (81012a0 <_Z20StartTask_EventMgrM4Pv+0x38>)
 810127c:	681a      	ldr	r2, [r3, #0]
 810127e:	f107 0308 	add.w	r3, r7, #8
 8101282:	2105      	movs	r1, #5
 8101284:	4618      	mov	r0, r3
 8101286:	f000 f80d 	bl	81012a4 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 810128a:	f107 0308 	add.w	r3, r7, #8
 810128e:	4618      	mov	r0, r3
 8101290:	f000 f81b 	bl	81012ca <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 8101294:	2001      	movs	r0, #1
 8101296:	f00b f87a 	bl	810c38e <osDelay>
		eventManagerInstance.process();
 810129a:	bf00      	nop
 810129c:	e7f5      	b.n	810128a <_Z20StartTask_EventMgrM4Pv+0x22>
 810129e:	bf00      	nop
 81012a0:	10000114 	.word	0x10000114

081012a4 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 81012a4:	b580      	push	{r7, lr}
 81012a6:	b086      	sub	sp, #24
 81012a8:	af00      	add	r7, sp, #0
 81012aa:	60f8      	str	r0, [r7, #12]
 81012ac:	460b      	mov	r3, r1
 81012ae:	607a      	str	r2, [r7, #4]
 81012b0:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 81012b2:	68f9      	ldr	r1, [r7, #12]
 81012b4:	f107 0010 	add.w	r0, r7, #16
 81012b8:	1d3b      	adds	r3, r7, #4
 81012ba:	f107 020b 	add.w	r2, r7, #11
 81012be:	f000 f8f4 	bl	81014aa <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 81012c2:	bf00      	nop
 81012c4:	3718      	adds	r7, #24
 81012c6:	46bd      	mov	sp, r7
 81012c8:	bd80      	pop	{r7, pc}

081012ca <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 81012ca:	b580      	push	{r7, lr}
 81012cc:	b086      	sub	sp, #24
 81012ce:	af00      	add	r7, sp, #0
 81012d0:	6078      	str	r0, [r7, #4]
	send(receive());
 81012d2:	f107 030c 	add.w	r3, r7, #12
 81012d6:	6879      	ldr	r1, [r7, #4]
 81012d8:	4618      	mov	r0, r3
 81012da:	f000 f835 	bl	8101348 <_ZN19EventManagerCM4Task7receiveEv>
 81012de:	f107 030c 	add.w	r3, r7, #12
 81012e2:	4619      	mov	r1, r3
 81012e4:	6878      	ldr	r0, [r7, #4]
 81012e6:	f000 f855 	bl	8101394 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 81012ea:	f107 030c 	add.w	r3, r7, #12
 81012ee:	4618      	mov	r0, r3
 81012f0:	f000 f8f5 	bl	81014de <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 81012f4:	bf00      	nop
 81012f6:	3718      	adds	r7, #24
 81012f8:	46bd      	mov	sp, r7
 81012fa:	bd80      	pop	{r7, pc}

081012fc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 81012fc:	b580      	push	{r7, lr}
 81012fe:	b082      	sub	sp, #8
 8101300:	af00      	add	r7, sp, #0
 8101302:	6078      	str	r0, [r7, #4]
 8101304:	6878      	ldr	r0, [r7, #4]
 8101306:	f000 f915 	bl	8101534 <_ZNSaI8SMessageED1Ev>
 810130a:	687b      	ldr	r3, [r7, #4]
 810130c:	4618      	mov	r0, r3
 810130e:	3708      	adds	r7, #8
 8101310:	46bd      	mov	sp, r7
 8101312:	bd80      	pop	{r7, pc}

08101314 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8101314:	b580      	push	{r7, lr}
 8101316:	b082      	sub	sp, #8
 8101318:	af00      	add	r7, sp, #0
 810131a:	6078      	str	r0, [r7, #4]
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	4618      	mov	r0, r3
 8101320:	f000 f8f8 	bl	8101514 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>
 8101324:	687b      	ldr	r3, [r7, #4]
 8101326:	4618      	mov	r0, r3
 8101328:	3708      	adds	r7, #8
 810132a:	46bd      	mov	sp, r7
 810132c:	bd80      	pop	{r7, pc}

0810132e <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 810132e:	b580      	push	{r7, lr}
 8101330:	b082      	sub	sp, #8
 8101332:	af00      	add	r7, sp, #0
 8101334:	6078      	str	r0, [r7, #4]
 8101336:	687b      	ldr	r3, [r7, #4]
 8101338:	4618      	mov	r0, r3
 810133a:	f7ff ffeb 	bl	8101314 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>
 810133e:	687b      	ldr	r3, [r7, #4]
 8101340:	4618      	mov	r0, r3
 8101342:	3708      	adds	r7, #8
 8101344:	46bd      	mov	sp, r7
 8101346:	bd80      	pop	{r7, pc}

08101348 <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 8101348:	b580      	push	{r7, lr}
 810134a:	b08a      	sub	sp, #40	@ 0x28
 810134c:	af00      	add	r7, sp, #0
 810134e:	6078      	str	r0, [r7, #4]
 8101350:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 8101352:	6878      	ldr	r0, [r7, #4]
 8101354:	f7ff ffeb 	bl	810132e <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>
	SMessage msg;

	BaseType_t ret = pdTRUE;
 8101358:	2301      	movs	r3, #1
 810135a:	627b      	str	r3, [r7, #36]	@ 0x24
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 810135c:	4b0c      	ldr	r3, [pc, #48]	@ (8101390 <_ZN19EventManagerCM4Task7receiveEv+0x48>)
 810135e:	681b      	ldr	r3, [r3, #0]
 8101360:	f107 010c 	add.w	r1, r7, #12
 8101364:	2200      	movs	r2, #0
 8101366:	4618      	mov	r0, r3
 8101368:	f00c fd54 	bl	810de14 <xQueueReceive>
 810136c:	6278      	str	r0, [r7, #36]	@ 0x24
		if(ret == pdTRUE)
 810136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101370:	2b01      	cmp	r3, #1
 8101372:	d105      	bne.n	8101380 <_ZN19EventManagerCM4Task7receiveEv+0x38>
		{
			receivedMessages.push_back(msg);
 8101374:	f107 030c 	add.w	r3, r7, #12
 8101378:	4619      	mov	r1, r3
 810137a:	6878      	ldr	r0, [r7, #4]
 810137c:	f000 f904 	bl	8101588 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	} while(ret == pdTRUE);
 8101380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101382:	2b01      	cmp	r3, #1
 8101384:	d0ea      	beq.n	810135c <_ZN19EventManagerCM4Task7receiveEv+0x14>

	return receivedMessages;
 8101386:	bf00      	nop
}
 8101388:	6878      	ldr	r0, [r7, #4]
 810138a:	3728      	adds	r7, #40	@ 0x28
 810138c:	46bd      	mov	sp, r7
 810138e:	bd80      	pop	{r7, pc}
 8101390:	10000110 	.word	0x10000110

08101394 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 8101394:	b5b0      	push	{r4, r5, r7, lr}
 8101396:	b090      	sub	sp, #64	@ 0x40
 8101398:	af00      	add	r7, sp, #0
 810139a:	6078      	str	r0, [r7, #4]
 810139c:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 810139e:	683b      	ldr	r3, [r7, #0]
 81013a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 81013a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 81013a4:	f000 f916 	bl	81015d4 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 81013a8:	4603      	mov	r3, r0
 81013aa:	617b      	str	r3, [r7, #20]
 81013ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 81013ae:	f000 f921 	bl	81015f4 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 81013b2:	4603      	mov	r3, r0
 81013b4:	613b      	str	r3, [r7, #16]
 81013b6:	e053      	b.n	8101460 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xcc>
 81013b8:	f107 0314 	add.w	r3, r7, #20
 81013bc:	4618      	mov	r0, r3
 81013be:	f000 f953 	bl	8101668 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 81013c2:	4603      	mov	r3, r0
 81013c4:	f107 0418 	add.w	r4, r7, #24
 81013c8:	461d      	mov	r5, r3
 81013ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81013cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81013ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 81013d2:	e884 0003 	stmia.w	r4, {r0, r1}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 81013d6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 81013da:	73fb      	strb	r3, [r7, #15]
		auto it = queue_handles.find(eventReceiver);
 81013dc:	687b      	ldr	r3, [r7, #4]
 81013de:	f107 020f 	add.w	r2, r7, #15
 81013e2:	4611      	mov	r1, r2
 81013e4:	4618      	mov	r0, r3
 81013e6:	f000 f94b 	bl	8101680 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 81013ea:	4603      	mov	r3, r0
 81013ec:	60bb      	str	r3, [r7, #8]

		QueueHandle_t targetQueue;

		if(it != queue_handles.end())
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	4618      	mov	r0, r3
 81013f2:	f000 f954 	bl	810169e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81013f6:	4603      	mov	r3, r0
 81013f8:	633b      	str	r3, [r7, #48]	@ 0x30
 81013fa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 81013fe:	f107 0308 	add.w	r3, r7, #8
 8101402:	4611      	mov	r1, r2
 8101404:	4618      	mov	r0, r3
 8101406:	f000 f957 	bl	81016b8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 810140a:	4603      	mov	r3, r0
 810140c:	2b00      	cmp	r3, #0
 810140e:	d00a      	beq.n	8101426 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x92>
		{
			targetQueue = queue_handles[eventReceiver];
 8101410:	687b      	ldr	r3, [r7, #4]
 8101412:	f107 020f 	add.w	r2, r7, #15
 8101416:	4611      	mov	r1, r2
 8101418:	4618      	mov	r0, r3
 810141a:	f000 f961 	bl	81016e0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 810141e:	4603      	mov	r3, r0
 8101420:	681b      	ldr	r3, [r3, #0]
 8101422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8101424:	e00c      	b.n	8101440 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xac>
		}
		else
		{
			// if receiver not found, then it means i has to be on CM7 side, so send to IPC connection damon.
			targetQueue = queue_handles[EVENT_QUEUE_DAEMON_NATIVE];
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	2205      	movs	r2, #5
 810142a:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 810142e:	f107 0237 	add.w	r2, r7, #55	@ 0x37
 8101432:	4611      	mov	r1, r2
 8101434:	4618      	mov	r0, r3
 8101436:	f000 f9af 	bl	8101798 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>
 810143a:	4603      	mov	r3, r0
 810143c:	681b      	ldr	r3, [r3, #0]
 810143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}

		if(targetQueue)
 8101440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101442:	2b00      	cmp	r3, #0
 8101444:	d007      	beq.n	8101456 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xc2>
		{
			xQueueSend(targetQueue, static_cast<void*>(&msg), portMAX_DELAY);
 8101446:	f107 0118 	add.w	r1, r7, #24
 810144a:	2300      	movs	r3, #0
 810144c:	f04f 32ff 	mov.w	r2, #4294967295
 8101450:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8101452:	f00c faaf 	bl	810d9b4 <xQueueGenericSend>
	for(auto msg : messages)
 8101456:	f107 0314 	add.w	r3, r7, #20
 810145a:	4618      	mov	r0, r3
 810145c:	f000 f8f3 	bl	8101646 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 8101460:	f107 0210 	add.w	r2, r7, #16
 8101464:	f107 0314 	add.w	r3, r7, #20
 8101468:	4611      	mov	r1, r2
 810146a:	4618      	mov	r0, r3
 810146c:	f000 f8d3 	bl	8101616 <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8101470:	4603      	mov	r3, r0
 8101472:	2b00      	cmp	r3, #0
 8101474:	d1a0      	bne.n	81013b8 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
		}
	}
}
 8101476:	bf00      	nop
 8101478:	bf00      	nop
 810147a:	3740      	adds	r7, #64	@ 0x40
 810147c:	46bd      	mov	sp, r7
 810147e:	bdb0      	pop	{r4, r5, r7, pc}

08101480 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8101480:	b580      	push	{r7, lr}
 8101482:	b082      	sub	sp, #8
 8101484:	af00      	add	r7, sp, #0
 8101486:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8101488:	6878      	ldr	r0, [r7, #4]
 810148a:	f000 f9e5 	bl	8101858 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 810148e:	687b      	ldr	r3, [r7, #4]
 8101490:	4618      	mov	r0, r3
 8101492:	f000 f9ed 	bl	8101870 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 8101496:	687b      	ldr	r3, [r7, #4]
 8101498:	3304      	adds	r3, #4
 810149a:	4618      	mov	r0, r3
 810149c:	f7ff fe98 	bl	81011d0 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 81014a0:	687b      	ldr	r3, [r7, #4]
 81014a2:	4618      	mov	r0, r3
 81014a4:	3708      	adds	r7, #8
 81014a6:	46bd      	mov	sp, r7
 81014a8:	bd80      	pop	{r7, pc}

081014aa <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 81014aa:	b5b0      	push	{r4, r5, r7, lr}
 81014ac:	b084      	sub	sp, #16
 81014ae:	af00      	add	r7, sp, #0
 81014b0:	60f8      	str	r0, [r7, #12]
 81014b2:	60b9      	str	r1, [r7, #8]
 81014b4:	607a      	str	r2, [r7, #4]
 81014b6:	603b      	str	r3, [r7, #0]
		      }
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
 81014b8:	68bc      	ldr	r4, [r7, #8]
 81014ba:	6878      	ldr	r0, [r7, #4]
 81014bc:	f000 f9ef 	bl	810189e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81014c0:	4605      	mov	r5, r0
 81014c2:	6838      	ldr	r0, [r7, #0]
 81014c4:	f000 f9f6 	bl	81018b4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81014c8:	4603      	mov	r3, r0
 81014ca:	68f8      	ldr	r0, [r7, #12]
 81014cc:	462a      	mov	r2, r5
 81014ce:	4621      	mov	r1, r4
 81014d0:	f000 f9fb 	bl	81018ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 81014d4:	bf00      	nop
	}
 81014d6:	68f8      	ldr	r0, [r7, #12]
 81014d8:	3710      	adds	r7, #16
 81014da:	46bd      	mov	sp, r7
 81014dc:	bdb0      	pop	{r4, r5, r7, pc}

081014de <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 81014de:	b5b0      	push	{r4, r5, r7, lr}
 81014e0:	b082      	sub	sp, #8
 81014e2:	af00      	add	r7, sp, #0
 81014e4:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 81014e6:	687b      	ldr	r3, [r7, #4]
 81014e8:	681c      	ldr	r4, [r3, #0]
 81014ea:	687b      	ldr	r3, [r7, #4]
 81014ec:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 81014ee:	687b      	ldr	r3, [r7, #4]
 81014f0:	4618      	mov	r0, r3
 81014f2:	f000 fa3f 	bl	8101974 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81014f6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 81014f8:	461a      	mov	r2, r3
 81014fa:	4629      	mov	r1, r5
 81014fc:	4620      	mov	r0, r4
 81014fe:	f000 fa44 	bl	810198a <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8101502:	687b      	ldr	r3, [r7, #4]
 8101504:	4618      	mov	r0, r3
 8101506:	f000 f821 	bl	810154c <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 810150a:	687b      	ldr	r3, [r7, #4]
 810150c:	4618      	mov	r0, r3
 810150e:	3708      	adds	r7, #8
 8101510:	46bd      	mov	sp, r7
 8101512:	bdb0      	pop	{r4, r5, r7, pc}

08101514 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8101514:	b580      	push	{r7, lr}
 8101516:	b082      	sub	sp, #8
 8101518:	af00      	add	r7, sp, #0
 810151a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 810151c:	6878      	ldr	r0, [r7, #4]
 810151e:	f000 fa42 	bl	81019a6 <_ZNSaI8SMessageEC1Ev>
 8101522:	687b      	ldr	r3, [r7, #4]
 8101524:	4618      	mov	r0, r3
 8101526:	f000 fa4a 	bl	81019be <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 810152a:	687b      	ldr	r3, [r7, #4]
 810152c:	4618      	mov	r0, r3
 810152e:	3708      	adds	r7, #8
 8101530:	46bd      	mov	sp, r7
 8101532:	bd80      	pop	{r7, pc}

08101534 <_ZNSaI8SMessageED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8101534:	b580      	push	{r7, lr}
 8101536:	b082      	sub	sp, #8
 8101538:	af00      	add	r7, sp, #0
 810153a:	6078      	str	r0, [r7, #4]
 810153c:	6878      	ldr	r0, [r7, #4]
 810153e:	f000 fa52 	bl	81019e6 <_ZNSt15__new_allocatorI8SMessageED1Ev>
 8101542:	687b      	ldr	r3, [r7, #4]
 8101544:	4618      	mov	r0, r3
 8101546:	3708      	adds	r7, #8
 8101548:	46bd      	mov	sp, r7
 810154a:	bd80      	pop	{r7, pc}

0810154c <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 810154c:	b580      	push	{r7, lr}
 810154e:	b082      	sub	sp, #8
 8101550:	af00      	add	r7, sp, #0
 8101552:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8101554:	687b      	ldr	r3, [r7, #4]
 8101556:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8101558:	687b      	ldr	r3, [r7, #4]
 810155a:	689a      	ldr	r2, [r3, #8]
 810155c:	687b      	ldr	r3, [r7, #4]
 810155e:	681b      	ldr	r3, [r3, #0]
 8101560:	1ad3      	subs	r3, r2, r3
 8101562:	10db      	asrs	r3, r3, #3
 8101564:	4a07      	ldr	r2, [pc, #28]	@ (8101584 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 8101566:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 810156a:	461a      	mov	r2, r3
 810156c:	6878      	ldr	r0, [r7, #4]
 810156e:	f000 fa45 	bl	81019fc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 8101572:	687b      	ldr	r3, [r7, #4]
 8101574:	4618      	mov	r0, r3
 8101576:	f7ff fec1 	bl	81012fc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	4618      	mov	r0, r3
 810157e:	3708      	adds	r7, #8
 8101580:	46bd      	mov	sp, r7
 8101582:	bd80      	pop	{r7, pc}
 8101584:	aaaaaaab 	.word	0xaaaaaaab

08101588 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8101588:	b580      	push	{r7, lr}
 810158a:	b082      	sub	sp, #8
 810158c:	af00      	add	r7, sp, #0
 810158e:	6078      	str	r0, [r7, #4]
 8101590:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8101592:	687b      	ldr	r3, [r7, #4]
 8101594:	685a      	ldr	r2, [r3, #4]
 8101596:	687b      	ldr	r3, [r7, #4]
 8101598:	689b      	ldr	r3, [r3, #8]
 810159a:	429a      	cmp	r2, r3
 810159c:	d00d      	beq.n	81015ba <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 810159e:	6878      	ldr	r0, [r7, #4]
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	685b      	ldr	r3, [r3, #4]
 81015a4:	683a      	ldr	r2, [r7, #0]
 81015a6:	4619      	mov	r1, r3
 81015a8:	f000 fa3b 	bl	8101a22 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	685b      	ldr	r3, [r3, #4]
 81015b0:	f103 0218 	add.w	r2, r3, #24
 81015b4:	687b      	ldr	r3, [r7, #4]
 81015b6:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 81015b8:	e008      	b.n	81015cc <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 81015ba:	6878      	ldr	r0, [r7, #4]
 81015bc:	f000 fa44 	bl	8101a48 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 81015c0:	4603      	mov	r3, r0
 81015c2:	683a      	ldr	r2, [r7, #0]
 81015c4:	4619      	mov	r1, r3
 81015c6:	6878      	ldr	r0, [r7, #4]
 81015c8:	f000 fa66 	bl	8101a98 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 81015cc:	bf00      	nop
 81015ce:	3708      	adds	r7, #8
 81015d0:	46bd      	mov	sp, r7
 81015d2:	bd80      	pop	{r7, pc}

081015d4 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 81015d4:	b580      	push	{r7, lr}
 81015d6:	b084      	sub	sp, #16
 81015d8:	af00      	add	r7, sp, #0
 81015da:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 81015dc:	687a      	ldr	r2, [r7, #4]
 81015de:	f107 030c 	add.w	r3, r7, #12
 81015e2:	4611      	mov	r1, r2
 81015e4:	4618      	mov	r0, r3
 81015e6:	f000 fb1f 	bl	8101c28 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 81015ea:	68fb      	ldr	r3, [r7, #12]
 81015ec:	4618      	mov	r0, r3
 81015ee:	3710      	adds	r7, #16
 81015f0:	46bd      	mov	sp, r7
 81015f2:	bd80      	pop	{r7, pc}

081015f4 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 81015f4:	b580      	push	{r7, lr}
 81015f6:	b084      	sub	sp, #16
 81015f8:	af00      	add	r7, sp, #0
 81015fa:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 81015fc:	687b      	ldr	r3, [r7, #4]
 81015fe:	1d1a      	adds	r2, r3, #4
 8101600:	f107 030c 	add.w	r3, r7, #12
 8101604:	4611      	mov	r1, r2
 8101606:	4618      	mov	r0, r3
 8101608:	f000 fb0e 	bl	8101c28 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 810160c:	68fb      	ldr	r3, [r7, #12]
 810160e:	4618      	mov	r0, r3
 8101610:	3710      	adds	r7, #16
 8101612:	46bd      	mov	sp, r7
 8101614:	bd80      	pop	{r7, pc}

08101616 <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8101616:	b590      	push	{r4, r7, lr}
 8101618:	b083      	sub	sp, #12
 810161a:	af00      	add	r7, sp, #0
 810161c:	6078      	str	r0, [r7, #4]
 810161e:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8101620:	6878      	ldr	r0, [r7, #4]
 8101622:	f000 fb11 	bl	8101c48 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101626:	4603      	mov	r3, r0
 8101628:	681c      	ldr	r4, [r3, #0]
 810162a:	6838      	ldr	r0, [r7, #0]
 810162c:	f000 fb0c 	bl	8101c48 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101630:	4603      	mov	r3, r0
 8101632:	681b      	ldr	r3, [r3, #0]
 8101634:	429c      	cmp	r4, r3
 8101636:	bf14      	ite	ne
 8101638:	2301      	movne	r3, #1
 810163a:	2300      	moveq	r3, #0
 810163c:	b2db      	uxtb	r3, r3
 810163e:	4618      	mov	r0, r3
 8101640:	370c      	adds	r7, #12
 8101642:	46bd      	mov	sp, r7
 8101644:	bd90      	pop	{r4, r7, pc}

08101646 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8101646:	b480      	push	{r7}
 8101648:	b083      	sub	sp, #12
 810164a:	af00      	add	r7, sp, #0
 810164c:	6078      	str	r0, [r7, #4]
	++_M_current;
 810164e:	687b      	ldr	r3, [r7, #4]
 8101650:	681b      	ldr	r3, [r3, #0]
 8101652:	f103 0218 	add.w	r2, r3, #24
 8101656:	687b      	ldr	r3, [r7, #4]
 8101658:	601a      	str	r2, [r3, #0]
	return *this;
 810165a:	687b      	ldr	r3, [r7, #4]
      }
 810165c:	4618      	mov	r0, r3
 810165e:	370c      	adds	r7, #12
 8101660:	46bd      	mov	sp, r7
 8101662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101666:	4770      	bx	lr

08101668 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101668:	b480      	push	{r7}
 810166a:	b083      	sub	sp, #12
 810166c:	af00      	add	r7, sp, #0
 810166e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8101670:	687b      	ldr	r3, [r7, #4]
 8101672:	681b      	ldr	r3, [r3, #0]
 8101674:	4618      	mov	r0, r3
 8101676:	370c      	adds	r7, #12
 8101678:	46bd      	mov	sp, r7
 810167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810167e:	4770      	bx	lr

08101680 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8101680:	b580      	push	{r7, lr}
 8101682:	b082      	sub	sp, #8
 8101684:	af00      	add	r7, sp, #0
 8101686:	6078      	str	r0, [r7, #4]
 8101688:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 810168a:	687b      	ldr	r3, [r7, #4]
 810168c:	6839      	ldr	r1, [r7, #0]
 810168e:	4618      	mov	r0, r3
 8101690:	f000 fae5 	bl	8101c5e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 8101694:	4603      	mov	r3, r0
 8101696:	4618      	mov	r0, r3
 8101698:	3708      	adds	r7, #8
 810169a:	46bd      	mov	sp, r7
 810169c:	bd80      	pop	{r7, pc}

0810169e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 810169e:	b580      	push	{r7, lr}
 81016a0:	b082      	sub	sp, #8
 81016a2:	af00      	add	r7, sp, #0
 81016a4:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	4618      	mov	r0, r3
 81016aa:	f000 fb14 	bl	8101cd6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81016ae:	4603      	mov	r3, r0
 81016b0:	4618      	mov	r0, r3
 81016b2:	3708      	adds	r7, #8
 81016b4:	46bd      	mov	sp, r7
 81016b6:	bd80      	pop	{r7, pc}

081016b8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 81016b8:	b480      	push	{r7}
 81016ba:	b083      	sub	sp, #12
 81016bc:	af00      	add	r7, sp, #0
 81016be:	6078      	str	r0, [r7, #4]
 81016c0:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	681a      	ldr	r2, [r3, #0]
 81016c6:	683b      	ldr	r3, [r7, #0]
 81016c8:	681b      	ldr	r3, [r3, #0]
 81016ca:	429a      	cmp	r2, r3
 81016cc:	bf14      	ite	ne
 81016ce:	2301      	movne	r3, #1
 81016d0:	2300      	moveq	r3, #0
 81016d2:	b2db      	uxtb	r3, r3
 81016d4:	4618      	mov	r0, r3
 81016d6:	370c      	adds	r7, #12
 81016d8:	46bd      	mov	sp, r7
 81016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016de:	4770      	bx	lr

081016e0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 81016e0:	b590      	push	{r4, r7, lr}
 81016e2:	b08b      	sub	sp, #44	@ 0x2c
 81016e4:	af02      	add	r7, sp, #8
 81016e6:	6078      	str	r0, [r7, #4]
 81016e8:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 81016ea:	6839      	ldr	r1, [r7, #0]
 81016ec:	6878      	ldr	r0, [r7, #4]
 81016ee:	f000 fb03 	bl	8101cf8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 81016f2:	4603      	mov	r3, r0
 81016f4:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 81016f6:	6878      	ldr	r0, [r7, #4]
 81016f8:	f7ff ffd1 	bl	810169e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81016fc:	4603      	mov	r3, r0
 81016fe:	60fb      	str	r3, [r7, #12]
 8101700:	f107 020c 	add.w	r2, r7, #12
 8101704:	f107 0308 	add.w	r3, r7, #8
 8101708:	4611      	mov	r1, r2
 810170a:	4618      	mov	r0, r3
 810170c:	f000 fb03 	bl	8101d16 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101710:	4603      	mov	r3, r0
 8101712:	2b00      	cmp	r3, #0
 8101714:	d112      	bne.n	810173c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 8101716:	6878      	ldr	r0, [r7, #4]
 8101718:	f000 fb11 	bl	8101d3e <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 810171c:	f107 0308 	add.w	r3, r7, #8
 8101720:	4618      	mov	r0, r3
 8101722:	f000 fb19 	bl	8101d58 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8101726:	4603      	mov	r3, r0
 8101728:	461a      	mov	r2, r3
 810172a:	f107 0310 	add.w	r3, r7, #16
 810172e:	6839      	ldr	r1, [r7, #0]
 8101730:	4618      	mov	r0, r3
 8101732:	f000 fb1f 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101736:	4603      	mov	r3, r0
 8101738:	2b00      	cmp	r3, #0
 810173a:	d001      	beq.n	8101740 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 810173c:	2301      	movs	r3, #1
 810173e:	e000      	b.n	8101742 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 8101740:	2300      	movs	r3, #0
 8101742:	2b00      	cmp	r3, #0
 8101744:	d01b      	beq.n	810177e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8101746:	687c      	ldr	r4, [r7, #4]
 8101748:	f107 0208 	add.w	r2, r7, #8
 810174c:	f107 0314 	add.w	r3, r7, #20
 8101750:	4611      	mov	r1, r2
 8101752:	4618      	mov	r0, r3
 8101754:	f000 fb32 	bl	8101dbc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8101758:	f107 0318 	add.w	r3, r7, #24
 810175c:	6839      	ldr	r1, [r7, #0]
 810175e:	4618      	mov	r0, r3
 8101760:	f000 fb1d 	bl	8101d9e <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8101764:	f107 0218 	add.w	r2, r7, #24
 8101768:	f107 031c 	add.w	r3, r7, #28
 810176c:	9300      	str	r3, [sp, #0]
 810176e:	4613      	mov	r3, r2
 8101770:	4a08      	ldr	r2, [pc, #32]	@ (8101794 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 8101772:	6979      	ldr	r1, [r7, #20]
 8101774:	4620      	mov	r0, r4
 8101776:	f000 fb31 	bl	8101ddc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 810177a:	4603      	mov	r3, r0
 810177c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 810177e:	f107 0308 	add.w	r3, r7, #8
 8101782:	4618      	mov	r0, r3
 8101784:	f000 fae8 	bl	8101d58 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8101788:	4603      	mov	r3, r0
 810178a:	3304      	adds	r3, #4
      }
 810178c:	4618      	mov	r0, r3
 810178e:	3724      	adds	r7, #36	@ 0x24
 8101790:	46bd      	mov	sp, r7
 8101792:	bd90      	pop	{r4, r7, pc}
 8101794:	0811fbf0 	.word	0x0811fbf0

08101798 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>:
      operator[](key_type&& __k)
 8101798:	b590      	push	{r4, r7, lr}
 810179a:	b08b      	sub	sp, #44	@ 0x2c
 810179c:	af02      	add	r7, sp, #8
 810179e:	6078      	str	r0, [r7, #4]
 81017a0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 81017a2:	6839      	ldr	r1, [r7, #0]
 81017a4:	6878      	ldr	r0, [r7, #4]
 81017a6:	f000 faa7 	bl	8101cf8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 81017aa:	4603      	mov	r3, r0
 81017ac:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 81017ae:	6878      	ldr	r0, [r7, #4]
 81017b0:	f7ff ff75 	bl	810169e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81017b4:	4603      	mov	r3, r0
 81017b6:	60fb      	str	r3, [r7, #12]
 81017b8:	f107 020c 	add.w	r2, r7, #12
 81017bc:	f107 0308 	add.w	r3, r7, #8
 81017c0:	4611      	mov	r1, r2
 81017c2:	4618      	mov	r0, r3
 81017c4:	f000 faa7 	bl	8101d16 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81017c8:	4603      	mov	r3, r0
 81017ca:	2b00      	cmp	r3, #0
 81017cc:	d112      	bne.n	81017f4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x5c>
 81017ce:	6878      	ldr	r0, [r7, #4]
 81017d0:	f000 fab5 	bl	8101d3e <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 81017d4:	f107 0308 	add.w	r3, r7, #8
 81017d8:	4618      	mov	r0, r3
 81017da:	f000 fabd 	bl	8101d58 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81017de:	4603      	mov	r3, r0
 81017e0:	461a      	mov	r2, r3
 81017e2:	f107 0310 	add.w	r3, r7, #16
 81017e6:	6839      	ldr	r1, [r7, #0]
 81017e8:	4618      	mov	r0, r3
 81017ea:	f000 fac3 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81017ee:	4603      	mov	r3, r0
 81017f0:	2b00      	cmp	r3, #0
 81017f2:	d001      	beq.n	81017f8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x60>
 81017f4:	2301      	movs	r3, #1
 81017f6:	e000      	b.n	81017fa <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x62>
 81017f8:	2300      	movs	r3, #0
 81017fa:	2b00      	cmp	r3, #0
 81017fc:	d01f      	beq.n	810183e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 81017fe:	687c      	ldr	r4, [r7, #4]
 8101800:	f107 0208 	add.w	r2, r7, #8
 8101804:	f107 0314 	add.w	r3, r7, #20
 8101808:	4611      	mov	r1, r2
 810180a:	4618      	mov	r0, r3
 810180c:	f000 fad6 	bl	8101dbc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					std::forward_as_tuple(std::move(__k)),
 8101810:	6838      	ldr	r0, [r7, #0]
 8101812:	f000 fb29 	bl	8101e68 <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>
 8101816:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8101818:	f107 0318 	add.w	r3, r7, #24
 810181c:	4611      	mov	r1, r2
 810181e:	4618      	mov	r0, r3
 8101820:	f000 fb3d 	bl	8101e9e <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>
 8101824:	f107 0218 	add.w	r2, r7, #24
 8101828:	f107 031c 	add.w	r3, r7, #28
 810182c:	9300      	str	r3, [sp, #0]
 810182e:	4613      	mov	r3, r2
 8101830:	4a08      	ldr	r2, [pc, #32]	@ (8101854 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xbc>)
 8101832:	6979      	ldr	r1, [r7, #20]
 8101834:	4620      	mov	r0, r4
 8101836:	f000 fb43 	bl	8101ec0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 810183a:	4603      	mov	r3, r0
 810183c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 810183e:	f107 0308 	add.w	r3, r7, #8
 8101842:	4618      	mov	r0, r3
 8101844:	f000 fa88 	bl	8101d58 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8101848:	4603      	mov	r3, r0
 810184a:	3304      	adds	r3, #4
      }
 810184c:	4618      	mov	r0, r3
 810184e:	3724      	adds	r7, #36	@ 0x24
 8101850:	46bd      	mov	sp, r7
 8101852:	bd90      	pop	{r4, r7, pc}
 8101854:	0811fbf0 	.word	0x0811fbf0

08101858 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8101858:	b580      	push	{r7, lr}
 810185a:	b082      	sub	sp, #8
 810185c:	af00      	add	r7, sp, #0
 810185e:	6078      	str	r0, [r7, #4]
 8101860:	6878      	ldr	r0, [r7, #4]
 8101862:	f000 fb73 	bl	8101f4c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	4618      	mov	r0, r3
 810186a:	3708      	adds	r7, #8
 810186c:	46bd      	mov	sp, r7
 810186e:	bd80      	pop	{r7, pc}

08101870 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 8101870:	b480      	push	{r7}
 8101872:	b083      	sub	sp, #12
 8101874:	af00      	add	r7, sp, #0
 8101876:	6078      	str	r0, [r7, #4]
      { }
 8101878:	687b      	ldr	r3, [r7, #4]
 810187a:	4618      	mov	r0, r3
 810187c:	370c      	adds	r7, #12
 810187e:	46bd      	mov	sp, r7
 8101880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101884:	4770      	bx	lr

08101886 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8101886:	b580      	push	{r7, lr}
 8101888:	b082      	sub	sp, #8
 810188a:	af00      	add	r7, sp, #0
 810188c:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 810188e:	6878      	ldr	r0, [r7, #4]
 8101890:	f000 fb90 	bl	8101fb4 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 8101894:	4603      	mov	r3, r0
 8101896:	4618      	mov	r0, r3
 8101898:	3708      	adds	r7, #8
 810189a:	46bd      	mov	sp, r7
 810189c:	bd80      	pop	{r7, pc}

0810189e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810189e:	b480      	push	{r7}
 81018a0:	b083      	sub	sp, #12
 81018a2:	af00      	add	r7, sp, #0
 81018a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	4618      	mov	r0, r3
 81018aa:	370c      	adds	r7, #12
 81018ac:	46bd      	mov	sp, r7
 81018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b2:	4770      	bx	lr

081018b4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81018b4:	b480      	push	{r7}
 81018b6:	b083      	sub	sp, #12
 81018b8:	af00      	add	r7, sp, #0
 81018ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81018bc:	687b      	ldr	r3, [r7, #4]
 81018be:	4618      	mov	r0, r3
 81018c0:	370c      	adds	r7, #12
 81018c2:	46bd      	mov	sp, r7
 81018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c8:	4770      	bx	lr

081018ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81018ca:	b590      	push	{r4, r7, lr}
 81018cc:	b08d      	sub	sp, #52	@ 0x34
 81018ce:	af00      	add	r7, sp, #0
 81018d0:	60f8      	str	r0, [r7, #12]
 81018d2:	60b9      	str	r1, [r7, #8]
 81018d4:	607a      	str	r2, [r7, #4]
 81018d6:	603b      	str	r3, [r7, #0]
      _M_emplace_unique(_Args&&... __args)
      -> pair<iterator, bool>
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 81018d8:	6878      	ldr	r0, [r7, #4]
 81018da:	f7ff ffe0 	bl	810189e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81018de:	4604      	mov	r4, r0
 81018e0:	6838      	ldr	r0, [r7, #0]
 81018e2:	f7ff ffe7 	bl	81018b4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81018e6:	4603      	mov	r3, r0
 81018e8:	f107 0018 	add.w	r0, r7, #24
 81018ec:	4622      	mov	r2, r4
 81018ee:	68b9      	ldr	r1, [r7, #8]
 81018f0:	f000 fb6c 	bl	8101fcc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_unique_pos(__z._M_key());
 81018f4:	f107 0318 	add.w	r3, r7, #24
 81018f8:	4618      	mov	r0, r3
 81018fa:	f000 fc20 	bl	810213e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 81018fe:	4602      	mov	r2, r0
 8101900:	f107 0310 	add.w	r3, r7, #16
 8101904:	68b9      	ldr	r1, [r7, #8]
 8101906:	4618      	mov	r0, r3
 8101908:	f000 fb94 	bl	8102034 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	if (__res.second)
 810190c:	697b      	ldr	r3, [r7, #20]
 810190e:	2b00      	cmp	r3, #0
 8101910:	d015      	beq.n	810193e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x74>
	  return {__z._M_insert(__res), true};
 8101912:	f107 0018 	add.w	r0, r7, #24
 8101916:	f107 0310 	add.w	r3, r7, #16
 810191a:	e893 0006 	ldmia.w	r3, {r1, r2}
 810191e:	f000 fc1c 	bl	810215a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101922:	4603      	mov	r3, r0
 8101924:	623b      	str	r3, [r7, #32]
 8101926:	2301      	movs	r3, #1
 8101928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810192c:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8101930:	f107 0320 	add.w	r3, r7, #32
 8101934:	4619      	mov	r1, r3
 8101936:	68f8      	ldr	r0, [r7, #12]
 8101938:	f000 fc28 	bl	810218c <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
 810193c:	e011      	b.n	8101962 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x98>
	return {iterator(__res.first), false};
 810193e:	693a      	ldr	r2, [r7, #16]
 8101940:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101944:	4611      	mov	r1, r2
 8101946:	4618      	mov	r0, r3
 8101948:	f000 fc39 	bl	81021be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810194c:	2300      	movs	r3, #0
 810194e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8101952:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8101956:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810195a:	4619      	mov	r1, r3
 810195c:	68f8      	ldr	r0, [r7, #12]
 810195e:	f000 fc15 	bl	810218c <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 8101962:	f107 0318 	add.w	r3, r7, #24
 8101966:	4618      	mov	r0, r3
 8101968:	f000 fb4f 	bl	810200a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 810196c:	68f8      	ldr	r0, [r7, #12]
 810196e:	3734      	adds	r7, #52	@ 0x34
 8101970:	46bd      	mov	sp, r7
 8101972:	bd90      	pop	{r4, r7, pc}

08101974 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8101974:	b480      	push	{r7}
 8101976:	b083      	sub	sp, #12
 8101978:	af00      	add	r7, sp, #0
 810197a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	4618      	mov	r0, r3
 8101980:	370c      	adds	r7, #12
 8101982:	46bd      	mov	sp, r7
 8101984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101988:	4770      	bx	lr

0810198a <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 810198a:	b580      	push	{r7, lr}
 810198c:	b084      	sub	sp, #16
 810198e:	af00      	add	r7, sp, #0
 8101990:	60f8      	str	r0, [r7, #12]
 8101992:	60b9      	str	r1, [r7, #8]
 8101994:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8101996:	68b9      	ldr	r1, [r7, #8]
 8101998:	68f8      	ldr	r0, [r7, #12]
 810199a:	f000 fc2b 	bl	81021f4 <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 810199e:	bf00      	nop
 81019a0:	3710      	adds	r7, #16
 81019a2:	46bd      	mov	sp, r7
 81019a4:	bd80      	pop	{r7, pc}

081019a6 <_ZNSaI8SMessageEC1Ev>:
 81019a6:	b580      	push	{r7, lr}
 81019a8:	b082      	sub	sp, #8
 81019aa:	af00      	add	r7, sp, #0
 81019ac:	6078      	str	r0, [r7, #4]
 81019ae:	6878      	ldr	r0, [r7, #4]
 81019b0:	f000 fc2d 	bl	810220e <_ZNSt15__new_allocatorI8SMessageEC1Ev>
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	4618      	mov	r0, r3
 81019b8:	3708      	adds	r7, #8
 81019ba:	46bd      	mov	sp, r7
 81019bc:	bd80      	pop	{r7, pc}

081019be <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 81019be:	b480      	push	{r7}
 81019c0:	b083      	sub	sp, #12
 81019c2:	af00      	add	r7, sp, #0
 81019c4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 81019c6:	687b      	ldr	r3, [r7, #4]
 81019c8:	2200      	movs	r2, #0
 81019ca:	601a      	str	r2, [r3, #0]
 81019cc:	687b      	ldr	r3, [r7, #4]
 81019ce:	2200      	movs	r2, #0
 81019d0:	605a      	str	r2, [r3, #4]
 81019d2:	687b      	ldr	r3, [r7, #4]
 81019d4:	2200      	movs	r2, #0
 81019d6:	609a      	str	r2, [r3, #8]
	{ }
 81019d8:	687b      	ldr	r3, [r7, #4]
 81019da:	4618      	mov	r0, r3
 81019dc:	370c      	adds	r7, #12
 81019de:	46bd      	mov	sp, r7
 81019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e4:	4770      	bx	lr

081019e6 <_ZNSt15__new_allocatorI8SMessageED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 81019e6:	b480      	push	{r7}
 81019e8:	b083      	sub	sp, #12
 81019ea:	af00      	add	r7, sp, #0
 81019ec:	6078      	str	r0, [r7, #4]
 81019ee:	687b      	ldr	r3, [r7, #4]
 81019f0:	4618      	mov	r0, r3
 81019f2:	370c      	adds	r7, #12
 81019f4:	46bd      	mov	sp, r7
 81019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019fa:	4770      	bx	lr

081019fc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 81019fc:	b580      	push	{r7, lr}
 81019fe:	b084      	sub	sp, #16
 8101a00:	af00      	add	r7, sp, #0
 8101a02:	60f8      	str	r0, [r7, #12]
 8101a04:	60b9      	str	r1, [r7, #8]
 8101a06:	607a      	str	r2, [r7, #4]
	if (__p)
 8101a08:	68bb      	ldr	r3, [r7, #8]
 8101a0a:	2b00      	cmp	r3, #0
 8101a0c:	d005      	beq.n	8101a1a <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8101a0e:	68fb      	ldr	r3, [r7, #12]
 8101a10:	687a      	ldr	r2, [r7, #4]
 8101a12:	68b9      	ldr	r1, [r7, #8]
 8101a14:	4618      	mov	r0, r3
 8101a16:	f000 fc05 	bl	8102224 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 8101a1a:	bf00      	nop
 8101a1c:	3710      	adds	r7, #16
 8101a1e:	46bd      	mov	sp, r7
 8101a20:	bd80      	pop	{r7, pc}

08101a22 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8101a22:	b580      	push	{r7, lr}
 8101a24:	b084      	sub	sp, #16
 8101a26:	af00      	add	r7, sp, #0
 8101a28:	60f8      	str	r0, [r7, #12]
 8101a2a:	60b9      	str	r1, [r7, #8]
 8101a2c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8101a2e:	6878      	ldr	r0, [r7, #4]
 8101a30:	f000 fc07 	bl	8102242 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101a34:	4603      	mov	r3, r0
 8101a36:	461a      	mov	r2, r3
 8101a38:	68b9      	ldr	r1, [r7, #8]
 8101a3a:	68f8      	ldr	r0, [r7, #12]
 8101a3c:	f000 fc0c 	bl	8102258 <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 8101a40:	bf00      	nop
 8101a42:	3710      	adds	r7, #16
 8101a44:	46bd      	mov	sp, r7
 8101a46:	bd80      	pop	{r7, pc}

08101a48 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101a48:	b580      	push	{r7, lr}
 8101a4a:	b084      	sub	sp, #16
 8101a4c:	af00      	add	r7, sp, #0
 8101a4e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8101a50:	687b      	ldr	r3, [r7, #4]
 8101a52:	1d1a      	adds	r2, r3, #4
 8101a54:	f107 030c 	add.w	r3, r7, #12
 8101a58:	4611      	mov	r1, r2
 8101a5a:	4618      	mov	r0, r3
 8101a5c:	f000 fc17 	bl	810228e <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8101a60:	68fb      	ldr	r3, [r7, #12]
 8101a62:	4618      	mov	r0, r3
 8101a64:	3710      	adds	r7, #16
 8101a66:	46bd      	mov	sp, r7
 8101a68:	bd80      	pop	{r7, pc}

08101a6a <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8101a6a:	b580      	push	{r7, lr}
 8101a6c:	b082      	sub	sp, #8
 8101a6e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8101a70:	4618      	mov	r0, r3
 8101a72:	f000 f805 	bl	8101a80 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8101a76:	4603      	mov	r3, r0
      }
 8101a78:	4618      	mov	r0, r3
 8101a7a:	3708      	adds	r7, #8
 8101a7c:	46bd      	mov	sp, r7
 8101a7e:	bd80      	pop	{r7, pc}

08101a80 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8101a80:	b480      	push	{r7}
 8101a82:	b083      	sub	sp, #12
 8101a84:	af00      	add	r7, sp, #0
 8101a86:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8101a88:	2301      	movs	r3, #1
      }
 8101a8a:	4618      	mov	r0, r3
 8101a8c:	370c      	adds	r7, #12
 8101a8e:	46bd      	mov	sp, r7
 8101a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a94:	4770      	bx	lr
	...

08101a98 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8101a98:	b5b0      	push	{r4, r5, r7, lr}
 8101a9a:	b08c      	sub	sp, #48	@ 0x30
 8101a9c:	af00      	add	r7, sp, #0
 8101a9e:	60f8      	str	r0, [r7, #12]
 8101aa0:	60b9      	str	r1, [r7, #8]
 8101aa2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8101aa4:	4a5e      	ldr	r2, [pc, #376]	@ (8101c20 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 8101aa6:	2101      	movs	r1, #1
 8101aa8:	68f8      	ldr	r0, [r7, #12]
 8101aaa:	f000 fc00 	bl	81022ae <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 8101aae:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8101ab0:	68fb      	ldr	r3, [r7, #12]
 8101ab2:	681b      	ldr	r3, [r3, #0]
 8101ab4:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8101ab6:	68fb      	ldr	r3, [r7, #12]
 8101ab8:	685b      	ldr	r3, [r3, #4]
 8101aba:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8101abc:	68f8      	ldr	r0, [r7, #12]
 8101abe:	f000 fc3d 	bl	810233c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8101ac2:	4603      	mov	r3, r0
 8101ac4:	617b      	str	r3, [r7, #20]
 8101ac6:	f107 0214 	add.w	r2, r7, #20
 8101aca:	f107 0308 	add.w	r3, r7, #8
 8101ace:	4611      	mov	r1, r2
 8101ad0:	4618      	mov	r0, r3
 8101ad2:	f000 fc43 	bl	810235c <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8101ad6:	4603      	mov	r3, r0
 8101ad8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8101ada:	68fb      	ldr	r3, [r7, #12]
 8101adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8101ade:	4618      	mov	r0, r3
 8101ae0:	f000 fc56 	bl	8102390 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8101ae4:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8101ae6:	69bb      	ldr	r3, [r7, #24]
 8101ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8101aea:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8101aec:	69fa      	ldr	r2, [r7, #28]
 8101aee:	4613      	mov	r3, r2
 8101af0:	005b      	lsls	r3, r3, #1
 8101af2:	4413      	add	r3, r2
 8101af4:	00db      	lsls	r3, r3, #3
 8101af6:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8101af8:	69bb      	ldr	r3, [r7, #24]
 8101afa:	189d      	adds	r5, r3, r2
 8101afc:	6878      	ldr	r0, [r7, #4]
 8101afe:	f000 fba0 	bl	8102242 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101b02:	4603      	mov	r3, r0
 8101b04:	461a      	mov	r2, r3
 8101b06:	4629      	mov	r1, r5
 8101b08:	4620      	mov	r0, r4
 8101b0a:	f7ff ff8a 	bl	8101a22 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8101b0e:	2300      	movs	r3, #0
 8101b10:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8101b12:	f7ff ffaa 	bl	8101a6a <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101b16:	4603      	mov	r3, r0
 8101b18:	2b00      	cmp	r3, #0
 8101b1a:	d027      	beq.n	8101b6c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8101b1c:	f107 0308 	add.w	r3, r7, #8
 8101b20:	4618      	mov	r0, r3
 8101b22:	f000 fc5d 	bl	81023e0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101b26:	4603      	mov	r3, r0
 8101b28:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8101b2a:	68fb      	ldr	r3, [r7, #12]
 8101b2c:	4618      	mov	r0, r3
 8101b2e:	f7ff ff21 	bl	8101974 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101b32:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8101b34:	69ba      	ldr	r2, [r7, #24]
 8101b36:	4621      	mov	r1, r4
 8101b38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101b3a:	f000 fc3d 	bl	81023b8 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8101b3e:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8101b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b42:	3318      	adds	r3, #24
 8101b44:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8101b46:	f107 0308 	add.w	r3, r7, #8
 8101b4a:	4618      	mov	r0, r3
 8101b4c:	f000 fc48 	bl	81023e0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101b50:	4603      	mov	r3, r0
 8101b52:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8101b54:	68fb      	ldr	r3, [r7, #12]
 8101b56:	4618      	mov	r0, r3
 8101b58:	f7ff ff0c 	bl	8101974 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101b5c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8101b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101b60:	6a39      	ldr	r1, [r7, #32]
 8101b62:	4620      	mov	r0, r4
 8101b64:	f000 fc28 	bl	81023b8 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8101b68:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8101b6a:	e026      	b.n	8101bba <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8101b6c:	f107 0308 	add.w	r3, r7, #8
 8101b70:	4618      	mov	r0, r3
 8101b72:	f000 fc35 	bl	81023e0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101b76:	4603      	mov	r3, r0
 8101b78:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8101b7a:	68fb      	ldr	r3, [r7, #12]
 8101b7c:	4618      	mov	r0, r3
 8101b7e:	f7ff fef9 	bl	8101974 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101b82:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8101b84:	69ba      	ldr	r2, [r7, #24]
 8101b86:	4621      	mov	r1, r4
 8101b88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101b8a:	f000 fc34 	bl	81023f6 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8101b8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8101b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b92:	3318      	adds	r3, #24
 8101b94:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8101b96:	f107 0308 	add.w	r3, r7, #8
 8101b9a:	4618      	mov	r0, r3
 8101b9c:	f000 fc20 	bl	81023e0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101ba0:	4603      	mov	r3, r0
 8101ba2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8101ba4:	68fb      	ldr	r3, [r7, #12]
 8101ba6:	4618      	mov	r0, r3
 8101ba8:	f7ff fee4 	bl	8101974 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101bac:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8101bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101bb0:	6a39      	ldr	r1, [r7, #32]
 8101bb2:	4620      	mov	r0, r4
 8101bb4:	f000 fc1f 	bl	81023f6 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8101bb8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8101bba:	f7ff ff56 	bl	8101a6a <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101bbe:	4603      	mov	r3, r0
 8101bc0:	f083 0301 	eor.w	r3, r3, #1
 8101bc4:	b2db      	uxtb	r3, r3
 8101bc6:	2b00      	cmp	r3, #0
 8101bc8:	d009      	beq.n	8101bde <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8101bca:	68fb      	ldr	r3, [r7, #12]
 8101bcc:	4618      	mov	r0, r3
 8101bce:	f7ff fed1 	bl	8101974 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101bd2:	4603      	mov	r3, r0
 8101bd4:	461a      	mov	r2, r3
 8101bd6:	6a39      	ldr	r1, [r7, #32]
 8101bd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101bda:	f7ff fed6 	bl	810198a <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8101bde:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8101be0:	68fb      	ldr	r3, [r7, #12]
 8101be2:	689a      	ldr	r2, [r3, #8]
 8101be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101be6:	1ad3      	subs	r3, r2, r3
 8101be8:	10db      	asrs	r3, r3, #3
 8101bea:	4a0e      	ldr	r2, [pc, #56]	@ (8101c24 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8101bec:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8101bf0:	461a      	mov	r2, r3
 8101bf2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101bf4:	f7ff ff02 	bl	81019fc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8101bf8:	68fb      	ldr	r3, [r7, #12]
 8101bfa:	69ba      	ldr	r2, [r7, #24]
 8101bfc:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8101bfe:	68fb      	ldr	r3, [r7, #12]
 8101c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101c02:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8101c04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8101c06:	4613      	mov	r3, r2
 8101c08:	005b      	lsls	r3, r3, #1
 8101c0a:	4413      	add	r3, r2
 8101c0c:	00db      	lsls	r3, r3, #3
 8101c0e:	461a      	mov	r2, r3
 8101c10:	69bb      	ldr	r3, [r7, #24]
 8101c12:	441a      	add	r2, r3
 8101c14:	68fb      	ldr	r3, [r7, #12]
 8101c16:	609a      	str	r2, [r3, #8]
    }
 8101c18:	bf00      	nop
 8101c1a:	3730      	adds	r7, #48	@ 0x30
 8101c1c:	46bd      	mov	sp, r7
 8101c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8101c20:	0811cc20 	.word	0x0811cc20
 8101c24:	aaaaaaab 	.word	0xaaaaaaab

08101c28 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101c28:	b480      	push	{r7}
 8101c2a:	b083      	sub	sp, #12
 8101c2c:	af00      	add	r7, sp, #0
 8101c2e:	6078      	str	r0, [r7, #4]
 8101c30:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101c32:	683b      	ldr	r3, [r7, #0]
 8101c34:	681a      	ldr	r2, [r3, #0]
 8101c36:	687b      	ldr	r3, [r7, #4]
 8101c38:	601a      	str	r2, [r3, #0]
 8101c3a:	687b      	ldr	r3, [r7, #4]
 8101c3c:	4618      	mov	r0, r3
 8101c3e:	370c      	adds	r7, #12
 8101c40:	46bd      	mov	sp, r7
 8101c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c46:	4770      	bx	lr

08101c48 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101c48:	b480      	push	{r7}
 8101c4a:	b083      	sub	sp, #12
 8101c4c:	af00      	add	r7, sp, #0
 8101c4e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	4618      	mov	r0, r3
 8101c54:	370c      	adds	r7, #12
 8101c56:	46bd      	mov	sp, r7
 8101c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c5c:	4770      	bx	lr

08101c5e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101c5e:	b590      	push	{r4, r7, lr}
 8101c60:	b085      	sub	sp, #20
 8101c62:	af00      	add	r7, sp, #0
 8101c64:	6078      	str	r0, [r7, #4]
 8101c66:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8101c68:	6878      	ldr	r0, [r7, #4]
 8101c6a:	f7ff fe0c 	bl	8101886 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8101c6e:	4604      	mov	r4, r0
 8101c70:	6878      	ldr	r0, [r7, #4]
 8101c72:	f000 fbd9 	bl	8102428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8101c76:	4602      	mov	r2, r0
 8101c78:	683b      	ldr	r3, [r7, #0]
 8101c7a:	4621      	mov	r1, r4
 8101c7c:	6878      	ldr	r0, [r7, #4]
 8101c7e:	f000 fbdf 	bl	8102440 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8101c82:	4603      	mov	r3, r0
 8101c84:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8101c86:	6878      	ldr	r0, [r7, #4]
 8101c88:	f000 f825 	bl	8101cd6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101c8c:	4603      	mov	r3, r0
 8101c8e:	60fb      	str	r3, [r7, #12]
 8101c90:	f107 020c 	add.w	r2, r7, #12
 8101c94:	f107 0308 	add.w	r3, r7, #8
 8101c98:	4611      	mov	r1, r2
 8101c9a:	4618      	mov	r0, r3
 8101c9c:	f000 f83b 	bl	8101d16 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101ca0:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8101ca2:	2b00      	cmp	r3, #0
 8101ca4:	d10d      	bne.n	8101cc2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 8101ca6:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8101ca8:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8101caa:	4618      	mov	r0, r3
 8101cac:	f000 fbf9 	bl	81024a2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8101cb0:	4603      	mov	r3, r0
 8101cb2:	461a      	mov	r2, r3
 8101cb4:	6839      	ldr	r1, [r7, #0]
 8101cb6:	4620      	mov	r0, r4
 8101cb8:	f000 f85c 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101cbc:	4603      	mov	r3, r0
 8101cbe:	2b00      	cmp	r3, #0
 8101cc0:	d004      	beq.n	8101ccc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8101cc2:	6878      	ldr	r0, [r7, #4]
 8101cc4:	f000 f807 	bl	8101cd6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101cc8:	4603      	mov	r3, r0
 8101cca:	e000      	b.n	8101cce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 8101ccc:	68bb      	ldr	r3, [r7, #8]
    }
 8101cce:	4618      	mov	r0, r3
 8101cd0:	3714      	adds	r7, #20
 8101cd2:	46bd      	mov	sp, r7
 8101cd4:	bd90      	pop	{r4, r7, pc}

08101cd6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101cd6:	b580      	push	{r7, lr}
 8101cd8:	b084      	sub	sp, #16
 8101cda:	af00      	add	r7, sp, #0
 8101cdc:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8101cde:	687b      	ldr	r3, [r7, #4]
 8101ce0:	1d1a      	adds	r2, r3, #4
 8101ce2:	f107 030c 	add.w	r3, r7, #12
 8101ce6:	4611      	mov	r1, r2
 8101ce8:	4618      	mov	r0, r3
 8101cea:	f000 fa68 	bl	81021be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101cee:	68fb      	ldr	r3, [r7, #12]
 8101cf0:	4618      	mov	r0, r3
 8101cf2:	3710      	adds	r7, #16
 8101cf4:	46bd      	mov	sp, r7
 8101cf6:	bd80      	pop	{r7, pc}

08101cf8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8101cf8:	b580      	push	{r7, lr}
 8101cfa:	b082      	sub	sp, #8
 8101cfc:	af00      	add	r7, sp, #0
 8101cfe:	6078      	str	r0, [r7, #4]
 8101d00:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8101d02:	687b      	ldr	r3, [r7, #4]
 8101d04:	6839      	ldr	r1, [r7, #0]
 8101d06:	4618      	mov	r0, r3
 8101d08:	f000 fbd7 	bl	81024ba <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8101d0c:	4603      	mov	r3, r0
 8101d0e:	4618      	mov	r0, r3
 8101d10:	3708      	adds	r7, #8
 8101d12:	46bd      	mov	sp, r7
 8101d14:	bd80      	pop	{r7, pc}

08101d16 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101d16:	b480      	push	{r7}
 8101d18:	b083      	sub	sp, #12
 8101d1a:	af00      	add	r7, sp, #0
 8101d1c:	6078      	str	r0, [r7, #4]
 8101d1e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	681a      	ldr	r2, [r3, #0]
 8101d24:	683b      	ldr	r3, [r7, #0]
 8101d26:	681b      	ldr	r3, [r3, #0]
 8101d28:	429a      	cmp	r2, r3
 8101d2a:	bf0c      	ite	eq
 8101d2c:	2301      	moveq	r3, #1
 8101d2e:	2300      	movne	r3, #0
 8101d30:	b2db      	uxtb	r3, r3
 8101d32:	4618      	mov	r0, r3
 8101d34:	370c      	adds	r7, #12
 8101d36:	46bd      	mov	sp, r7
 8101d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d3c:	4770      	bx	lr

08101d3e <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8101d3e:	b590      	push	{r4, r7, lr}
 8101d40:	b083      	sub	sp, #12
 8101d42:	af00      	add	r7, sp, #0
 8101d44:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	4618      	mov	r0, r3
 8101d4a:	f000 fbcd 	bl	81024e8 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8101d4e:	bf00      	nop
 8101d50:	4620      	mov	r0, r4
 8101d52:	370c      	adds	r7, #12
 8101d54:	46bd      	mov	sp, r7
 8101d56:	bd90      	pop	{r4, r7, pc}

08101d58 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101d58:	b580      	push	{r7, lr}
 8101d5a:	b082      	sub	sp, #8
 8101d5c:	af00      	add	r7, sp, #0
 8101d5e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	681b      	ldr	r3, [r3, #0]
 8101d64:	4618      	mov	r0, r3
 8101d66:	f000 fbca 	bl	81024fe <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8101d6a:	4603      	mov	r3, r0
 8101d6c:	4618      	mov	r0, r3
 8101d6e:	3708      	adds	r7, #8
 8101d70:	46bd      	mov	sp, r7
 8101d72:	bd80      	pop	{r7, pc}

08101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8101d74:	b480      	push	{r7}
 8101d76:	b085      	sub	sp, #20
 8101d78:	af00      	add	r7, sp, #0
 8101d7a:	60f8      	str	r0, [r7, #12]
 8101d7c:	60b9      	str	r1, [r7, #8]
 8101d7e:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8101d80:	68bb      	ldr	r3, [r7, #8]
 8101d82:	781a      	ldrb	r2, [r3, #0]
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	781b      	ldrb	r3, [r3, #0]
 8101d88:	429a      	cmp	r2, r3
 8101d8a:	bf34      	ite	cc
 8101d8c:	2301      	movcc	r3, #1
 8101d8e:	2300      	movcs	r3, #0
 8101d90:	b2db      	uxtb	r3, r3
 8101d92:	4618      	mov	r0, r3
 8101d94:	3714      	adds	r7, #20
 8101d96:	46bd      	mov	sp, r7
 8101d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d9c:	4770      	bx	lr

08101d9e <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8101d9e:	b580      	push	{r7, lr}
 8101da0:	b082      	sub	sp, #8
 8101da2:	af00      	add	r7, sp, #0
 8101da4:	6078      	str	r0, [r7, #4]
 8101da6:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8101da8:	687b      	ldr	r3, [r7, #4]
 8101daa:	6839      	ldr	r1, [r7, #0]
 8101dac:	4618      	mov	r0, r3
 8101dae:	f000 fbb4 	bl	810251a <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 8101db2:	687b      	ldr	r3, [r7, #4]
 8101db4:	4618      	mov	r0, r3
 8101db6:	3708      	adds	r7, #8
 8101db8:	46bd      	mov	sp, r7
 8101dba:	bd80      	pop	{r7, pc}

08101dbc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8101dbc:	b480      	push	{r7}
 8101dbe:	b083      	sub	sp, #12
 8101dc0:	af00      	add	r7, sp, #0
 8101dc2:	6078      	str	r0, [r7, #4]
 8101dc4:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8101dc6:	683b      	ldr	r3, [r7, #0]
 8101dc8:	681a      	ldr	r2, [r3, #0]
 8101dca:	687b      	ldr	r3, [r7, #4]
 8101dcc:	601a      	str	r2, [r3, #0]
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	4618      	mov	r0, r3
 8101dd2:	370c      	adds	r7, #12
 8101dd4:	46bd      	mov	sp, r7
 8101dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dda:	4770      	bx	lr

08101ddc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101ddc:	b5b0      	push	{r4, r5, r7, lr}
 8101dde:	b08c      	sub	sp, #48	@ 0x30
 8101de0:	af02      	add	r7, sp, #8
 8101de2:	60f8      	str	r0, [r7, #12]
 8101de4:	60b9      	str	r1, [r7, #8]
 8101de6:	607a      	str	r2, [r7, #4]
 8101de8:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8101dea:	6878      	ldr	r0, [r7, #4]
 8101dec:	f000 fba4 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8101df0:	4604      	mov	r4, r0
 8101df2:	6838      	ldr	r0, [r7, #0]
 8101df4:	f000 fbab 	bl	810254e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8101df8:	4605      	mov	r5, r0
 8101dfa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101dfc:	f000 fbb2 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8101e00:	4603      	mov	r3, r0
 8101e02:	f107 001c 	add.w	r0, r7, #28
 8101e06:	9300      	str	r3, [sp, #0]
 8101e08:	462b      	mov	r3, r5
 8101e0a:	4622      	mov	r2, r4
 8101e0c:	68f9      	ldr	r1, [r7, #12]
 8101e0e:	f000 fbb4 	bl	810257a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8101e12:	f107 031c 	add.w	r3, r7, #28
 8101e16:	4618      	mov	r0, r3
 8101e18:	f000 f991 	bl	810213e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101e1c:	4603      	mov	r3, r0
 8101e1e:	f107 0014 	add.w	r0, r7, #20
 8101e22:	68ba      	ldr	r2, [r7, #8]
 8101e24:	68f9      	ldr	r1, [r7, #12]
 8101e26:	f000 fbcb 	bl	81025c0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8101e2a:	69bb      	ldr	r3, [r7, #24]
 8101e2c:	2b00      	cmp	r3, #0
 8101e2e:	d009      	beq.n	8101e44 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8101e30:	f107 001c 	add.w	r0, r7, #28
 8101e34:	f107 0314 	add.w	r3, r7, #20
 8101e38:	e893 0006 	ldmia.w	r3, {r1, r2}
 8101e3c:	f000 f98d 	bl	810215a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101e40:	4604      	mov	r4, r0
 8101e42:	e007      	b.n	8101e54 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8101e44:	697a      	ldr	r2, [r7, #20]
 8101e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101e4a:	4611      	mov	r1, r2
 8101e4c:	4618      	mov	r0, r3
 8101e4e:	f000 f9b6 	bl	81021be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101e52:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8101e54:	f107 031c 	add.w	r3, r7, #28
 8101e58:	4618      	mov	r0, r3
 8101e5a:	f000 f8d6 	bl	810200a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8101e5e:	4623      	mov	r3, r4
 8101e60:	4618      	mov	r0, r3
 8101e62:	3728      	adds	r7, #40	@ 0x28
 8101e64:	46bd      	mov	sp, r7
 8101e66:	bdb0      	pop	{r4, r5, r7, pc}

08101e68 <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8101e68:	b480      	push	{r7}
 8101e6a:	b083      	sub	sp, #12
 8101e6c:	af00      	add	r7, sp, #0
 8101e6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	4618      	mov	r0, r3
 8101e74:	370c      	adds	r7, #12
 8101e76:	46bd      	mov	sp, r7
 8101e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e7c:	4770      	bx	lr

08101e7e <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8101e7e:	b580      	push	{r7, lr}
 8101e80:	b082      	sub	sp, #8
 8101e82:	af00      	add	r7, sp, #0
 8101e84:	6078      	str	r0, [r7, #4]
 8101e86:	6039      	str	r1, [r7, #0]
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	683a      	ldr	r2, [r7, #0]
 8101e8c:	4611      	mov	r1, r2
 8101e8e:	4618      	mov	r0, r3
 8101e90:	f000 fcd7 	bl	8102842 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	4618      	mov	r0, r3
 8101e98:	3708      	adds	r7, #8
 8101e9a:	46bd      	mov	sp, r7
 8101e9c:	bd80      	pop	{r7, pc}

08101e9e <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8101e9e:	b580      	push	{r7, lr}
 8101ea0:	b082      	sub	sp, #8
 8101ea2:	af00      	add	r7, sp, #0
 8101ea4:	6078      	str	r0, [r7, #4]
 8101ea6:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8101ea8:	6838      	ldr	r0, [r7, #0]
 8101eaa:	f000 fcac 	bl	8102806 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8101eae:	4603      	mov	r3, r0
 8101eb0:	4619      	mov	r1, r3
 8101eb2:	6878      	ldr	r0, [r7, #4]
 8101eb4:	f000 fcb2 	bl	810281c <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>
 8101eb8:	6878      	ldr	r0, [r7, #4]
 8101eba:	3708      	adds	r7, #8
 8101ebc:	46bd      	mov	sp, r7
 8101ebe:	bd80      	pop	{r7, pc}

08101ec0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101ec0:	b5b0      	push	{r4, r5, r7, lr}
 8101ec2:	b08c      	sub	sp, #48	@ 0x30
 8101ec4:	af02      	add	r7, sp, #8
 8101ec6:	60f8      	str	r0, [r7, #12]
 8101ec8:	60b9      	str	r1, [r7, #8]
 8101eca:	607a      	str	r2, [r7, #4]
 8101ecc:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8101ece:	6878      	ldr	r0, [r7, #4]
 8101ed0:	f000 fb32 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8101ed4:	4604      	mov	r4, r0
 8101ed6:	6838      	ldr	r0, [r7, #0]
 8101ed8:	f000 fcc3 	bl	8102862 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8101edc:	4605      	mov	r5, r0
 8101ede:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101ee0:	f000 fb40 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8101ee4:	4603      	mov	r3, r0
 8101ee6:	f107 001c 	add.w	r0, r7, #28
 8101eea:	9300      	str	r3, [sp, #0]
 8101eec:	462b      	mov	r3, r5
 8101eee:	4622      	mov	r2, r4
 8101ef0:	68f9      	ldr	r1, [r7, #12]
 8101ef2:	f000 fcc1 	bl	8102878 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8101ef6:	f107 031c 	add.w	r3, r7, #28
 8101efa:	4618      	mov	r0, r3
 8101efc:	f000 f91f 	bl	810213e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101f00:	4603      	mov	r3, r0
 8101f02:	f107 0014 	add.w	r0, r7, #20
 8101f06:	68ba      	ldr	r2, [r7, #8]
 8101f08:	68f9      	ldr	r1, [r7, #12]
 8101f0a:	f000 fb59 	bl	81025c0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8101f0e:	69bb      	ldr	r3, [r7, #24]
 8101f10:	2b00      	cmp	r3, #0
 8101f12:	d009      	beq.n	8101f28 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8101f14:	f107 001c 	add.w	r0, r7, #28
 8101f18:	f107 0314 	add.w	r3, r7, #20
 8101f1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8101f20:	f000 f91b 	bl	810215a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101f24:	4604      	mov	r4, r0
 8101f26:	e007      	b.n	8101f38 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8101f28:	697a      	ldr	r2, [r7, #20]
 8101f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101f2e:	4611      	mov	r1, r2
 8101f30:	4618      	mov	r0, r3
 8101f32:	f000 f944 	bl	81021be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101f36:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8101f38:	f107 031c 	add.w	r3, r7, #28
 8101f3c:	4618      	mov	r0, r3
 8101f3e:	f000 f864 	bl	810200a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8101f42:	4623      	mov	r3, r4
 8101f44:	4618      	mov	r0, r3
 8101f46:	3728      	adds	r7, #40	@ 0x28
 8101f48:	46bd      	mov	sp, r7
 8101f4a:	bdb0      	pop	{r4, r5, r7, pc}

08101f4c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101f4c:	b480      	push	{r7}
 8101f4e:	b083      	sub	sp, #12
 8101f50:	af00      	add	r7, sp, #0
 8101f52:	6078      	str	r0, [r7, #4]
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	4618      	mov	r0, r3
 8101f58:	370c      	adds	r7, #12
 8101f5a:	46bd      	mov	sp, r7
 8101f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f60:	4770      	bx	lr

08101f62 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101f62:	b480      	push	{r7}
 8101f64:	b083      	sub	sp, #12
 8101f66:	af00      	add	r7, sp, #0
 8101f68:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	68db      	ldr	r3, [r3, #12]
 8101f6e:	4618      	mov	r0, r3
 8101f70:	370c      	adds	r7, #12
 8101f72:	46bd      	mov	sp, r7
 8101f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f78:	4770      	bx	lr

08101f7a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101f7a:	b480      	push	{r7}
 8101f7c:	b083      	sub	sp, #12
 8101f7e:	af00      	add	r7, sp, #0
 8101f80:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	689b      	ldr	r3, [r3, #8]
 8101f86:	4618      	mov	r0, r3
 8101f88:	370c      	adds	r7, #12
 8101f8a:	46bd      	mov	sp, r7
 8101f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f90:	4770      	bx	lr

08101f92 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8101f92:	b580      	push	{r7, lr}
 8101f94:	b082      	sub	sp, #8
 8101f96:	af00      	add	r7, sp, #0
 8101f98:	6078      	str	r0, [r7, #4]
 8101f9a:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8101f9c:	6839      	ldr	r1, [r7, #0]
 8101f9e:	6878      	ldr	r0, [r7, #4]
 8101fa0:	f000 fc8d 	bl	81028be <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8101fa4:	6839      	ldr	r1, [r7, #0]
 8101fa6:	6878      	ldr	r0, [r7, #4]
 8101fa8:	f000 fc9e 	bl	81028e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8101fac:	bf00      	nop
 8101fae:	3708      	adds	r7, #8
 8101fb0:	46bd      	mov	sp, r7
 8101fb2:	bd80      	pop	{r7, pc}

08101fb4 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8101fb4:	b480      	push	{r7}
 8101fb6:	b083      	sub	sp, #12
 8101fb8:	af00      	add	r7, sp, #0
 8101fba:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	689b      	ldr	r3, [r3, #8]
 8101fc0:	4618      	mov	r0, r3
 8101fc2:	370c      	adds	r7, #12
 8101fc4:	46bd      	mov	sp, r7
 8101fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fca:	4770      	bx	lr

08101fcc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8101fcc:	b590      	push	{r4, r7, lr}
 8101fce:	b085      	sub	sp, #20
 8101fd0:	af00      	add	r7, sp, #0
 8101fd2:	60f8      	str	r0, [r7, #12]
 8101fd4:	60b9      	str	r1, [r7, #8]
 8101fd6:	607a      	str	r2, [r7, #4]
 8101fd8:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8101fda:	68fb      	ldr	r3, [r7, #12]
 8101fdc:	68ba      	ldr	r2, [r7, #8]
 8101fde:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8101fe0:	6878      	ldr	r0, [r7, #4]
 8101fe2:	f7ff fc5c 	bl	810189e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101fe6:	4604      	mov	r4, r0
 8101fe8:	6838      	ldr	r0, [r7, #0]
 8101fea:	f7ff fc63 	bl	81018b4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8101fee:	4603      	mov	r3, r0
 8101ff0:	461a      	mov	r2, r3
 8101ff2:	4621      	mov	r1, r4
 8101ff4:	68b8      	ldr	r0, [r7, #8]
 8101ff6:	f000 fc89 	bl	810290c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8101ffa:	4602      	mov	r2, r0
 8101ffc:	68fb      	ldr	r3, [r7, #12]
 8101ffe:	605a      	str	r2, [r3, #4]
	  { }
 8102000:	68fb      	ldr	r3, [r7, #12]
 8102002:	4618      	mov	r0, r3
 8102004:	3714      	adds	r7, #20
 8102006:	46bd      	mov	sp, r7
 8102008:	bd90      	pop	{r4, r7, pc}

0810200a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 810200a:	b580      	push	{r7, lr}
 810200c:	b082      	sub	sp, #8
 810200e:	af00      	add	r7, sp, #0
 8102010:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	685b      	ldr	r3, [r3, #4]
 8102016:	2b00      	cmp	r3, #0
 8102018:	d007      	beq.n	810202a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	681a      	ldr	r2, [r3, #0]
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	685b      	ldr	r3, [r3, #4]
 8102022:	4619      	mov	r1, r3
 8102024:	4610      	mov	r0, r2
 8102026:	f7ff ffb4 	bl	8101f92 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	4618      	mov	r0, r3
 810202e:	3708      	adds	r7, #8
 8102030:	46bd      	mov	sp, r7
 8102032:	bd80      	pop	{r7, pc}

08102034 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102034:	b590      	push	{r4, r7, lr}
 8102036:	b08b      	sub	sp, #44	@ 0x2c
 8102038:	af00      	add	r7, sp, #0
 810203a:	60f8      	str	r0, [r7, #12]
 810203c:	60b9      	str	r1, [r7, #8]
 810203e:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8102040:	68b8      	ldr	r0, [r7, #8]
 8102042:	f7ff fc20 	bl	8101886 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102046:	4603      	mov	r3, r0
 8102048:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 810204a:	68b8      	ldr	r0, [r7, #8]
 810204c:	f000 f9ec 	bl	8102428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102050:	4603      	mov	r3, r0
 8102052:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8102054:	2301      	movs	r3, #1
 8102056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 810205a:	e01f      	b.n	810209c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 810205c:	69bb      	ldr	r3, [r7, #24]
 810205e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8102060:	68bc      	ldr	r4, [r7, #8]
 8102062:	69bb      	ldr	r3, [r7, #24]
 8102064:	4618      	mov	r0, r3
 8102066:	f000 fc6d 	bl	8102944 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810206a:	4603      	mov	r3, r0
 810206c:	461a      	mov	r2, r3
 810206e:	6879      	ldr	r1, [r7, #4]
 8102070:	4620      	mov	r0, r4
 8102072:	f7ff fe7f 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102076:	4603      	mov	r3, r0
 8102078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 810207c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8102080:	2b00      	cmp	r3, #0
 8102082:	d005      	beq.n	8102090 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 8102084:	69bb      	ldr	r3, [r7, #24]
 8102086:	4618      	mov	r0, r3
 8102088:	f7ff ff77 	bl	8101f7a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 810208c:	4603      	mov	r3, r0
 810208e:	e004      	b.n	810209a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8102090:	69bb      	ldr	r3, [r7, #24]
 8102092:	4618      	mov	r0, r3
 8102094:	f7ff ff65 	bl	8101f62 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102098:	4603      	mov	r3, r0
 810209a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 810209c:	69bb      	ldr	r3, [r7, #24]
 810209e:	2b00      	cmp	r3, #0
 81020a0:	d1dc      	bne.n	810205c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 81020a2:	697a      	ldr	r2, [r7, #20]
 81020a4:	f107 0310 	add.w	r3, r7, #16
 81020a8:	4611      	mov	r1, r2
 81020aa:	4618      	mov	r0, r3
 81020ac:	f000 f887 	bl	81021be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 81020b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81020b4:	2b00      	cmp	r3, #0
 81020b6:	d01d      	beq.n	81020f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 81020b8:	68b8      	ldr	r0, [r7, #8]
 81020ba:	f000 fc56 	bl	810296a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 81020be:	4603      	mov	r3, r0
 81020c0:	61fb      	str	r3, [r7, #28]
 81020c2:	f107 021c 	add.w	r2, r7, #28
 81020c6:	f107 0310 	add.w	r3, r7, #16
 81020ca:	4611      	mov	r1, r2
 81020cc:	4618      	mov	r0, r3
 81020ce:	f7ff fe22 	bl	8101d16 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81020d2:	4603      	mov	r3, r0
 81020d4:	2b00      	cmp	r3, #0
 81020d6:	d008      	beq.n	81020ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 81020d8:	f107 0214 	add.w	r2, r7, #20
 81020dc:	f107 0318 	add.w	r3, r7, #24
 81020e0:	4619      	mov	r1, r3
 81020e2:	68f8      	ldr	r0, [r7, #12]
 81020e4:	f000 fc52 	bl	810298c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 81020e8:	e025      	b.n	8102136 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 81020ea:	f107 0310 	add.w	r3, r7, #16
 81020ee:	4618      	mov	r0, r3
 81020f0:	f000 fc65 	bl	81029be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 81020f4:	68bc      	ldr	r4, [r7, #8]
 81020f6:	693b      	ldr	r3, [r7, #16]
 81020f8:	4618      	mov	r0, r3
 81020fa:	f000 f9d2 	bl	81024a2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81020fe:	4603      	mov	r3, r0
 8102100:	687a      	ldr	r2, [r7, #4]
 8102102:	4619      	mov	r1, r3
 8102104:	4620      	mov	r0, r4
 8102106:	f7ff fe35 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810210a:	4603      	mov	r3, r0
 810210c:	2b00      	cmp	r3, #0
 810210e:	d008      	beq.n	8102122 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8102110:	f107 0214 	add.w	r2, r7, #20
 8102114:	f107 0318 	add.w	r3, r7, #24
 8102118:	4619      	mov	r1, r3
 810211a:	68f8      	ldr	r0, [r7, #12]
 810211c:	f000 fc36 	bl	810298c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8102120:	e009      	b.n	8102136 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8102122:	2300      	movs	r3, #0
 8102124:	623b      	str	r3, [r7, #32]
 8102126:	f107 0220 	add.w	r2, r7, #32
 810212a:	f107 0310 	add.w	r3, r7, #16
 810212e:	4619      	mov	r1, r3
 8102130:	68f8      	ldr	r0, [r7, #12]
 8102132:	f000 fc55 	bl	81029e0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102136:	68f8      	ldr	r0, [r7, #12]
 8102138:	372c      	adds	r7, #44	@ 0x2c
 810213a:	46bd      	mov	sp, r7
 810213c:	bd90      	pop	{r4, r7, pc}

0810213e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 810213e:	b580      	push	{r7, lr}
 8102140:	b082      	sub	sp, #8
 8102142:	af00      	add	r7, sp, #0
 8102144:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	685b      	ldr	r3, [r3, #4]
 810214a:	4618      	mov	r0, r3
 810214c:	f000 fbfa 	bl	8102944 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102150:	4603      	mov	r3, r0
 8102152:	4618      	mov	r0, r3
 8102154:	3708      	adds	r7, #8
 8102156:	46bd      	mov	sp, r7
 8102158:	bd80      	pop	{r7, pc}

0810215a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 810215a:	b580      	push	{r7, lr}
 810215c:	b086      	sub	sp, #24
 810215e:	af00      	add	r7, sp, #0
 8102160:	60f8      	str	r0, [r7, #12]
 8102162:	1d3b      	adds	r3, r7, #4
 8102164:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8102168:	68fb      	ldr	r3, [r7, #12]
 810216a:	6818      	ldr	r0, [r3, #0]
 810216c:	6879      	ldr	r1, [r7, #4]
 810216e:	68ba      	ldr	r2, [r7, #8]
 8102170:	68fb      	ldr	r3, [r7, #12]
 8102172:	685b      	ldr	r3, [r3, #4]
 8102174:	f000 fc49 	bl	8102a0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8102178:	4603      	mov	r3, r0
 810217a:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 810217c:	68fb      	ldr	r3, [r7, #12]
 810217e:	2200      	movs	r2, #0
 8102180:	605a      	str	r2, [r3, #4]
	  return __it;
 8102182:	697b      	ldr	r3, [r7, #20]
	}
 8102184:	4618      	mov	r0, r3
 8102186:	3718      	adds	r7, #24
 8102188:	46bd      	mov	sp, r7
 810218a:	bd80      	pop	{r7, pc}

0810218c <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 810218c:	b580      	push	{r7, lr}
 810218e:	b084      	sub	sp, #16
 8102190:	af00      	add	r7, sp, #0
 8102192:	60f8      	str	r0, [r7, #12]
 8102194:	60b9      	str	r1, [r7, #8]
 8102196:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102198:	68b8      	ldr	r0, [r7, #8]
 810219a:	f000 fc73 	bl	8102a84 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>
 810219e:	4602      	mov	r2, r0
 81021a0:	68fb      	ldr	r3, [r7, #12]
 81021a2:	6812      	ldr	r2, [r2, #0]
 81021a4:	601a      	str	r2, [r3, #0]
 81021a6:	6878      	ldr	r0, [r7, #4]
 81021a8:	f000 fc77 	bl	8102a9a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 81021ac:	4603      	mov	r3, r0
 81021ae:	781a      	ldrb	r2, [r3, #0]
 81021b0:	68fb      	ldr	r3, [r7, #12]
 81021b2:	711a      	strb	r2, [r3, #4]
 81021b4:	68fb      	ldr	r3, [r7, #12]
 81021b6:	4618      	mov	r0, r3
 81021b8:	3710      	adds	r7, #16
 81021ba:	46bd      	mov	sp, r7
 81021bc:	bd80      	pop	{r7, pc}

081021be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 81021be:	b480      	push	{r7}
 81021c0:	b083      	sub	sp, #12
 81021c2:	af00      	add	r7, sp, #0
 81021c4:	6078      	str	r0, [r7, #4]
 81021c6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 81021c8:	687b      	ldr	r3, [r7, #4]
 81021ca:	683a      	ldr	r2, [r7, #0]
 81021cc:	601a      	str	r2, [r3, #0]
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	4618      	mov	r0, r3
 81021d2:	370c      	adds	r7, #12
 81021d4:	46bd      	mov	sp, r7
 81021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021da:	4770      	bx	lr

081021dc <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 81021dc:	b480      	push	{r7}
 81021de:	b083      	sub	sp, #12
 81021e0:	af00      	add	r7, sp, #0
 81021e2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	695b      	ldr	r3, [r3, #20]
 81021e8:	4618      	mov	r0, r3
 81021ea:	370c      	adds	r7, #12
 81021ec:	46bd      	mov	sp, r7
 81021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f2:	4770      	bx	lr

081021f4 <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 81021f4:	b580      	push	{r7, lr}
 81021f6:	b082      	sub	sp, #8
 81021f8:	af00      	add	r7, sp, #0
 81021fa:	6078      	str	r0, [r7, #4]
 81021fc:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 81021fe:	6839      	ldr	r1, [r7, #0]
 8102200:	6878      	ldr	r0, [r7, #4]
 8102202:	f000 fc55 	bl	8102ab0 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 8102206:	bf00      	nop
 8102208:	3708      	adds	r7, #8
 810220a:	46bd      	mov	sp, r7
 810220c:	bd80      	pop	{r7, pc}

0810220e <_ZNSt15__new_allocatorI8SMessageEC1Ev>:
 810220e:	b480      	push	{r7}
 8102210:	b083      	sub	sp, #12
 8102212:	af00      	add	r7, sp, #0
 8102214:	6078      	str	r0, [r7, #4]
 8102216:	687b      	ldr	r3, [r7, #4]
 8102218:	4618      	mov	r0, r3
 810221a:	370c      	adds	r7, #12
 810221c:	46bd      	mov	sp, r7
 810221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102222:	4770      	bx	lr

08102224 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8102224:	b580      	push	{r7, lr}
 8102226:	b084      	sub	sp, #16
 8102228:	af00      	add	r7, sp, #0
 810222a:	60f8      	str	r0, [r7, #12]
 810222c:	60b9      	str	r1, [r7, #8]
 810222e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8102230:	687a      	ldr	r2, [r7, #4]
 8102232:	68b9      	ldr	r1, [r7, #8]
 8102234:	68f8      	ldr	r0, [r7, #12]
 8102236:	f000 fc46 	bl	8102ac6 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
 810223a:	bf00      	nop
 810223c:	3710      	adds	r7, #16
 810223e:	46bd      	mov	sp, r7
 8102240:	bd80      	pop	{r7, pc}

08102242 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102242:	b480      	push	{r7}
 8102244:	b083      	sub	sp, #12
 8102246:	af00      	add	r7, sp, #0
 8102248:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810224a:	687b      	ldr	r3, [r7, #4]
 810224c:	4618      	mov	r0, r3
 810224e:	370c      	adds	r7, #12
 8102250:	46bd      	mov	sp, r7
 8102252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102256:	4770      	bx	lr

08102258 <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8102258:	b5b0      	push	{r4, r5, r7, lr}
 810225a:	b084      	sub	sp, #16
 810225c:	af00      	add	r7, sp, #0
 810225e:	60f8      	str	r0, [r7, #12]
 8102260:	60b9      	str	r1, [r7, #8]
 8102262:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102264:	68bb      	ldr	r3, [r7, #8]
 8102266:	4619      	mov	r1, r3
 8102268:	2018      	movs	r0, #24
 810226a:	f7fe fd8b 	bl	8100d84 <_ZnwjPv>
 810226e:	4604      	mov	r4, r0
 8102270:	6878      	ldr	r0, [r7, #4]
 8102272:	f7ff ffe6 	bl	8102242 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8102276:	4603      	mov	r3, r0
 8102278:	461d      	mov	r5, r3
 810227a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810227c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810227e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8102282:	e884 0003 	stmia.w	r4, {r0, r1}
 8102286:	bf00      	nop
 8102288:	3710      	adds	r7, #16
 810228a:	46bd      	mov	sp, r7
 810228c:	bdb0      	pop	{r4, r5, r7, pc}

0810228e <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810228e:	b480      	push	{r7}
 8102290:	b083      	sub	sp, #12
 8102292:	af00      	add	r7, sp, #0
 8102294:	6078      	str	r0, [r7, #4]
 8102296:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8102298:	683b      	ldr	r3, [r7, #0]
 810229a:	681a      	ldr	r2, [r3, #0]
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	601a      	str	r2, [r3, #0]
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	4618      	mov	r0, r3
 81022a4:	370c      	adds	r7, #12
 81022a6:	46bd      	mov	sp, r7
 81022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ac:	4770      	bx	lr

081022ae <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 81022ae:	b590      	push	{r4, r7, lr}
 81022b0:	b087      	sub	sp, #28
 81022b2:	af00      	add	r7, sp, #0
 81022b4:	60f8      	str	r0, [r7, #12]
 81022b6:	60b9      	str	r1, [r7, #8]
 81022b8:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 81022ba:	68f8      	ldr	r0, [r7, #12]
 81022bc:	f000 fc16 	bl	8102aec <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81022c0:	4604      	mov	r4, r0
 81022c2:	68f8      	ldr	r0, [r7, #12]
 81022c4:	f000 fc24 	bl	8102b10 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81022c8:	4603      	mov	r3, r0
 81022ca:	1ae2      	subs	r2, r4, r3
 81022cc:	68bb      	ldr	r3, [r7, #8]
 81022ce:	429a      	cmp	r2, r3
 81022d0:	bf34      	ite	cc
 81022d2:	2301      	movcc	r3, #1
 81022d4:	2300      	movcs	r3, #0
 81022d6:	b2db      	uxtb	r3, r3
 81022d8:	2b00      	cmp	r3, #0
 81022da:	d002      	beq.n	81022e2 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 81022dc:	6878      	ldr	r0, [r7, #4]
 81022de:	f019 fba3 	bl	811ba28 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 81022e2:	68f8      	ldr	r0, [r7, #12]
 81022e4:	f000 fc14 	bl	8102b10 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81022e8:	4604      	mov	r4, r0
 81022ea:	68f8      	ldr	r0, [r7, #12]
 81022ec:	f000 fc10 	bl	8102b10 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81022f0:	4603      	mov	r3, r0
 81022f2:	613b      	str	r3, [r7, #16]
 81022f4:	f107 0208 	add.w	r2, r7, #8
 81022f8:	f107 0310 	add.w	r3, r7, #16
 81022fc:	4611      	mov	r1, r2
 81022fe:	4618      	mov	r0, r3
 8102300:	f000 fc1c 	bl	8102b3c <_ZSt3maxIjERKT_S2_S2_>
 8102304:	4603      	mov	r3, r0
 8102306:	681b      	ldr	r3, [r3, #0]
 8102308:	4423      	add	r3, r4
 810230a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 810230c:	68f8      	ldr	r0, [r7, #12]
 810230e:	f000 fbff 	bl	8102b10 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8102312:	4602      	mov	r2, r0
 8102314:	697b      	ldr	r3, [r7, #20]
 8102316:	4293      	cmp	r3, r2
 8102318:	d306      	bcc.n	8102328 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 810231a:	68f8      	ldr	r0, [r7, #12]
 810231c:	f000 fbe6 	bl	8102aec <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8102320:	4602      	mov	r2, r0
 8102322:	697b      	ldr	r3, [r7, #20]
 8102324:	4293      	cmp	r3, r2
 8102326:	d904      	bls.n	8102332 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 8102328:	68f8      	ldr	r0, [r7, #12]
 810232a:	f000 fbdf 	bl	8102aec <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 810232e:	4603      	mov	r3, r0
 8102330:	e000      	b.n	8102334 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 8102332:	697b      	ldr	r3, [r7, #20]
      }
 8102334:	4618      	mov	r0, r3
 8102336:	371c      	adds	r7, #28
 8102338:	46bd      	mov	sp, r7
 810233a:	bd90      	pop	{r4, r7, pc}

0810233c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810233c:	b580      	push	{r7, lr}
 810233e:	b084      	sub	sp, #16
 8102340:	af00      	add	r7, sp, #0
 8102342:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8102344:	687a      	ldr	r2, [r7, #4]
 8102346:	f107 030c 	add.w	r3, r7, #12
 810234a:	4611      	mov	r1, r2
 810234c:	4618      	mov	r0, r3
 810234e:	f7ff ff9e 	bl	810228e <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8102352:	68fb      	ldr	r3, [r7, #12]
 8102354:	4618      	mov	r0, r3
 8102356:	3710      	adds	r7, #16
 8102358:	46bd      	mov	sp, r7
 810235a:	bd80      	pop	{r7, pc}

0810235c <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 810235c:	b590      	push	{r4, r7, lr}
 810235e:	b083      	sub	sp, #12
 8102360:	af00      	add	r7, sp, #0
 8102362:	6078      	str	r0, [r7, #4]
 8102364:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8102366:	6878      	ldr	r0, [r7, #4]
 8102368:	f000 f83a 	bl	81023e0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810236c:	4603      	mov	r3, r0
 810236e:	681c      	ldr	r4, [r3, #0]
 8102370:	6838      	ldr	r0, [r7, #0]
 8102372:	f000 f835 	bl	81023e0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102376:	4603      	mov	r3, r0
 8102378:	681b      	ldr	r3, [r3, #0]
 810237a:	1ae3      	subs	r3, r4, r3
 810237c:	10db      	asrs	r3, r3, #3
 810237e:	4a03      	ldr	r2, [pc, #12]	@ (810238c <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8102380:	fb02 f303 	mul.w	r3, r2, r3
 8102384:	4618      	mov	r0, r3
 8102386:	370c      	adds	r7, #12
 8102388:	46bd      	mov	sp, r7
 810238a:	bd90      	pop	{r4, r7, pc}
 810238c:	aaaaaaab 	.word	0xaaaaaaab

08102390 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8102390:	b580      	push	{r7, lr}
 8102392:	b082      	sub	sp, #8
 8102394:	af00      	add	r7, sp, #0
 8102396:	6078      	str	r0, [r7, #4]
 8102398:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 810239a:	683b      	ldr	r3, [r7, #0]
 810239c:	2b00      	cmp	r3, #0
 810239e:	d006      	beq.n	81023ae <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 81023a0:	687b      	ldr	r3, [r7, #4]
 81023a2:	6839      	ldr	r1, [r7, #0]
 81023a4:	4618      	mov	r0, r3
 81023a6:	f000 fbdd 	bl	8102b64 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 81023aa:	4603      	mov	r3, r0
 81023ac:	e000      	b.n	81023b0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 81023ae:	2300      	movs	r3, #0
      }
 81023b0:	4618      	mov	r0, r3
 81023b2:	3708      	adds	r7, #8
 81023b4:	46bd      	mov	sp, r7
 81023b6:	bd80      	pop	{r7, pc}

081023b8 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 81023b8:	b590      	push	{r4, r7, lr}
 81023ba:	b087      	sub	sp, #28
 81023bc:	af02      	add	r7, sp, #8
 81023be:	60f8      	str	r0, [r7, #12]
 81023c0:	60b9      	str	r1, [r7, #8]
 81023c2:	607a      	str	r2, [r7, #4]
 81023c4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 81023c6:	f88d 4000 	strb.w	r4, [sp]
 81023ca:	683b      	ldr	r3, [r7, #0]
 81023cc:	687a      	ldr	r2, [r7, #4]
 81023ce:	68b9      	ldr	r1, [r7, #8]
 81023d0:	68f8      	ldr	r0, [r7, #12]
 81023d2:	f000 fbd6 	bl	8102b82 <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 81023d6:	4603      	mov	r3, r0
      }
 81023d8:	4618      	mov	r0, r3
 81023da:	3714      	adds	r7, #20
 81023dc:	46bd      	mov	sp, r7
 81023de:	bd90      	pop	{r4, r7, pc}

081023e0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 81023e0:	b480      	push	{r7}
 81023e2:	b083      	sub	sp, #12
 81023e4:	af00      	add	r7, sp, #0
 81023e6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	4618      	mov	r0, r3
 81023ec:	370c      	adds	r7, #12
 81023ee:	46bd      	mov	sp, r7
 81023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023f4:	4770      	bx	lr

081023f6 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 81023f6:	b590      	push	{r4, r7, lr}
 81023f8:	b085      	sub	sp, #20
 81023fa:	af00      	add	r7, sp, #0
 81023fc:	60f8      	str	r0, [r7, #12]
 81023fe:	60b9      	str	r1, [r7, #8]
 8102400:	607a      	str	r2, [r7, #4]
 8102402:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8102404:	68f8      	ldr	r0, [r7, #12]
 8102406:	f000 fbce 	bl	8102ba6 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 810240a:	4604      	mov	r4, r0
 810240c:	68b8      	ldr	r0, [r7, #8]
 810240e:	f000 fbca 	bl	8102ba6 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 8102412:	4601      	mov	r1, r0
 8102414:	683b      	ldr	r3, [r7, #0]
 8102416:	687a      	ldr	r2, [r7, #4]
 8102418:	4620      	mov	r0, r4
 810241a:	f000 fbd3 	bl	8102bc4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>
 810241e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8102420:	4618      	mov	r0, r3
 8102422:	3714      	adds	r7, #20
 8102424:	46bd      	mov	sp, r7
 8102426:	bd90      	pop	{r4, r7, pc}

08102428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8102428:	b480      	push	{r7}
 810242a:	b083      	sub	sp, #12
 810242c:	af00      	add	r7, sp, #0
 810242e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	3304      	adds	r3, #4
 8102434:	4618      	mov	r0, r3
 8102436:	370c      	adds	r7, #12
 8102438:	46bd      	mov	sp, r7
 810243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810243e:	4770      	bx	lr

08102440 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102440:	b590      	push	{r4, r7, lr}
 8102442:	b087      	sub	sp, #28
 8102444:	af00      	add	r7, sp, #0
 8102446:	60f8      	str	r0, [r7, #12]
 8102448:	60b9      	str	r1, [r7, #8]
 810244a:	607a      	str	r2, [r7, #4]
 810244c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 810244e:	e01a      	b.n	8102486 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8102450:	68fc      	ldr	r4, [r7, #12]
 8102452:	68b8      	ldr	r0, [r7, #8]
 8102454:	f000 fa76 	bl	8102944 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102458:	4603      	mov	r3, r0
 810245a:	683a      	ldr	r2, [r7, #0]
 810245c:	4619      	mov	r1, r3
 810245e:	4620      	mov	r0, r4
 8102460:	f7ff fc88 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102464:	4603      	mov	r3, r0
 8102466:	f083 0301 	eor.w	r3, r3, #1
 810246a:	b2db      	uxtb	r3, r3
 810246c:	2b00      	cmp	r3, #0
 810246e:	d006      	beq.n	810247e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8102470:	68bb      	ldr	r3, [r7, #8]
 8102472:	607b      	str	r3, [r7, #4]
 8102474:	68b8      	ldr	r0, [r7, #8]
 8102476:	f7ff fd80 	bl	8101f7a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 810247a:	60b8      	str	r0, [r7, #8]
 810247c:	e003      	b.n	8102486 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 810247e:	68b8      	ldr	r0, [r7, #8]
 8102480:	f7ff fd6f 	bl	8101f62 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102484:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8102486:	68bb      	ldr	r3, [r7, #8]
 8102488:	2b00      	cmp	r3, #0
 810248a:	d1e1      	bne.n	8102450 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 810248c:	f107 0314 	add.w	r3, r7, #20
 8102490:	6879      	ldr	r1, [r7, #4]
 8102492:	4618      	mov	r0, r3
 8102494:	f7ff fe93 	bl	81021be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102498:	697b      	ldr	r3, [r7, #20]
    }
 810249a:	4618      	mov	r0, r3
 810249c:	371c      	adds	r7, #28
 810249e:	46bd      	mov	sp, r7
 81024a0:	bd90      	pop	{r4, r7, pc}

081024a2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 81024a2:	b580      	push	{r7, lr}
 81024a4:	b082      	sub	sp, #8
 81024a6:	af00      	add	r7, sp, #0
 81024a8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 81024aa:	6878      	ldr	r0, [r7, #4]
 81024ac:	f000 fa4a 	bl	8102944 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81024b0:	4603      	mov	r3, r0
 81024b2:	4618      	mov	r0, r3
 81024b4:	3708      	adds	r7, #8
 81024b6:	46bd      	mov	sp, r7
 81024b8:	bd80      	pop	{r7, pc}

081024ba <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 81024ba:	b590      	push	{r4, r7, lr}
 81024bc:	b083      	sub	sp, #12
 81024be:	af00      	add	r7, sp, #0
 81024c0:	6078      	str	r0, [r7, #4]
 81024c2:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 81024c4:	6878      	ldr	r0, [r7, #4]
 81024c6:	f7ff f9de 	bl	8101886 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 81024ca:	4604      	mov	r4, r0
 81024cc:	6878      	ldr	r0, [r7, #4]
 81024ce:	f7ff ffab 	bl	8102428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81024d2:	4602      	mov	r2, r0
 81024d4:	683b      	ldr	r3, [r7, #0]
 81024d6:	4621      	mov	r1, r4
 81024d8:	6878      	ldr	r0, [r7, #4]
 81024da:	f7ff ffb1 	bl	8102440 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 81024de:	4603      	mov	r3, r0
 81024e0:	4618      	mov	r0, r3
 81024e2:	370c      	adds	r7, #12
 81024e4:	46bd      	mov	sp, r7
 81024e6:	bd90      	pop	{r4, r7, pc}

081024e8 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 81024e8:	b480      	push	{r7}
 81024ea:	b083      	sub	sp, #12
 81024ec:	af00      	add	r7, sp, #0
 81024ee:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 81024f0:	bf00      	nop
 81024f2:	4618      	mov	r0, r3
 81024f4:	370c      	adds	r7, #12
 81024f6:	46bd      	mov	sp, r7
 81024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024fc:	4770      	bx	lr

081024fe <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 81024fe:	b580      	push	{r7, lr}
 8102500:	b082      	sub	sp, #8
 8102502:	af00      	add	r7, sp, #0
 8102504:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	3310      	adds	r3, #16
 810250a:	4618      	mov	r0, r3
 810250c:	f000 fb6b 	bl	8102be6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8102510:	4603      	mov	r3, r0
 8102512:	4618      	mov	r0, r3
 8102514:	3708      	adds	r7, #8
 8102516:	46bd      	mov	sp, r7
 8102518:	bd80      	pop	{r7, pc}

0810251a <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 810251a:	b580      	push	{r7, lr}
 810251c:	b082      	sub	sp, #8
 810251e:	af00      	add	r7, sp, #0
 8102520:	6078      	str	r0, [r7, #4]
 8102522:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8102524:	687b      	ldr	r3, [r7, #4]
 8102526:	6839      	ldr	r1, [r7, #0]
 8102528:	4618      	mov	r0, r3
 810252a:	f000 fb68 	bl	8102bfe <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	4618      	mov	r0, r3
 8102532:	3708      	adds	r7, #8
 8102534:	46bd      	mov	sp, r7
 8102536:	bd80      	pop	{r7, pc}

08102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102538:	b480      	push	{r7}
 810253a:	b083      	sub	sp, #12
 810253c:	af00      	add	r7, sp, #0
 810253e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	4618      	mov	r0, r3
 8102544:	370c      	adds	r7, #12
 8102546:	46bd      	mov	sp, r7
 8102548:	f85d 7b04 	ldr.w	r7, [sp], #4
 810254c:	4770      	bx	lr

0810254e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810254e:	b480      	push	{r7}
 8102550:	b083      	sub	sp, #12
 8102552:	af00      	add	r7, sp, #0
 8102554:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	4618      	mov	r0, r3
 810255a:	370c      	adds	r7, #12
 810255c:	46bd      	mov	sp, r7
 810255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102562:	4770      	bx	lr

08102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102564:	b480      	push	{r7}
 8102566:	b083      	sub	sp, #12
 8102568:	af00      	add	r7, sp, #0
 810256a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	4618      	mov	r0, r3
 8102570:	370c      	adds	r7, #12
 8102572:	46bd      	mov	sp, r7
 8102574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102578:	4770      	bx	lr

0810257a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 810257a:	b5b0      	push	{r4, r5, r7, lr}
 810257c:	b084      	sub	sp, #16
 810257e:	af00      	add	r7, sp, #0
 8102580:	60f8      	str	r0, [r7, #12]
 8102582:	60b9      	str	r1, [r7, #8]
 8102584:	607a      	str	r2, [r7, #4]
 8102586:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8102588:	68fb      	ldr	r3, [r7, #12]
 810258a:	68ba      	ldr	r2, [r7, #8]
 810258c:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 810258e:	6878      	ldr	r0, [r7, #4]
 8102590:	f7ff ffd2 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102594:	4604      	mov	r4, r0
 8102596:	6838      	ldr	r0, [r7, #0]
 8102598:	f7ff ffd9 	bl	810254e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810259c:	4605      	mov	r5, r0
 810259e:	6a38      	ldr	r0, [r7, #32]
 81025a0:	f7ff ffe0 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81025a4:	4603      	mov	r3, r0
 81025a6:	462a      	mov	r2, r5
 81025a8:	4621      	mov	r1, r4
 81025aa:	68b8      	ldr	r0, [r7, #8]
 81025ac:	f000 fb36 	bl	8102c1c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 81025b0:	4602      	mov	r2, r0
 81025b2:	68fb      	ldr	r3, [r7, #12]
 81025b4:	605a      	str	r2, [r3, #4]
	  { }
 81025b6:	68fb      	ldr	r3, [r7, #12]
 81025b8:	4618      	mov	r0, r3
 81025ba:	3710      	adds	r7, #16
 81025bc:	46bd      	mov	sp, r7
 81025be:	bdb0      	pop	{r4, r5, r7, pc}

081025c0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81025c0:	b590      	push	{r4, r7, lr}
 81025c2:	b08d      	sub	sp, #52	@ 0x34
 81025c4:	af00      	add	r7, sp, #0
 81025c6:	60f8      	str	r0, [r7, #12]
 81025c8:	60b9      	str	r1, [r7, #8]
 81025ca:	607a      	str	r2, [r7, #4]
 81025cc:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 81025ce:	1d3b      	adds	r3, r7, #4
 81025d0:	4618      	mov	r0, r3
 81025d2:	f000 fb46 	bl	8102c62 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 81025d6:	4603      	mov	r3, r0
 81025d8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 81025da:	69bc      	ldr	r4, [r7, #24]
 81025dc:	68b8      	ldr	r0, [r7, #8]
 81025de:	f7ff ff23 	bl	8102428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81025e2:	4603      	mov	r3, r0
 81025e4:	429c      	cmp	r4, r3
 81025e6:	bf0c      	ite	eq
 81025e8:	2301      	moveq	r3, #1
 81025ea:	2300      	movne	r3, #0
 81025ec:	b2db      	uxtb	r3, r3
 81025ee:	2b00      	cmp	r3, #0
 81025f0:	d030      	beq.n	8102654 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 81025f2:	68b8      	ldr	r0, [r7, #8]
 81025f4:	f7ff fdf2 	bl	81021dc <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 81025f8:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 81025fa:	2b00      	cmp	r3, #0
 81025fc:	d013      	beq.n	8102626 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 81025fe:	68bc      	ldr	r4, [r7, #8]
 8102600:	68b8      	ldr	r0, [r7, #8]
 8102602:	f000 fb3f 	bl	8102c84 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102606:	4603      	mov	r3, r0
 8102608:	681b      	ldr	r3, [r3, #0]
 810260a:	4618      	mov	r0, r3
 810260c:	f7ff ff49 	bl	81024a2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102610:	4603      	mov	r3, r0
 8102612:	683a      	ldr	r2, [r7, #0]
 8102614:	4619      	mov	r1, r3
 8102616:	4620      	mov	r0, r4
 8102618:	f7ff fbac 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810261c:	4603      	mov	r3, r0
 810261e:	2b00      	cmp	r3, #0
 8102620:	d001      	beq.n	8102626 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8102622:	2301      	movs	r3, #1
 8102624:	e000      	b.n	8102628 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8102626:	2300      	movs	r3, #0
	  if (size() > 0
 8102628:	2b00      	cmp	r3, #0
 810262a:	d00c      	beq.n	8102646 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 810262c:	2300      	movs	r3, #0
 810262e:	61fb      	str	r3, [r7, #28]
 8102630:	68b8      	ldr	r0, [r7, #8]
 8102632:	f000 fb27 	bl	8102c84 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102636:	4602      	mov	r2, r0
 8102638:	f107 031c 	add.w	r3, r7, #28
 810263c:	4619      	mov	r1, r3
 810263e:	68f8      	ldr	r0, [r7, #12]
 8102640:	f000 f9ce 	bl	81029e0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102644:	e0db      	b.n	81027fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102646:	68fb      	ldr	r3, [r7, #12]
 8102648:	683a      	ldr	r2, [r7, #0]
 810264a:	68b9      	ldr	r1, [r7, #8]
 810264c:	4618      	mov	r0, r3
 810264e:	f7ff fcf1 	bl	8102034 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102652:	e0d4      	b.n	81027fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8102654:	68bc      	ldr	r4, [r7, #8]
 8102656:	69bb      	ldr	r3, [r7, #24]
 8102658:	4618      	mov	r0, r3
 810265a:	f7ff ff22 	bl	81024a2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810265e:	4603      	mov	r3, r0
 8102660:	461a      	mov	r2, r3
 8102662:	6839      	ldr	r1, [r7, #0]
 8102664:	4620      	mov	r0, r4
 8102666:	f7ff fb85 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810266a:	4603      	mov	r3, r0
 810266c:	2b00      	cmp	r3, #0
 810266e:	d057      	beq.n	8102720 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8102670:	69bb      	ldr	r3, [r7, #24]
 8102672:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8102674:	69bc      	ldr	r4, [r7, #24]
 8102676:	68b8      	ldr	r0, [r7, #8]
 8102678:	f000 fb10 	bl	8102c9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810267c:	4603      	mov	r3, r0
 810267e:	681b      	ldr	r3, [r3, #0]
 8102680:	429c      	cmp	r4, r3
 8102682:	bf0c      	ite	eq
 8102684:	2301      	moveq	r3, #1
 8102686:	2300      	movne	r3, #0
 8102688:	b2db      	uxtb	r3, r3
 810268a:	2b00      	cmp	r3, #0
 810268c:	d00d      	beq.n	81026aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 810268e:	68b8      	ldr	r0, [r7, #8]
 8102690:	f000 fb04 	bl	8102c9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8102694:	4604      	mov	r4, r0
 8102696:	68b8      	ldr	r0, [r7, #8]
 8102698:	f000 fb00 	bl	8102c9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810269c:	4603      	mov	r3, r0
 810269e:	461a      	mov	r2, r3
 81026a0:	4621      	mov	r1, r4
 81026a2:	68f8      	ldr	r0, [r7, #12]
 81026a4:	f000 fb06 	bl	8102cb4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 81026a8:	e0a9      	b.n	81027fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 81026aa:	68bc      	ldr	r4, [r7, #8]
 81026ac:	f107 0314 	add.w	r3, r7, #20
 81026b0:	4618      	mov	r0, r3
 81026b2:	f000 f984 	bl	81029be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 81026b6:	4603      	mov	r3, r0
 81026b8:	681b      	ldr	r3, [r3, #0]
 81026ba:	4618      	mov	r0, r3
 81026bc:	f7ff fef1 	bl	81024a2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81026c0:	4603      	mov	r3, r0
 81026c2:	683a      	ldr	r2, [r7, #0]
 81026c4:	4619      	mov	r1, r3
 81026c6:	4620      	mov	r0, r4
 81026c8:	f7ff fb54 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81026cc:	4603      	mov	r3, r0
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d01f      	beq.n	8102712 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 81026d2:	697b      	ldr	r3, [r7, #20]
 81026d4:	4618      	mov	r0, r3
 81026d6:	f7ff fc44 	bl	8101f62 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81026da:	4603      	mov	r3, r0
 81026dc:	2b00      	cmp	r3, #0
 81026de:	bf0c      	ite	eq
 81026e0:	2301      	moveq	r3, #1
 81026e2:	2300      	movne	r3, #0
 81026e4:	b2db      	uxtb	r3, r3
 81026e6:	2b00      	cmp	r3, #0
 81026e8:	d00a      	beq.n	8102700 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 81026ea:	2300      	movs	r3, #0
 81026ec:	623b      	str	r3, [r7, #32]
 81026ee:	f107 0214 	add.w	r2, r7, #20
 81026f2:	f107 0320 	add.w	r3, r7, #32
 81026f6:	4619      	mov	r1, r3
 81026f8:	68f8      	ldr	r0, [r7, #12]
 81026fa:	f000 f971 	bl	81029e0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81026fe:	e07e      	b.n	81027fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8102700:	f107 0218 	add.w	r2, r7, #24
 8102704:	f107 0318 	add.w	r3, r7, #24
 8102708:	4619      	mov	r1, r3
 810270a:	68f8      	ldr	r0, [r7, #12]
 810270c:	f000 fad2 	bl	8102cb4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102710:	e075      	b.n	81027fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102712:	68fb      	ldr	r3, [r7, #12]
 8102714:	683a      	ldr	r2, [r7, #0]
 8102716:	68b9      	ldr	r1, [r7, #8]
 8102718:	4618      	mov	r0, r3
 810271a:	f7ff fc8b 	bl	8102034 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810271e:	e06e      	b.n	81027fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8102720:	68bc      	ldr	r4, [r7, #8]
 8102722:	69bb      	ldr	r3, [r7, #24]
 8102724:	4618      	mov	r0, r3
 8102726:	f7ff febc 	bl	81024a2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810272a:	4603      	mov	r3, r0
 810272c:	683a      	ldr	r2, [r7, #0]
 810272e:	4619      	mov	r1, r3
 8102730:	4620      	mov	r0, r4
 8102732:	f7ff fb1f 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102736:	4603      	mov	r3, r0
 8102738:	2b00      	cmp	r3, #0
 810273a:	d056      	beq.n	81027ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 810273c:	69bb      	ldr	r3, [r7, #24]
 810273e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8102740:	69bc      	ldr	r4, [r7, #24]
 8102742:	68b8      	ldr	r0, [r7, #8]
 8102744:	f000 fa9e 	bl	8102c84 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102748:	4603      	mov	r3, r0
 810274a:	681b      	ldr	r3, [r3, #0]
 810274c:	429c      	cmp	r4, r3
 810274e:	bf0c      	ite	eq
 8102750:	2301      	moveq	r3, #1
 8102752:	2300      	movne	r3, #0
 8102754:	b2db      	uxtb	r3, r3
 8102756:	2b00      	cmp	r3, #0
 8102758:	d00c      	beq.n	8102774 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 810275a:	2300      	movs	r3, #0
 810275c:	627b      	str	r3, [r7, #36]	@ 0x24
 810275e:	68b8      	ldr	r0, [r7, #8]
 8102760:	f000 fa90 	bl	8102c84 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102764:	4602      	mov	r2, r0
 8102766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810276a:	4619      	mov	r1, r3
 810276c:	68f8      	ldr	r0, [r7, #12]
 810276e:	f000 f937 	bl	81029e0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102772:	e044      	b.n	81027fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8102774:	68bc      	ldr	r4, [r7, #8]
 8102776:	f107 0310 	add.w	r3, r7, #16
 810277a:	4618      	mov	r0, r3
 810277c:	f000 fab3 	bl	8102ce6 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 8102780:	4603      	mov	r3, r0
 8102782:	681b      	ldr	r3, [r3, #0]
 8102784:	4618      	mov	r0, r3
 8102786:	f7ff fe8c 	bl	81024a2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810278a:	4603      	mov	r3, r0
 810278c:	461a      	mov	r2, r3
 810278e:	6839      	ldr	r1, [r7, #0]
 8102790:	4620      	mov	r0, r4
 8102792:	f7ff faef 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102796:	4603      	mov	r3, r0
 8102798:	2b00      	cmp	r3, #0
 810279a:	d01f      	beq.n	81027dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 810279c:	69bb      	ldr	r3, [r7, #24]
 810279e:	4618      	mov	r0, r3
 81027a0:	f7ff fbdf 	bl	8101f62 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81027a4:	4603      	mov	r3, r0
 81027a6:	2b00      	cmp	r3, #0
 81027a8:	bf0c      	ite	eq
 81027aa:	2301      	moveq	r3, #1
 81027ac:	2300      	movne	r3, #0
 81027ae:	b2db      	uxtb	r3, r3
 81027b0:	2b00      	cmp	r3, #0
 81027b2:	d00a      	beq.n	81027ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 81027b4:	2300      	movs	r3, #0
 81027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 81027b8:	f107 0218 	add.w	r2, r7, #24
 81027bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81027c0:	4619      	mov	r1, r3
 81027c2:	68f8      	ldr	r0, [r7, #12]
 81027c4:	f000 f90c 	bl	81029e0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81027c8:	e019      	b.n	81027fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 81027ca:	f107 0210 	add.w	r2, r7, #16
 81027ce:	f107 0310 	add.w	r3, r7, #16
 81027d2:	4619      	mov	r1, r3
 81027d4:	68f8      	ldr	r0, [r7, #12]
 81027d6:	f000 fa6d 	bl	8102cb4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 81027da:	e010      	b.n	81027fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 81027dc:	68fb      	ldr	r3, [r7, #12]
 81027de:	683a      	ldr	r2, [r7, #0]
 81027e0:	68b9      	ldr	r1, [r7, #8]
 81027e2:	4618      	mov	r0, r3
 81027e4:	f7ff fc26 	bl	8102034 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 81027e8:	e009      	b.n	81027fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 81027ea:	2300      	movs	r3, #0
 81027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81027ee:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 81027f2:	f107 0318 	add.w	r3, r7, #24
 81027f6:	4619      	mov	r1, r3
 81027f8:	68f8      	ldr	r0, [r7, #12]
 81027fa:	f000 f8f1 	bl	81029e0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81027fe:	68f8      	ldr	r0, [r7, #12]
 8102800:	3734      	adds	r7, #52	@ 0x34
 8102802:	46bd      	mov	sp, r7
 8102804:	bd90      	pop	{r4, r7, pc}

08102806 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102806:	b480      	push	{r7}
 8102808:	b083      	sub	sp, #12
 810280a:	af00      	add	r7, sp, #0
 810280c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810280e:	687b      	ldr	r3, [r7, #4]
 8102810:	4618      	mov	r0, r3
 8102812:	370c      	adds	r7, #12
 8102814:	46bd      	mov	sp, r7
 8102816:	f85d 7b04 	ldr.w	r7, [sp], #4
 810281a:	4770      	bx	lr

0810281c <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 810281c:	b590      	push	{r4, r7, lr}
 810281e:	b083      	sub	sp, #12
 8102820:	af00      	add	r7, sp, #0
 8102822:	6078      	str	r0, [r7, #4]
 8102824:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8102826:	687c      	ldr	r4, [r7, #4]
 8102828:	6838      	ldr	r0, [r7, #0]
 810282a:	f7ff ffec 	bl	8102806 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 810282e:	4603      	mov	r3, r0
 8102830:	4619      	mov	r1, r3
 8102832:	4620      	mov	r0, r4
 8102834:	f000 fa68 	bl	8102d08 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	4618      	mov	r0, r3
 810283c:	370c      	adds	r7, #12
 810283e:	46bd      	mov	sp, r7
 8102840:	bd90      	pop	{r4, r7, pc}

08102842 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8102842:	b480      	push	{r7}
 8102844:	b083      	sub	sp, #12
 8102846:	af00      	add	r7, sp, #0
 8102848:	6078      	str	r0, [r7, #4]
 810284a:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	683a      	ldr	r2, [r7, #0]
 8102850:	6812      	ldr	r2, [r2, #0]
 8102852:	601a      	str	r2, [r3, #0]
      { }
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	4618      	mov	r0, r3
 8102858:	370c      	adds	r7, #12
 810285a:	46bd      	mov	sp, r7
 810285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102860:	4770      	bx	lr

08102862 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102862:	b480      	push	{r7}
 8102864:	b083      	sub	sp, #12
 8102866:	af00      	add	r7, sp, #0
 8102868:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	4618      	mov	r0, r3
 810286e:	370c      	adds	r7, #12
 8102870:	46bd      	mov	sp, r7
 8102872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102876:	4770      	bx	lr

08102878 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8102878:	b5b0      	push	{r4, r5, r7, lr}
 810287a:	b084      	sub	sp, #16
 810287c:	af00      	add	r7, sp, #0
 810287e:	60f8      	str	r0, [r7, #12]
 8102880:	60b9      	str	r1, [r7, #8]
 8102882:	607a      	str	r2, [r7, #4]
 8102884:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8102886:	68fb      	ldr	r3, [r7, #12]
 8102888:	68ba      	ldr	r2, [r7, #8]
 810288a:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 810288c:	6878      	ldr	r0, [r7, #4]
 810288e:	f7ff fe53 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102892:	4604      	mov	r4, r0
 8102894:	6838      	ldr	r0, [r7, #0]
 8102896:	f7ff ffe4 	bl	8102862 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810289a:	4605      	mov	r5, r0
 810289c:	6a38      	ldr	r0, [r7, #32]
 810289e:	f7ff fe61 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81028a2:	4603      	mov	r3, r0
 81028a4:	462a      	mov	r2, r5
 81028a6:	4621      	mov	r1, r4
 81028a8:	68b8      	ldr	r0, [r7, #8]
 81028aa:	f000 fa40 	bl	8102d2e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 81028ae:	4602      	mov	r2, r0
 81028b0:	68fb      	ldr	r3, [r7, #12]
 81028b2:	605a      	str	r2, [r3, #4]
	  { }
 81028b4:	68fb      	ldr	r3, [r7, #12]
 81028b6:	4618      	mov	r0, r3
 81028b8:	3710      	adds	r7, #16
 81028ba:	46bd      	mov	sp, r7
 81028bc:	bdb0      	pop	{r4, r5, r7, pc}

081028be <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 81028be:	b590      	push	{r4, r7, lr}
 81028c0:	b083      	sub	sp, #12
 81028c2:	af00      	add	r7, sp, #0
 81028c4:	6078      	str	r0, [r7, #4]
 81028c6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 81028c8:	6878      	ldr	r0, [r7, #4]
 81028ca:	f000 fa53 	bl	8102d74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81028ce:	4604      	mov	r4, r0
 81028d0:	6838      	ldr	r0, [r7, #0]
 81028d2:	f7ff fe14 	bl	81024fe <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81028d6:	4603      	mov	r3, r0
 81028d8:	4619      	mov	r1, r3
 81028da:	4620      	mov	r0, r4
 81028dc:	f000 fa55 	bl	8102d8a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 81028e0:	bf00      	nop
 81028e2:	370c      	adds	r7, #12
 81028e4:	46bd      	mov	sp, r7
 81028e6:	bd90      	pop	{r4, r7, pc}

081028e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 81028e8:	b580      	push	{r7, lr}
 81028ea:	b082      	sub	sp, #8
 81028ec:	af00      	add	r7, sp, #0
 81028ee:	6078      	str	r0, [r7, #4]
 81028f0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 81028f2:	6878      	ldr	r0, [r7, #4]
 81028f4:	f000 fa3e 	bl	8102d74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81028f8:	4603      	mov	r3, r0
 81028fa:	2201      	movs	r2, #1
 81028fc:	6839      	ldr	r1, [r7, #0]
 81028fe:	4618      	mov	r0, r3
 8102900:	f000 fa50 	bl	8102da4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 8102904:	bf00      	nop
 8102906:	3708      	adds	r7, #8
 8102908:	46bd      	mov	sp, r7
 810290a:	bd80      	pop	{r7, pc}

0810290c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 810290c:	b590      	push	{r4, r7, lr}
 810290e:	b087      	sub	sp, #28
 8102910:	af00      	add	r7, sp, #0
 8102912:	60f8      	str	r0, [r7, #12]
 8102914:	60b9      	str	r1, [r7, #8]
 8102916:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 8102918:	68f8      	ldr	r0, [r7, #12]
 810291a:	f000 fa52 	bl	8102dc2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 810291e:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8102920:	68b8      	ldr	r0, [r7, #8]
 8102922:	f7fe ffbc 	bl	810189e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102926:	4604      	mov	r4, r0
 8102928:	6878      	ldr	r0, [r7, #4]
 810292a:	f7fe ffc3 	bl	81018b4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810292e:	4603      	mov	r3, r0
 8102930:	4622      	mov	r2, r4
 8102932:	6979      	ldr	r1, [r7, #20]
 8102934:	68f8      	ldr	r0, [r7, #12]
 8102936:	f000 fa55 	bl	8102de4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 810293a:	697b      	ldr	r3, [r7, #20]
	}
 810293c:	4618      	mov	r0, r3
 810293e:	371c      	adds	r7, #28
 8102940:	46bd      	mov	sp, r7
 8102942:	bd90      	pop	{r4, r7, pc}

08102944 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8102944:	b580      	push	{r7, lr}
 8102946:	b084      	sub	sp, #16
 8102948:	af00      	add	r7, sp, #0
 810294a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 810294c:	6878      	ldr	r0, [r7, #4]
 810294e:	f000 fa6e 	bl	8102e2e <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102952:	4602      	mov	r2, r0
 8102954:	f107 030c 	add.w	r3, r7, #12
 8102958:	4611      	mov	r1, r2
 810295a:	4618      	mov	r0, r3
 810295c:	f000 fa75 	bl	8102e4a <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 8102960:	4603      	mov	r3, r0
      }
 8102962:	4618      	mov	r0, r3
 8102964:	3710      	adds	r7, #16
 8102966:	46bd      	mov	sp, r7
 8102968:	bd80      	pop	{r7, pc}

0810296a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810296a:	b580      	push	{r7, lr}
 810296c:	b084      	sub	sp, #16
 810296e:	af00      	add	r7, sp, #0
 8102970:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	68da      	ldr	r2, [r3, #12]
 8102976:	f107 030c 	add.w	r3, r7, #12
 810297a:	4611      	mov	r1, r2
 810297c:	4618      	mov	r0, r3
 810297e:	f7ff fc1e 	bl	81021be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102982:	68fb      	ldr	r3, [r7, #12]
 8102984:	4618      	mov	r0, r3
 8102986:	3710      	adds	r7, #16
 8102988:	46bd      	mov	sp, r7
 810298a:	bd80      	pop	{r7, pc}

0810298c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 810298c:	b580      	push	{r7, lr}
 810298e:	b084      	sub	sp, #16
 8102990:	af00      	add	r7, sp, #0
 8102992:	60f8      	str	r0, [r7, #12]
 8102994:	60b9      	str	r1, [r7, #8]
 8102996:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102998:	68b8      	ldr	r0, [r7, #8]
 810299a:	f000 fa62 	bl	8102e62 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 810299e:	4603      	mov	r3, r0
 81029a0:	681a      	ldr	r2, [r3, #0]
 81029a2:	68fb      	ldr	r3, [r7, #12]
 81029a4:	601a      	str	r2, [r3, #0]
 81029a6:	6878      	ldr	r0, [r7, #4]
 81029a8:	f000 fa66 	bl	8102e78 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 81029ac:	4603      	mov	r3, r0
 81029ae:	681a      	ldr	r2, [r3, #0]
 81029b0:	68fb      	ldr	r3, [r7, #12]
 81029b2:	605a      	str	r2, [r3, #4]
 81029b4:	68fb      	ldr	r3, [r7, #12]
 81029b6:	4618      	mov	r0, r3
 81029b8:	3710      	adds	r7, #16
 81029ba:	46bd      	mov	sp, r7
 81029bc:	bd80      	pop	{r7, pc}

081029be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 81029be:	b580      	push	{r7, lr}
 81029c0:	b082      	sub	sp, #8
 81029c2:	af00      	add	r7, sp, #0
 81029c4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	4618      	mov	r0, r3
 81029cc:	f018 ffc0 	bl	811b950 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 81029d0:	4602      	mov	r2, r0
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	601a      	str	r2, [r3, #0]
	return *this;
 81029d6:	687b      	ldr	r3, [r7, #4]
      }
 81029d8:	4618      	mov	r0, r3
 81029da:	3708      	adds	r7, #8
 81029dc:	46bd      	mov	sp, r7
 81029de:	bd80      	pop	{r7, pc}

081029e0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 81029e0:	b480      	push	{r7}
 81029e2:	b085      	sub	sp, #20
 81029e4:	af00      	add	r7, sp, #0
 81029e6:	60f8      	str	r0, [r7, #12]
 81029e8:	60b9      	str	r1, [r7, #8]
 81029ea:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 81029ec:	68bb      	ldr	r3, [r7, #8]
 81029ee:	681a      	ldr	r2, [r3, #0]
 81029f0:	68fb      	ldr	r3, [r7, #12]
 81029f2:	601a      	str	r2, [r3, #0]
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	681a      	ldr	r2, [r3, #0]
 81029f8:	68fb      	ldr	r3, [r7, #12]
 81029fa:	605a      	str	r2, [r3, #4]
 81029fc:	68fb      	ldr	r3, [r7, #12]
 81029fe:	4618      	mov	r0, r3
 8102a00:	3714      	adds	r7, #20
 8102a02:	46bd      	mov	sp, r7
 8102a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a08:	4770      	bx	lr

08102a0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102a0a:	b5b0      	push	{r4, r5, r7, lr}
 8102a0c:	b086      	sub	sp, #24
 8102a0e:	af00      	add	r7, sp, #0
 8102a10:	60f8      	str	r0, [r7, #12]
 8102a12:	60b9      	str	r1, [r7, #8]
 8102a14:	607a      	str	r2, [r7, #4]
 8102a16:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8102a18:	68bb      	ldr	r3, [r7, #8]
 8102a1a:	2b00      	cmp	r3, #0
 8102a1c:	d117      	bne.n	8102a4e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8102a1e:	68f8      	ldr	r0, [r7, #12]
 8102a20:	f7ff fd02 	bl	8102428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102a24:	4602      	mov	r2, r0
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	4293      	cmp	r3, r2
 8102a2a:	d010      	beq.n	8102a4e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8102a2c:	68fc      	ldr	r4, [r7, #12]
 8102a2e:	6838      	ldr	r0, [r7, #0]
 8102a30:	f7ff ff88 	bl	8102944 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102a34:	4605      	mov	r5, r0
 8102a36:	6878      	ldr	r0, [r7, #4]
 8102a38:	f7ff fd33 	bl	81024a2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102a3c:	4603      	mov	r3, r0
 8102a3e:	461a      	mov	r2, r3
 8102a40:	4629      	mov	r1, r5
 8102a42:	4620      	mov	r0, r4
 8102a44:	f7ff f996 	bl	8101d74 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102a48:	4603      	mov	r3, r0
 8102a4a:	2b00      	cmp	r3, #0
 8102a4c:	d001      	beq.n	8102a52 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 8102a4e:	2301      	movs	r3, #1
 8102a50:	e000      	b.n	8102a54 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 8102a52:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8102a54:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8102a56:	68fb      	ldr	r3, [r7, #12]
 8102a58:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8102a5a:	7df8      	ldrb	r0, [r7, #23]
 8102a5c:	687a      	ldr	r2, [r7, #4]
 8102a5e:	6839      	ldr	r1, [r7, #0]
 8102a60:	f018 ff78 	bl	811b954 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8102a64:	68fb      	ldr	r3, [r7, #12]
 8102a66:	695b      	ldr	r3, [r3, #20]
 8102a68:	1c5a      	adds	r2, r3, #1
 8102a6a:	68fb      	ldr	r3, [r7, #12]
 8102a6c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8102a6e:	f107 0310 	add.w	r3, r7, #16
 8102a72:	6839      	ldr	r1, [r7, #0]
 8102a74:	4618      	mov	r0, r3
 8102a76:	f7ff fba2 	bl	81021be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102a7a:	693b      	ldr	r3, [r7, #16]
    }
 8102a7c:	4618      	mov	r0, r3
 8102a7e:	3718      	adds	r7, #24
 8102a80:	46bd      	mov	sp, r7
 8102a82:	bdb0      	pop	{r4, r5, r7, pc}

08102a84 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102a84:	b480      	push	{r7}
 8102a86:	b083      	sub	sp, #12
 8102a88:	af00      	add	r7, sp, #0
 8102a8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	4618      	mov	r0, r3
 8102a90:	370c      	adds	r7, #12
 8102a92:	46bd      	mov	sp, r7
 8102a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a98:	4770      	bx	lr

08102a9a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102a9a:	b480      	push	{r7}
 8102a9c:	b083      	sub	sp, #12
 8102a9e:	af00      	add	r7, sp, #0
 8102aa0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	4618      	mov	r0, r3
 8102aa6:	370c      	adds	r7, #12
 8102aa8:	46bd      	mov	sp, r7
 8102aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aae:	4770      	bx	lr

08102ab0 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8102ab0:	b480      	push	{r7}
 8102ab2:	b083      	sub	sp, #12
 8102ab4:	af00      	add	r7, sp, #0
 8102ab6:	6078      	str	r0, [r7, #4]
 8102ab8:	6039      	str	r1, [r7, #0]
 8102aba:	bf00      	nop
 8102abc:	370c      	adds	r7, #12
 8102abe:	46bd      	mov	sp, r7
 8102ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ac4:	4770      	bx	lr

08102ac6 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102ac6:	b580      	push	{r7, lr}
 8102ac8:	b084      	sub	sp, #16
 8102aca:	af00      	add	r7, sp, #0
 8102acc:	60f8      	str	r0, [r7, #12]
 8102ace:	60b9      	str	r1, [r7, #8]
 8102ad0:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102ad2:	687a      	ldr	r2, [r7, #4]
 8102ad4:	4613      	mov	r3, r2
 8102ad6:	005b      	lsls	r3, r3, #1
 8102ad8:	4413      	add	r3, r2
 8102ada:	00db      	lsls	r3, r3, #3
 8102adc:	4619      	mov	r1, r3
 8102ade:	68b8      	ldr	r0, [r7, #8]
 8102ae0:	f018 fecc 	bl	811b87c <_ZdlPvj>
      }
 8102ae4:	bf00      	nop
 8102ae6:	3710      	adds	r7, #16
 8102ae8:	46bd      	mov	sp, r7
 8102aea:	bd80      	pop	{r7, pc}

08102aec <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8102aec:	b580      	push	{r7, lr}
 8102aee:	b082      	sub	sp, #8
 8102af0:	af00      	add	r7, sp, #0
 8102af2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	4618      	mov	r0, r3
 8102af8:	f000 f9e6 	bl	8102ec8 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102afc:	4603      	mov	r3, r0
 8102afe:	4618      	mov	r0, r3
 8102b00:	f000 f9c6 	bl	8102e90 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 8102b04:	4603      	mov	r3, r0
 8102b06:	4618      	mov	r0, r3
 8102b08:	3708      	adds	r7, #8
 8102b0a:	46bd      	mov	sp, r7
 8102b0c:	bd80      	pop	{r7, pc}
	...

08102b10 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8102b10:	b480      	push	{r7}
 8102b12:	b083      	sub	sp, #12
 8102b14:	af00      	add	r7, sp, #0
 8102b16:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	685a      	ldr	r2, [r3, #4]
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	1ad3      	subs	r3, r2, r3
 8102b22:	10db      	asrs	r3, r3, #3
 8102b24:	4a04      	ldr	r2, [pc, #16]	@ (8102b38 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 8102b26:	fb02 f303 	mul.w	r3, r2, r3
 8102b2a:	4618      	mov	r0, r3
 8102b2c:	370c      	adds	r7, #12
 8102b2e:	46bd      	mov	sp, r7
 8102b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b34:	4770      	bx	lr
 8102b36:	bf00      	nop
 8102b38:	aaaaaaab 	.word	0xaaaaaaab

08102b3c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8102b3c:	b480      	push	{r7}
 8102b3e:	b083      	sub	sp, #12
 8102b40:	af00      	add	r7, sp, #0
 8102b42:	6078      	str	r0, [r7, #4]
 8102b44:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	681a      	ldr	r2, [r3, #0]
 8102b4a:	683b      	ldr	r3, [r7, #0]
 8102b4c:	681b      	ldr	r3, [r3, #0]
 8102b4e:	429a      	cmp	r2, r3
 8102b50:	d201      	bcs.n	8102b56 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8102b52:	683b      	ldr	r3, [r7, #0]
 8102b54:	e000      	b.n	8102b58 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8102b56:	687b      	ldr	r3, [r7, #4]
    }
 8102b58:	4618      	mov	r0, r3
 8102b5a:	370c      	adds	r7, #12
 8102b5c:	46bd      	mov	sp, r7
 8102b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b62:	4770      	bx	lr

08102b64 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8102b64:	b580      	push	{r7, lr}
 8102b66:	b082      	sub	sp, #8
 8102b68:	af00      	add	r7, sp, #0
 8102b6a:	6078      	str	r0, [r7, #4]
 8102b6c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8102b6e:	2200      	movs	r2, #0
 8102b70:	6839      	ldr	r1, [r7, #0]
 8102b72:	6878      	ldr	r0, [r7, #4]
 8102b74:	f000 f9b4 	bl	8102ee0 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 8102b78:	4603      	mov	r3, r0
 8102b7a:	4618      	mov	r0, r3
 8102b7c:	3708      	adds	r7, #8
 8102b7e:	46bd      	mov	sp, r7
 8102b80:	bd80      	pop	{r7, pc}

08102b82 <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8102b82:	b580      	push	{r7, lr}
 8102b84:	b084      	sub	sp, #16
 8102b86:	af00      	add	r7, sp, #0
 8102b88:	60f8      	str	r0, [r7, #12]
 8102b8a:	60b9      	str	r1, [r7, #8]
 8102b8c:	607a      	str	r2, [r7, #4]
 8102b8e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8102b90:	683b      	ldr	r3, [r7, #0]
 8102b92:	687a      	ldr	r2, [r7, #4]
 8102b94:	68b9      	ldr	r1, [r7, #8]
 8102b96:	68f8      	ldr	r0, [r7, #12]
 8102b98:	f000 f9d0 	bl	8102f3c <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8102b9c:	4603      	mov	r3, r0
      }
 8102b9e:	4618      	mov	r0, r3
 8102ba0:	3710      	adds	r7, #16
 8102ba2:	46bd      	mov	sp, r7
 8102ba4:	bd80      	pop	{r7, pc}

08102ba6 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8102ba6:	b580      	push	{r7, lr}
 8102ba8:	b084      	sub	sp, #16
 8102baa:	af00      	add	r7, sp, #0
 8102bac:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8102bae:	f107 030c 	add.w	r3, r7, #12
 8102bb2:	6879      	ldr	r1, [r7, #4]
 8102bb4:	4618      	mov	r0, r3
 8102bb6:	f000 f9de 	bl	8102f76 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>
 8102bba:	68fb      	ldr	r3, [r7, #12]
 8102bbc:	4618      	mov	r0, r3
 8102bbe:	3710      	adds	r7, #16
 8102bc0:	46bd      	mov	sp, r7
 8102bc2:	bd80      	pop	{r7, pc}

08102bc4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8102bc4:	b580      	push	{r7, lr}
 8102bc6:	b084      	sub	sp, #16
 8102bc8:	af00      	add	r7, sp, #0
 8102bca:	60f8      	str	r0, [r7, #12]
 8102bcc:	60b9      	str	r1, [r7, #8]
 8102bce:	607a      	str	r2, [r7, #4]
 8102bd0:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8102bd2:	687a      	ldr	r2, [r7, #4]
 8102bd4:	68b9      	ldr	r1, [r7, #8]
 8102bd6:	68f8      	ldr	r0, [r7, #12]
 8102bd8:	f000 f9df 	bl	8102f9a <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8102bdc:	4603      	mov	r3, r0
    }
 8102bde:	4618      	mov	r0, r3
 8102be0:	3710      	adds	r7, #16
 8102be2:	46bd      	mov	sp, r7
 8102be4:	bd80      	pop	{r7, pc}

08102be6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8102be6:	b580      	push	{r7, lr}
 8102be8:	b082      	sub	sp, #8
 8102bea:	af00      	add	r7, sp, #0
 8102bec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8102bee:	6878      	ldr	r0, [r7, #4]
 8102bf0:	f000 f9e7 	bl	8102fc2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8102bf4:	4603      	mov	r3, r0
 8102bf6:	4618      	mov	r0, r3
 8102bf8:	3708      	adds	r7, #8
 8102bfa:	46bd      	mov	sp, r7
 8102bfc:	bd80      	pop	{r7, pc}

08102bfe <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8102bfe:	b480      	push	{r7}
 8102c00:	b083      	sub	sp, #12
 8102c02:	af00      	add	r7, sp, #0
 8102c04:	6078      	str	r0, [r7, #4]
 8102c06:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	683a      	ldr	r2, [r7, #0]
 8102c0c:	601a      	str	r2, [r3, #0]
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	4618      	mov	r0, r3
 8102c12:	370c      	adds	r7, #12
 8102c14:	46bd      	mov	sp, r7
 8102c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c1a:	4770      	bx	lr

08102c1c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8102c1c:	b5b0      	push	{r4, r5, r7, lr}
 8102c1e:	b088      	sub	sp, #32
 8102c20:	af02      	add	r7, sp, #8
 8102c22:	60f8      	str	r0, [r7, #12]
 8102c24:	60b9      	str	r1, [r7, #8]
 8102c26:	607a      	str	r2, [r7, #4]
 8102c28:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8102c2a:	68f8      	ldr	r0, [r7, #12]
 8102c2c:	f000 f8c9 	bl	8102dc2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8102c30:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8102c32:	68b8      	ldr	r0, [r7, #8]
 8102c34:	f7ff fc80 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102c38:	4604      	mov	r4, r0
 8102c3a:	6878      	ldr	r0, [r7, #4]
 8102c3c:	f7ff fc87 	bl	810254e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102c40:	4605      	mov	r5, r0
 8102c42:	6838      	ldr	r0, [r7, #0]
 8102c44:	f7ff fc8e 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102c48:	4603      	mov	r3, r0
 8102c4a:	9300      	str	r3, [sp, #0]
 8102c4c:	462b      	mov	r3, r5
 8102c4e:	4622      	mov	r2, r4
 8102c50:	6979      	ldr	r1, [r7, #20]
 8102c52:	68f8      	ldr	r0, [r7, #12]
 8102c54:	f000 f9c0 	bl	8102fd8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8102c58:	697b      	ldr	r3, [r7, #20]
	}
 8102c5a:	4618      	mov	r0, r3
 8102c5c:	3718      	adds	r7, #24
 8102c5e:	46bd      	mov	sp, r7
 8102c60:	bdb0      	pop	{r4, r5, r7, pc}

08102c62 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8102c62:	b580      	push	{r7, lr}
 8102c64:	b084      	sub	sp, #16
 8102c66:	af00      	add	r7, sp, #0
 8102c68:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8102c6a:	687b      	ldr	r3, [r7, #4]
 8102c6c:	681a      	ldr	r2, [r3, #0]
 8102c6e:	f107 030c 	add.w	r3, r7, #12
 8102c72:	4611      	mov	r1, r2
 8102c74:	4618      	mov	r0, r3
 8102c76:	f7ff faa2 	bl	81021be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102c7a:	68fb      	ldr	r3, [r7, #12]
 8102c7c:	4618      	mov	r0, r3
 8102c7e:	3710      	adds	r7, #16
 8102c80:	46bd      	mov	sp, r7
 8102c82:	bd80      	pop	{r7, pc}

08102c84 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8102c84:	b480      	push	{r7}
 8102c86:	b083      	sub	sp, #12
 8102c88:	af00      	add	r7, sp, #0
 8102c8a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	3310      	adds	r3, #16
 8102c90:	4618      	mov	r0, r3
 8102c92:	370c      	adds	r7, #12
 8102c94:	46bd      	mov	sp, r7
 8102c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c9a:	4770      	bx	lr

08102c9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8102c9c:	b480      	push	{r7}
 8102c9e:	b083      	sub	sp, #12
 8102ca0:	af00      	add	r7, sp, #0
 8102ca2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	330c      	adds	r3, #12
 8102ca8:	4618      	mov	r0, r3
 8102caa:	370c      	adds	r7, #12
 8102cac:	46bd      	mov	sp, r7
 8102cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cb2:	4770      	bx	lr

08102cb4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8102cb4:	b580      	push	{r7, lr}
 8102cb6:	b084      	sub	sp, #16
 8102cb8:	af00      	add	r7, sp, #0
 8102cba:	60f8      	str	r0, [r7, #12]
 8102cbc:	60b9      	str	r1, [r7, #8]
 8102cbe:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102cc0:	68b8      	ldr	r0, [r7, #8]
 8102cc2:	f000 f8d9 	bl	8102e78 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102cc6:	4603      	mov	r3, r0
 8102cc8:	681a      	ldr	r2, [r3, #0]
 8102cca:	68fb      	ldr	r3, [r7, #12]
 8102ccc:	601a      	str	r2, [r3, #0]
 8102cce:	6878      	ldr	r0, [r7, #4]
 8102cd0:	f000 f8d2 	bl	8102e78 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102cd4:	4603      	mov	r3, r0
 8102cd6:	681a      	ldr	r2, [r3, #0]
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	605a      	str	r2, [r3, #4]
 8102cdc:	68fb      	ldr	r3, [r7, #12]
 8102cde:	4618      	mov	r0, r3
 8102ce0:	3710      	adds	r7, #16
 8102ce2:	46bd      	mov	sp, r7
 8102ce4:	bd80      	pop	{r7, pc}

08102ce6 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8102ce6:	b580      	push	{r7, lr}
 8102ce8:	b082      	sub	sp, #8
 8102cea:	af00      	add	r7, sp, #0
 8102cec:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	681b      	ldr	r3, [r3, #0]
 8102cf2:	4618      	mov	r0, r3
 8102cf4:	f018 fe2a 	bl	811b94c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8102cf8:	4602      	mov	r2, r0
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	601a      	str	r2, [r3, #0]
	return *this;
 8102cfe:	687b      	ldr	r3, [r7, #4]
      }
 8102d00:	4618      	mov	r0, r3
 8102d02:	3708      	adds	r7, #8
 8102d04:	46bd      	mov	sp, r7
 8102d06:	bd80      	pop	{r7, pc}

08102d08 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8102d08:	b590      	push	{r4, r7, lr}
 8102d0a:	b083      	sub	sp, #12
 8102d0c:	af00      	add	r7, sp, #0
 8102d0e:	6078      	str	r0, [r7, #4]
 8102d10:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8102d12:	687c      	ldr	r4, [r7, #4]
 8102d14:	6838      	ldr	r0, [r7, #0]
 8102d16:	f7ff fd76 	bl	8102806 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102d1a:	4603      	mov	r3, r0
 8102d1c:	4619      	mov	r1, r3
 8102d1e:	4620      	mov	r0, r4
 8102d20:	f000 f987 	bl	8103032 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>
	{ }
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	4618      	mov	r0, r3
 8102d28:	370c      	adds	r7, #12
 8102d2a:	46bd      	mov	sp, r7
 8102d2c:	bd90      	pop	{r4, r7, pc}

08102d2e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8102d2e:	b5b0      	push	{r4, r5, r7, lr}
 8102d30:	b088      	sub	sp, #32
 8102d32:	af02      	add	r7, sp, #8
 8102d34:	60f8      	str	r0, [r7, #12]
 8102d36:	60b9      	str	r1, [r7, #8]
 8102d38:	607a      	str	r2, [r7, #4]
 8102d3a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8102d3c:	68f8      	ldr	r0, [r7, #12]
 8102d3e:	f000 f840 	bl	8102dc2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8102d42:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8102d44:	68b8      	ldr	r0, [r7, #8]
 8102d46:	f7ff fbf7 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102d4a:	4604      	mov	r4, r0
 8102d4c:	6878      	ldr	r0, [r7, #4]
 8102d4e:	f7ff fd88 	bl	8102862 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8102d52:	4605      	mov	r5, r0
 8102d54:	6838      	ldr	r0, [r7, #0]
 8102d56:	f7ff fc05 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102d5a:	4603      	mov	r3, r0
 8102d5c:	9300      	str	r3, [sp, #0]
 8102d5e:	462b      	mov	r3, r5
 8102d60:	4622      	mov	r2, r4
 8102d62:	6979      	ldr	r1, [r7, #20]
 8102d64:	68f8      	ldr	r0, [r7, #12]
 8102d66:	f000 f974 	bl	8103052 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8102d6a:	697b      	ldr	r3, [r7, #20]
	}
 8102d6c:	4618      	mov	r0, r3
 8102d6e:	3718      	adds	r7, #24
 8102d70:	46bd      	mov	sp, r7
 8102d72:	bdb0      	pop	{r4, r5, r7, pc}

08102d74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8102d74:	b480      	push	{r7}
 8102d76:	b083      	sub	sp, #12
 8102d78:	af00      	add	r7, sp, #0
 8102d7a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	4618      	mov	r0, r3
 8102d80:	370c      	adds	r7, #12
 8102d82:	46bd      	mov	sp, r7
 8102d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d88:	4770      	bx	lr

08102d8a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8102d8a:	b580      	push	{r7, lr}
 8102d8c:	b082      	sub	sp, #8
 8102d8e:	af00      	add	r7, sp, #0
 8102d90:	6078      	str	r0, [r7, #4]
 8102d92:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8102d94:	6839      	ldr	r1, [r7, #0]
 8102d96:	6878      	ldr	r0, [r7, #4]
 8102d98:	f000 f988 	bl	81030ac <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>
	}
 8102d9c:	bf00      	nop
 8102d9e:	3708      	adds	r7, #8
 8102da0:	46bd      	mov	sp, r7
 8102da2:	bd80      	pop	{r7, pc}

08102da4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8102da4:	b580      	push	{r7, lr}
 8102da6:	b084      	sub	sp, #16
 8102da8:	af00      	add	r7, sp, #0
 8102daa:	60f8      	str	r0, [r7, #12]
 8102dac:	60b9      	str	r1, [r7, #8]
 8102dae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8102db0:	687a      	ldr	r2, [r7, #4]
 8102db2:	68b9      	ldr	r1, [r7, #8]
 8102db4:	68f8      	ldr	r0, [r7, #12]
 8102db6:	f000 f984 	bl	81030c2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
 8102dba:	bf00      	nop
 8102dbc:	3710      	adds	r7, #16
 8102dbe:	46bd      	mov	sp, r7
 8102dc0:	bd80      	pop	{r7, pc}

08102dc2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8102dc2:	b580      	push	{r7, lr}
 8102dc4:	b082      	sub	sp, #8
 8102dc6:	af00      	add	r7, sp, #0
 8102dc8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8102dca:	6878      	ldr	r0, [r7, #4]
 8102dcc:	f7ff ffd2 	bl	8102d74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102dd0:	4603      	mov	r3, r0
 8102dd2:	2101      	movs	r1, #1
 8102dd4:	4618      	mov	r0, r3
 8102dd6:	f000 f987 	bl	81030e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 8102dda:	4603      	mov	r3, r0
 8102ddc:	4618      	mov	r0, r3
 8102dde:	3708      	adds	r7, #8
 8102de0:	46bd      	mov	sp, r7
 8102de2:	bd80      	pop	{r7, pc}

08102de4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102de6:	b085      	sub	sp, #20
 8102de8:	af00      	add	r7, sp, #0
 8102dea:	60f8      	str	r0, [r7, #12]
 8102dec:	60b9      	str	r1, [r7, #8]
 8102dee:	607a      	str	r2, [r7, #4]
 8102df0:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102df2:	68bb      	ldr	r3, [r7, #8]
 8102df4:	4619      	mov	r1, r3
 8102df6:	2018      	movs	r0, #24
 8102df8:	f7fd ffc4 	bl	8100d84 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102dfc:	68f8      	ldr	r0, [r7, #12]
 8102dfe:	f7ff ffb9 	bl	8102d74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102e02:	4604      	mov	r4, r0
 8102e04:	68b8      	ldr	r0, [r7, #8]
 8102e06:	f7ff fb7a 	bl	81024fe <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102e0a:	4605      	mov	r5, r0
 8102e0c:	6878      	ldr	r0, [r7, #4]
 8102e0e:	f7fe fd46 	bl	810189e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102e12:	4606      	mov	r6, r0
 8102e14:	6838      	ldr	r0, [r7, #0]
 8102e16:	f7fe fd4d 	bl	81018b4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102e1a:	4603      	mov	r3, r0
 8102e1c:	4632      	mov	r2, r6
 8102e1e:	4629      	mov	r1, r5
 8102e20:	4620      	mov	r0, r4
 8102e22:	f000 f970 	bl	8103106 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 8102e26:	bf00      	nop
 8102e28:	3714      	adds	r7, #20
 8102e2a:	46bd      	mov	sp, r7
 8102e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08102e2e <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 8102e2e:	b580      	push	{r7, lr}
 8102e30:	b082      	sub	sp, #8
 8102e32:	af00      	add	r7, sp, #0
 8102e34:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	3310      	adds	r3, #16
 8102e3a:	4618      	mov	r0, r3
 8102e3c:	f000 f97b 	bl	8103136 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8102e40:	4603      	mov	r3, r0
 8102e42:	4618      	mov	r0, r3
 8102e44:	3708      	adds	r7, #8
 8102e46:	46bd      	mov	sp, r7
 8102e48:	bd80      	pop	{r7, pc}

08102e4a <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8102e4a:	b480      	push	{r7}
 8102e4c:	b083      	sub	sp, #12
 8102e4e:	af00      	add	r7, sp, #0
 8102e50:	6078      	str	r0, [r7, #4]
 8102e52:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8102e54:	683b      	ldr	r3, [r7, #0]
 8102e56:	4618      	mov	r0, r3
 8102e58:	370c      	adds	r7, #12
 8102e5a:	46bd      	mov	sp, r7
 8102e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e60:	4770      	bx	lr

08102e62 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102e62:	b480      	push	{r7}
 8102e64:	b083      	sub	sp, #12
 8102e66:	af00      	add	r7, sp, #0
 8102e68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102e6a:	687b      	ldr	r3, [r7, #4]
 8102e6c:	4618      	mov	r0, r3
 8102e6e:	370c      	adds	r7, #12
 8102e70:	46bd      	mov	sp, r7
 8102e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e76:	4770      	bx	lr

08102e78 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102e78:	b480      	push	{r7}
 8102e7a:	b083      	sub	sp, #12
 8102e7c:	af00      	add	r7, sp, #0
 8102e7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102e80:	687b      	ldr	r3, [r7, #4]
 8102e82:	4618      	mov	r0, r3
 8102e84:	370c      	adds	r7, #12
 8102e86:	46bd      	mov	sp, r7
 8102e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e8c:	4770      	bx	lr
	...

08102e90 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8102e90:	b580      	push	{r7, lr}
 8102e92:	b084      	sub	sp, #16
 8102e94:	af00      	add	r7, sp, #0
 8102e96:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8102e98:	4b0a      	ldr	r3, [pc, #40]	@ (8102ec4 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8102e9a:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8102e9c:	6878      	ldr	r0, [r7, #4]
 8102e9e:	f000 f956 	bl	810314e <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 8102ea2:	4603      	mov	r3, r0
 8102ea4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8102ea6:	f107 0208 	add.w	r2, r7, #8
 8102eaa:	f107 030c 	add.w	r3, r7, #12
 8102eae:	4611      	mov	r1, r2
 8102eb0:	4618      	mov	r0, r3
 8102eb2:	f000 f958 	bl	8103166 <_ZSt3minIjERKT_S2_S2_>
 8102eb6:	4603      	mov	r3, r0
 8102eb8:	681b      	ldr	r3, [r3, #0]
      }
 8102eba:	4618      	mov	r0, r3
 8102ebc:	3710      	adds	r7, #16
 8102ebe:	46bd      	mov	sp, r7
 8102ec0:	bd80      	pop	{r7, pc}
 8102ec2:	bf00      	nop
 8102ec4:	05555555 	.word	0x05555555

08102ec8 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8102ec8:	b480      	push	{r7}
 8102eca:	b083      	sub	sp, #12
 8102ecc:	af00      	add	r7, sp, #0
 8102ece:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	4618      	mov	r0, r3
 8102ed4:	370c      	adds	r7, #12
 8102ed6:	46bd      	mov	sp, r7
 8102ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102edc:	4770      	bx	lr
	...

08102ee0 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102ee0:	b580      	push	{r7, lr}
 8102ee2:	b084      	sub	sp, #16
 8102ee4:	af00      	add	r7, sp, #0
 8102ee6:	60f8      	str	r0, [r7, #12]
 8102ee8:	60b9      	str	r1, [r7, #8]
 8102eea:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102eec:	68f8      	ldr	r0, [r7, #12]
 8102eee:	f000 f94f 	bl	8103190 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8102ef2:	4602      	mov	r2, r0
 8102ef4:	68bb      	ldr	r3, [r7, #8]
 8102ef6:	4293      	cmp	r3, r2
 8102ef8:	bf8c      	ite	hi
 8102efa:	2301      	movhi	r3, #1
 8102efc:	2300      	movls	r3, #0
 8102efe:	b2db      	uxtb	r3, r3
 8102f00:	2b00      	cmp	r3, #0
 8102f02:	bf14      	ite	ne
 8102f04:	2301      	movne	r3, #1
 8102f06:	2300      	moveq	r3, #0
 8102f08:	b2db      	uxtb	r3, r3
 8102f0a:	2b00      	cmp	r3, #0
 8102f0c:	d007      	beq.n	8102f1e <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102f0e:	68bb      	ldr	r3, [r7, #8]
 8102f10:	4a09      	ldr	r2, [pc, #36]	@ (8102f38 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x58>)
 8102f12:	4293      	cmp	r3, r2
 8102f14:	d901      	bls.n	8102f1a <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102f16:	f018 fd84 	bl	811ba22 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102f1a:	f018 fd7f 	bl	811ba1c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102f1e:	68ba      	ldr	r2, [r7, #8]
 8102f20:	4613      	mov	r3, r2
 8102f22:	005b      	lsls	r3, r3, #1
 8102f24:	4413      	add	r3, r2
 8102f26:	00db      	lsls	r3, r3, #3
 8102f28:	4618      	mov	r0, r3
 8102f2a:	f018 fca9 	bl	811b880 <_Znwj>
 8102f2e:	4603      	mov	r3, r0
      }
 8102f30:	4618      	mov	r0, r3
 8102f32:	3710      	adds	r7, #16
 8102f34:	46bd      	mov	sp, r7
 8102f36:	bd80      	pop	{r7, pc}
 8102f38:	0aaaaaaa 	.word	0x0aaaaaaa

08102f3c <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8102f3c:	b5b0      	push	{r4, r5, r7, lr}
 8102f3e:	b084      	sub	sp, #16
 8102f40:	af00      	add	r7, sp, #0
 8102f42:	60f8      	str	r0, [r7, #12]
 8102f44:	60b9      	str	r1, [r7, #8]
 8102f46:	607a      	str	r2, [r7, #4]
 8102f48:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8102f4a:	68f8      	ldr	r0, [r7, #12]
 8102f4c:	f000 f92e 	bl	81031ac <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102f50:	4604      	mov	r4, r0
 8102f52:	68b8      	ldr	r0, [r7, #8]
 8102f54:	f000 f92a 	bl	81031ac <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102f58:	4605      	mov	r5, r0
 8102f5a:	6878      	ldr	r0, [r7, #4]
 8102f5c:	f000 f926 	bl	81031ac <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102f60:	4602      	mov	r2, r0
 8102f62:	683b      	ldr	r3, [r7, #0]
 8102f64:	4629      	mov	r1, r5
 8102f66:	4620      	mov	r0, r4
 8102f68:	f000 f92c 	bl	81031c4 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8102f6c:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8102f6e:	4618      	mov	r0, r3
 8102f70:	3710      	adds	r7, #16
 8102f72:	46bd      	mov	sp, r7
 8102f74:	bdb0      	pop	{r4, r5, r7, pc}

08102f76 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>:
      move_iterator(iterator_type __i)
 8102f76:	b580      	push	{r7, lr}
 8102f78:	b082      	sub	sp, #8
 8102f7a:	af00      	add	r7, sp, #0
 8102f7c:	6078      	str	r0, [r7, #4]
 8102f7e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8102f80:	463b      	mov	r3, r7
 8102f82:	4618      	mov	r0, r3
 8102f84:	f000 f948 	bl	8103218 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>
 8102f88:	4603      	mov	r3, r0
 8102f8a:	681a      	ldr	r2, [r3, #0]
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	601a      	str	r2, [r3, #0]
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	4618      	mov	r0, r3
 8102f94:	3708      	adds	r7, #8
 8102f96:	46bd      	mov	sp, r7
 8102f98:	bd80      	pop	{r7, pc}

08102f9a <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8102f9a:	b580      	push	{r7, lr}
 8102f9c:	b086      	sub	sp, #24
 8102f9e:	af00      	add	r7, sp, #0
 8102fa0:	60f8      	str	r0, [r7, #12]
 8102fa2:	60b9      	str	r1, [r7, #8]
 8102fa4:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8102fa6:	2301      	movs	r3, #1
 8102fa8:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8102faa:	2301      	movs	r3, #1
 8102fac:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8102fae:	687a      	ldr	r2, [r7, #4]
 8102fb0:	68b9      	ldr	r1, [r7, #8]
 8102fb2:	68f8      	ldr	r0, [r7, #12]
 8102fb4:	f000 f93b 	bl	810322e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>
 8102fb8:	4603      	mov	r3, r0
    }
 8102fba:	4618      	mov	r0, r3
 8102fbc:	3718      	adds	r7, #24
 8102fbe:	46bd      	mov	sp, r7
 8102fc0:	bd80      	pop	{r7, pc}

08102fc2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 8102fc2:	b480      	push	{r7}
 8102fc4:	b083      	sub	sp, #12
 8102fc6:	af00      	add	r7, sp, #0
 8102fc8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	4618      	mov	r0, r3
 8102fce:	370c      	adds	r7, #12
 8102fd0:	46bd      	mov	sp, r7
 8102fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fd6:	4770      	bx	lr

08102fd8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8102fdc:	b086      	sub	sp, #24
 8102fde:	af02      	add	r7, sp, #8
 8102fe0:	60f8      	str	r0, [r7, #12]
 8102fe2:	60b9      	str	r1, [r7, #8]
 8102fe4:	607a      	str	r2, [r7, #4]
 8102fe6:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102fe8:	68bb      	ldr	r3, [r7, #8]
 8102fea:	4619      	mov	r1, r3
 8102fec:	2018      	movs	r0, #24
 8102fee:	f7fd fec9 	bl	8100d84 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102ff2:	68f8      	ldr	r0, [r7, #12]
 8102ff4:	f7ff febe 	bl	8102d74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102ff8:	4604      	mov	r4, r0
 8102ffa:	68b8      	ldr	r0, [r7, #8]
 8102ffc:	f7ff fa7f 	bl	81024fe <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8103000:	4605      	mov	r5, r0
 8103002:	6878      	ldr	r0, [r7, #4]
 8103004:	f7ff fa98 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103008:	4606      	mov	r6, r0
 810300a:	6838      	ldr	r0, [r7, #0]
 810300c:	f7ff fa9f 	bl	810254e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8103010:	4680      	mov	r8, r0
 8103012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103014:	f7ff faa6 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103018:	4603      	mov	r3, r0
 810301a:	9300      	str	r3, [sp, #0]
 810301c:	4643      	mov	r3, r8
 810301e:	4632      	mov	r2, r6
 8103020:	4629      	mov	r1, r5
 8103022:	4620      	mov	r0, r4
 8103024:	f000 f913 	bl	810324e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8103028:	bf00      	nop
 810302a:	3710      	adds	r7, #16
 810302c:	46bd      	mov	sp, r7
 810302e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08103032 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8103032:	b580      	push	{r7, lr}
 8103034:	b082      	sub	sp, #8
 8103036:	af00      	add	r7, sp, #0
 8103038:	6078      	str	r0, [r7, #4]
 810303a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810303c:	6838      	ldr	r0, [r7, #0]
 810303e:	f7ff fbe2 	bl	8102806 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103042:	4602      	mov	r2, r0
 8103044:	687b      	ldr	r3, [r7, #4]
 8103046:	601a      	str	r2, [r3, #0]
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	4618      	mov	r0, r3
 810304c:	3708      	adds	r7, #8
 810304e:	46bd      	mov	sp, r7
 8103050:	bd80      	pop	{r7, pc}

08103052 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8103052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8103056:	b086      	sub	sp, #24
 8103058:	af02      	add	r7, sp, #8
 810305a:	60f8      	str	r0, [r7, #12]
 810305c:	60b9      	str	r1, [r7, #8]
 810305e:	607a      	str	r2, [r7, #4]
 8103060:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8103062:	68bb      	ldr	r3, [r7, #8]
 8103064:	4619      	mov	r1, r3
 8103066:	2018      	movs	r0, #24
 8103068:	f7fd fe8c 	bl	8100d84 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 810306c:	68f8      	ldr	r0, [r7, #12]
 810306e:	f7ff fe81 	bl	8102d74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8103072:	4604      	mov	r4, r0
 8103074:	68b8      	ldr	r0, [r7, #8]
 8103076:	f7ff fa42 	bl	81024fe <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810307a:	4605      	mov	r5, r0
 810307c:	6878      	ldr	r0, [r7, #4]
 810307e:	f7ff fa5b 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103082:	4606      	mov	r6, r0
 8103084:	6838      	ldr	r0, [r7, #0]
 8103086:	f7ff fbec 	bl	8102862 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810308a:	4680      	mov	r8, r0
 810308c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810308e:	f7ff fa69 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103092:	4603      	mov	r3, r0
 8103094:	9300      	str	r3, [sp, #0]
 8103096:	4643      	mov	r3, r8
 8103098:	4632      	mov	r2, r6
 810309a:	4629      	mov	r1, r5
 810309c:	4620      	mov	r0, r4
 810309e:	f000 f8f4 	bl	810328a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 81030a2:	bf00      	nop
 81030a4:	3710      	adds	r7, #16
 81030a6:	46bd      	mov	sp, r7
 81030a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

081030ac <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 81030ac:	b480      	push	{r7}
 81030ae:	b083      	sub	sp, #12
 81030b0:	af00      	add	r7, sp, #0
 81030b2:	6078      	str	r0, [r7, #4]
 81030b4:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 81030b6:	bf00      	nop
 81030b8:	370c      	adds	r7, #12
 81030ba:	46bd      	mov	sp, r7
 81030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030c0:	4770      	bx	lr

081030c2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 81030c2:	b580      	push	{r7, lr}
 81030c4:	b084      	sub	sp, #16
 81030c6:	af00      	add	r7, sp, #0
 81030c8:	60f8      	str	r0, [r7, #12]
 81030ca:	60b9      	str	r1, [r7, #8]
 81030cc:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 81030ce:	687a      	ldr	r2, [r7, #4]
 81030d0:	4613      	mov	r3, r2
 81030d2:	005b      	lsls	r3, r3, #1
 81030d4:	4413      	add	r3, r2
 81030d6:	00db      	lsls	r3, r3, #3
 81030d8:	4619      	mov	r1, r3
 81030da:	68b8      	ldr	r0, [r7, #8]
 81030dc:	f018 fbce 	bl	811b87c <_ZdlPvj>
      }
 81030e0:	bf00      	nop
 81030e2:	3710      	adds	r7, #16
 81030e4:	46bd      	mov	sp, r7
 81030e6:	bd80      	pop	{r7, pc}

081030e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 81030e8:	b580      	push	{r7, lr}
 81030ea:	b082      	sub	sp, #8
 81030ec:	af00      	add	r7, sp, #0
 81030ee:	6078      	str	r0, [r7, #4]
 81030f0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 81030f2:	2200      	movs	r2, #0
 81030f4:	6839      	ldr	r1, [r7, #0]
 81030f6:	6878      	ldr	r0, [r7, #4]
 81030f8:	f000 f8e6 	bl	81032c8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 81030fc:	4603      	mov	r3, r0
 81030fe:	4618      	mov	r0, r3
 8103100:	3708      	adds	r7, #8
 8103102:	46bd      	mov	sp, r7
 8103104:	bd80      	pop	{r7, pc}

08103106 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8103106:	b590      	push	{r4, r7, lr}
 8103108:	b085      	sub	sp, #20
 810310a:	af00      	add	r7, sp, #0
 810310c:	60f8      	str	r0, [r7, #12]
 810310e:	60b9      	str	r1, [r7, #8]
 8103110:	607a      	str	r2, [r7, #4]
 8103112:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8103114:	6878      	ldr	r0, [r7, #4]
 8103116:	f7fe fbc2 	bl	810189e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810311a:	4604      	mov	r4, r0
 810311c:	6838      	ldr	r0, [r7, #0]
 810311e:	f7fe fbc9 	bl	81018b4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8103122:	4603      	mov	r3, r0
 8103124:	4622      	mov	r2, r4
 8103126:	68b9      	ldr	r1, [r7, #8]
 8103128:	68f8      	ldr	r0, [r7, #12]
 810312a:	f000 f8fb 	bl	8103324 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>
	}
 810312e:	bf00      	nop
 8103130:	3714      	adds	r7, #20
 8103132:	46bd      	mov	sp, r7
 8103134:	bd90      	pop	{r4, r7, pc}

08103136 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8103136:	b580      	push	{r7, lr}
 8103138:	b082      	sub	sp, #8
 810313a:	af00      	add	r7, sp, #0
 810313c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 810313e:	6878      	ldr	r0, [r7, #4]
 8103140:	f000 f90e 	bl	8103360 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8103144:	4603      	mov	r3, r0
 8103146:	4618      	mov	r0, r3
 8103148:	3708      	adds	r7, #8
 810314a:	46bd      	mov	sp, r7
 810314c:	bd80      	pop	{r7, pc}

0810314e <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 810314e:	b580      	push	{r7, lr}
 8103150:	b082      	sub	sp, #8
 8103152:	af00      	add	r7, sp, #0
 8103154:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8103156:	6878      	ldr	r0, [r7, #4]
 8103158:	f000 f90d 	bl	8103376 <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>
 810315c:	4603      	mov	r3, r0
      }
 810315e:	4618      	mov	r0, r3
 8103160:	3708      	adds	r7, #8
 8103162:	46bd      	mov	sp, r7
 8103164:	bd80      	pop	{r7, pc}

08103166 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8103166:	b480      	push	{r7}
 8103168:	b083      	sub	sp, #12
 810316a:	af00      	add	r7, sp, #0
 810316c:	6078      	str	r0, [r7, #4]
 810316e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8103170:	683b      	ldr	r3, [r7, #0]
 8103172:	681a      	ldr	r2, [r3, #0]
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	429a      	cmp	r2, r3
 810317a:	d201      	bcs.n	8103180 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 810317c:	683b      	ldr	r3, [r7, #0]
 810317e:	e000      	b.n	8103182 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8103180:	687b      	ldr	r3, [r7, #4]
    }
 8103182:	4618      	mov	r0, r3
 8103184:	370c      	adds	r7, #12
 8103186:	46bd      	mov	sp, r7
 8103188:	f85d 7b04 	ldr.w	r7, [sp], #4
 810318c:	4770      	bx	lr
	...

08103190 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8103190:	b480      	push	{r7}
 8103192:	b083      	sub	sp, #12
 8103194:	af00      	add	r7, sp, #0
 8103196:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8103198:	4b03      	ldr	r3, [pc, #12]	@ (81031a8 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 810319a:	4618      	mov	r0, r3
 810319c:	370c      	adds	r7, #12
 810319e:	46bd      	mov	sp, r7
 81031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031a4:	4770      	bx	lr
 81031a6:	bf00      	nop
 81031a8:	05555555 	.word	0x05555555

081031ac <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 81031ac:	b480      	push	{r7}
 81031ae:	b083      	sub	sp, #12
 81031b0:	af00      	add	r7, sp, #0
 81031b2:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	4618      	mov	r0, r3
 81031b8:	370c      	adds	r7, #12
 81031ba:	46bd      	mov	sp, r7
 81031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031c0:	4770      	bx	lr
	...

081031c4 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 81031c4:	b580      	push	{r7, lr}
 81031c6:	b086      	sub	sp, #24
 81031c8:	af00      	add	r7, sp, #0
 81031ca:	60f8      	str	r0, [r7, #12]
 81031cc:	60b9      	str	r1, [r7, #8]
 81031ce:	607a      	str	r2, [r7, #4]
 81031d0:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 81031d2:	68ba      	ldr	r2, [r7, #8]
 81031d4:	68fb      	ldr	r3, [r7, #12]
 81031d6:	1ad3      	subs	r3, r2, r3
 81031d8:	10db      	asrs	r3, r3, #3
 81031da:	4a0e      	ldr	r2, [pc, #56]	@ (8103214 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x50>)
 81031dc:	fb02 f303 	mul.w	r3, r2, r3
 81031e0:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 81031e2:	697b      	ldr	r3, [r7, #20]
 81031e4:	2b00      	cmp	r3, #0
 81031e6:	dd09      	ble.n	81031fc <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 81031e8:	697a      	ldr	r2, [r7, #20]
 81031ea:	4613      	mov	r3, r2
 81031ec:	005b      	lsls	r3, r3, #1
 81031ee:	4413      	add	r3, r2
 81031f0:	00db      	lsls	r3, r3, #3
 81031f2:	461a      	mov	r2, r3
 81031f4:	68f9      	ldr	r1, [r7, #12]
 81031f6:	6878      	ldr	r0, [r7, #4]
 81031f8:	f018 fe75 	bl	811bee6 <memmove>
      return __result + __count;
 81031fc:	697a      	ldr	r2, [r7, #20]
 81031fe:	4613      	mov	r3, r2
 8103200:	005b      	lsls	r3, r3, #1
 8103202:	4413      	add	r3, r2
 8103204:	00db      	lsls	r3, r3, #3
 8103206:	461a      	mov	r2, r3
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	4413      	add	r3, r2
    }
 810320c:	4618      	mov	r0, r3
 810320e:	3718      	adds	r7, #24
 8103210:	46bd      	mov	sp, r7
 8103212:	bd80      	pop	{r7, pc}
 8103214:	aaaaaaab 	.word	0xaaaaaaab

08103218 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8103218:	b480      	push	{r7}
 810321a:	b083      	sub	sp, #12
 810321c:	af00      	add	r7, sp, #0
 810321e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	4618      	mov	r0, r3
 8103224:	370c      	adds	r7, #12
 8103226:	46bd      	mov	sp, r7
 8103228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810322c:	4770      	bx	lr

0810322e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 810322e:	b580      	push	{r7, lr}
 8103230:	b084      	sub	sp, #16
 8103232:	af00      	add	r7, sp, #0
 8103234:	60f8      	str	r0, [r7, #12]
 8103236:	60b9      	str	r1, [r7, #8]
 8103238:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 810323a:	687a      	ldr	r2, [r7, #4]
 810323c:	68b9      	ldr	r1, [r7, #8]
 810323e:	68f8      	ldr	r0, [r7, #12]
 8103240:	f000 f8a5 	bl	810338e <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8103244:	4603      	mov	r3, r0
 8103246:	4618      	mov	r0, r3
 8103248:	3710      	adds	r7, #16
 810324a:	46bd      	mov	sp, r7
 810324c:	bd80      	pop	{r7, pc}

0810324e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810324e:	b5b0      	push	{r4, r5, r7, lr}
 8103250:	b086      	sub	sp, #24
 8103252:	af02      	add	r7, sp, #8
 8103254:	60f8      	str	r0, [r7, #12]
 8103256:	60b9      	str	r1, [r7, #8]
 8103258:	607a      	str	r2, [r7, #4]
 810325a:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 810325c:	6878      	ldr	r0, [r7, #4]
 810325e:	f7ff f96b 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103262:	4604      	mov	r4, r0
 8103264:	6838      	ldr	r0, [r7, #0]
 8103266:	f7ff f972 	bl	810254e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810326a:	4605      	mov	r5, r0
 810326c:	6a38      	ldr	r0, [r7, #32]
 810326e:	f7ff f979 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103272:	4603      	mov	r3, r0
 8103274:	9300      	str	r3, [sp, #0]
 8103276:	462b      	mov	r3, r5
 8103278:	4622      	mov	r2, r4
 810327a:	68b9      	ldr	r1, [r7, #8]
 810327c:	68f8      	ldr	r0, [r7, #12]
 810327e:	f000 f8ae 	bl	81033de <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 8103282:	bf00      	nop
 8103284:	3710      	adds	r7, #16
 8103286:	46bd      	mov	sp, r7
 8103288:	bdb0      	pop	{r4, r5, r7, pc}

0810328a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810328a:	b5b0      	push	{r4, r5, r7, lr}
 810328c:	b086      	sub	sp, #24
 810328e:	af02      	add	r7, sp, #8
 8103290:	60f8      	str	r0, [r7, #12]
 8103292:	60b9      	str	r1, [r7, #8]
 8103294:	607a      	str	r2, [r7, #4]
 8103296:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8103298:	6878      	ldr	r0, [r7, #4]
 810329a:	f7ff f94d 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810329e:	4604      	mov	r4, r0
 81032a0:	6838      	ldr	r0, [r7, #0]
 81032a2:	f7ff fade 	bl	8102862 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 81032a6:	4605      	mov	r5, r0
 81032a8:	6a38      	ldr	r0, [r7, #32]
 81032aa:	f7ff f95b 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81032ae:	4603      	mov	r3, r0
 81032b0:	9300      	str	r3, [sp, #0]
 81032b2:	462b      	mov	r3, r5
 81032b4:	4622      	mov	r2, r4
 81032b6:	68b9      	ldr	r1, [r7, #8]
 81032b8:	68f8      	ldr	r0, [r7, #12]
 81032ba:	f000 f8b8 	bl	810342e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>
	}
 81032be:	bf00      	nop
 81032c0:	3710      	adds	r7, #16
 81032c2:	46bd      	mov	sp, r7
 81032c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

081032c8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 81032c8:	b580      	push	{r7, lr}
 81032ca:	b084      	sub	sp, #16
 81032cc:	af00      	add	r7, sp, #0
 81032ce:	60f8      	str	r0, [r7, #12]
 81032d0:	60b9      	str	r1, [r7, #8]
 81032d2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 81032d4:	68f8      	ldr	r0, [r7, #12]
 81032d6:	f000 f8d3 	bl	8103480 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 81032da:	4602      	mov	r2, r0
 81032dc:	68bb      	ldr	r3, [r7, #8]
 81032de:	4293      	cmp	r3, r2
 81032e0:	bf8c      	ite	hi
 81032e2:	2301      	movhi	r3, #1
 81032e4:	2300      	movls	r3, #0
 81032e6:	b2db      	uxtb	r3, r3
 81032e8:	2b00      	cmp	r3, #0
 81032ea:	bf14      	ite	ne
 81032ec:	2301      	movne	r3, #1
 81032ee:	2300      	moveq	r3, #0
 81032f0:	b2db      	uxtb	r3, r3
 81032f2:	2b00      	cmp	r3, #0
 81032f4:	d007      	beq.n	8103306 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 81032f6:	68bb      	ldr	r3, [r7, #8]
 81032f8:	4a09      	ldr	r2, [pc, #36]	@ (8103320 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x58>)
 81032fa:	4293      	cmp	r3, r2
 81032fc:	d901      	bls.n	8103302 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 81032fe:	f018 fb90 	bl	811ba22 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8103302:	f018 fb8b 	bl	811ba1c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8103306:	68ba      	ldr	r2, [r7, #8]
 8103308:	4613      	mov	r3, r2
 810330a:	005b      	lsls	r3, r3, #1
 810330c:	4413      	add	r3, r2
 810330e:	00db      	lsls	r3, r3, #3
 8103310:	4618      	mov	r0, r3
 8103312:	f018 fab5 	bl	811b880 <_Znwj>
 8103316:	4603      	mov	r3, r0
      }
 8103318:	4618      	mov	r0, r3
 810331a:	3710      	adds	r7, #16
 810331c:	46bd      	mov	sp, r7
 810331e:	bd80      	pop	{r7, pc}
 8103320:	0aaaaaaa 	.word	0x0aaaaaaa

08103324 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8103324:	b5b0      	push	{r4, r5, r7, lr}
 8103326:	b084      	sub	sp, #16
 8103328:	af00      	add	r7, sp, #0
 810332a:	60f8      	str	r0, [r7, #12]
 810332c:	60b9      	str	r1, [r7, #8]
 810332e:	607a      	str	r2, [r7, #4]
 8103330:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8103332:	68bb      	ldr	r3, [r7, #8]
 8103334:	4619      	mov	r1, r3
 8103336:	2008      	movs	r0, #8
 8103338:	f7fd fd24 	bl	8100d84 <_ZnwjPv>
 810333c:	4604      	mov	r4, r0
 810333e:	6878      	ldr	r0, [r7, #4]
 8103340:	f7fe faad 	bl	810189e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8103344:	4605      	mov	r5, r0
 8103346:	6838      	ldr	r0, [r7, #0]
 8103348:	f7fe fab4 	bl	81018b4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810334c:	4603      	mov	r3, r0
 810334e:	461a      	mov	r2, r3
 8103350:	4629      	mov	r1, r5
 8103352:	4620      	mov	r0, r4
 8103354:	f000 f8a2 	bl	810349c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>
 8103358:	bf00      	nop
 810335a:	3710      	adds	r7, #16
 810335c:	46bd      	mov	sp, r7
 810335e:	bdb0      	pop	{r4, r5, r7, pc}

08103360 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 8103360:	b480      	push	{r7}
 8103362:	b083      	sub	sp, #12
 8103364:	af00      	add	r7, sp, #0
 8103366:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	4618      	mov	r0, r3
 810336c:	370c      	adds	r7, #12
 810336e:	46bd      	mov	sp, r7
 8103370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103374:	4770      	bx	lr

08103376 <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8103376:	b580      	push	{r7, lr}
 8103378:	b082      	sub	sp, #8
 810337a:	af00      	add	r7, sp, #0
 810337c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 810337e:	6878      	ldr	r0, [r7, #4]
 8103380:	f7ff ff06 	bl	8103190 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8103384:	4603      	mov	r3, r0
 8103386:	4618      	mov	r0, r3
 8103388:	3708      	adds	r7, #8
 810338a:	46bd      	mov	sp, r7
 810338c:	bd80      	pop	{r7, pc}

0810338e <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 810338e:	b590      	push	{r4, r7, lr}
 8103390:	b085      	sub	sp, #20
 8103392:	af00      	add	r7, sp, #0
 8103394:	60f8      	str	r0, [r7, #12]
 8103396:	60b9      	str	r1, [r7, #8]
 8103398:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 810339a:	68f8      	ldr	r0, [r7, #12]
 810339c:	f000 f897 	bl	81034ce <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 81033a0:	4604      	mov	r4, r0
 81033a2:	68b8      	ldr	r0, [r7, #8]
 81033a4:	f000 f893 	bl	81034ce <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 81033a8:	4603      	mov	r3, r0
 81033aa:	687a      	ldr	r2, [r7, #4]
 81033ac:	4619      	mov	r1, r3
 81033ae:	4620      	mov	r0, r4
 81033b0:	f000 f89e 	bl	81034f0 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>
 81033b4:	4603      	mov	r3, r0
    }
 81033b6:	4618      	mov	r0, r3
 81033b8:	3714      	adds	r7, #20
 81033ba:	46bd      	mov	sp, r7
 81033bc:	bd90      	pop	{r4, r7, pc}

081033be <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 81033be:	b580      	push	{r7, lr}
 81033c0:	b082      	sub	sp, #8
 81033c2:	af00      	add	r7, sp, #0
 81033c4:	6078      	str	r0, [r7, #4]
 81033c6:	6039      	str	r1, [r7, #0]
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	683a      	ldr	r2, [r7, #0]
 81033cc:	4611      	mov	r1, r2
 81033ce:	4618      	mov	r0, r3
 81033d0:	f000 f8b1 	bl	8103536 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	4618      	mov	r0, r3
 81033d8:	3708      	adds	r7, #8
 81033da:	46bd      	mov	sp, r7
 81033dc:	bd80      	pop	{r7, pc}

081033de <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 81033de:	b5f0      	push	{r4, r5, r6, r7, lr}
 81033e0:	b087      	sub	sp, #28
 81033e2:	af00      	add	r7, sp, #0
 81033e4:	60f8      	str	r0, [r7, #12]
 81033e6:	60b9      	str	r1, [r7, #8]
 81033e8:	607a      	str	r2, [r7, #4]
 81033ea:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81033ec:	68bb      	ldr	r3, [r7, #8]
 81033ee:	4619      	mov	r1, r3
 81033f0:	2008      	movs	r0, #8
 81033f2:	f7fd fcc7 	bl	8100d84 <_ZnwjPv>
 81033f6:	4604      	mov	r4, r0
 81033f8:	6878      	ldr	r0, [r7, #4]
 81033fa:	f7ff f89d 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81033fe:	6838      	ldr	r0, [r7, #0]
 8103400:	f7ff f8a5 	bl	810254e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8103404:	4602      	mov	r2, r0
 8103406:	f107 0314 	add.w	r3, r7, #20
 810340a:	4611      	mov	r1, r2
 810340c:	4618      	mov	r0, r3
 810340e:	f7ff ffd6 	bl	81033be <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8103412:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8103414:	f7ff f8a6 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103418:	f107 0214 	add.w	r2, r7, #20
 810341c:	4633      	mov	r3, r6
 810341e:	4629      	mov	r1, r5
 8103420:	4620      	mov	r0, r4
 8103422:	f000 f898 	bl	8103556 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8103426:	bf00      	nop
 8103428:	371c      	adds	r7, #28
 810342a:	46bd      	mov	sp, r7
 810342c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810342e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 810342e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8103430:	b087      	sub	sp, #28
 8103432:	af00      	add	r7, sp, #0
 8103434:	60f8      	str	r0, [r7, #12]
 8103436:	60b9      	str	r1, [r7, #8]
 8103438:	607a      	str	r2, [r7, #4]
 810343a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 810343c:	68bb      	ldr	r3, [r7, #8]
 810343e:	4619      	mov	r1, r3
 8103440:	2008      	movs	r0, #8
 8103442:	f7fd fc9f 	bl	8100d84 <_ZnwjPv>
 8103446:	4604      	mov	r4, r0
 8103448:	6878      	ldr	r0, [r7, #4]
 810344a:	f7ff f875 	bl	8102538 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810344e:	6838      	ldr	r0, [r7, #0]
 8103450:	f7ff fa07 	bl	8102862 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8103454:	4602      	mov	r2, r0
 8103456:	f107 0314 	add.w	r3, r7, #20
 810345a:	4611      	mov	r1, r2
 810345c:	4618      	mov	r0, r3
 810345e:	f7fe fd0e 	bl	8101e7e <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 8103462:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8103464:	f7ff f87e 	bl	8102564 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103468:	f107 0214 	add.w	r2, r7, #20
 810346c:	4633      	mov	r3, r6
 810346e:	4629      	mov	r1, r5
 8103470:	4620      	mov	r0, r4
 8103472:	f000 f884 	bl	810357e <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8103476:	bf00      	nop
 8103478:	371c      	adds	r7, #28
 810347a:	46bd      	mov	sp, r7
 810347c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08103480 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8103480:	b480      	push	{r7}
 8103482:	b083      	sub	sp, #12
 8103484:	af00      	add	r7, sp, #0
 8103486:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8103488:	4b03      	ldr	r3, [pc, #12]	@ (8103498 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 810348a:	4618      	mov	r0, r3
 810348c:	370c      	adds	r7, #12
 810348e:	46bd      	mov	sp, r7
 8103490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103494:	4770      	bx	lr
 8103496:	bf00      	nop
 8103498:	05555555 	.word	0x05555555

0810349c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 810349c:	b580      	push	{r7, lr}
 810349e:	b084      	sub	sp, #16
 81034a0:	af00      	add	r7, sp, #0
 81034a2:	60f8      	str	r0, [r7, #12]
 81034a4:	60b9      	str	r1, [r7, #8]
 81034a6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 81034a8:	68b8      	ldr	r0, [r7, #8]
 81034aa:	f7fe f9f8 	bl	810189e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81034ae:	4603      	mov	r3, r0
 81034b0:	781a      	ldrb	r2, [r3, #0]
 81034b2:	68fb      	ldr	r3, [r7, #12]
 81034b4:	701a      	strb	r2, [r3, #0]
 81034b6:	6878      	ldr	r0, [r7, #4]
 81034b8:	f7fe f9fc 	bl	81018b4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81034bc:	4603      	mov	r3, r0
 81034be:	681a      	ldr	r2, [r3, #0]
 81034c0:	68fb      	ldr	r3, [r7, #12]
 81034c2:	605a      	str	r2, [r3, #4]
 81034c4:	68fb      	ldr	r3, [r7, #12]
 81034c6:	4618      	mov	r0, r3
 81034c8:	3710      	adds	r7, #16
 81034ca:	46bd      	mov	sp, r7
 81034cc:	bd80      	pop	{r7, pc}

081034ce <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 81034ce:	b580      	push	{r7, lr}
 81034d0:	b082      	sub	sp, #8
 81034d2:	af00      	add	r7, sp, #0
 81034d4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 81034d6:	1d3b      	adds	r3, r7, #4
 81034d8:	4618      	mov	r0, r3
 81034da:	f000 f864 	bl	81035a6 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>
 81034de:	4603      	mov	r3, r0
 81034e0:	4618      	mov	r0, r3
 81034e2:	f000 f86c 	bl	81035be <_ZSt12__miter_baseIP8SMessageET_S2_>
 81034e6:	4603      	mov	r3, r0
 81034e8:	4618      	mov	r0, r3
 81034ea:	3708      	adds	r7, #8
 81034ec:	46bd      	mov	sp, r7
 81034ee:	bd80      	pop	{r7, pc}

081034f0 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 81034f0:	b5b0      	push	{r4, r5, r7, lr}
 81034f2:	b084      	sub	sp, #16
 81034f4:	af00      	add	r7, sp, #0
 81034f6:	60f8      	str	r0, [r7, #12]
 81034f8:	60b9      	str	r1, [r7, #8]
 81034fa:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 81034fc:	68f8      	ldr	r0, [r7, #12]
 81034fe:	f7ff fe55 	bl	81031ac <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103502:	4604      	mov	r4, r0
 8103504:	68b8      	ldr	r0, [r7, #8]
 8103506:	f7ff fe51 	bl	81031ac <_ZSt12__niter_baseIP8SMessageET_S2_>
 810350a:	4605      	mov	r5, r0
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	4618      	mov	r0, r3
 8103510:	f7ff fe4c 	bl	81031ac <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103514:	4603      	mov	r3, r0
 8103516:	461a      	mov	r2, r3
 8103518:	4629      	mov	r1, r5
 810351a:	4620      	mov	r0, r4
 810351c:	f000 f85a 	bl	81035d4 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8103520:	4602      	mov	r2, r0
 8103522:	1d3b      	adds	r3, r7, #4
 8103524:	4611      	mov	r1, r2
 8103526:	4618      	mov	r0, r3
 8103528:	f000 f864 	bl	81035f4 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>
 810352c:	4603      	mov	r3, r0
    }
 810352e:	4618      	mov	r0, r3
 8103530:	3710      	adds	r7, #16
 8103532:	46bd      	mov	sp, r7
 8103534:	bdb0      	pop	{r4, r5, r7, pc}

08103536 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8103536:	b480      	push	{r7}
 8103538:	b083      	sub	sp, #12
 810353a:	af00      	add	r7, sp, #0
 810353c:	6078      	str	r0, [r7, #4]
 810353e:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	683a      	ldr	r2, [r7, #0]
 8103544:	6812      	ldr	r2, [r2, #0]
 8103546:	601a      	str	r2, [r3, #0]
      { }
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	4618      	mov	r0, r3
 810354c:	370c      	adds	r7, #12
 810354e:	46bd      	mov	sp, r7
 8103550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103554:	4770      	bx	lr

08103556 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8103556:	b5b0      	push	{r4, r5, r7, lr}
 8103558:	b086      	sub	sp, #24
 810355a:	af02      	add	r7, sp, #8
 810355c:	60f8      	str	r0, [r7, #12]
 810355e:	7239      	strb	r1, [r7, #8]
 8103560:	607a      	str	r2, [r7, #4]
 8103562:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8103564:	463a      	mov	r2, r7
 8103566:	f88d 4000 	strb.w	r4, [sp]
 810356a:	462b      	mov	r3, r5
 810356c:	6879      	ldr	r1, [r7, #4]
 810356e:	68f8      	ldr	r0, [r7, #12]
 8103570:	f000 f84c 	bl	810360c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8103574:	68fb      	ldr	r3, [r7, #12]
 8103576:	4618      	mov	r0, r3
 8103578:	3710      	adds	r7, #16
 810357a:	46bd      	mov	sp, r7
 810357c:	bdb0      	pop	{r4, r5, r7, pc}

0810357e <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 810357e:	b5b0      	push	{r4, r5, r7, lr}
 8103580:	b086      	sub	sp, #24
 8103582:	af02      	add	r7, sp, #8
 8103584:	60f8      	str	r0, [r7, #12]
 8103586:	7239      	strb	r1, [r7, #8]
 8103588:	607a      	str	r2, [r7, #4]
 810358a:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 810358c:	463a      	mov	r2, r7
 810358e:	f88d 4000 	strb.w	r4, [sp]
 8103592:	462b      	mov	r3, r5
 8103594:	6879      	ldr	r1, [r7, #4]
 8103596:	68f8      	ldr	r0, [r7, #12]
 8103598:	f000 f852 	bl	8103640 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 810359c:	68fb      	ldr	r3, [r7, #12]
 810359e:	4618      	mov	r0, r3
 81035a0:	3710      	adds	r7, #16
 81035a2:	46bd      	mov	sp, r7
 81035a4:	bdb0      	pop	{r4, r5, r7, pc}

081035a6 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>:
      base() const
 81035a6:	b480      	push	{r7}
 81035a8:	b083      	sub	sp, #12
 81035aa:	af00      	add	r7, sp, #0
 81035ac:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	4618      	mov	r0, r3
 81035b4:	370c      	adds	r7, #12
 81035b6:	46bd      	mov	sp, r7
 81035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035bc:	4770      	bx	lr

081035be <_ZSt12__miter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 81035be:	b480      	push	{r7}
 81035c0:	b083      	sub	sp, #12
 81035c2:	af00      	add	r7, sp, #0
 81035c4:	6078      	str	r0, [r7, #4]
    { return __it; }
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	4618      	mov	r0, r3
 81035ca:	370c      	adds	r7, #12
 81035cc:	46bd      	mov	sp, r7
 81035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035d2:	4770      	bx	lr

081035d4 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 81035d4:	b580      	push	{r7, lr}
 81035d6:	b084      	sub	sp, #16
 81035d8:	af00      	add	r7, sp, #0
 81035da:	60f8      	str	r0, [r7, #12]
 81035dc:	60b9      	str	r1, [r7, #8]
 81035de:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 81035e0:	687a      	ldr	r2, [r7, #4]
 81035e2:	68b9      	ldr	r1, [r7, #8]
 81035e4:	68f8      	ldr	r0, [r7, #12]
 81035e6:	f000 f845 	bl	8103674 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 81035ea:	4603      	mov	r3, r0
 81035ec:	4618      	mov	r0, r3
 81035ee:	3710      	adds	r7, #16
 81035f0:	46bd      	mov	sp, r7
 81035f2:	bd80      	pop	{r7, pc}

081035f4 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 81035f4:	b480      	push	{r7}
 81035f6:	b083      	sub	sp, #12
 81035f8:	af00      	add	r7, sp, #0
 81035fa:	6078      	str	r0, [r7, #4]
 81035fc:	6039      	str	r1, [r7, #0]
    { return __res; }
 81035fe:	683b      	ldr	r3, [r7, #0]
 8103600:	4618      	mov	r0, r3
 8103602:	370c      	adds	r7, #12
 8103604:	46bd      	mov	sp, r7
 8103606:	f85d 7b04 	ldr.w	r7, [sp], #4
 810360a:	4770      	bx	lr

0810360c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 810360c:	b580      	push	{r7, lr}
 810360e:	b084      	sub	sp, #16
 8103610:	af00      	add	r7, sp, #0
 8103612:	60f8      	str	r0, [r7, #12]
 8103614:	60b9      	str	r1, [r7, #8]
 8103616:	607a      	str	r2, [r7, #4]
 8103618:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 810361a:	68b8      	ldr	r0, [r7, #8]
 810361c:	f000 f83a 	bl	8103694 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8103620:	4603      	mov	r3, r0
 8103622:	4618      	mov	r0, r3
 8103624:	f000 f843 	bl	81036ae <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103628:	4603      	mov	r3, r0
 810362a:	781a      	ldrb	r2, [r3, #0]
 810362c:	68fb      	ldr	r3, [r7, #12]
 810362e:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8103630:	68fb      	ldr	r3, [r7, #12]
 8103632:	2200      	movs	r2, #0
 8103634:	605a      	str	r2, [r3, #4]
      { }
 8103636:	68fb      	ldr	r3, [r7, #12]
 8103638:	4618      	mov	r0, r3
 810363a:	3710      	adds	r7, #16
 810363c:	46bd      	mov	sp, r7
 810363e:	bd80      	pop	{r7, pc}

08103640 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8103640:	b580      	push	{r7, lr}
 8103642:	b084      	sub	sp, #16
 8103644:	af00      	add	r7, sp, #0
 8103646:	60f8      	str	r0, [r7, #12]
 8103648:	60b9      	str	r1, [r7, #8]
 810364a:	607a      	str	r2, [r7, #4]
 810364c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 810364e:	68b8      	ldr	r0, [r7, #8]
 8103650:	f000 f838 	bl	81036c4 <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8103654:	4603      	mov	r3, r0
 8103656:	4618      	mov	r0, r3
 8103658:	f000 f841 	bl	81036de <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810365c:	4603      	mov	r3, r0
 810365e:	781a      	ldrb	r2, [r3, #0]
 8103660:	68fb      	ldr	r3, [r7, #12]
 8103662:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8103664:	68fb      	ldr	r3, [r7, #12]
 8103666:	2200      	movs	r2, #0
 8103668:	605a      	str	r2, [r3, #4]
      { }
 810366a:	68fb      	ldr	r3, [r7, #12]
 810366c:	4618      	mov	r0, r3
 810366e:	3710      	adds	r7, #16
 8103670:	46bd      	mov	sp, r7
 8103672:	bd80      	pop	{r7, pc}

08103674 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8103674:	b580      	push	{r7, lr}
 8103676:	b084      	sub	sp, #16
 8103678:	af00      	add	r7, sp, #0
 810367a:	60f8      	str	r0, [r7, #12]
 810367c:	60b9      	str	r1, [r7, #8]
 810367e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8103680:	687a      	ldr	r2, [r7, #4]
 8103682:	68b9      	ldr	r1, [r7, #8]
 8103684:	68f8      	ldr	r0, [r7, #12]
 8103686:	f000 f835 	bl	81036f4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>
 810368a:	4603      	mov	r3, r0
    }
 810368c:	4618      	mov	r0, r3
 810368e:	3710      	adds	r7, #16
 8103690:	46bd      	mov	sp, r7
 8103692:	bd80      	pop	{r7, pc}

08103694 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8103694:	b580      	push	{r7, lr}
 8103696:	b082      	sub	sp, #8
 8103698:	af00      	add	r7, sp, #0
 810369a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	4618      	mov	r0, r3
 81036a0:	f000 f852 	bl	8103748 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 81036a4:	4603      	mov	r3, r0
 81036a6:	4618      	mov	r0, r3
 81036a8:	3708      	adds	r7, #8
 81036aa:	46bd      	mov	sp, r7
 81036ac:	bd80      	pop	{r7, pc}

081036ae <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81036ae:	b480      	push	{r7}
 81036b0:	b083      	sub	sp, #12
 81036b2:	af00      	add	r7, sp, #0
 81036b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	4618      	mov	r0, r3
 81036ba:	370c      	adds	r7, #12
 81036bc:	46bd      	mov	sp, r7
 81036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036c2:	4770      	bx	lr

081036c4 <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 81036c4:	b580      	push	{r7, lr}
 81036c6:	b082      	sub	sp, #8
 81036c8:	af00      	add	r7, sp, #0
 81036ca:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	4618      	mov	r0, r3
 81036d0:	f000 f846 	bl	8103760 <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 81036d4:	4603      	mov	r3, r0
 81036d6:	4618      	mov	r0, r3
 81036d8:	3708      	adds	r7, #8
 81036da:	46bd      	mov	sp, r7
 81036dc:	bd80      	pop	{r7, pc}

081036de <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81036de:	b480      	push	{r7}
 81036e0:	b083      	sub	sp, #12
 81036e2:	af00      	add	r7, sp, #0
 81036e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	4618      	mov	r0, r3
 81036ea:	370c      	adds	r7, #12
 81036ec:	46bd      	mov	sp, r7
 81036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036f2:	4770      	bx	lr

081036f4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 81036f4:	b580      	push	{r7, lr}
 81036f6:	b086      	sub	sp, #24
 81036f8:	af00      	add	r7, sp, #0
 81036fa:	60f8      	str	r0, [r7, #12]
 81036fc:	60b9      	str	r1, [r7, #8]
 81036fe:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8103700:	68ba      	ldr	r2, [r7, #8]
 8103702:	68fb      	ldr	r3, [r7, #12]
 8103704:	1ad3      	subs	r3, r2, r3
 8103706:	10db      	asrs	r3, r3, #3
 8103708:	4a0e      	ldr	r2, [pc, #56]	@ (8103744 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x50>)
 810370a:	fb02 f303 	mul.w	r3, r2, r3
 810370e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8103710:	697b      	ldr	r3, [r7, #20]
 8103712:	2b00      	cmp	r3, #0
 8103714:	d009      	beq.n	810372a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8103716:	697a      	ldr	r2, [r7, #20]
 8103718:	4613      	mov	r3, r2
 810371a:	005b      	lsls	r3, r3, #1
 810371c:	4413      	add	r3, r2
 810371e:	00db      	lsls	r3, r3, #3
 8103720:	461a      	mov	r2, r3
 8103722:	68f9      	ldr	r1, [r7, #12]
 8103724:	6878      	ldr	r0, [r7, #4]
 8103726:	f018 fbde 	bl	811bee6 <memmove>
	  return __result + _Num;
 810372a:	697a      	ldr	r2, [r7, #20]
 810372c:	4613      	mov	r3, r2
 810372e:	005b      	lsls	r3, r3, #1
 8103730:	4413      	add	r3, r2
 8103732:	00db      	lsls	r3, r3, #3
 8103734:	461a      	mov	r2, r3
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	4413      	add	r3, r2
	}
 810373a:	4618      	mov	r0, r3
 810373c:	3718      	adds	r7, #24
 810373e:	46bd      	mov	sp, r7
 8103740:	bd80      	pop	{r7, pc}
 8103742:	bf00      	nop
 8103744:	aaaaaaab 	.word	0xaaaaaaab

08103748 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8103748:	b580      	push	{r7, lr}
 810374a:	b082      	sub	sp, #8
 810374c:	af00      	add	r7, sp, #0
 810374e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8103750:	6878      	ldr	r0, [r7, #4]
 8103752:	f000 f811 	bl	8103778 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 8103756:	4603      	mov	r3, r0
 8103758:	4618      	mov	r0, r3
 810375a:	3708      	adds	r7, #8
 810375c:	46bd      	mov	sp, r7
 810375e:	bd80      	pop	{r7, pc}

08103760 <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8103760:	b580      	push	{r7, lr}
 8103762:	b082      	sub	sp, #8
 8103764:	af00      	add	r7, sp, #0
 8103766:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8103768:	6878      	ldr	r0, [r7, #4]
 810376a:	f000 f812 	bl	8103792 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>
 810376e:	4603      	mov	r3, r0
 8103770:	4618      	mov	r0, r3
 8103772:	3708      	adds	r7, #8
 8103774:	46bd      	mov	sp, r7
 8103776:	bd80      	pop	{r7, pc}

08103778 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8103778:	b580      	push	{r7, lr}
 810377a:	b082      	sub	sp, #8
 810377c:	af00      	add	r7, sp, #0
 810377e:	6078      	str	r0, [r7, #4]
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	4618      	mov	r0, r3
 8103784:	f000 f812 	bl	81037ac <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 8103788:	4603      	mov	r3, r0
 810378a:	4618      	mov	r0, r3
 810378c:	3708      	adds	r7, #8
 810378e:	46bd      	mov	sp, r7
 8103790:	bd80      	pop	{r7, pc}

08103792 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>:
 8103792:	b580      	push	{r7, lr}
 8103794:	b082      	sub	sp, #8
 8103796:	af00      	add	r7, sp, #0
 8103798:	6078      	str	r0, [r7, #4]
 810379a:	687b      	ldr	r3, [r7, #4]
 810379c:	4618      	mov	r0, r3
 810379e:	f000 f811 	bl	81037c4 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>
 81037a2:	4603      	mov	r3, r0
 81037a4:	4618      	mov	r0, r3
 81037a6:	3708      	adds	r7, #8
 81037a8:	46bd      	mov	sp, r7
 81037aa:	bd80      	pop	{r7, pc}

081037ac <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 81037ac:	b480      	push	{r7}
 81037ae:	b083      	sub	sp, #12
 81037b0:	af00      	add	r7, sp, #0
 81037b2:	6078      	str	r0, [r7, #4]
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	4618      	mov	r0, r3
 81037ba:	370c      	adds	r7, #12
 81037bc:	46bd      	mov	sp, r7
 81037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037c2:	4770      	bx	lr

081037c4 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>:
 81037c4:	b480      	push	{r7}
 81037c6:	b083      	sub	sp, #12
 81037c8:	af00      	add	r7, sp, #0
 81037ca:	6078      	str	r0, [r7, #4]
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	4618      	mov	r0, r3
 81037d2:	370c      	adds	r7, #12
 81037d4:	46bd      	mov	sp, r7
 81037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037da:	4770      	bx	lr

081037dc <_Z18StartTask_EDaemonNPv>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 81037dc:	b580      	push	{r7, lr}
 81037de:	b086      	sub	sp, #24
 81037e0:	af00      	add	r7, sp, #0
 81037e2:	6078      	str	r0, [r7, #4]
	ipc_start();
 81037e4:	f7fc fe1a 	bl	810041c <ipc_start>
	IPCDaemonNativeTask IPCDaemonNativeTaskInstance;
 81037e8:	f107 030c 	add.w	r3, r7, #12
 81037ec:	4618      	mov	r0, r3
 81037ee:	f000 f80b 	bl	8103808 <_ZN19IPCDaemonNativeTaskC1Ev>

	for(;;)
	{
		IPCDaemonNativeTaskInstance.process();
 81037f2:	f107 030c 	add.w	r3, r7, #12
 81037f6:	4618      	mov	r0, r3
 81037f8:	f000 f8b5 	bl	8103966 <_ZN19IPCDaemonNativeTask7processEv>
		osDelay(1);
 81037fc:	2001      	movs	r0, #1
 81037fe:	f008 fdc6 	bl	810c38e <osDelay>
		IPCDaemonNativeTaskInstance.process();
 8103802:	bf00      	nop
 8103804:	e7f5      	b.n	81037f2 <_Z18StartTask_EDaemonNPv+0x16>
	...

08103808 <_ZN19IPCDaemonNativeTaskC1Ev>:
	}
}

IPCDaemonNativeTask::IPCDaemonNativeTask() : event_bus(EventBus(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 8103808:	b580      	push	{r7, lr}
 810380a:	b082      	sub	sp, #8
 810380c:	af00      	add	r7, sp, #0
 810380e:	6078      	str	r0, [r7, #4]
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	4a05      	ldr	r2, [pc, #20]	@ (8103828 <_ZN19IPCDaemonNativeTaskC1Ev+0x20>)
 8103814:	6811      	ldr	r1, [r2, #0]
 8103816:	2205      	movs	r2, #5
 8103818:	4618      	mov	r0, r3
 810381a:	f7fd fc17 	bl	810104c <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	4618      	mov	r0, r3
 8103822:	3708      	adds	r7, #8
 8103824:	46bd      	mov	sp, r7
 8103826:	bd80      	pop	{r7, pc}
 8103828:	10000114 	.word	0x10000114

0810382c <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void IPCDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
{
 810382c:	b082      	sub	sp, #8
 810382e:	b5b0      	push	{r4, r5, r7, lr}
 8103830:	b08e      	sub	sp, #56	@ 0x38
 8103832:	af04      	add	r7, sp, #16
 8103834:	6078      	str	r0, [r7, #4]
 8103836:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 810383a:	e880 000c 	stmia.w	r0, {r2, r3}
 810383e:	460b      	mov	r3, r1
 8103840:	807b      	strh	r3, [r7, #2]
	switch(eventReceiver)
 8103842:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8103846:	2b00      	cmp	r3, #0
 8103848:	d005      	beq.n	8103856 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x2a>
 810384a:	2b00      	cmp	r3, #0
 810384c:	db31      	blt.n	81038b2 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x86>
 810384e:	3b02      	subs	r3, #2
 8103850:	2b01      	cmp	r3, #1
 8103852:	d82e      	bhi.n	81038b2 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x86>
 8103854:	e01a      	b.n	810388c <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x60>
	{
	// if recipient is on CM7 side, then send message through IPC.
	case EVENT_CLIENT_FRONTEND:
	{
		SMessage sMsg;
		sMsg.event_type = event;
 8103856:	887b      	ldrh	r3, [r7, #2]
 8103858:	813b      	strh	r3, [r7, #8]
		sMsg.message_data = msg;
 810385a:	f107 040c 	add.w	r4, r7, #12
 810385e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8103862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		sMsg.event_sender = eventSender;
 8103868:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 810386c:	773b      	strb	r3, [r7, #28]
		sMsg.event_receiver = eventReceiver;
 810386e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8103872:	777b      	strb	r3, [r7, #29]
		size_t len = sizeof(sMsg);
 8103874:	2318      	movs	r3, #24
 8103876:	627b      	str	r3, [r7, #36]	@ 0x24
		size_t ret = ipc_sendmsg(&sMsg, len, 1000);
 8103878:	f107 0308 	add.w	r3, r7, #8
 810387c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8103880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8103882:	4618      	mov	r0, r3
 8103884:	f7fc fe50 	bl	8100528 <ipc_sendmsg>
 8103888:	6238      	str	r0, [r7, #32]
		break;
 810388a:	e013      	b.n	81038b4 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x88>
	}
	// if recipient is on CM4 side, then forward to event manager.
	case EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER:
	case EVENT_CLIENT_THERMOMETER:
		event_bus.send(event, msg, eventReceiver);
 810388c:	687c      	ldr	r4, [r7, #4]
 810388e:	887d      	ldrh	r5, [r7, #2]
 8103890:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8103894:	9302      	str	r3, [sp, #8]
 8103896:	466a      	mov	r2, sp
 8103898:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810389c:	e893 0003 	ldmia.w	r3, {r0, r1}
 81038a0:	e882 0003 	stmia.w	r2, {r0, r1}
 81038a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 81038a8:	cb0c      	ldmia	r3, {r2, r3}
 81038aa:	4629      	mov	r1, r5
 81038ac:	4620      	mov	r0, r4
 81038ae:	f7fd fbe7 	bl	8101080 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
	default:
		break;;
 81038b2:	bf00      	nop
	}
}
 81038b4:	bf00      	nop
 81038b6:	3728      	adds	r7, #40	@ 0x28
 81038b8:	46bd      	mov	sp, r7
 81038ba:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81038be:	b002      	add	sp, #8
 81038c0:	4770      	bx	lr

081038c2 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>:

void IPCDaemonNativeTask::processIpcReceive()
{
 81038c2:	b590      	push	{r4, r7, lr}
 81038c4:	b08f      	sub	sp, #60	@ 0x3c
 81038c6:	af04      	add	r7, sp, #16
 81038c8:	6078      	str	r0, [r7, #4]
	SMessage sMsg;
	size_t len = sizeof(sMsg);
 81038ca:	2318      	movs	r3, #24
 81038cc:	627b      	str	r3, [r7, #36]	@ 0x24
	size_t ret = ipc_recvmsg(&sMsg, len, 0);
 81038ce:	f107 0308 	add.w	r3, r7, #8
 81038d2:	2200      	movs	r2, #0
 81038d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81038d6:	4618      	mov	r0, r3
 81038d8:	f7fc fe4e 	bl	8100578 <ipc_recvmsg>
 81038dc:	6238      	str	r0, [r7, #32]
	if(ret == len)
 81038de:	6a3a      	ldr	r2, [r7, #32]
 81038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81038e2:	429a      	cmp	r2, r3
 81038e4:	d112      	bne.n	810390c <_ZN19IPCDaemonNativeTask17processIpcReceiveEv+0x4a>
	{
		OnEvent(sMsg.event_type, sMsg.message_data, sMsg.event_sender, sMsg.event_receiver);
 81038e6:	893c      	ldrh	r4, [r7, #8]
 81038e8:	7f3b      	ldrb	r3, [r7, #28]
 81038ea:	7f7a      	ldrb	r2, [r7, #29]
 81038ec:	9203      	str	r2, [sp, #12]
 81038ee:	9302      	str	r3, [sp, #8]
 81038f0:	466a      	mov	r2, sp
 81038f2:	f107 0314 	add.w	r3, r7, #20
 81038f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 81038fa:	e882 0003 	stmia.w	r2, {r0, r1}
 81038fe:	f107 030c 	add.w	r3, r7, #12
 8103902:	cb0c      	ldmia	r3, {r2, r3}
 8103904:	4621      	mov	r1, r4
 8103906:	6878      	ldr	r0, [r7, #4]
 8103908:	f7ff ff90 	bl	810382c <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
	}
}
 810390c:	bf00      	nop
 810390e:	372c      	adds	r7, #44	@ 0x2c
 8103910:	46bd      	mov	sp, r7
 8103912:	bd90      	pop	{r4, r7, pc}

08103914 <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void IPCDaemonNativeTask::process()
{
	processIpcReceive();
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 8103914:	b082      	sub	sp, #8
 8103916:	b5b0      	push	{r4, r5, r7, lr}
 8103918:	b086      	sub	sp, #24
 810391a:	af04      	add	r7, sp, #16
 810391c:	6078      	str	r0, [r7, #4]
 810391e:	f107 0018 	add.w	r0, r7, #24
 8103922:	e880 000c 	stmia.w	r0, {r2, r3}
 8103926:	460b      	mov	r3, r1
 8103928:	807b      	strh	r3, [r7, #2]
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	681c      	ldr	r4, [r3, #0]
                      {this->OnEvent(event, msg, eventSender, eventReceiver);});
 810392e:	887d      	ldrh	r5, [r7, #2]
 8103930:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8103934:	9303      	str	r3, [sp, #12]
 8103936:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 810393a:	9302      	str	r3, [sp, #8]
 810393c:	466a      	mov	r2, sp
 810393e:	f107 0320 	add.w	r3, r7, #32
 8103942:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103946:	e882 0003 	stmia.w	r2, {r0, r1}
 810394a:	f107 0318 	add.w	r3, r7, #24
 810394e:	cb0c      	ldmia	r3, {r2, r3}
 8103950:	4629      	mov	r1, r5
 8103952:	4620      	mov	r0, r4
 8103954:	f7ff ff6a 	bl	810382c <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 8103958:	bf00      	nop
 810395a:	3708      	adds	r7, #8
 810395c:	46bd      	mov	sp, r7
 810395e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8103962:	b002      	add	sp, #8
 8103964:	4770      	bx	lr

08103966 <_ZN19IPCDaemonNativeTask7processEv>:
{
 8103966:	b590      	push	{r4, r7, lr}
 8103968:	b089      	sub	sp, #36	@ 0x24
 810396a:	af00      	add	r7, sp, #0
 810396c:	6078      	str	r0, [r7, #4]
	processIpcReceive();
 810396e:	6878      	ldr	r0, [r7, #4]
 8103970:	f7ff ffa7 	bl	81038c2 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 8103974:	687c      	ldr	r4, [r7, #4]
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	61fb      	str	r3, [r7, #28]
 810397a:	f107 021c 	add.w	r2, r7, #28
 810397e:	f107 030c 	add.w	r3, r7, #12
 8103982:	4611      	mov	r1, r2
 8103984:	4618      	mov	r0, r3
 8103986:	f000 f80f 	bl	81039a8 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 810398a:	f107 030c 	add.w	r3, r7, #12
 810398e:	4619      	mov	r1, r3
 8103990:	4620      	mov	r0, r4
 8103992:	f7fd fbad 	bl	81010f0 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 8103996:	f107 030c 	add.w	r3, r7, #12
 810399a:	4618      	mov	r0, r3
 810399c:	f7fd faf8 	bl	8100f90 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
}
 81039a0:	bf00      	nop
 81039a2:	3724      	adds	r7, #36	@ 0x24
 81039a4:	46bd      	mov	sp, r7
 81039a6:	bd90      	pop	{r4, r7, pc}

081039a8 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
	function(_Functor&& __f)
 81039a8:	b590      	push	{r4, r7, lr}
 81039aa:	b083      	sub	sp, #12
 81039ac:	af00      	add	r7, sp, #0
 81039ae:	6078      	str	r0, [r7, #4]
 81039b0:	6039      	str	r1, [r7, #0]
	: _Function_base()
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	461a      	mov	r2, r3
 81039b6:	2300      	movs	r3, #0
 81039b8:	6013      	str	r3, [r2, #0]
 81039ba:	6053      	str	r3, [r2, #4]
 81039bc:	6093      	str	r3, [r2, #8]
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	4618      	mov	r0, r3
 81039c2:	f7fd faf2 	bl	8100faa <_ZNSt14_Function_baseC1Ev>
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	2200      	movs	r2, #0
 81039ca:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 81039cc:	6838      	ldr	r0, [r7, #0]
 81039ce:	f000 f81b 	bl	8103a08 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 81039d2:	4603      	mov	r3, r0
 81039d4:	2b00      	cmp	r3, #0
 81039d6:	d00e      	beq.n	81039f6 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 81039d8:	687c      	ldr	r4, [r7, #4]
 81039da:	6838      	ldr	r0, [r7, #0]
 81039dc:	f000 f81f 	bl	8103a1e <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 81039e0:	4603      	mov	r3, r0
 81039e2:	4619      	mov	r1, r3
 81039e4:	4620      	mov	r0, r4
 81039e6:	f000 f825 	bl	8103a34 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	4a04      	ldr	r2, [pc, #16]	@ (8103a00 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 81039ee:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	4a04      	ldr	r2, [pc, #16]	@ (8103a04 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 81039f4:	609a      	str	r2, [r3, #8]
	}
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	4618      	mov	r0, r3
 81039fa:	370c      	adds	r7, #12
 81039fc:	46bd      	mov	sp, r7
 81039fe:	bd90      	pop	{r4, r7, pc}
 8103a00:	08103a59 	.word	0x08103a59
 8103a04:	08103aa9 	.word	0x08103aa9

08103a08 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8103a08:	b480      	push	{r7}
 8103a0a:	b083      	sub	sp, #12
 8103a0c:	af00      	add	r7, sp, #0
 8103a0e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8103a10:	2301      	movs	r3, #1
 8103a12:	4618      	mov	r0, r3
 8103a14:	370c      	adds	r7, #12
 8103a16:	46bd      	mov	sp, r7
 8103a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a1c:	4770      	bx	lr

08103a1e <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103a1e:	b480      	push	{r7}
 8103a20:	b083      	sub	sp, #12
 8103a22:	af00      	add	r7, sp, #0
 8103a24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	4618      	mov	r0, r3
 8103a2a:	370c      	adds	r7, #12
 8103a2c:	46bd      	mov	sp, r7
 8103a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a32:	4770      	bx	lr

08103a34 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8103a34:	b590      	push	{r4, r7, lr}
 8103a36:	b083      	sub	sp, #12
 8103a38:	af00      	add	r7, sp, #0
 8103a3a:	6078      	str	r0, [r7, #4]
 8103a3c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8103a3e:	6838      	ldr	r0, [r7, #0]
 8103a40:	f7ff ffed 	bl	8103a1e <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8103a44:	4603      	mov	r3, r0
 8103a46:	4622      	mov	r2, r4
 8103a48:	4619      	mov	r1, r3
 8103a4a:	6878      	ldr	r0, [r7, #4]
 8103a4c:	f000 f84b 	bl	8103ae6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8103a50:	bf00      	nop
 8103a52:	370c      	adds	r7, #12
 8103a54:	46bd      	mov	sp, r7
 8103a56:	bd90      	pop	{r4, r7, pc}

08103a58 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8103a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8103a5c:	b086      	sub	sp, #24
 8103a5e:	af02      	add	r7, sp, #8
 8103a60:	60f8      	str	r0, [r7, #12]
 8103a62:	60b9      	str	r1, [r7, #8]
 8103a64:	607a      	str	r2, [r7, #4]
 8103a66:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8103a68:	68f8      	ldr	r0, [r7, #12]
 8103a6a:	f000 f855 	bl	8103b18 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8103a6e:	4604      	mov	r4, r0
 8103a70:	68b8      	ldr	r0, [r7, #8]
 8103a72:	f7fd faad 	bl	8100fd0 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8103a76:	4605      	mov	r5, r0
 8103a78:	6878      	ldr	r0, [r7, #4]
 8103a7a:	f7fd fab4 	bl	8100fe6 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8103a7e:	4606      	mov	r6, r0
 8103a80:	6838      	ldr	r0, [r7, #0]
 8103a82:	f7fd fabb 	bl	8100ffc <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8103a86:	4680      	mov	r8, r0
 8103a88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103a8a:	f7fd fab7 	bl	8100ffc <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8103a8e:	4603      	mov	r3, r0
 8103a90:	9300      	str	r3, [sp, #0]
 8103a92:	4643      	mov	r3, r8
 8103a94:	4632      	mov	r2, r6
 8103a96:	4629      	mov	r1, r5
 8103a98:	4620      	mov	r0, r4
 8103a9a:	f000 f84e 	bl	8103b3a <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8103a9e:	bf00      	nop
      }
 8103aa0:	3710      	adds	r7, #16
 8103aa2:	46bd      	mov	sp, r7
 8103aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08103aa8 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8103aa8:	b590      	push	{r4, r7, lr}
 8103aaa:	b085      	sub	sp, #20
 8103aac:	af00      	add	r7, sp, #0
 8103aae:	60f8      	str	r0, [r7, #12]
 8103ab0:	60b9      	str	r1, [r7, #8]
 8103ab2:	4613      	mov	r3, r2
 8103ab4:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8103ab6:	79fb      	ldrb	r3, [r7, #7]
 8103ab8:	2b01      	cmp	r3, #1
 8103aba:	d109      	bne.n	8103ad0 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8103abc:	68f8      	ldr	r0, [r7, #12]
 8103abe:	f000 f865 	bl	8103b8c <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8103ac2:	4604      	mov	r4, r0
 8103ac4:	68b8      	ldr	r0, [r7, #8]
 8103ac6:	f000 f827 	bl	8103b18 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8103aca:	4603      	mov	r3, r0
 8103acc:	6023      	str	r3, [r4, #0]
	    break;
 8103ace:	e005      	b.n	8103adc <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8103ad0:	79fb      	ldrb	r3, [r7, #7]
 8103ad2:	461a      	mov	r2, r3
 8103ad4:	68b9      	ldr	r1, [r7, #8]
 8103ad6:	68f8      	ldr	r0, [r7, #12]
 8103ad8:	f000 f864 	bl	8103ba4 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8103adc:	2300      	movs	r3, #0
      }
 8103ade:	4618      	mov	r0, r3
 8103ae0:	3714      	adds	r7, #20
 8103ae2:	46bd      	mov	sp, r7
 8103ae4:	bd90      	pop	{r4, r7, pc}

08103ae6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8103ae6:	b590      	push	{r4, r7, lr}
 8103ae8:	b085      	sub	sp, #20
 8103aea:	af00      	add	r7, sp, #0
 8103aec:	60f8      	str	r0, [r7, #12]
 8103aee:	60b9      	str	r1, [r7, #8]
 8103af0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8103af2:	68f8      	ldr	r0, [r7, #12]
 8103af4:	f7fd f952 	bl	8100d9c <_ZNSt9_Any_data9_M_accessEv>
 8103af8:	4603      	mov	r3, r0
 8103afa:	4619      	mov	r1, r3
 8103afc:	2004      	movs	r0, #4
 8103afe:	f7fd f941 	bl	8100d84 <_ZnwjPv>
 8103b02:	4604      	mov	r4, r0
 8103b04:	68b8      	ldr	r0, [r7, #8]
 8103b06:	f7ff ff8a 	bl	8103a1e <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8103b0a:	4603      	mov	r3, r0
 8103b0c:	681b      	ldr	r3, [r3, #0]
 8103b0e:	6023      	str	r3, [r4, #0]
	  }
 8103b10:	bf00      	nop
 8103b12:	3714      	adds	r7, #20
 8103b14:	46bd      	mov	sp, r7
 8103b16:	bd90      	pop	{r4, r7, pc}

08103b18 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8103b18:	b580      	push	{r7, lr}
 8103b1a:	b084      	sub	sp, #16
 8103b1c:	af00      	add	r7, sp, #0
 8103b1e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8103b20:	6878      	ldr	r0, [r7, #4]
 8103b22:	f000 f879 	bl	8103c18 <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 8103b26:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8103b28:	68f8      	ldr	r0, [r7, #12]
 8103b2a:	f000 f881 	bl	8103c30 <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 8103b2e:	4603      	mov	r3, r0
 8103b30:	bf00      	nop
	}
 8103b32:	4618      	mov	r0, r3
 8103b34:	3710      	adds	r7, #16
 8103b36:	46bd      	mov	sp, r7
 8103b38:	bd80      	pop	{r7, pc}

08103b3a <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8103b3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8103b3e:	b087      	sub	sp, #28
 8103b40:	af02      	add	r7, sp, #8
 8103b42:	60f8      	str	r0, [r7, #12]
 8103b44:	60b9      	str	r1, [r7, #8]
 8103b46:	607a      	str	r2, [r7, #4]
 8103b48:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8103b4a:	68f8      	ldr	r0, [r7, #12]
 8103b4c:	f000 f87b 	bl	8103c46 <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8103b50:	4605      	mov	r5, r0
 8103b52:	68b8      	ldr	r0, [r7, #8]
 8103b54:	f7fd fa3c 	bl	8100fd0 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8103b58:	4606      	mov	r6, r0
 8103b5a:	6878      	ldr	r0, [r7, #4]
 8103b5c:	f7fd fa43 	bl	8100fe6 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8103b60:	4680      	mov	r8, r0
 8103b62:	6838      	ldr	r0, [r7, #0]
 8103b64:	f7fd fa4a 	bl	8100ffc <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8103b68:	4604      	mov	r4, r0
 8103b6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8103b6c:	f7fd fa46 	bl	8100ffc <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8103b70:	4603      	mov	r3, r0
 8103b72:	9301      	str	r3, [sp, #4]
 8103b74:	9400      	str	r4, [sp, #0]
 8103b76:	4643      	mov	r3, r8
 8103b78:	4632      	mov	r2, r6
 8103b7a:	4629      	mov	r1, r5
 8103b7c:	4648      	mov	r0, r9
 8103b7e:	f000 f86d 	bl	8103c5c <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8103b82:	bf00      	nop
 8103b84:	3714      	adds	r7, #20
 8103b86:	46bd      	mov	sp, r7
 8103b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08103b8c <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8103b8c:	b580      	push	{r7, lr}
 8103b8e:	b082      	sub	sp, #8
 8103b90:	af00      	add	r7, sp, #0
 8103b92:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8103b94:	6878      	ldr	r0, [r7, #4]
 8103b96:	f7fd f901 	bl	8100d9c <_ZNSt9_Any_data9_M_accessEv>
 8103b9a:	4603      	mov	r3, r0
 8103b9c:	4618      	mov	r0, r3
 8103b9e:	3708      	adds	r7, #8
 8103ba0:	46bd      	mov	sp, r7
 8103ba2:	bd80      	pop	{r7, pc}

08103ba4 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8103ba4:	b590      	push	{r4, r7, lr}
 8103ba6:	b085      	sub	sp, #20
 8103ba8:	af00      	add	r7, sp, #0
 8103baa:	60f8      	str	r0, [r7, #12]
 8103bac:	60b9      	str	r1, [r7, #8]
 8103bae:	4613      	mov	r3, r2
 8103bb0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8103bb2:	79fb      	ldrb	r3, [r7, #7]
 8103bb4:	2b03      	cmp	r3, #3
 8103bb6:	d82a      	bhi.n	8103c0e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8103bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8103bc0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8103bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103bbe:	bf00      	nop
 8103bc0:	08103bd1 	.word	0x08103bd1
 8103bc4:	08103bdf 	.word	0x08103bdf
 8103bc8:	08103bf3 	.word	0x08103bf3
 8103bcc:	08103c05 	.word	0x08103c05
	      __dest._M_access<const type_info*>() = nullptr;
 8103bd0:	68f8      	ldr	r0, [r7, #12]
 8103bd2:	f7fd fa1e 	bl	8101012 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8103bd6:	4603      	mov	r3, r0
 8103bd8:	2200      	movs	r2, #0
 8103bda:	601a      	str	r2, [r3, #0]
	      break;
 8103bdc:	e017      	b.n	8103c0e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8103bde:	68f8      	ldr	r0, [r7, #12]
 8103be0:	f7ff ffd4 	bl	8103b8c <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8103be4:	4604      	mov	r4, r0
 8103be6:	68b8      	ldr	r0, [r7, #8]
 8103be8:	f7ff ff96 	bl	8103b18 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8103bec:	4603      	mov	r3, r0
 8103bee:	6023      	str	r3, [r4, #0]
	      break;
 8103bf0:	e00d      	b.n	8103c0e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8103bf2:	68b8      	ldr	r0, [r7, #8]
 8103bf4:	f7ff ff90 	bl	8103b18 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8103bf8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8103bfa:	4619      	mov	r1, r3
 8103bfc:	68f8      	ldr	r0, [r7, #12]
 8103bfe:	f000 f860 	bl	8103cc2 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 8103c02:	e004      	b.n	8103c0e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8103c04:	4621      	mov	r1, r4
 8103c06:	68f8      	ldr	r0, [r7, #12]
 8103c08:	f000 f86d 	bl	8103ce6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8103c0c:	bf00      	nop
	  return false;
 8103c0e:	2300      	movs	r3, #0
	}
 8103c10:	4618      	mov	r0, r3
 8103c12:	3714      	adds	r7, #20
 8103c14:	46bd      	mov	sp, r7
 8103c16:	bd90      	pop	{r4, r7, pc}

08103c18 <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 8103c18:	b580      	push	{r7, lr}
 8103c1a:	b082      	sub	sp, #8
 8103c1c:	af00      	add	r7, sp, #0
 8103c1e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8103c20:	6878      	ldr	r0, [r7, #4]
 8103c22:	f7fd f8c6 	bl	8100db2 <_ZNKSt9_Any_data9_M_accessEv>
 8103c26:	4603      	mov	r3, r0
 8103c28:	4618      	mov	r0, r3
 8103c2a:	3708      	adds	r7, #8
 8103c2c:	46bd      	mov	sp, r7
 8103c2e:	bd80      	pop	{r7, pc}

08103c30 <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8103c30:	b480      	push	{r7}
 8103c32:	b083      	sub	sp, #12
 8103c34:	af00      	add	r7, sp, #0
 8103c36:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	4618      	mov	r0, r3
 8103c3c:	370c      	adds	r7, #12
 8103c3e:	46bd      	mov	sp, r7
 8103c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c44:	4770      	bx	lr

08103c46 <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103c46:	b480      	push	{r7}
 8103c48:	b083      	sub	sp, #12
 8103c4a:	af00      	add	r7, sp, #0
 8103c4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103c4e:	687b      	ldr	r3, [r7, #4]
 8103c50:	4618      	mov	r0, r3
 8103c52:	370c      	adds	r7, #12
 8103c54:	46bd      	mov	sp, r7
 8103c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c5a:	4770      	bx	lr

08103c5c <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8103c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8103c60:	b088      	sub	sp, #32
 8103c62:	af04      	add	r7, sp, #16
 8103c64:	7338      	strb	r0, [r7, #12]
 8103c66:	60b9      	str	r1, [r7, #8]
 8103c68:	607a      	str	r2, [r7, #4]
 8103c6a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8103c6c:	68b8      	ldr	r0, [r7, #8]
 8103c6e:	f7ff ffea 	bl	8103c46 <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8103c72:	4680      	mov	r8, r0
 8103c74:	6878      	ldr	r0, [r7, #4]
 8103c76:	f7fd f9ab 	bl	8100fd0 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8103c7a:	4603      	mov	r3, r0
 8103c7c:	881e      	ldrh	r6, [r3, #0]
 8103c7e:	6838      	ldr	r0, [r7, #0]
 8103c80:	f7fd f9b1 	bl	8100fe6 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8103c84:	4604      	mov	r4, r0
 8103c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103c88:	f7fd f9b8 	bl	8100ffc <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8103c8c:	4603      	mov	r3, r0
 8103c8e:	781d      	ldrb	r5, [r3, #0]
 8103c90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8103c92:	f7fd f9b3 	bl	8100ffc <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8103c96:	4603      	mov	r3, r0
 8103c98:	781b      	ldrb	r3, [r3, #0]
 8103c9a:	9303      	str	r3, [sp, #12]
 8103c9c:	9502      	str	r5, [sp, #8]
 8103c9e:	466a      	mov	r2, sp
 8103ca0:	f104 0308 	add.w	r3, r4, #8
 8103ca4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103ca8:	e882 0003 	stmia.w	r2, {r0, r1}
 8103cac:	e894 000c 	ldmia.w	r4, {r2, r3}
 8103cb0:	4631      	mov	r1, r6
 8103cb2:	4640      	mov	r0, r8
 8103cb4:	f7ff fe2e 	bl	8103914 <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 8103cb8:	bf00      	nop
 8103cba:	3710      	adds	r7, #16
 8103cbc:	46bd      	mov	sp, r7
 8103cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08103cc2 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8103cc2:	b590      	push	{r4, r7, lr}
 8103cc4:	b083      	sub	sp, #12
 8103cc6:	af00      	add	r7, sp, #0
 8103cc8:	6078      	str	r0, [r7, #4]
 8103cca:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8103ccc:	6838      	ldr	r0, [r7, #0]
 8103cce:	f000 f816 	bl	8103cfe <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8103cd2:	4603      	mov	r3, r0
 8103cd4:	4622      	mov	r2, r4
 8103cd6:	4619      	mov	r1, r3
 8103cd8:	6878      	ldr	r0, [r7, #4]
 8103cda:	f000 f81b 	bl	8103d14 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8103cde:	bf00      	nop
 8103ce0:	370c      	adds	r7, #12
 8103ce2:	46bd      	mov	sp, r7
 8103ce4:	bd90      	pop	{r4, r7, pc}

08103ce6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8103ce6:	b580      	push	{r7, lr}
 8103ce8:	b082      	sub	sp, #8
 8103cea:	af00      	add	r7, sp, #0
 8103cec:	6078      	str	r0, [r7, #4]
 8103cee:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8103cf0:	6878      	ldr	r0, [r7, #4]
 8103cf2:	f000 f828 	bl	8103d46 <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 8103cf6:	bf00      	nop
 8103cf8:	3708      	adds	r7, #8
 8103cfa:	46bd      	mov	sp, r7
 8103cfc:	bd80      	pop	{r7, pc}

08103cfe <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103cfe:	b480      	push	{r7}
 8103d00:	b083      	sub	sp, #12
 8103d02:	af00      	add	r7, sp, #0
 8103d04:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	4618      	mov	r0, r3
 8103d0a:	370c      	adds	r7, #12
 8103d0c:	46bd      	mov	sp, r7
 8103d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d12:	4770      	bx	lr

08103d14 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8103d14:	b590      	push	{r4, r7, lr}
 8103d16:	b085      	sub	sp, #20
 8103d18:	af00      	add	r7, sp, #0
 8103d1a:	60f8      	str	r0, [r7, #12]
 8103d1c:	60b9      	str	r1, [r7, #8]
 8103d1e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8103d20:	68f8      	ldr	r0, [r7, #12]
 8103d22:	f7fd f83b 	bl	8100d9c <_ZNSt9_Any_data9_M_accessEv>
 8103d26:	4603      	mov	r3, r0
 8103d28:	4619      	mov	r1, r3
 8103d2a:	2004      	movs	r0, #4
 8103d2c:	f7fd f82a 	bl	8100d84 <_ZnwjPv>
 8103d30:	4604      	mov	r4, r0
 8103d32:	68b8      	ldr	r0, [r7, #8]
 8103d34:	f7ff ffe3 	bl	8103cfe <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8103d38:	4603      	mov	r3, r0
 8103d3a:	681b      	ldr	r3, [r3, #0]
 8103d3c:	6023      	str	r3, [r4, #0]
	  }
 8103d3e:	bf00      	nop
 8103d40:	3714      	adds	r7, #20
 8103d42:	46bd      	mov	sp, r7
 8103d44:	bd90      	pop	{r4, r7, pc}

08103d46 <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8103d46:	b580      	push	{r7, lr}
 8103d48:	b082      	sub	sp, #8
 8103d4a:	af00      	add	r7, sp, #0
 8103d4c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8103d4e:	6878      	ldr	r0, [r7, #4]
 8103d50:	f7fd f824 	bl	8100d9c <_ZNSt9_Any_data9_M_accessEv>
 8103d54:	4603      	mov	r3, r0
 8103d56:	4618      	mov	r0, r3
 8103d58:	3708      	adds	r7, #8
 8103d5a:	46bd      	mov	sp, r7
 8103d5c:	bd80      	pop	{r7, pc}
	...

08103d60 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8103d60:	b580      	push	{r7, lr}
 8103d62:	b084      	sub	sp, #16
 8103d64:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8103d66:	4b92      	ldr	r3, [pc, #584]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103d68:	22c0      	movs	r2, #192	@ 0xc0
 8103d6a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8103d6c:	4b90      	ldr	r3, [pc, #576]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103d6e:	22a8      	movs	r2, #168	@ 0xa8
 8103d70:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8103d72:	4b8f      	ldr	r3, [pc, #572]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103d74:	2201      	movs	r2, #1
 8103d76:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 11;
 8103d78:	4b8d      	ldr	r3, [pc, #564]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103d7a:	220b      	movs	r2, #11
 8103d7c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8103d7e:	4b8d      	ldr	r3, [pc, #564]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103d80:	22ff      	movs	r2, #255	@ 0xff
 8103d82:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8103d84:	4b8b      	ldr	r3, [pc, #556]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103d86:	22ff      	movs	r2, #255	@ 0xff
 8103d88:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8103d8a:	4b8a      	ldr	r3, [pc, #552]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103d8c:	22ff      	movs	r2, #255	@ 0xff
 8103d8e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8103d90:	4b88      	ldr	r3, [pc, #544]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103d92:	2200      	movs	r2, #0
 8103d94:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8103d96:	4b88      	ldr	r3, [pc, #544]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103d98:	2200      	movs	r2, #0
 8103d9a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8103d9c:	4b86      	ldr	r3, [pc, #536]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103d9e:	2200      	movs	r2, #0
 8103da0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8103da2:	4b85      	ldr	r3, [pc, #532]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103da4:	2200      	movs	r2, #0
 8103da6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8103da8:	4b83      	ldr	r3, [pc, #524]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103daa:	2200      	movs	r2, #0
 8103dac:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8103dae:	2100      	movs	r1, #0
 8103db0:	2000      	movs	r0, #0
 8103db2:	f017 f9c1 	bl	811b138 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8103db6:	4b7e      	ldr	r3, [pc, #504]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103db8:	781b      	ldrb	r3, [r3, #0]
 8103dba:	061a      	lsls	r2, r3, #24
 8103dbc:	4b7c      	ldr	r3, [pc, #496]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103dbe:	785b      	ldrb	r3, [r3, #1]
 8103dc0:	041b      	lsls	r3, r3, #16
 8103dc2:	431a      	orrs	r2, r3
 8103dc4:	4b7a      	ldr	r3, [pc, #488]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103dc6:	789b      	ldrb	r3, [r3, #2]
 8103dc8:	021b      	lsls	r3, r3, #8
 8103dca:	4313      	orrs	r3, r2
 8103dcc:	4a78      	ldr	r2, [pc, #480]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103dce:	78d2      	ldrb	r2, [r2, #3]
 8103dd0:	4313      	orrs	r3, r2
 8103dd2:	061a      	lsls	r2, r3, #24
 8103dd4:	4b76      	ldr	r3, [pc, #472]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103dd6:	781b      	ldrb	r3, [r3, #0]
 8103dd8:	0619      	lsls	r1, r3, #24
 8103dda:	4b75      	ldr	r3, [pc, #468]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103ddc:	785b      	ldrb	r3, [r3, #1]
 8103dde:	041b      	lsls	r3, r3, #16
 8103de0:	4319      	orrs	r1, r3
 8103de2:	4b73      	ldr	r3, [pc, #460]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103de4:	789b      	ldrb	r3, [r3, #2]
 8103de6:	021b      	lsls	r3, r3, #8
 8103de8:	430b      	orrs	r3, r1
 8103dea:	4971      	ldr	r1, [pc, #452]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103dec:	78c9      	ldrb	r1, [r1, #3]
 8103dee:	430b      	orrs	r3, r1
 8103df0:	021b      	lsls	r3, r3, #8
 8103df2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8103df6:	431a      	orrs	r2, r3
 8103df8:	4b6d      	ldr	r3, [pc, #436]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103dfa:	781b      	ldrb	r3, [r3, #0]
 8103dfc:	0619      	lsls	r1, r3, #24
 8103dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103e00:	785b      	ldrb	r3, [r3, #1]
 8103e02:	041b      	lsls	r3, r3, #16
 8103e04:	4319      	orrs	r1, r3
 8103e06:	4b6a      	ldr	r3, [pc, #424]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103e08:	789b      	ldrb	r3, [r3, #2]
 8103e0a:	021b      	lsls	r3, r3, #8
 8103e0c:	430b      	orrs	r3, r1
 8103e0e:	4968      	ldr	r1, [pc, #416]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103e10:	78c9      	ldrb	r1, [r1, #3]
 8103e12:	430b      	orrs	r3, r1
 8103e14:	0a1b      	lsrs	r3, r3, #8
 8103e16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8103e1a:	431a      	orrs	r2, r3
 8103e1c:	4b64      	ldr	r3, [pc, #400]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103e1e:	781b      	ldrb	r3, [r3, #0]
 8103e20:	0619      	lsls	r1, r3, #24
 8103e22:	4b63      	ldr	r3, [pc, #396]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103e24:	785b      	ldrb	r3, [r3, #1]
 8103e26:	041b      	lsls	r3, r3, #16
 8103e28:	4319      	orrs	r1, r3
 8103e2a:	4b61      	ldr	r3, [pc, #388]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103e2c:	789b      	ldrb	r3, [r3, #2]
 8103e2e:	021b      	lsls	r3, r3, #8
 8103e30:	430b      	orrs	r3, r1
 8103e32:	495f      	ldr	r1, [pc, #380]	@ (8103fb0 <MX_LWIP_Init+0x250>)
 8103e34:	78c9      	ldrb	r1, [r1, #3]
 8103e36:	430b      	orrs	r3, r1
 8103e38:	0e1b      	lsrs	r3, r3, #24
 8103e3a:	4313      	orrs	r3, r2
 8103e3c:	4a5f      	ldr	r2, [pc, #380]	@ (8103fbc <MX_LWIP_Init+0x25c>)
 8103e3e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8103e40:	4b5c      	ldr	r3, [pc, #368]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e42:	781b      	ldrb	r3, [r3, #0]
 8103e44:	061a      	lsls	r2, r3, #24
 8103e46:	4b5b      	ldr	r3, [pc, #364]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e48:	785b      	ldrb	r3, [r3, #1]
 8103e4a:	041b      	lsls	r3, r3, #16
 8103e4c:	431a      	orrs	r2, r3
 8103e4e:	4b59      	ldr	r3, [pc, #356]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e50:	789b      	ldrb	r3, [r3, #2]
 8103e52:	021b      	lsls	r3, r3, #8
 8103e54:	4313      	orrs	r3, r2
 8103e56:	4a57      	ldr	r2, [pc, #348]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e58:	78d2      	ldrb	r2, [r2, #3]
 8103e5a:	4313      	orrs	r3, r2
 8103e5c:	061a      	lsls	r2, r3, #24
 8103e5e:	4b55      	ldr	r3, [pc, #340]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e60:	781b      	ldrb	r3, [r3, #0]
 8103e62:	0619      	lsls	r1, r3, #24
 8103e64:	4b53      	ldr	r3, [pc, #332]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e66:	785b      	ldrb	r3, [r3, #1]
 8103e68:	041b      	lsls	r3, r3, #16
 8103e6a:	4319      	orrs	r1, r3
 8103e6c:	4b51      	ldr	r3, [pc, #324]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e6e:	789b      	ldrb	r3, [r3, #2]
 8103e70:	021b      	lsls	r3, r3, #8
 8103e72:	430b      	orrs	r3, r1
 8103e74:	494f      	ldr	r1, [pc, #316]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e76:	78c9      	ldrb	r1, [r1, #3]
 8103e78:	430b      	orrs	r3, r1
 8103e7a:	021b      	lsls	r3, r3, #8
 8103e7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8103e80:	431a      	orrs	r2, r3
 8103e82:	4b4c      	ldr	r3, [pc, #304]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e84:	781b      	ldrb	r3, [r3, #0]
 8103e86:	0619      	lsls	r1, r3, #24
 8103e88:	4b4a      	ldr	r3, [pc, #296]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e8a:	785b      	ldrb	r3, [r3, #1]
 8103e8c:	041b      	lsls	r3, r3, #16
 8103e8e:	4319      	orrs	r1, r3
 8103e90:	4b48      	ldr	r3, [pc, #288]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e92:	789b      	ldrb	r3, [r3, #2]
 8103e94:	021b      	lsls	r3, r3, #8
 8103e96:	430b      	orrs	r3, r1
 8103e98:	4946      	ldr	r1, [pc, #280]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103e9a:	78c9      	ldrb	r1, [r1, #3]
 8103e9c:	430b      	orrs	r3, r1
 8103e9e:	0a1b      	lsrs	r3, r3, #8
 8103ea0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8103ea4:	431a      	orrs	r2, r3
 8103ea6:	4b43      	ldr	r3, [pc, #268]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103ea8:	781b      	ldrb	r3, [r3, #0]
 8103eaa:	0619      	lsls	r1, r3, #24
 8103eac:	4b41      	ldr	r3, [pc, #260]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103eae:	785b      	ldrb	r3, [r3, #1]
 8103eb0:	041b      	lsls	r3, r3, #16
 8103eb2:	4319      	orrs	r1, r3
 8103eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103eb6:	789b      	ldrb	r3, [r3, #2]
 8103eb8:	021b      	lsls	r3, r3, #8
 8103eba:	430b      	orrs	r3, r1
 8103ebc:	493d      	ldr	r1, [pc, #244]	@ (8103fb4 <MX_LWIP_Init+0x254>)
 8103ebe:	78c9      	ldrb	r1, [r1, #3]
 8103ec0:	430b      	orrs	r3, r1
 8103ec2:	0e1b      	lsrs	r3, r3, #24
 8103ec4:	4313      	orrs	r3, r2
 8103ec6:	4a3e      	ldr	r2, [pc, #248]	@ (8103fc0 <MX_LWIP_Init+0x260>)
 8103ec8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8103eca:	4b3b      	ldr	r3, [pc, #236]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103ecc:	781b      	ldrb	r3, [r3, #0]
 8103ece:	061a      	lsls	r2, r3, #24
 8103ed0:	4b39      	ldr	r3, [pc, #228]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103ed2:	785b      	ldrb	r3, [r3, #1]
 8103ed4:	041b      	lsls	r3, r3, #16
 8103ed6:	431a      	orrs	r2, r3
 8103ed8:	4b37      	ldr	r3, [pc, #220]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103eda:	789b      	ldrb	r3, [r3, #2]
 8103edc:	021b      	lsls	r3, r3, #8
 8103ede:	4313      	orrs	r3, r2
 8103ee0:	4a35      	ldr	r2, [pc, #212]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103ee2:	78d2      	ldrb	r2, [r2, #3]
 8103ee4:	4313      	orrs	r3, r2
 8103ee6:	061a      	lsls	r2, r3, #24
 8103ee8:	4b33      	ldr	r3, [pc, #204]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103eea:	781b      	ldrb	r3, [r3, #0]
 8103eec:	0619      	lsls	r1, r3, #24
 8103eee:	4b32      	ldr	r3, [pc, #200]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103ef0:	785b      	ldrb	r3, [r3, #1]
 8103ef2:	041b      	lsls	r3, r3, #16
 8103ef4:	4319      	orrs	r1, r3
 8103ef6:	4b30      	ldr	r3, [pc, #192]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103ef8:	789b      	ldrb	r3, [r3, #2]
 8103efa:	021b      	lsls	r3, r3, #8
 8103efc:	430b      	orrs	r3, r1
 8103efe:	492e      	ldr	r1, [pc, #184]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103f00:	78c9      	ldrb	r1, [r1, #3]
 8103f02:	430b      	orrs	r3, r1
 8103f04:	021b      	lsls	r3, r3, #8
 8103f06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8103f0a:	431a      	orrs	r2, r3
 8103f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103f0e:	781b      	ldrb	r3, [r3, #0]
 8103f10:	0619      	lsls	r1, r3, #24
 8103f12:	4b29      	ldr	r3, [pc, #164]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103f14:	785b      	ldrb	r3, [r3, #1]
 8103f16:	041b      	lsls	r3, r3, #16
 8103f18:	4319      	orrs	r1, r3
 8103f1a:	4b27      	ldr	r3, [pc, #156]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103f1c:	789b      	ldrb	r3, [r3, #2]
 8103f1e:	021b      	lsls	r3, r3, #8
 8103f20:	430b      	orrs	r3, r1
 8103f22:	4925      	ldr	r1, [pc, #148]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103f24:	78c9      	ldrb	r1, [r1, #3]
 8103f26:	430b      	orrs	r3, r1
 8103f28:	0a1b      	lsrs	r3, r3, #8
 8103f2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8103f2e:	431a      	orrs	r2, r3
 8103f30:	4b21      	ldr	r3, [pc, #132]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103f32:	781b      	ldrb	r3, [r3, #0]
 8103f34:	0619      	lsls	r1, r3, #24
 8103f36:	4b20      	ldr	r3, [pc, #128]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103f38:	785b      	ldrb	r3, [r3, #1]
 8103f3a:	041b      	lsls	r3, r3, #16
 8103f3c:	4319      	orrs	r1, r3
 8103f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103f40:	789b      	ldrb	r3, [r3, #2]
 8103f42:	021b      	lsls	r3, r3, #8
 8103f44:	430b      	orrs	r3, r1
 8103f46:	491c      	ldr	r1, [pc, #112]	@ (8103fb8 <MX_LWIP_Init+0x258>)
 8103f48:	78c9      	ldrb	r1, [r1, #3]
 8103f4a:	430b      	orrs	r3, r1
 8103f4c:	0e1b      	lsrs	r3, r3, #24
 8103f4e:	4313      	orrs	r3, r2
 8103f50:	4a1c      	ldr	r2, [pc, #112]	@ (8103fc4 <MX_LWIP_Init+0x264>)
 8103f52:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8103f54:	4b1c      	ldr	r3, [pc, #112]	@ (8103fc8 <MX_LWIP_Init+0x268>)
 8103f56:	9302      	str	r3, [sp, #8]
 8103f58:	4b1c      	ldr	r3, [pc, #112]	@ (8103fcc <MX_LWIP_Init+0x26c>)
 8103f5a:	9301      	str	r3, [sp, #4]
 8103f5c:	2300      	movs	r3, #0
 8103f5e:	9300      	str	r3, [sp, #0]
 8103f60:	4b18      	ldr	r3, [pc, #96]	@ (8103fc4 <MX_LWIP_Init+0x264>)
 8103f62:	4a17      	ldr	r2, [pc, #92]	@ (8103fc0 <MX_LWIP_Init+0x260>)
 8103f64:	4915      	ldr	r1, [pc, #84]	@ (8103fbc <MX_LWIP_Init+0x25c>)
 8103f66:	481a      	ldr	r0, [pc, #104]	@ (8103fd0 <MX_LWIP_Init+0x270>)
 8103f68:	f00f fe24 	bl	8113bb4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8103f6c:	4818      	ldr	r0, [pc, #96]	@ (8103fd0 <MX_LWIP_Init+0x270>)
 8103f6e:	f00f ffd3 	bl	8113f18 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8103f72:	4817      	ldr	r0, [pc, #92]	@ (8103fd0 <MX_LWIP_Init+0x270>)
 8103f74:	f00f ffe0 	bl	8113f38 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8103f78:	4916      	ldr	r1, [pc, #88]	@ (8103fd4 <MX_LWIP_Init+0x274>)
 8103f7a:	4815      	ldr	r0, [pc, #84]	@ (8103fd0 <MX_LWIP_Init+0x270>)
 8103f7c:	f010 f8de 	bl	811413c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8103f80:	2224      	movs	r2, #36	@ 0x24
 8103f82:	2100      	movs	r1, #0
 8103f84:	4814      	ldr	r0, [pc, #80]	@ (8103fd8 <MX_LWIP_Init+0x278>)
 8103f86:	f017 ffc8 	bl	811bf1a <memset>
  attributes.name = "EthLink";
 8103f8a:	4b13      	ldr	r3, [pc, #76]	@ (8103fd8 <MX_LWIP_Init+0x278>)
 8103f8c:	4a13      	ldr	r2, [pc, #76]	@ (8103fdc <MX_LWIP_Init+0x27c>)
 8103f8e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8103f90:	4b11      	ldr	r3, [pc, #68]	@ (8103fd8 <MX_LWIP_Init+0x278>)
 8103f92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8103f96:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8103f98:	4b0f      	ldr	r3, [pc, #60]	@ (8103fd8 <MX_LWIP_Init+0x278>)
 8103f9a:	2210      	movs	r2, #16
 8103f9c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8103f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8103fd8 <MX_LWIP_Init+0x278>)
 8103fa0:	490b      	ldr	r1, [pc, #44]	@ (8103fd0 <MX_LWIP_Init+0x270>)
 8103fa2:	480f      	ldr	r0, [pc, #60]	@ (8103fe0 <MX_LWIP_Init+0x280>)
 8103fa4:	f008 f961 	bl	810c26a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8103fa8:	bf00      	nop
 8103faa:	46bd      	mov	sp, r7
 8103fac:	bd80      	pop	{r7, pc}
 8103fae:	bf00      	nop
 8103fb0:	1000021c 	.word	0x1000021c
 8103fb4:	10000220 	.word	0x10000220
 8103fb8:	10000224 	.word	0x10000224
 8103fbc:	10000210 	.word	0x10000210
 8103fc0:	10000214 	.word	0x10000214
 8103fc4:	10000218 	.word	0x10000218
 8103fc8:	0811b075 	.word	0x0811b075
 8103fcc:	081044cd 	.word	0x081044cd
 8103fd0:	100001dc 	.word	0x100001dc
 8103fd4:	08103fe5 	.word	0x08103fe5
 8103fd8:	10000228 	.word	0x10000228
 8103fdc:	0811cc3c 	.word	0x0811cc3c
 8103fe0:	0810478d 	.word	0x0810478d

08103fe4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8103fe4:	b480      	push	{r7}
 8103fe6:	b083      	sub	sp, #12
 8103fe8:	af00      	add	r7, sp, #0
 8103fea:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8103fec:	bf00      	nop
 8103fee:	370c      	adds	r7, #12
 8103ff0:	46bd      	mov	sp, r7
 8103ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ff6:	4770      	bx	lr

08103ff8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8103ff8:	b580      	push	{r7, lr}
 8103ffa:	b082      	sub	sp, #8
 8103ffc:	af00      	add	r7, sp, #0
 8103ffe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8104000:	4b04      	ldr	r3, [pc, #16]	@ (8104014 <HAL_ETH_RxCpltCallback+0x1c>)
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	4618      	mov	r0, r3
 8104006:	f008 fbc7 	bl	810c798 <osSemaphoreRelease>
}
 810400a:	bf00      	nop
 810400c:	3708      	adds	r7, #8
 810400e:	46bd      	mov	sp, r7
 8104010:	bd80      	pop	{r7, pc}
 8104012:	bf00      	nop
 8104014:	10000254 	.word	0x10000254

08104018 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8104018:	b580      	push	{r7, lr}
 810401a:	b082      	sub	sp, #8
 810401c:	af00      	add	r7, sp, #0
 810401e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8104020:	4b04      	ldr	r3, [pc, #16]	@ (8104034 <HAL_ETH_TxCpltCallback+0x1c>)
 8104022:	681b      	ldr	r3, [r3, #0]
 8104024:	4618      	mov	r0, r3
 8104026:	f008 fbb7 	bl	810c798 <osSemaphoreRelease>
}
 810402a:	bf00      	nop
 810402c:	3708      	adds	r7, #8
 810402e:	46bd      	mov	sp, r7
 8104030:	bd80      	pop	{r7, pc}
 8104032:	bf00      	nop
 8104034:	10000258 	.word	0x10000258

08104038 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8104038:	b580      	push	{r7, lr}
 810403a:	b082      	sub	sp, #8
 810403c:	af00      	add	r7, sp, #0
 810403e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8104040:	6878      	ldr	r0, [r7, #4]
 8104042:	f004 f9c6 	bl	81083d2 <HAL_ETH_GetDMAError>
 8104046:	4603      	mov	r3, r0
 8104048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810404c:	2b80      	cmp	r3, #128	@ 0x80
 810404e:	d104      	bne.n	810405a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8104050:	4b04      	ldr	r3, [pc, #16]	@ (8104064 <HAL_ETH_ErrorCallback+0x2c>)
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	4618      	mov	r0, r3
 8104056:	f008 fb9f 	bl	810c798 <osSemaphoreRelease>
  }
}
 810405a:	bf00      	nop
 810405c:	3708      	adds	r7, #8
 810405e:	46bd      	mov	sp, r7
 8104060:	bd80      	pop	{r7, pc}
 8104062:	bf00      	nop
 8104064:	10000254 	.word	0x10000254

08104068 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8104068:	b580      	push	{r7, lr}
 810406a:	b0aa      	sub	sp, #168	@ 0xa8
 810406c:	af00      	add	r7, sp, #0
 810406e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8104070:	2300      	movs	r3, #0
 8104072:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8104076:	2300      	movs	r3, #0
 8104078:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 810407c:	2300      	movs	r3, #0
 810407e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8104082:	f107 0310 	add.w	r3, r7, #16
 8104086:	2264      	movs	r2, #100	@ 0x64
 8104088:	2100      	movs	r1, #0
 810408a:	4618      	mov	r0, r3
 810408c:	f017 ff45 	bl	811bf1a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8104090:	4b89      	ldr	r3, [pc, #548]	@ (81042b8 <low_level_init+0x250>)
 8104092:	4a8a      	ldr	r2, [pc, #552]	@ (81042bc <low_level_init+0x254>)
 8104094:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8104096:	2300      	movs	r3, #0
 8104098:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 810409a:	2380      	movs	r3, #128	@ 0x80
 810409c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 810409e:	23e1      	movs	r3, #225	@ 0xe1
 81040a0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 81040a2:	2300      	movs	r3, #0
 81040a4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 81040a6:	2300      	movs	r3, #0
 81040a8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 81040aa:	2300      	movs	r3, #0
 81040ac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 81040ae:	4a82      	ldr	r2, [pc, #520]	@ (81042b8 <low_level_init+0x250>)
 81040b0:	f107 0308 	add.w	r3, r7, #8
 81040b4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 81040b6:	4b80      	ldr	r3, [pc, #512]	@ (81042b8 <low_level_init+0x250>)
 81040b8:	2201      	movs	r2, #1
 81040ba:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81040bc:	4b7e      	ldr	r3, [pc, #504]	@ (81042b8 <low_level_init+0x250>)
 81040be:	4a80      	ldr	r2, [pc, #512]	@ (81042c0 <low_level_init+0x258>)
 81040c0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81040c2:	4b7d      	ldr	r3, [pc, #500]	@ (81042b8 <low_level_init+0x250>)
 81040c4:	4a7f      	ldr	r2, [pc, #508]	@ (81042c4 <low_level_init+0x25c>)
 81040c6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 81040c8:	4b7b      	ldr	r3, [pc, #492]	@ (81042b8 <low_level_init+0x250>)
 81040ca:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81040ce:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 81040d0:	4879      	ldr	r0, [pc, #484]	@ (81042b8 <low_level_init+0x250>)
 81040d2:	f003 f98d 	bl	81073f0 <HAL_ETH_Init>
 81040d6:	4603      	mov	r3, r0
 81040d8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 81040dc:	2238      	movs	r2, #56	@ 0x38
 81040de:	2100      	movs	r1, #0
 81040e0:	4879      	ldr	r0, [pc, #484]	@ (81042c8 <low_level_init+0x260>)
 81040e2:	f017 ff1a 	bl	811bf1a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 81040e6:	4b78      	ldr	r3, [pc, #480]	@ (81042c8 <low_level_init+0x260>)
 81040e8:	2221      	movs	r2, #33	@ 0x21
 81040ea:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 81040ec:	4b76      	ldr	r3, [pc, #472]	@ (81042c8 <low_level_init+0x260>)
 81040ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 81040f2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 81040f4:	4b74      	ldr	r3, [pc, #464]	@ (81042c8 <low_level_init+0x260>)
 81040f6:	2200      	movs	r2, #0
 81040f8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 81040fa:	4874      	ldr	r0, [pc, #464]	@ (81042cc <low_level_init+0x264>)
 81040fc:	f00f fc14 	bl	8113928 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	2206      	movs	r2, #6
 8104104:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8104108:	4b6b      	ldr	r3, [pc, #428]	@ (81042b8 <low_level_init+0x250>)
 810410a:	685b      	ldr	r3, [r3, #4]
 810410c:	781a      	ldrb	r2, [r3, #0]
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8104114:	4b68      	ldr	r3, [pc, #416]	@ (81042b8 <low_level_init+0x250>)
 8104116:	685b      	ldr	r3, [r3, #4]
 8104118:	785a      	ldrb	r2, [r3, #1]
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8104120:	4b65      	ldr	r3, [pc, #404]	@ (81042b8 <low_level_init+0x250>)
 8104122:	685b      	ldr	r3, [r3, #4]
 8104124:	789a      	ldrb	r2, [r3, #2]
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 810412c:	4b62      	ldr	r3, [pc, #392]	@ (81042b8 <low_level_init+0x250>)
 810412e:	685b      	ldr	r3, [r3, #4]
 8104130:	78da      	ldrb	r2, [r3, #3]
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8104138:	4b5f      	ldr	r3, [pc, #380]	@ (81042b8 <low_level_init+0x250>)
 810413a:	685b      	ldr	r3, [r3, #4]
 810413c:	791a      	ldrb	r2, [r3, #4]
 810413e:	687b      	ldr	r3, [r7, #4]
 8104140:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8104144:	4b5c      	ldr	r3, [pc, #368]	@ (81042b8 <low_level_init+0x250>)
 8104146:	685b      	ldr	r3, [r3, #4]
 8104148:	795a      	ldrb	r2, [r3, #5]
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8104156:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8104158:	687b      	ldr	r3, [r7, #4]
 810415a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810415e:	f043 030a 	orr.w	r3, r3, #10
 8104162:	b2da      	uxtb	r2, r3
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 810416a:	2200      	movs	r2, #0
 810416c:	2100      	movs	r1, #0
 810416e:	2001      	movs	r0, #1
 8104170:	f008 fa36 	bl	810c5e0 <osSemaphoreNew>
 8104174:	4603      	mov	r3, r0
 8104176:	4a56      	ldr	r2, [pc, #344]	@ (81042d0 <low_level_init+0x268>)
 8104178:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 810417a:	2200      	movs	r2, #0
 810417c:	2100      	movs	r1, #0
 810417e:	2001      	movs	r0, #1
 8104180:	f008 fa2e 	bl	810c5e0 <osSemaphoreNew>
 8104184:	4603      	mov	r3, r0
 8104186:	4a53      	ldr	r2, [pc, #332]	@ (81042d4 <low_level_init+0x26c>)
 8104188:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 810418a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 810418e:	2224      	movs	r2, #36	@ 0x24
 8104190:	2100      	movs	r1, #0
 8104192:	4618      	mov	r0, r3
 8104194:	f017 fec1 	bl	811bf1a <memset>
  attributes.name = "EthIf";
 8104198:	4b4f      	ldr	r3, [pc, #316]	@ (81042d8 <low_level_init+0x270>)
 810419a:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 810419c:	f240 4304 	movw	r3, #1028	@ 0x404
 81041a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 81041a4:	2330      	movs	r3, #48	@ 0x30
 81041a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 81041aa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 81041ae:	461a      	mov	r2, r3
 81041b0:	6879      	ldr	r1, [r7, #4]
 81041b2:	484a      	ldr	r0, [pc, #296]	@ (81042dc <low_level_init+0x274>)
 81041b4:	f008 f859 	bl	810c26a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 81041b8:	4949      	ldr	r1, [pc, #292]	@ (81042e0 <low_level_init+0x278>)
 81041ba:	484a      	ldr	r0, [pc, #296]	@ (81042e4 <low_level_init+0x27c>)
 81041bc:	f002 fe6f 	bl	8106e9e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 81041c0:	4848      	ldr	r0, [pc, #288]	@ (81042e4 <low_level_init+0x27c>)
 81041c2:	f002 fe9e 	bl	8106f02 <LAN8742_Init>
 81041c6:	4603      	mov	r3, r0
 81041c8:	2b00      	cmp	r3, #0
 81041ca:	d006      	beq.n	81041da <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 81041cc:	6878      	ldr	r0, [r7, #4]
 81041ce:	f00f ff85 	bl	81140dc <netif_set_link_down>
    netif_set_down(netif);
 81041d2:	6878      	ldr	r0, [r7, #4]
 81041d4:	f00f ff1c 	bl	8114010 <netif_set_down>
 81041d8:	e06b      	b.n	81042b2 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 81041da:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 81041de:	2b00      	cmp	r3, #0
 81041e0:	d165      	bne.n	81042ae <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 81041e2:	4840      	ldr	r0, [pc, #256]	@ (81042e4 <low_level_init+0x27c>)
 81041e4:	f002 feda 	bl	8106f9c <LAN8742_GetLinkState>
 81041e8:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 81041ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 81041f0:	2b01      	cmp	r3, #1
 81041f2:	dc06      	bgt.n	8104202 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 81041f4:	6878      	ldr	r0, [r7, #4]
 81041f6:	f00f ff71 	bl	81140dc <netif_set_link_down>
      netif_set_down(netif);
 81041fa:	6878      	ldr	r0, [r7, #4]
 81041fc:	f00f ff08 	bl	8114010 <netif_set_down>
 8104200:	e057      	b.n	81042b2 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8104202:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8104206:	3b02      	subs	r3, #2
 8104208:	2b03      	cmp	r3, #3
 810420a:	d82b      	bhi.n	8104264 <low_level_init+0x1fc>
 810420c:	a201      	add	r2, pc, #4	@ (adr r2, 8104214 <low_level_init+0x1ac>)
 810420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104212:	bf00      	nop
 8104214:	08104225 	.word	0x08104225
 8104218:	08104237 	.word	0x08104237
 810421c:	08104247 	.word	0x08104247
 8104220:	08104257 	.word	0x08104257
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8104224:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104228:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810422c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104230:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8104234:	e01f      	b.n	8104276 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8104236:	2300      	movs	r3, #0
 8104238:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810423c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104240:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8104244:	e017      	b.n	8104276 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8104246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810424a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 810424e:	2300      	movs	r3, #0
 8104250:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8104254:	e00f      	b.n	8104276 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8104256:	2300      	movs	r3, #0
 8104258:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 810425c:	2300      	movs	r3, #0
 810425e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8104262:	e008      	b.n	8104276 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8104264:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104268:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810426c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104270:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8104274:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8104276:	f107 0310 	add.w	r3, r7, #16
 810427a:	4619      	mov	r1, r3
 810427c:	480e      	ldr	r0, [pc, #56]	@ (81042b8 <low_level_init+0x250>)
 810427e:	f003 fe5d 	bl	8107f3c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8104282:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8104286:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8104288:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810428c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 810428e:	f107 0310 	add.w	r3, r7, #16
 8104292:	4619      	mov	r1, r3
 8104294:	4808      	ldr	r0, [pc, #32]	@ (81042b8 <low_level_init+0x250>)
 8104296:	f004 f825 	bl	81082e4 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 810429a:	4807      	ldr	r0, [pc, #28]	@ (81042b8 <low_level_init+0x250>)
 810429c:	f003 f9a6 	bl	81075ec <HAL_ETH_Start_IT>
    netif_set_up(netif);
 81042a0:	6878      	ldr	r0, [r7, #4]
 81042a2:	f00f fe49 	bl	8113f38 <netif_set_up>
    netif_set_link_up(netif);
 81042a6:	6878      	ldr	r0, [r7, #4]
 81042a8:	f00f fee4 	bl	8114074 <netif_set_link_up>
 81042ac:	e001      	b.n	81042b2 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 81042ae:	f7fc faf5 	bl	810089c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 81042b2:	37a8      	adds	r7, #168	@ 0xa8
 81042b4:	46bd      	mov	sp, r7
 81042b6:	bd80      	pop	{r7, pc}
 81042b8:	1000025c 	.word	0x1000025c
 81042bc:	40028000 	.word	0x40028000
 81042c0:	10040100 	.word	0x10040100
 81042c4:	10040000 	.word	0x10040000
 81042c8:	1000030c 	.word	0x1000030c
 81042cc:	0811fbf4 	.word	0x0811fbf4
 81042d0:	10000254 	.word	0x10000254
 81042d4:	10000258 	.word	0x10000258
 81042d8:	0811cc44 	.word	0x0811cc44
 81042dc:	08104479 	.word	0x08104479
 81042e0:	10000000 	.word	0x10000000
 81042e4:	10000344 	.word	0x10000344

081042e8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 81042e8:	b580      	push	{r7, lr}
 81042ea:	b092      	sub	sp, #72	@ 0x48
 81042ec:	af00      	add	r7, sp, #0
 81042ee:	6078      	str	r0, [r7, #4]
 81042f0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 81042f2:	2300      	movs	r3, #0
 81042f4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 81042f6:	2300      	movs	r3, #0
 81042f8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 81042fa:	2300      	movs	r3, #0
 81042fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8104300:	f107 030c 	add.w	r3, r7, #12
 8104304:	2230      	movs	r2, #48	@ 0x30
 8104306:	2100      	movs	r1, #0
 8104308:	4618      	mov	r0, r3
 810430a:	f017 fe06 	bl	811bf1a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 810430e:	f107 030c 	add.w	r3, r7, #12
 8104312:	2230      	movs	r2, #48	@ 0x30
 8104314:	2100      	movs	r1, #0
 8104316:	4618      	mov	r0, r3
 8104318:	f017 fdff 	bl	811bf1a <memset>

  for(q = p; q != NULL; q = q->next)
 810431c:	683b      	ldr	r3, [r7, #0]
 810431e:	643b      	str	r3, [r7, #64]	@ 0x40
 8104320:	e045      	b.n	81043ae <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8104322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104324:	2b03      	cmp	r3, #3
 8104326:	d902      	bls.n	810432e <low_level_output+0x46>
      return ERR_IF;
 8104328:	f06f 030b 	mvn.w	r3, #11
 810432c:	e07f      	b.n	810442e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 810432e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104330:	6859      	ldr	r1, [r3, #4]
 8104332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8104334:	4613      	mov	r3, r2
 8104336:	005b      	lsls	r3, r3, #1
 8104338:	4413      	add	r3, r2
 810433a:	009b      	lsls	r3, r3, #2
 810433c:	3348      	adds	r3, #72	@ 0x48
 810433e:	443b      	add	r3, r7
 8104340:	3b3c      	subs	r3, #60	@ 0x3c
 8104342:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8104344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104346:	895b      	ldrh	r3, [r3, #10]
 8104348:	4619      	mov	r1, r3
 810434a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810434c:	4613      	mov	r3, r2
 810434e:	005b      	lsls	r3, r3, #1
 8104350:	4413      	add	r3, r2
 8104352:	009b      	lsls	r3, r3, #2
 8104354:	3348      	adds	r3, #72	@ 0x48
 8104356:	443b      	add	r3, r7
 8104358:	3b38      	subs	r3, #56	@ 0x38
 810435a:	6019      	str	r1, [r3, #0]

    if(i>0)
 810435c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810435e:	2b00      	cmp	r3, #0
 8104360:	d011      	beq.n	8104386 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8104362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104364:	1e5a      	subs	r2, r3, #1
 8104366:	f107 000c 	add.w	r0, r7, #12
 810436a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810436c:	460b      	mov	r3, r1
 810436e:	005b      	lsls	r3, r3, #1
 8104370:	440b      	add	r3, r1
 8104372:	009b      	lsls	r3, r3, #2
 8104374:	18c1      	adds	r1, r0, r3
 8104376:	4613      	mov	r3, r2
 8104378:	005b      	lsls	r3, r3, #1
 810437a:	4413      	add	r3, r2
 810437c:	009b      	lsls	r3, r3, #2
 810437e:	3348      	adds	r3, #72	@ 0x48
 8104380:	443b      	add	r3, r7
 8104382:	3b34      	subs	r3, #52	@ 0x34
 8104384:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8104386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	2b00      	cmp	r3, #0
 810438c:	d109      	bne.n	81043a2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 810438e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8104390:	4613      	mov	r3, r2
 8104392:	005b      	lsls	r3, r3, #1
 8104394:	4413      	add	r3, r2
 8104396:	009b      	lsls	r3, r3, #2
 8104398:	3348      	adds	r3, #72	@ 0x48
 810439a:	443b      	add	r3, r7
 810439c:	3b34      	subs	r3, #52	@ 0x34
 810439e:	2200      	movs	r2, #0
 81043a0:	601a      	str	r2, [r3, #0]
    }

    i++;
 81043a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81043a4:	3301      	adds	r3, #1
 81043a6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 81043a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81043aa:	681b      	ldr	r3, [r3, #0]
 81043ac:	643b      	str	r3, [r7, #64]	@ 0x40
 81043ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81043b0:	2b00      	cmp	r3, #0
 81043b2:	d1b6      	bne.n	8104322 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 81043b4:	683b      	ldr	r3, [r7, #0]
 81043b6:	891b      	ldrh	r3, [r3, #8]
 81043b8:	461a      	mov	r2, r3
 81043ba:	4b1f      	ldr	r3, [pc, #124]	@ (8104438 <low_level_output+0x150>)
 81043bc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 81043be:	4a1e      	ldr	r2, [pc, #120]	@ (8104438 <low_level_output+0x150>)
 81043c0:	f107 030c 	add.w	r3, r7, #12
 81043c4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 81043c6:	4a1c      	ldr	r2, [pc, #112]	@ (8104438 <low_level_output+0x150>)
 81043c8:	683b      	ldr	r3, [r7, #0]
 81043ca:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 81043cc:	6838      	ldr	r0, [r7, #0]
 81043ce:	f010 fb09 	bl	81149e4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 81043d2:	4919      	ldr	r1, [pc, #100]	@ (8104438 <low_level_output+0x150>)
 81043d4:	4819      	ldr	r0, [pc, #100]	@ (810443c <low_level_output+0x154>)
 81043d6:	f003 f9f6 	bl	81077c6 <HAL_ETH_Transmit_IT>
 81043da:	4603      	mov	r3, r0
 81043dc:	2b00      	cmp	r3, #0
 81043de:	d103      	bne.n	81043e8 <low_level_output+0x100>
    {
      errval = ERR_OK;
 81043e0:	2300      	movs	r3, #0
 81043e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 81043e6:	e01b      	b.n	8104420 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 81043e8:	4814      	ldr	r0, [pc, #80]	@ (810443c <low_level_output+0x154>)
 81043ea:	f003 ffe5 	bl	81083b8 <HAL_ETH_GetError>
 81043ee:	4603      	mov	r3, r0
 81043f0:	f003 0302 	and.w	r3, r3, #2
 81043f4:	2b00      	cmp	r3, #0
 81043f6:	d00d      	beq.n	8104414 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 81043f8:	4b11      	ldr	r3, [pc, #68]	@ (8104440 <low_level_output+0x158>)
 81043fa:	681b      	ldr	r3, [r3, #0]
 81043fc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8104400:	4618      	mov	r0, r3
 8104402:	f008 f977 	bl	810c6f4 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8104406:	480d      	ldr	r0, [pc, #52]	@ (810443c <low_level_output+0x154>)
 8104408:	f003 fb64 	bl	8107ad4 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 810440c:	23fe      	movs	r3, #254	@ 0xfe
 810440e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8104412:	e005      	b.n	8104420 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8104414:	6838      	ldr	r0, [r7, #0]
 8104416:	f010 fa3f 	bl	8114898 <pbuf_free>
        errval =  ERR_IF;
 810441a:	23f4      	movs	r3, #244	@ 0xf4
 810441c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8104420:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8104424:	f113 0f02 	cmn.w	r3, #2
 8104428:	d0d3      	beq.n	81043d2 <low_level_output+0xea>

  return errval;
 810442a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 810442e:	4618      	mov	r0, r3
 8104430:	3748      	adds	r7, #72	@ 0x48
 8104432:	46bd      	mov	sp, r7
 8104434:	bd80      	pop	{r7, pc}
 8104436:	bf00      	nop
 8104438:	1000030c 	.word	0x1000030c
 810443c:	1000025c 	.word	0x1000025c
 8104440:	10000258 	.word	0x10000258

08104444 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8104444:	b580      	push	{r7, lr}
 8104446:	b084      	sub	sp, #16
 8104448:	af00      	add	r7, sp, #0
 810444a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 810444c:	2300      	movs	r3, #0
 810444e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8104450:	4b07      	ldr	r3, [pc, #28]	@ (8104470 <low_level_input+0x2c>)
 8104452:	781b      	ldrb	r3, [r3, #0]
 8104454:	2b00      	cmp	r3, #0
 8104456:	d105      	bne.n	8104464 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8104458:	f107 030c 	add.w	r3, r7, #12
 810445c:	4619      	mov	r1, r3
 810445e:	4805      	ldr	r0, [pc, #20]	@ (8104474 <low_level_input+0x30>)
 8104460:	f003 fa02 	bl	8107868 <HAL_ETH_ReadData>
  }

  return p;
 8104464:	68fb      	ldr	r3, [r7, #12]
}
 8104466:	4618      	mov	r0, r3
 8104468:	3710      	adds	r7, #16
 810446a:	46bd      	mov	sp, r7
 810446c:	bd80      	pop	{r7, pc}
 810446e:	bf00      	nop
 8104470:	10000250 	.word	0x10000250
 8104474:	1000025c 	.word	0x1000025c

08104478 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8104478:	b580      	push	{r7, lr}
 810447a:	b084      	sub	sp, #16
 810447c:	af00      	add	r7, sp, #0
 810447e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8104480:	2300      	movs	r3, #0
 8104482:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8104488:	4b0f      	ldr	r3, [pc, #60]	@ (81044c8 <ethernetif_input+0x50>)
 810448a:	681b      	ldr	r3, [r3, #0]
 810448c:	f04f 31ff 	mov.w	r1, #4294967295
 8104490:	4618      	mov	r0, r3
 8104492:	f008 f92f 	bl	810c6f4 <osSemaphoreAcquire>
 8104496:	4603      	mov	r3, r0
 8104498:	2b00      	cmp	r3, #0
 810449a:	d1f5      	bne.n	8104488 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 810449c:	68b8      	ldr	r0, [r7, #8]
 810449e:	f7ff ffd1 	bl	8104444 <low_level_input>
 81044a2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 81044a4:	68fb      	ldr	r3, [r7, #12]
 81044a6:	2b00      	cmp	r3, #0
 81044a8:	d00a      	beq.n	81044c0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 81044aa:	68bb      	ldr	r3, [r7, #8]
 81044ac:	691b      	ldr	r3, [r3, #16]
 81044ae:	68b9      	ldr	r1, [r7, #8]
 81044b0:	68f8      	ldr	r0, [r7, #12]
 81044b2:	4798      	blx	r3
 81044b4:	4603      	mov	r3, r0
 81044b6:	2b00      	cmp	r3, #0
 81044b8:	d002      	beq.n	81044c0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 81044ba:	68f8      	ldr	r0, [r7, #12]
 81044bc:	f010 f9ec 	bl	8114898 <pbuf_free>
          }
        }
      } while(p!=NULL);
 81044c0:	68fb      	ldr	r3, [r7, #12]
 81044c2:	2b00      	cmp	r3, #0
 81044c4:	d1ea      	bne.n	810449c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 81044c6:	e7df      	b.n	8104488 <ethernetif_input+0x10>
 81044c8:	10000254 	.word	0x10000254

081044cc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 81044cc:	b580      	push	{r7, lr}
 81044ce:	b082      	sub	sp, #8
 81044d0:	af00      	add	r7, sp, #0
 81044d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	2b00      	cmp	r3, #0
 81044d8:	d106      	bne.n	81044e8 <ethernetif_init+0x1c>
 81044da:	4b0e      	ldr	r3, [pc, #56]	@ (8104514 <ethernetif_init+0x48>)
 81044dc:	f44f 7206 	mov.w	r2, #536	@ 0x218
 81044e0:	490d      	ldr	r1, [pc, #52]	@ (8104518 <ethernetif_init+0x4c>)
 81044e2:	480e      	ldr	r0, [pc, #56]	@ (810451c <ethernetif_init+0x50>)
 81044e4:	f017 fc9a 	bl	811be1c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	2273      	movs	r2, #115	@ 0x73
 81044ec:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	2274      	movs	r2, #116	@ 0x74
 81044f4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 81044f8:	687b      	ldr	r3, [r7, #4]
 81044fa:	4a09      	ldr	r2, [pc, #36]	@ (8104520 <ethernetif_init+0x54>)
 81044fc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	4a08      	ldr	r2, [pc, #32]	@ (8104524 <ethernetif_init+0x58>)
 8104502:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8104504:	6878      	ldr	r0, [r7, #4]
 8104506:	f7ff fdaf 	bl	8104068 <low_level_init>

  return ERR_OK;
 810450a:	2300      	movs	r3, #0
}
 810450c:	4618      	mov	r0, r3
 810450e:	3708      	adds	r7, #8
 8104510:	46bd      	mov	sp, r7
 8104512:	bd80      	pop	{r7, pc}
 8104514:	0811cc4c 	.word	0x0811cc4c
 8104518:	0811ccac 	.word	0x0811ccac
 810451c:	0811ccbc 	.word	0x0811ccbc
 8104520:	08111281 	.word	0x08111281
 8104524:	081042e9 	.word	0x081042e9

08104528 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8104528:	b580      	push	{r7, lr}
 810452a:	b084      	sub	sp, #16
 810452c:	af00      	add	r7, sp, #0
 810452e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8104534:	68f9      	ldr	r1, [r7, #12]
 8104536:	4809      	ldr	r0, [pc, #36]	@ (810455c <pbuf_free_custom+0x34>)
 8104538:	f00f fae6 	bl	8113b08 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 810453c:	4b08      	ldr	r3, [pc, #32]	@ (8104560 <pbuf_free_custom+0x38>)
 810453e:	781b      	ldrb	r3, [r3, #0]
 8104540:	2b01      	cmp	r3, #1
 8104542:	d107      	bne.n	8104554 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8104544:	4b06      	ldr	r3, [pc, #24]	@ (8104560 <pbuf_free_custom+0x38>)
 8104546:	2200      	movs	r2, #0
 8104548:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 810454a:	4b06      	ldr	r3, [pc, #24]	@ (8104564 <pbuf_free_custom+0x3c>)
 810454c:	681b      	ldr	r3, [r3, #0]
 810454e:	4618      	mov	r0, r3
 8104550:	f008 f922 	bl	810c798 <osSemaphoreRelease>
  }
}
 8104554:	bf00      	nop
 8104556:	3710      	adds	r7, #16
 8104558:	46bd      	mov	sp, r7
 810455a:	bd80      	pop	{r7, pc}
 810455c:	0811fbf4 	.word	0x0811fbf4
 8104560:	10000250 	.word	0x10000250
 8104564:	10000254 	.word	0x10000254

08104568 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8104568:	b580      	push	{r7, lr}
 810456a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 810456c:	f002 fe2c 	bl	81071c8 <HAL_GetTick>
 8104570:	4603      	mov	r3, r0
}
 8104572:	4618      	mov	r0, r3
 8104574:	bd80      	pop	{r7, pc}
	...

08104578 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8104578:	b580      	push	{r7, lr}
 810457a:	b08e      	sub	sp, #56	@ 0x38
 810457c:	af00      	add	r7, sp, #0
 810457e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104584:	2200      	movs	r2, #0
 8104586:	601a      	str	r2, [r3, #0]
 8104588:	605a      	str	r2, [r3, #4]
 810458a:	609a      	str	r2, [r3, #8]
 810458c:	60da      	str	r2, [r3, #12]
 810458e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	4a51      	ldr	r2, [pc, #324]	@ (81046dc <HAL_ETH_MspInit+0x164>)
 8104596:	4293      	cmp	r3, r2
 8104598:	f040 809b 	bne.w	81046d2 <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 810459c:	4b50      	ldr	r3, [pc, #320]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 810459e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045a2:	4a4f      	ldr	r2, [pc, #316]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 81045a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81045a8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81045ac:	4b4c      	ldr	r3, [pc, #304]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 81045ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81045b6:	623b      	str	r3, [r7, #32]
 81045b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 81045ba:	4b49      	ldr	r3, [pc, #292]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 81045bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045c0:	4a47      	ldr	r2, [pc, #284]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 81045c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81045c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81045ca:	4b45      	ldr	r3, [pc, #276]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 81045cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81045d4:	61fb      	str	r3, [r7, #28]
 81045d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 81045d8:	4b41      	ldr	r3, [pc, #260]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 81045da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045de:	4a40      	ldr	r2, [pc, #256]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 81045e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81045e4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81045e8:	4b3d      	ldr	r3, [pc, #244]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 81045ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81045f2:	61bb      	str	r3, [r7, #24]
 81045f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 81045f6:	4b3a      	ldr	r3, [pc, #232]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 81045f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81045fc:	4a38      	ldr	r2, [pc, #224]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 81045fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8104602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104606:	4b36      	ldr	r3, [pc, #216]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 8104608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810460c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104610:	617b      	str	r3, [r7, #20]
 8104612:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8104614:	4b32      	ldr	r3, [pc, #200]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 8104616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810461a:	4a31      	ldr	r2, [pc, #196]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 810461c:	f043 0304 	orr.w	r3, r3, #4
 8104620:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104624:	4b2e      	ldr	r3, [pc, #184]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 8104626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810462a:	f003 0304 	and.w	r3, r3, #4
 810462e:	613b      	str	r3, [r7, #16]
 8104630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8104632:	4b2b      	ldr	r3, [pc, #172]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 8104634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104638:	4a29      	ldr	r2, [pc, #164]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 810463a:	f043 0301 	orr.w	r3, r3, #1
 810463e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104642:	4b27      	ldr	r3, [pc, #156]	@ (81046e0 <HAL_ETH_MspInit+0x168>)
 8104644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104648:	f003 0301 	and.w	r3, r3, #1
 810464c:	60fb      	str	r3, [r7, #12]
 810464e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8104650:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8104654:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104656:	2302      	movs	r3, #2
 8104658:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810465a:	2300      	movs	r3, #0
 810465c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810465e:	2303      	movs	r3, #3
 8104660:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8104662:	230b      	movs	r3, #11
 8104664:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8104666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810466a:	4619      	mov	r1, r3
 810466c:	481d      	ldr	r0, [pc, #116]	@ (81046e4 <HAL_ETH_MspInit+0x16c>)
 810466e:	f004 fc3d 	bl	8108eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8104672:	2332      	movs	r3, #50	@ 0x32
 8104674:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104676:	2302      	movs	r3, #2
 8104678:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810467a:	2300      	movs	r3, #0
 810467c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810467e:	2303      	movs	r3, #3
 8104680:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8104682:	230b      	movs	r3, #11
 8104684:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8104686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810468a:	4619      	mov	r1, r3
 810468c:	4816      	ldr	r0, [pc, #88]	@ (81046e8 <HAL_ETH_MspInit+0x170>)
 810468e:	f004 fc2d 	bl	8108eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 8104692:	2386      	movs	r3, #134	@ 0x86
 8104694:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104696:	2302      	movs	r3, #2
 8104698:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810469a:	2300      	movs	r3, #0
 810469c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810469e:	2303      	movs	r3, #3
 81046a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81046a2:	230b      	movs	r3, #11
 81046a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81046a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81046aa:	4619      	mov	r1, r3
 81046ac:	480f      	ldr	r0, [pc, #60]	@ (81046ec <HAL_ETH_MspInit+0x174>)
 81046ae:	f004 fc1d 	bl	8108eec <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 81046b2:	2200      	movs	r2, #0
 81046b4:	2105      	movs	r1, #5
 81046b6:	203d      	movs	r0, #61	@ 0x3d
 81046b8:	f002 fe5e 	bl	8107378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 81046bc:	203d      	movs	r0, #61	@ 0x3d
 81046be:	f002 fe75 	bl	81073ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 6, 0);
 81046c2:	2200      	movs	r2, #0
 81046c4:	2106      	movs	r1, #6
 81046c6:	203e      	movs	r0, #62	@ 0x3e
 81046c8:	f002 fe56 	bl	8107378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 81046cc:	203e      	movs	r0, #62	@ 0x3e
 81046ce:	f002 fe6d 	bl	81073ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 81046d2:	bf00      	nop
 81046d4:	3738      	adds	r7, #56	@ 0x38
 81046d6:	46bd      	mov	sp, r7
 81046d8:	bd80      	pop	{r7, pc}
 81046da:	bf00      	nop
 81046dc:	40028000 	.word	0x40028000
 81046e0:	58024400 	.word	0x58024400
 81046e4:	58021800 	.word	0x58021800
 81046e8:	58020800 	.word	0x58020800
 81046ec:	58020000 	.word	0x58020000

081046f0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 81046f0:	b580      	push	{r7, lr}
 81046f2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 81046f4:	4802      	ldr	r0, [pc, #8]	@ (8104700 <ETH_PHY_IO_Init+0x10>)
 81046f6:	f003 fe0f 	bl	8108318 <HAL_ETH_SetMDIOClockRange>

  return 0;
 81046fa:	2300      	movs	r3, #0
}
 81046fc:	4618      	mov	r0, r3
 81046fe:	bd80      	pop	{r7, pc}
 8104700:	1000025c 	.word	0x1000025c

08104704 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8104704:	b480      	push	{r7}
 8104706:	af00      	add	r7, sp, #0
  return 0;
 8104708:	2300      	movs	r3, #0
}
 810470a:	4618      	mov	r0, r3
 810470c:	46bd      	mov	sp, r7
 810470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104712:	4770      	bx	lr

08104714 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8104714:	b580      	push	{r7, lr}
 8104716:	b084      	sub	sp, #16
 8104718:	af00      	add	r7, sp, #0
 810471a:	60f8      	str	r0, [r7, #12]
 810471c:	60b9      	str	r1, [r7, #8]
 810471e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	68ba      	ldr	r2, [r7, #8]
 8104724:	68f9      	ldr	r1, [r7, #12]
 8104726:	4807      	ldr	r0, [pc, #28]	@ (8104744 <ETH_PHY_IO_ReadReg+0x30>)
 8104728:	f003 fb60 	bl	8107dec <HAL_ETH_ReadPHYRegister>
 810472c:	4603      	mov	r3, r0
 810472e:	2b00      	cmp	r3, #0
 8104730:	d002      	beq.n	8104738 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8104732:	f04f 33ff 	mov.w	r3, #4294967295
 8104736:	e000      	b.n	810473a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8104738:	2300      	movs	r3, #0
}
 810473a:	4618      	mov	r0, r3
 810473c:	3710      	adds	r7, #16
 810473e:	46bd      	mov	sp, r7
 8104740:	bd80      	pop	{r7, pc}
 8104742:	bf00      	nop
 8104744:	1000025c 	.word	0x1000025c

08104748 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8104748:	b580      	push	{r7, lr}
 810474a:	b084      	sub	sp, #16
 810474c:	af00      	add	r7, sp, #0
 810474e:	60f8      	str	r0, [r7, #12]
 8104750:	60b9      	str	r1, [r7, #8]
 8104752:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	68ba      	ldr	r2, [r7, #8]
 8104758:	68f9      	ldr	r1, [r7, #12]
 810475a:	4807      	ldr	r0, [pc, #28]	@ (8104778 <ETH_PHY_IO_WriteReg+0x30>)
 810475c:	f003 fb9a 	bl	8107e94 <HAL_ETH_WritePHYRegister>
 8104760:	4603      	mov	r3, r0
 8104762:	2b00      	cmp	r3, #0
 8104764:	d002      	beq.n	810476c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8104766:	f04f 33ff 	mov.w	r3, #4294967295
 810476a:	e000      	b.n	810476e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 810476c:	2300      	movs	r3, #0
}
 810476e:	4618      	mov	r0, r3
 8104770:	3710      	adds	r7, #16
 8104772:	46bd      	mov	sp, r7
 8104774:	bd80      	pop	{r7, pc}
 8104776:	bf00      	nop
 8104778:	1000025c 	.word	0x1000025c

0810477c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 810477c:	b580      	push	{r7, lr}
 810477e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8104780:	f002 fd22 	bl	81071c8 <HAL_GetTick>
 8104784:	4603      	mov	r3, r0
}
 8104786:	4618      	mov	r0, r3
 8104788:	bd80      	pop	{r7, pc}
	...

0810478c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 810478c:	b580      	push	{r7, lr}
 810478e:	b0a0      	sub	sp, #128	@ 0x80
 8104790:	af00      	add	r7, sp, #0
 8104792:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8104794:	f107 0308 	add.w	r3, r7, #8
 8104798:	2264      	movs	r2, #100	@ 0x64
 810479a:	2100      	movs	r1, #0
 810479c:	4618      	mov	r0, r3
 810479e:	f017 fbbc 	bl	811bf1a <memset>
  int32_t PHYLinkState = 0;
 81047a2:	2300      	movs	r3, #0
 81047a4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 81047a6:	2300      	movs	r3, #0
 81047a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81047aa:	2300      	movs	r3, #0
 81047ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 81047ae:	2300      	movs	r3, #0
 81047b0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 81047b6:	483a      	ldr	r0, [pc, #232]	@ (81048a0 <ethernet_link_thread+0x114>)
 81047b8:	f002 fbf0 	bl	8106f9c <LAN8742_GetLinkState>
 81047bc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 81047be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81047c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81047c4:	089b      	lsrs	r3, r3, #2
 81047c6:	f003 0301 	and.w	r3, r3, #1
 81047ca:	b2db      	uxtb	r3, r3
 81047cc:	2b00      	cmp	r3, #0
 81047ce:	d00c      	beq.n	81047ea <ethernet_link_thread+0x5e>
 81047d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81047d2:	2b01      	cmp	r3, #1
 81047d4:	dc09      	bgt.n	81047ea <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 81047d6:	4833      	ldr	r0, [pc, #204]	@ (81048a4 <ethernet_link_thread+0x118>)
 81047d8:	f002 ff7d 	bl	81076d6 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 81047dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 81047de:	f00f fc17 	bl	8114010 <netif_set_down>
    netif_set_link_down(netif);
 81047e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 81047e4:	f00f fc7a 	bl	81140dc <netif_set_link_down>
 81047e8:	e055      	b.n	8104896 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 81047ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81047ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81047f0:	f003 0304 	and.w	r3, r3, #4
 81047f4:	2b00      	cmp	r3, #0
 81047f6:	d14e      	bne.n	8104896 <ethernet_link_thread+0x10a>
 81047f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81047fa:	2b01      	cmp	r3, #1
 81047fc:	dd4b      	ble.n	8104896 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 81047fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8104800:	3b02      	subs	r3, #2
 8104802:	2b03      	cmp	r3, #3
 8104804:	d82a      	bhi.n	810485c <ethernet_link_thread+0xd0>
 8104806:	a201      	add	r2, pc, #4	@ (adr r2, 810480c <ethernet_link_thread+0x80>)
 8104808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810480c:	0810481d 	.word	0x0810481d
 8104810:	0810482f 	.word	0x0810482f
 8104814:	0810483f 	.word	0x0810483f
 8104818:	0810484f 	.word	0x0810484f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810481c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104820:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8104822:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104826:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104828:	2301      	movs	r3, #1
 810482a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810482c:	e017      	b.n	810485e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810482e:	2300      	movs	r3, #0
 8104830:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8104832:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104836:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104838:	2301      	movs	r3, #1
 810483a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810483c:	e00f      	b.n	810485e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810483e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104842:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8104844:	2300      	movs	r3, #0
 8104846:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104848:	2301      	movs	r3, #1
 810484a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810484c:	e007      	b.n	810485e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810484e:	2300      	movs	r3, #0
 8104850:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8104852:	2300      	movs	r3, #0
 8104854:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104856:	2301      	movs	r3, #1
 8104858:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810485a:	e000      	b.n	810485e <ethernet_link_thread+0xd2>
    default:
      break;
 810485c:	bf00      	nop
    }

    if(linkchanged)
 810485e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8104860:	2b00      	cmp	r3, #0
 8104862:	d018      	beq.n	8104896 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8104864:	f107 0308 	add.w	r3, r7, #8
 8104868:	4619      	mov	r1, r3
 810486a:	480e      	ldr	r0, [pc, #56]	@ (81048a4 <ethernet_link_thread+0x118>)
 810486c:	f003 fb66 	bl	8107f3c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8104870:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8104872:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8104874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8104876:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8104878:	f107 0308 	add.w	r3, r7, #8
 810487c:	4619      	mov	r1, r3
 810487e:	4809      	ldr	r0, [pc, #36]	@ (81048a4 <ethernet_link_thread+0x118>)
 8104880:	f003 fd30 	bl	81082e4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8104884:	4807      	ldr	r0, [pc, #28]	@ (81048a4 <ethernet_link_thread+0x118>)
 8104886:	f002 feb1 	bl	81075ec <HAL_ETH_Start_IT>
      netif_set_up(netif);
 810488a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810488c:	f00f fb54 	bl	8113f38 <netif_set_up>
      netif_set_link_up(netif);
 8104890:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8104892:	f00f fbef 	bl	8114074 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8104896:	2064      	movs	r0, #100	@ 0x64
 8104898:	f007 fd79 	bl	810c38e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 810489c:	e78b      	b.n	81047b6 <ethernet_link_thread+0x2a>
 810489e:	bf00      	nop
 81048a0:	10000344 	.word	0x10000344
 81048a4:	1000025c 	.word	0x1000025c

081048a8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 81048a8:	b580      	push	{r7, lr}
 81048aa:	b086      	sub	sp, #24
 81048ac:	af02      	add	r7, sp, #8
 81048ae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 81048b0:	4812      	ldr	r0, [pc, #72]	@ (81048fc <HAL_ETH_RxAllocateCallback+0x54>)
 81048b2:	f00f f8b5 	bl	8113a20 <memp_malloc_pool>
 81048b6:	60f8      	str	r0, [r7, #12]
  if (p)
 81048b8:	68fb      	ldr	r3, [r7, #12]
 81048ba:	2b00      	cmp	r3, #0
 81048bc:	d014      	beq.n	81048e8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 81048be:	68fb      	ldr	r3, [r7, #12]
 81048c0:	f103 0220 	add.w	r2, r3, #32
 81048c4:	687b      	ldr	r3, [r7, #4]
 81048c6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 81048c8:	68fb      	ldr	r3, [r7, #12]
 81048ca:	4a0d      	ldr	r2, [pc, #52]	@ (8104900 <HAL_ETH_RxAllocateCallback+0x58>)
 81048cc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	681b      	ldr	r3, [r3, #0]
 81048d2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81048d6:	9201      	str	r2, [sp, #4]
 81048d8:	9300      	str	r3, [sp, #0]
 81048da:	68fb      	ldr	r3, [r7, #12]
 81048dc:	2241      	movs	r2, #65	@ 0x41
 81048de:	2100      	movs	r1, #0
 81048e0:	2000      	movs	r0, #0
 81048e2:	f00f fe21 	bl	8114528 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 81048e6:	e005      	b.n	81048f4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 81048e8:	4b06      	ldr	r3, [pc, #24]	@ (8104904 <HAL_ETH_RxAllocateCallback+0x5c>)
 81048ea:	2201      	movs	r2, #1
 81048ec:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 81048ee:	687b      	ldr	r3, [r7, #4]
 81048f0:	2200      	movs	r2, #0
 81048f2:	601a      	str	r2, [r3, #0]
}
 81048f4:	bf00      	nop
 81048f6:	3710      	adds	r7, #16
 81048f8:	46bd      	mov	sp, r7
 81048fa:	bd80      	pop	{r7, pc}
 81048fc:	0811fbf4 	.word	0x0811fbf4
 8104900:	08104529 	.word	0x08104529
 8104904:	10000250 	.word	0x10000250

08104908 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8104908:	b480      	push	{r7}
 810490a:	b089      	sub	sp, #36	@ 0x24
 810490c:	af00      	add	r7, sp, #0
 810490e:	60f8      	str	r0, [r7, #12]
 8104910:	60b9      	str	r1, [r7, #8]
 8104912:	607a      	str	r2, [r7, #4]
 8104914:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8104916:	68fb      	ldr	r3, [r7, #12]
 8104918:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 810491a:	68bb      	ldr	r3, [r7, #8]
 810491c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 810491e:	2300      	movs	r3, #0
 8104920:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8104922:	687b      	ldr	r3, [r7, #4]
 8104924:	3b20      	subs	r3, #32
 8104926:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8104928:	69fb      	ldr	r3, [r7, #28]
 810492a:	2200      	movs	r2, #0
 810492c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 810492e:	69fb      	ldr	r3, [r7, #28]
 8104930:	2200      	movs	r2, #0
 8104932:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8104934:	69fb      	ldr	r3, [r7, #28]
 8104936:	887a      	ldrh	r2, [r7, #2]
 8104938:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 810493a:	69bb      	ldr	r3, [r7, #24]
 810493c:	681b      	ldr	r3, [r3, #0]
 810493e:	2b00      	cmp	r3, #0
 8104940:	d103      	bne.n	810494a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8104942:	69bb      	ldr	r3, [r7, #24]
 8104944:	69fa      	ldr	r2, [r7, #28]
 8104946:	601a      	str	r2, [r3, #0]
 8104948:	e003      	b.n	8104952 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 810494a:	697b      	ldr	r3, [r7, #20]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	69fa      	ldr	r2, [r7, #28]
 8104950:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8104952:	697b      	ldr	r3, [r7, #20]
 8104954:	69fa      	ldr	r2, [r7, #28]
 8104956:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8104958:	69bb      	ldr	r3, [r7, #24]
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	61fb      	str	r3, [r7, #28]
 810495e:	e009      	b.n	8104974 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8104960:	69fb      	ldr	r3, [r7, #28]
 8104962:	891a      	ldrh	r2, [r3, #8]
 8104964:	887b      	ldrh	r3, [r7, #2]
 8104966:	4413      	add	r3, r2
 8104968:	b29a      	uxth	r2, r3
 810496a:	69fb      	ldr	r3, [r7, #28]
 810496c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 810496e:	69fb      	ldr	r3, [r7, #28]
 8104970:	681b      	ldr	r3, [r3, #0]
 8104972:	61fb      	str	r3, [r7, #28]
 8104974:	69fb      	ldr	r3, [r7, #28]
 8104976:	2b00      	cmp	r3, #0
 8104978:	d1f2      	bne.n	8104960 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 810497a:	bf00      	nop
 810497c:	bf00      	nop
 810497e:	3724      	adds	r7, #36	@ 0x24
 8104980:	46bd      	mov	sp, r7
 8104982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104986:	4770      	bx	lr

08104988 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8104988:	b580      	push	{r7, lr}
 810498a:	b082      	sub	sp, #8
 810498c:	af00      	add	r7, sp, #0
 810498e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8104990:	6878      	ldr	r0, [r7, #4]
 8104992:	f00f ff81 	bl	8114898 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8104996:	bf00      	nop
 8104998:	3708      	adds	r7, #8
 810499a:	46bd      	mov	sp, r7
 810499c:	bd80      	pop	{r7, pc}
	...

081049a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81049a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81049d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81049a4:	f002 fb82 	bl	81070ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81049a8:	480c      	ldr	r0, [pc, #48]	@ (81049dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81049aa:	490d      	ldr	r1, [pc, #52]	@ (81049e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81049ac:	4a0d      	ldr	r2, [pc, #52]	@ (81049e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81049ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81049b0:	e002      	b.n	81049b8 <LoopCopyDataInit>

081049b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81049b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81049b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81049b6:	3304      	adds	r3, #4

081049b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81049b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81049ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81049bc:	d3f9      	bcc.n	81049b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81049be:	4a0a      	ldr	r2, [pc, #40]	@ (81049e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81049c0:	4c0a      	ldr	r4, [pc, #40]	@ (81049ec <LoopFillZerobss+0x22>)
  movs r3, #0
 81049c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81049c4:	e001      	b.n	81049ca <LoopFillZerobss>

081049c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81049c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81049c8:	3204      	adds	r2, #4

081049ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81049ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81049cc:	d3fb      	bcc.n	81049c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81049ce:	f017 fbaf 	bl	811c130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81049d2:	f7fb fdf3 	bl	81005bc <main>
  bx  lr
 81049d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81049d8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81049dc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81049e0:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 81049e4:	0811fe28 	.word	0x0811fe28
  ldr r2, =_sbss
 81049e8:	10000090 	.word	0x10000090
  ldr r4, =_ebss
 81049ec:	10011ed4 	.word	0x10011ed4

081049f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81049f0:	e7fe      	b.n	81049f0 <ADC3_IRQHandler>

081049f2 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 81049f2:	b480      	push	{r7}
 81049f4:	af00      	add	r7, sp, #0
 81049f6:	bf00      	nop
 81049f8:	4618      	mov	r0, r3
 81049fa:	46bd      	mov	sp, r7
 81049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a00:	4770      	bx	lr

08104a02 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 8104a02:	b480      	push	{r7}
 8104a04:	b083      	sub	sp, #12
 8104a06:	af00      	add	r7, sp, #0
 8104a08:	6078      	str	r0, [r7, #4]
 8104a0a:	7039      	strb	r1, [r7, #0]
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	4618      	mov	r0, r3
 8104a10:	370c      	adds	r7, #12
 8104a12:	46bd      	mov	sp, r7
 8104a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a18:	4770      	bx	lr

08104a1a <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8104a1a:	b480      	push	{r7}
 8104a1c:	b083      	sub	sp, #12
 8104a1e:	af00      	add	r7, sp, #0
 8104a20:	7138      	strb	r0, [r7, #4]
 8104a22:	bf00      	nop
 8104a24:	4618      	mov	r0, r3
 8104a26:	370c      	adds	r7, #12
 8104a28:	46bd      	mov	sp, r7
 8104a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a2e:	4770      	bx	lr

08104a30 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8104a30:	b480      	push	{r7}
 8104a32:	b083      	sub	sp, #12
 8104a34:	af00      	add	r7, sp, #0
 8104a36:	6078      	str	r0, [r7, #4]
 8104a38:	687b      	ldr	r3, [r7, #4]
 8104a3a:	fab3 f383 	clz	r3, r3
 8104a3e:	f1c3 031f 	rsb	r3, r3, #31
 8104a42:	4618      	mov	r0, r3
 8104a44:	370c      	adds	r7, #12
 8104a46:	46bd      	mov	sp, r7
 8104a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a4c:	4770      	bx	lr

08104a4e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8104a4e:	b580      	push	{r7, lr}
 8104a50:	b082      	sub	sp, #8
 8104a52:	af00      	add	r7, sp, #0
 8104a54:	ed87 0a01 	vstr	s0, [r7, #4]
 8104a58:	ed97 0a01 	vldr	s0, [r7, #4]
 8104a5c:	f016 fff4 	bl	811ba48 <roundf>
 8104a60:	eef0 7a40 	vmov.f32	s15, s0
 8104a64:	eeb0 0a67 	vmov.f32	s0, s15
 8104a68:	3708      	adds	r7, #8
 8104a6a:	46bd      	mov	sp, r7
 8104a6c:	bd80      	pop	{r7, pc}
	...

08104a70 <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8104a70:	b480      	push	{r7}
 8104a72:	af00      	add	r7, sp, #0
 8104a74:	4b02      	ldr	r3, [pc, #8]	@ (8104a80 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8104a76:	4618      	mov	r0, r3
 8104a78:	46bd      	mov	sp, r7
 8104a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a7e:	4770      	bx	lr
 8104a80:	ffff8000 	.word	0xffff8000

08104a84 <_Z15StartTask_CTempPv>:
constexpr uint16_t MCP9808_I2C_ADDRESS 	= 0x18 << 1;  // MCP9808 address (shift for HAL I2C)
constexpr uint8_t  MCP9808_TEMP_REG    	= 0x05;       // Temperature register


void StartTask_CTemp(void *argument)
{
 8104a84:	b580      	push	{r7, lr}
 8104a86:	b08c      	sub	sp, #48	@ 0x30
 8104a88:	af00      	add	r7, sp, #0
 8104a8a:	6078      	str	r0, [r7, #4]
	TemperatureTask TemperatureTaskInstance;
 8104a8c:	f107 0314 	add.w	r3, r7, #20
 8104a90:	4618      	mov	r0, r3
 8104a92:	f000 f85f 	bl	8104b54 <_ZN15TemperatureTaskC1Ev>

    int periodMs = 2000;
 8104a96:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8104a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t timeout;
    TickType_t period_tick = pdMS_TO_TICKS(periodMs);
 8104a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104a9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8104aa2:	fb02 f303 	mul.w	r3, r2, r3
 8104aa6:	4a17      	ldr	r2, [pc, #92]	@ (8104b04 <_Z15StartTask_CTempPv+0x80>)
 8104aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8104aac:	099b      	lsrs	r3, r3, #6
 8104aae:	60bb      	str	r3, [r7, #8]
    vTaskSetTimeOutState(&timeout);
 8104ab0:	f107 030c 	add.w	r3, r7, #12
 8104ab4:	4618      	mov	r0, r3
 8104ab6:	f00a ff27 	bl	810f908 <vTaskSetTimeOutState>

    for (;;)
    {
    	if(xTaskCheckForTimeOut(&timeout, &period_tick) != pdFALSE)
 8104aba:	f107 0208 	add.w	r2, r7, #8
 8104abe:	f107 030c 	add.w	r3, r7, #12
 8104ac2:	4611      	mov	r1, r2
 8104ac4:	4618      	mov	r0, r3
 8104ac6:	f00a ff5d 	bl	810f984 <xTaskCheckForTimeOut>
 8104aca:	4603      	mov	r3, r0
 8104acc:	2b00      	cmp	r3, #0
 8104ace:	bf14      	ite	ne
 8104ad0:	2301      	movne	r3, #1
 8104ad2:	2300      	moveq	r3, #0
 8104ad4:	b2db      	uxtb	r3, r3
 8104ad6:	2b00      	cmp	r3, #0
 8104ad8:	d0ef      	beq.n	8104aba <_Z15StartTask_CTempPv+0x36>
        {
    		vTaskSetTimeOutState(&timeout);
 8104ada:	f107 030c 	add.w	r3, r7, #12
 8104ade:	4618      	mov	r0, r3
 8104ae0:	f00a ff12 	bl	810f908 <vTaskSetTimeOutState>
            period_tick = pdMS_TO_TICKS(periodMs);
 8104ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104ae6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8104aea:	fb02 f303 	mul.w	r3, r2, r3
 8104aee:	4a05      	ldr	r2, [pc, #20]	@ (8104b04 <_Z15StartTask_CTempPv+0x80>)
 8104af0:	fba2 2303 	umull	r2, r3, r2, r3
 8104af4:	099b      	lsrs	r3, r3, #6
 8104af6:	60bb      	str	r3, [r7, #8]

            /* task */
            TemperatureTaskInstance.process();
 8104af8:	f107 0314 	add.w	r3, r7, #20
 8104afc:	4618      	mov	r0, r3
 8104afe:	f000 f845 	bl	8104b8c <_ZN15TemperatureTask7processEv>
    	if(xTaskCheckForTimeOut(&timeout, &period_tick) != pdFALSE)
 8104b02:	e7da      	b.n	8104aba <_Z15StartTask_CTempPv+0x36>
 8104b04:	10624dd3 	.word	0x10624dd3

08104b08 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8104b08:	b580      	push	{r7, lr}
 8104b0a:	b082      	sub	sp, #8
 8104b0c:	af00      	add	r7, sp, #0
 8104b0e:	6078      	str	r0, [r7, #4]
 8104b10:	6878      	ldr	r0, [r7, #4]
 8104b12:	f000 f9d4 	bl	8104ebe <_ZNSaIfED1Ev>
 8104b16:	687b      	ldr	r3, [r7, #4]
 8104b18:	4618      	mov	r0, r3
 8104b1a:	3708      	adds	r7, #8
 8104b1c:	46bd      	mov	sp, r7
 8104b1e:	bd80      	pop	{r7, pc}

08104b20 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base() = default;
 8104b20:	b580      	push	{r7, lr}
 8104b22:	b082      	sub	sp, #8
 8104b24:	af00      	add	r7, sp, #0
 8104b26:	6078      	str	r0, [r7, #4]
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	4618      	mov	r0, r3
 8104b2c:	f000 f9b7 	bl	8104e9e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	4618      	mov	r0, r3
 8104b34:	3708      	adds	r7, #8
 8104b36:	46bd      	mov	sp, r7
 8104b38:	bd80      	pop	{r7, pc}

08104b3a <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector() = default;
 8104b3a:	b580      	push	{r7, lr}
 8104b3c:	b082      	sub	sp, #8
 8104b3e:	af00      	add	r7, sp, #0
 8104b40:	6078      	str	r0, [r7, #4]
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	4618      	mov	r0, r3
 8104b46:	f7ff ffeb 	bl	8104b20 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8104b4a:	687b      	ldr	r3, [r7, #4]
 8104b4c:	4618      	mov	r0, r3
 8104b4e:	3708      	adds	r7, #8
 8104b50:	46bd      	mov	sp, r7
 8104b52:	bd80      	pop	{r7, pc}

08104b54 <_ZN15TemperatureTaskC1Ev>:
        }
    }
}

TemperatureTask::TemperatureTask() : event_bus(EventBus(queueToTemperature, EVENT_CLIENT_THERMOMETER))
 8104b54:	b580      	push	{r7, lr}
 8104b56:	b082      	sub	sp, #8
 8104b58:	af00      	add	r7, sp, #0
 8104b5a:	6078      	str	r0, [r7, #4]
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	4618      	mov	r0, r3
 8104b60:	f7ff ffeb 	bl	8104b3a <_ZNSt6vectorIfSaIfEEC1Ev>
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	330c      	adds	r3, #12
 8104b68:	4a07      	ldr	r2, [pc, #28]	@ (8104b88 <_ZN15TemperatureTaskC1Ev+0x34>)
 8104b6a:	6811      	ldr	r1, [r2, #0]
 8104b6c:	2203      	movs	r2, #3
 8104b6e:	4618      	mov	r0, r3
 8104b70:	f7fc fa6c 	bl	810104c <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
{
	measurements.reserve(MEASUREMENTS_COUNT);
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	2106      	movs	r1, #6
 8104b78:	4618      	mov	r0, r3
 8104b7a:	f000 f9db 	bl	8104f34 <_ZNSt6vectorIfSaIfEE7reserveEj>
}
 8104b7e:	687b      	ldr	r3, [r7, #4]
 8104b80:	4618      	mov	r0, r3
 8104b82:	3708      	adds	r7, #8
 8104b84:	46bd      	mov	sp, r7
 8104b86:	bd80      	pop	{r7, pc}
 8104b88:	1000011c 	.word	0x1000011c

08104b8c <_ZN15TemperatureTask7processEv>:

void TemperatureTask::process()
{
 8104b8c:	b5b0      	push	{r4, r5, r7, lr}
 8104b8e:	b08e      	sub	sp, #56	@ 0x38
 8104b90:	af04      	add	r7, sp, #16
 8104b92:	6078      	str	r0, [r7, #4]
	uint32_t err = doMeasurement();
 8104b94:	6878      	ldr	r0, [r7, #4]
 8104b96:	f000 f8b3 	bl	8104d00 <_ZN15TemperatureTask13doMeasurementEv>
 8104b9a:	6278      	str	r0, [r7, #36]	@ 0x24
	if( err != HAL_I2C_ERROR_NONE)
 8104b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104b9e:	2b00      	cmp	r3, #0
 8104ba0:	d12f      	bne.n	8104c02 <_ZN15TemperatureTask7processEv+0x76>
	{
		return;
	}
	short int measurement = getMedian();
 8104ba2:	6878      	ldr	r0, [r7, #4]
 8104ba4:	f000 f833 	bl	8104c0e <_ZN15TemperatureTask9getMedianEv>
 8104ba8:	4603      	mov	r3, r0
 8104baa:	847b      	strh	r3, [r7, #34]	@ 0x22
	if(measurement == std::numeric_limits<short int>::min())
 8104bac:	f7ff ff60 	bl	8104a70 <_ZNSt14numeric_limitsIsE3minEv>
 8104bb0:	4603      	mov	r3, r0
 8104bb2:	461a      	mov	r2, r3
 8104bb4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8104bb8:	4293      	cmp	r3, r2
 8104bba:	bf0c      	ite	eq
 8104bbc:	2301      	moveq	r3, #1
 8104bbe:	2300      	movne	r3, #0
 8104bc0:	b2db      	uxtb	r3, r3
 8104bc2:	2b00      	cmp	r3, #0
 8104bc4:	d11f      	bne.n	8104c06 <_ZN15TemperatureTask7processEv+0x7a>
	{
		return;
	}
	EEventClient receiver = EVENT_CLIENT_FRONTEND;
 8104bc6:	2300      	movs	r3, #0
 8104bc8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	EEventType event = EVENT_UPDATE_ROOM_TEMPERATURE;
 8104bcc:	f240 1305 	movw	r3, #261	@ 0x105
 8104bd0:	83fb      	strh	r3, [r7, #30]
	UMessageData data;
	data.room_temperature = measurement;
 8104bd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8104bd4:	81bb      	strh	r3, [r7, #12]
	event_bus.send(event, data, receiver);
 8104bd6:	687b      	ldr	r3, [r7, #4]
 8104bd8:	f103 040c 	add.w	r4, r3, #12
 8104bdc:	8bfd      	ldrh	r5, [r7, #30]
 8104bde:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8104be2:	9302      	str	r3, [sp, #8]
 8104be4:	466a      	mov	r2, sp
 8104be6:	f107 0314 	add.w	r3, r7, #20
 8104bea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8104bee:	e882 0003 	stmia.w	r2, {r0, r1}
 8104bf2:	f107 030c 	add.w	r3, r7, #12
 8104bf6:	cb0c      	ldmia	r3, {r2, r3}
 8104bf8:	4629      	mov	r1, r5
 8104bfa:	4620      	mov	r0, r4
 8104bfc:	f7fc fa40 	bl	8101080 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
 8104c00:	e002      	b.n	8104c08 <_ZN15TemperatureTask7processEv+0x7c>
		return;
 8104c02:	bf00      	nop
 8104c04:	e000      	b.n	8104c08 <_ZN15TemperatureTask7processEv+0x7c>
		return;
 8104c06:	bf00      	nop
}
 8104c08:	3728      	adds	r7, #40	@ 0x28
 8104c0a:	46bd      	mov	sp, r7
 8104c0c:	bdb0      	pop	{r4, r5, r7, pc}

08104c0e <_ZN15TemperatureTask9getMedianEv>:

short int TemperatureTask::getMedian()
{
 8104c0e:	b590      	push	{r4, r7, lr}
 8104c10:	ed2d 8b02 	vpush	{d8}
 8104c14:	b089      	sub	sp, #36	@ 0x24
 8104c16:	af00      	add	r7, sp, #0
 8104c18:	6078      	str	r0, [r7, #4]
	short int median = std::numeric_limits<short>::min();
 8104c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8104c1e:	83fb      	strh	r3, [r7, #30]
	size_t currMesSize = measurements.size();
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	4618      	mov	r0, r3
 8104c24:	f000 fa06 	bl	8105034 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8104c28:	61b8      	str	r0, [r7, #24]

	if(currMesSize > 0)
 8104c2a:	69bb      	ldr	r3, [r7, #24]
 8104c2c:	2b00      	cmp	r3, #0
 8104c2e:	d05f      	beq.n	8104cf0 <_ZN15TemperatureTask9getMedianEv+0xe2>
	{
		std::vector<float> sortedCopy = measurements;
 8104c30:	687a      	ldr	r2, [r7, #4]
 8104c32:	f107 030c 	add.w	r3, r7, #12
 8104c36:	4611      	mov	r1, r2
 8104c38:	4618      	mov	r0, r3
 8104c3a:	f000 fa0b 	bl	8105054 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
		std::sort(sortedCopy.begin(), sortedCopy.end());
 8104c3e:	f107 030c 	add.w	r3, r7, #12
 8104c42:	4618      	mov	r0, r3
 8104c44:	f000 fa43 	bl	81050ce <_ZNSt6vectorIfSaIfEE5beginEv>
 8104c48:	4604      	mov	r4, r0
 8104c4a:	f107 030c 	add.w	r3, r7, #12
 8104c4e:	4618      	mov	r0, r3
 8104c50:	f000 fa4d 	bl	81050ee <_ZNSt6vectorIfSaIfEE3endEv>
 8104c54:	4603      	mov	r3, r0
 8104c56:	4619      	mov	r1, r3
 8104c58:	4620      	mov	r0, r4
 8104c5a:	f000 fa59 	bl	8105110 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

		if(currMesSize % 2 == 0)
 8104c5e:	69bb      	ldr	r3, [r7, #24]
 8104c60:	f003 0301 	and.w	r3, r3, #1
 8104c64:	2b00      	cmp	r3, #0
 8104c66:	d128      	bne.n	8104cba <_ZN15TemperatureTask9getMedianEv+0xac>
		{
			median = static_cast<short int>(std::round((sortedCopy[currMesSize / 2 - 1] + sortedCopy[currMesSize / 2]) / 2));
 8104c68:	69bb      	ldr	r3, [r7, #24]
 8104c6a:	085b      	lsrs	r3, r3, #1
 8104c6c:	1e5a      	subs	r2, r3, #1
 8104c6e:	f107 030c 	add.w	r3, r7, #12
 8104c72:	4611      	mov	r1, r2
 8104c74:	4618      	mov	r0, r3
 8104c76:	f000 fa5b 	bl	8105130 <_ZNSt6vectorIfSaIfEEixEj>
 8104c7a:	4603      	mov	r3, r0
 8104c7c:	ed93 8a00 	vldr	s16, [r3]
 8104c80:	69bb      	ldr	r3, [r7, #24]
 8104c82:	085a      	lsrs	r2, r3, #1
 8104c84:	f107 030c 	add.w	r3, r7, #12
 8104c88:	4611      	mov	r1, r2
 8104c8a:	4618      	mov	r0, r3
 8104c8c:	f000 fa50 	bl	8105130 <_ZNSt6vectorIfSaIfEEixEj>
 8104c90:	4603      	mov	r3, r0
 8104c92:	edd3 7a00 	vldr	s15, [r3]
 8104c96:	ee78 7a27 	vadd.f32	s15, s16, s15
 8104c9a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8104c9e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8104ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8104ca6:	f7ff fed2 	bl	8104a4e <_ZSt5roundf>
 8104caa:	eef0 7a40 	vmov.f32	s15, s0
 8104cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104cb2:	ee17 3a90 	vmov	r3, s15
 8104cb6:	83fb      	strh	r3, [r7, #30]
 8104cb8:	e015      	b.n	8104ce6 <_ZN15TemperatureTask9getMedianEv+0xd8>
		}
		else
		{
			median = static_cast<short int>(std::round(sortedCopy[currMesSize / 2]));
 8104cba:	69bb      	ldr	r3, [r7, #24]
 8104cbc:	085a      	lsrs	r2, r3, #1
 8104cbe:	f107 030c 	add.w	r3, r7, #12
 8104cc2:	4611      	mov	r1, r2
 8104cc4:	4618      	mov	r0, r3
 8104cc6:	f000 fa33 	bl	8105130 <_ZNSt6vectorIfSaIfEEixEj>
 8104cca:	4603      	mov	r3, r0
 8104ccc:	edd3 7a00 	vldr	s15, [r3]
 8104cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8104cd4:	f7ff febb 	bl	8104a4e <_ZSt5roundf>
 8104cd8:	eef0 7a40 	vmov.f32	s15, s0
 8104cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104ce0:	ee17 3a90 	vmov	r3, s15
 8104ce4:	83fb      	strh	r3, [r7, #30]
		}
	}
 8104ce6:	f107 030c 	add.w	r3, r7, #12
 8104cea:	4618      	mov	r0, r3
 8104cec:	f000 f8bc 	bl	8104e68 <_ZNSt6vectorIfSaIfEED1Ev>
	return median;
 8104cf0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8104cf4:	4618      	mov	r0, r3
 8104cf6:	3724      	adds	r7, #36	@ 0x24
 8104cf8:	46bd      	mov	sp, r7
 8104cfa:	ecbd 8b02 	vpop	{d8}
 8104cfe:	bd90      	pop	{r4, r7, pc}

08104d00 <_ZN15TemperatureTask13doMeasurementEv>:

uint32_t TemperatureTask::doMeasurement()
{
 8104d00:	b5b0      	push	{r4, r5, r7, lr}
 8104d02:	b090      	sub	sp, #64	@ 0x40
 8104d04:	af04      	add	r7, sp, #16
 8104d06:	6078      	str	r0, [r7, #4]
	uint8_t data[2];

    if (HAL_I2C_Mem_Read(&hi2c4, MCP9808_I2C_ADDRESS, MCP9808_TEMP_REG, I2C_MEMADD_SIZE_8BIT, data, 2, 1000u) != HAL_OK)
 8104d08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8104d0c:	9302      	str	r3, [sp, #8]
 8104d0e:	2302      	movs	r3, #2
 8104d10:	9301      	str	r3, [sp, #4]
 8104d12:	f107 030c 	add.w	r3, r7, #12
 8104d16:	9300      	str	r3, [sp, #0]
 8104d18:	2301      	movs	r3, #1
 8104d1a:	2205      	movs	r2, #5
 8104d1c:	2130      	movs	r1, #48	@ 0x30
 8104d1e:	4851      	ldr	r0, [pc, #324]	@ (8104e64 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8104d20:	f004 fccc 	bl	81096bc <HAL_I2C_Mem_Read>
 8104d24:	4603      	mov	r3, r0
 8104d26:	2b00      	cmp	r3, #0
 8104d28:	bf14      	ite	ne
 8104d2a:	2301      	movne	r3, #1
 8104d2c:	2300      	moveq	r3, #0
 8104d2e:	b2db      	uxtb	r3, r3
 8104d30:	2b00      	cmp	r3, #0
 8104d32:	d00b      	beq.n	8104d4c <_ZN15TemperatureTask13doMeasurementEv+0x4c>
    {
    	uint32_t err = HAL_I2C_GetError(&hi2c4);
 8104d34:	484b      	ldr	r0, [pc, #300]	@ (8104e64 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8104d36:	f004 fddb 	bl	81098f0 <HAL_I2C_GetError>
 8104d3a:	61b8      	str	r0, [r7, #24]
        // Error handling - restart I2C4 interface
    	HAL_I2C_DeInit(&hi2c4);
 8104d3c:	4849      	ldr	r0, [pc, #292]	@ (8104e64 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8104d3e:	f004 fc8e 	bl	810965e <HAL_I2C_DeInit>
    	HAL_I2C_Init(&hi2c4);
 8104d42:	4848      	ldr	r0, [pc, #288]	@ (8104e64 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8104d44:	f004 fbf0 	bl	8109528 <HAL_I2C_Init>
    	//do not block other tasks, try again later.
    	return err;
 8104d48:	69bb      	ldr	r3, [r7, #24]
 8104d4a:	e086      	b.n	8104e5a <_ZN15TemperatureTask13doMeasurementEv+0x15a>
    }

	uint16_t dataLong;
	float tmpVal = 0;
 8104d4c:	f04f 0300 	mov.w	r3, #0
 8104d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float tmpValDec;

	dataLong = ((data[0] << 8u) | data[1]);
 8104d52:	7b3b      	ldrb	r3, [r7, #12]
 8104d54:	021b      	lsls	r3, r3, #8
 8104d56:	b21a      	sxth	r2, r3
 8104d58:	7b7b      	ldrb	r3, [r7, #13]
 8104d5a:	b21b      	sxth	r3, r3
 8104d5c:	4313      	orrs	r3, r2
 8104d5e:	b21b      	sxth	r3, r3
 8104d60:	847b      	strh	r3, [r7, #34]	@ 0x22
	/* Extract the integer part from the fixed point value */
	tmpVal = ((dataLong & 0x0FFF) >> 4);
 8104d62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8104d64:	091b      	lsrs	r3, r3, #4
 8104d66:	b29b      	uxth	r3, r3
 8104d68:	b2db      	uxtb	r3, r3
 8104d6a:	ee07 3a90 	vmov	s15, r3
 8104d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104d72:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* Extract decimal part */
	tmpValDec = 0.0625;
 8104d76:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 8104d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 8104d7c:	2300      	movs	r3, #0
 8104d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8104d80:	e01c      	b.n	8104dbc <_ZN15TemperatureTask13doMeasurementEv+0xbc>
	{
		tmpVal += ((dataLong >> i) & 0x0001) * tmpValDec;
 8104d82:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8104d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d86:	fa42 f303 	asr.w	r3, r2, r3
 8104d8a:	f003 0301 	and.w	r3, r3, #1
 8104d8e:	ee07 3a90 	vmov	s15, r3
 8104d92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104d96:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8104d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d9e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8104da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8104da6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		tmpValDec *= 2u;
 8104daa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8104dae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8104db2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 8104db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104db8:	3301      	adds	r3, #1
 8104dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8104dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104dbe:	2b03      	cmp	r3, #3
 8104dc0:	dddf      	ble.n	8104d82 <_ZN15TemperatureTask13doMeasurementEv+0x82>
	}

	short int measurement = static_cast<short int>(tmpVal);
 8104dc2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8104dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104dca:	ee17 3a90 	vmov	r3, s15
 8104dce:	843b      	strh	r3, [r7, #32]

	size_t currMesSize = measurements.size();
 8104dd0:	687b      	ldr	r3, [r7, #4]
 8104dd2:	4618      	mov	r0, r3
 8104dd4:	f000 f92e 	bl	8105034 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8104dd8:	61f8      	str	r0, [r7, #28]

	if(currMesSize < MEASUREMENTS_COUNT)
 8104dda:	69fb      	ldr	r3, [r7, #28]
 8104ddc:	2b05      	cmp	r3, #5
 8104dde:	d80f      	bhi.n	8104e00 <_ZN15TemperatureTask13doMeasurementEv+0x100>
	{
		measurements.push_back(measurement);
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8104de6:	ee07 2a90 	vmov	s15, r2
 8104dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104dee:	edc7 7a04 	vstr	s15, [r7, #16]
 8104df2:	f107 0210 	add.w	r2, r7, #16
 8104df6:	4611      	mov	r1, r2
 8104df8:	4618      	mov	r0, r3
 8104dfa:	f000 f9a9 	bl	8105150 <_ZNSt6vectorIfSaIfEE9push_backEOf>
 8104dfe:	e02b      	b.n	8104e58 <_ZN15TemperatureTask13doMeasurementEv+0x158>
	}
	else
	{
		std::rotate(measurements.begin(), measurements.begin() + 1, measurements.end());
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	4618      	mov	r0, r3
 8104e04:	f000 f963 	bl	81050ce <_ZNSt6vectorIfSaIfEE5beginEv>
 8104e08:	4604      	mov	r4, r0
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	4618      	mov	r0, r3
 8104e0e:	f000 f95e 	bl	81050ce <_ZNSt6vectorIfSaIfEE5beginEv>
 8104e12:	4603      	mov	r3, r0
 8104e14:	617b      	str	r3, [r7, #20]
 8104e16:	f107 0314 	add.w	r3, r7, #20
 8104e1a:	2101      	movs	r1, #1
 8104e1c:	4618      	mov	r0, r3
 8104e1e:	f000 f9a8 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8104e22:	4605      	mov	r5, r0
 8104e24:	687b      	ldr	r3, [r7, #4]
 8104e26:	4618      	mov	r0, r3
 8104e28:	f000 f961 	bl	81050ee <_ZNSt6vectorIfSaIfEE3endEv>
 8104e2c:	4603      	mov	r3, r0
 8104e2e:	461a      	mov	r2, r3
 8104e30:	4629      	mov	r1, r5
 8104e32:	4620      	mov	r0, r4
 8104e34:	f000 f9b5 	bl	81051a2 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>
		measurements[currMesSize - 1] = measurement;
 8104e38:	687a      	ldr	r2, [r7, #4]
 8104e3a:	69fb      	ldr	r3, [r7, #28]
 8104e3c:	3b01      	subs	r3, #1
 8104e3e:	4619      	mov	r1, r3
 8104e40:	4610      	mov	r0, r2
 8104e42:	f000 f975 	bl	8105130 <_ZNSt6vectorIfSaIfEEixEj>
 8104e46:	4603      	mov	r3, r0
 8104e48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8104e4c:	ee07 2a90 	vmov	s15, r2
 8104e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104e54:	edc3 7a00 	vstr	s15, [r3]
	}
	return HAL_I2C_ERROR_NONE;
 8104e58:	2300      	movs	r3, #0
}
 8104e5a:	4618      	mov	r0, r3
 8104e5c:	3730      	adds	r7, #48	@ 0x30
 8104e5e:	46bd      	mov	sp, r7
 8104e60:	bdb0      	pop	{r4, r5, r7, pc}
 8104e62:	bf00      	nop
 8104e64:	100000ac 	.word	0x100000ac

08104e68 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8104e68:	b5b0      	push	{r4, r5, r7, lr}
 8104e6a:	b082      	sub	sp, #8
 8104e6c:	af00      	add	r7, sp, #0
 8104e6e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	681c      	ldr	r4, [r3, #0]
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	4618      	mov	r0, r3
 8104e7c:	f000 f9a7 	bl	81051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8104e80:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8104e82:	461a      	mov	r2, r3
 8104e84:	4629      	mov	r1, r5
 8104e86:	4620      	mov	r0, r4
 8104e88:	f000 f9ac 	bl	81051e4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	4618      	mov	r0, r3
 8104e90:	f000 f821 	bl	8104ed6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	4618      	mov	r0, r3
 8104e98:	3708      	adds	r7, #8
 8104e9a:	46bd      	mov	sp, r7
 8104e9c:	bdb0      	pop	{r4, r5, r7, pc}

08104e9e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8104e9e:	b580      	push	{r7, lr}
 8104ea0:	b082      	sub	sp, #8
 8104ea2:	af00      	add	r7, sp, #0
 8104ea4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8104ea6:	6878      	ldr	r0, [r7, #4]
 8104ea8:	f000 f9aa 	bl	8105200 <_ZNSaIfEC1Ev>
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	4618      	mov	r0, r3
 8104eb0:	f000 f9b2 	bl	8105218 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	4618      	mov	r0, r3
 8104eb8:	3708      	adds	r7, #8
 8104eba:	46bd      	mov	sp, r7
 8104ebc:	bd80      	pop	{r7, pc}

08104ebe <_ZNSaIfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8104ebe:	b580      	push	{r7, lr}
 8104ec0:	b082      	sub	sp, #8
 8104ec2:	af00      	add	r7, sp, #0
 8104ec4:	6078      	str	r0, [r7, #4]
 8104ec6:	6878      	ldr	r0, [r7, #4]
 8104ec8:	f000 f9ba 	bl	8105240 <_ZNSt15__new_allocatorIfED1Ev>
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	4618      	mov	r0, r3
 8104ed0:	3708      	adds	r7, #8
 8104ed2:	46bd      	mov	sp, r7
 8104ed4:	bd80      	pop	{r7, pc}

08104ed6 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8104ed6:	b580      	push	{r7, lr}
 8104ed8:	b082      	sub	sp, #8
 8104eda:	af00      	add	r7, sp, #0
 8104edc:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8104ede:	687b      	ldr	r3, [r7, #4]
 8104ee0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	689a      	ldr	r2, [r3, #8]
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	681b      	ldr	r3, [r3, #0]
 8104eea:	1ad3      	subs	r3, r2, r3
 8104eec:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8104eee:	461a      	mov	r2, r3
 8104ef0:	6878      	ldr	r0, [r7, #4]
 8104ef2:	f000 f9b0 	bl	8105256 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8104ef6:	687b      	ldr	r3, [r7, #4]
 8104ef8:	4618      	mov	r0, r3
 8104efa:	f7ff fe05 	bl	8104b08 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8104efe:	687b      	ldr	r3, [r7, #4]
 8104f00:	4618      	mov	r0, r3
 8104f02:	3708      	adds	r7, #8
 8104f04:	46bd      	mov	sp, r7
 8104f06:	bd80      	pop	{r7, pc}

08104f08 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>:
      _S_use_relocate()
 8104f08:	b580      	push	{r7, lr}
 8104f0a:	b082      	sub	sp, #8
 8104f0c:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8104f0e:	4618      	mov	r0, r3
 8104f10:	f000 f805 	bl	8104f1e <_ZNSt6vectorIfSaIfEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8104f14:	4603      	mov	r3, r0
      }
 8104f16:	4618      	mov	r0, r3
 8104f18:	3708      	adds	r7, #8
 8104f1a:	46bd      	mov	sp, r7
 8104f1c:	bd80      	pop	{r7, pc}

08104f1e <_ZNSt6vectorIfSaIfEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8104f1e:	b480      	push	{r7}
 8104f20:	b083      	sub	sp, #12
 8104f22:	af00      	add	r7, sp, #0
 8104f24:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8104f26:	2301      	movs	r3, #1
      }
 8104f28:	4618      	mov	r0, r3
 8104f2a:	370c      	adds	r7, #12
 8104f2c:	46bd      	mov	sp, r7
 8104f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f32:	4770      	bx	lr

08104f34 <_ZNSt6vectorIfSaIfEE7reserveEj>:
    vector<_Tp, _Alloc>::
 8104f34:	b5b0      	push	{r4, r5, r7, lr}
 8104f36:	b084      	sub	sp, #16
 8104f38:	af00      	add	r7, sp, #0
 8104f3a:	6078      	str	r0, [r7, #4]
 8104f3c:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 8104f3e:	6878      	ldr	r0, [r7, #4]
 8104f40:	f000 f99c 	bl	810527c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8104f44:	4602      	mov	r2, r0
 8104f46:	683b      	ldr	r3, [r7, #0]
 8104f48:	4293      	cmp	r3, r2
 8104f4a:	bf8c      	ite	hi
 8104f4c:	2301      	movhi	r3, #1
 8104f4e:	2300      	movls	r3, #0
 8104f50:	b2db      	uxtb	r3, r3
 8104f52:	2b00      	cmp	r3, #0
 8104f54:	d002      	beq.n	8104f5c <_ZNSt6vectorIfSaIfEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 8104f56:	4836      	ldr	r0, [pc, #216]	@ (8105030 <_ZNSt6vectorIfSaIfEE7reserveEj+0xfc>)
 8104f58:	f016 fd66 	bl	811ba28 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8104f5c:	6878      	ldr	r0, [r7, #4]
 8104f5e:	f000 f99e 	bl	810529e <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8104f62:	4602      	mov	r2, r0
 8104f64:	683b      	ldr	r3, [r7, #0]
 8104f66:	4293      	cmp	r3, r2
 8104f68:	bf8c      	ite	hi
 8104f6a:	2301      	movhi	r3, #1
 8104f6c:	2300      	movls	r3, #0
 8104f6e:	b2db      	uxtb	r3, r3
 8104f70:	2b00      	cmp	r3, #0
 8104f72:	d059      	beq.n	8105028 <_ZNSt6vectorIfSaIfEE7reserveEj+0xf4>
	  const size_type __old_size = size();
 8104f74:	6878      	ldr	r0, [r7, #4]
 8104f76:	f000 f85d 	bl	8105034 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8104f7a:	60b8      	str	r0, [r7, #8]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8104f7c:	f7ff ffc4 	bl	8104f08 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8104f80:	4603      	mov	r3, r0
 8104f82:	2b00      	cmp	r3, #0
 8104f84:	d014      	beq.n	8104fb0 <_ZNSt6vectorIfSaIfEE7reserveEj+0x7c>
	      __tmp = this->_M_allocate(__n);
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	6839      	ldr	r1, [r7, #0]
 8104f8a:	4618      	mov	r0, r3
 8104f8c:	f000 f997 	bl	81052be <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8104f90:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8104f92:	687b      	ldr	r3, [r7, #4]
 8104f94:	681c      	ldr	r4, [r3, #0]
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 8104f9a:	687b      	ldr	r3, [r7, #4]
 8104f9c:	4618      	mov	r0, r3
 8104f9e:	f000 f916 	bl	81051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8104fa2:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8104fa4:	68fa      	ldr	r2, [r7, #12]
 8104fa6:	4629      	mov	r1, r5
 8104fa8:	4620      	mov	r0, r4
 8104faa:	f000 f99c 	bl	81052e6 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8104fae:	e01f      	b.n	8104ff0 <_ZNSt6vectorIfSaIfEE7reserveEj+0xbc>
	      __tmp = _M_allocate_and_copy(__n,
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	681b      	ldr	r3, [r3, #0]
 8104fb4:	4618      	mov	r0, r3
 8104fb6:	f000 f9aa 	bl	810530e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8104fba:	4604      	mov	r4, r0
 8104fbc:	687b      	ldr	r3, [r7, #4]
 8104fbe:	685b      	ldr	r3, [r3, #4]
 8104fc0:	4618      	mov	r0, r3
 8104fc2:	f000 f9a4 	bl	810530e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8104fc6:	4603      	mov	r3, r0
 8104fc8:	4622      	mov	r2, r4
 8104fca:	6839      	ldr	r1, [r7, #0]
 8104fcc:	6878      	ldr	r0, [r7, #4]
 8104fce:	f000 f9ad 	bl	810532c <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyISt13move_iteratorIPfEEES4_jT_S6_>
 8104fd2:	60f8      	str	r0, [r7, #12]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	681c      	ldr	r4, [r3, #0]
 8104fd8:	687b      	ldr	r3, [r7, #4]
 8104fda:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	4618      	mov	r0, r3
 8104fe0:	f000 f8f5 	bl	81051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8104fe4:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8104fe6:	461a      	mov	r2, r3
 8104fe8:	4629      	mov	r1, r5
 8104fea:	4620      	mov	r0, r4
 8104fec:	f000 f8fa 	bl	81051e4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 8104ff0:	6878      	ldr	r0, [r7, #4]
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8104ff6:	687b      	ldr	r3, [r7, #4]
 8104ff8:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	1ad3      	subs	r3, r2, r3
 8105000:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 8105002:	461a      	mov	r2, r3
 8105004:	f000 f927 	bl	8105256 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	68fa      	ldr	r2, [r7, #12]
 810500c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 810500e:	68bb      	ldr	r3, [r7, #8]
 8105010:	009b      	lsls	r3, r3, #2
 8105012:	68fa      	ldr	r2, [r7, #12]
 8105014:	441a      	add	r2, r3
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	681a      	ldr	r2, [r3, #0]
 810501e:	683b      	ldr	r3, [r7, #0]
 8105020:	009b      	lsls	r3, r3, #2
 8105022:	441a      	add	r2, r3
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	609a      	str	r2, [r3, #8]
    }
 8105028:	bf00      	nop
 810502a:	3710      	adds	r7, #16
 810502c:	46bd      	mov	sp, r7
 810502e:	bdb0      	pop	{r4, r5, r7, pc}
 8105030:	0811cce4 	.word	0x0811cce4

08105034 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8105034:	b480      	push	{r7}
 8105036:	b083      	sub	sp, #12
 8105038:	af00      	add	r7, sp, #0
 810503a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 810503c:	687b      	ldr	r3, [r7, #4]
 810503e:	685a      	ldr	r2, [r3, #4]
 8105040:	687b      	ldr	r3, [r7, #4]
 8105042:	681b      	ldr	r3, [r3, #0]
 8105044:	1ad3      	subs	r3, r2, r3
 8105046:	109b      	asrs	r3, r3, #2
 8105048:	4618      	mov	r0, r3
 810504a:	370c      	adds	r7, #12
 810504c:	46bd      	mov	sp, r7
 810504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105052:	4770      	bx	lr

08105054 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8105054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105056:	b085      	sub	sp, #20
 8105058:	af00      	add	r7, sp, #0
 810505a:	6078      	str	r0, [r7, #4]
 810505c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 810505e:	687c      	ldr	r4, [r7, #4]
 8105060:	6838      	ldr	r0, [r7, #0]
 8105062:	f7ff ffe7 	bl	8105034 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8105066:	4605      	mov	r5, r0
 8105068:	683b      	ldr	r3, [r7, #0]
 810506a:	4618      	mov	r0, r3
 810506c:	f000 f97a 	bl	8105364 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105070:	4602      	mov	r2, r0
 8105072:	f107 030c 	add.w	r3, r7, #12
 8105076:	4611      	mov	r1, r2
 8105078:	4618      	mov	r0, r3
 810507a:	f000 f97e 	bl	810537a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 810507e:	f107 030c 	add.w	r3, r7, #12
 8105082:	461a      	mov	r2, r3
 8105084:	4629      	mov	r1, r5
 8105086:	4620      	mov	r0, r4
 8105088:	f000 f985 	bl	8105396 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 810508c:	f107 030c 	add.w	r3, r7, #12
 8105090:	4618      	mov	r0, r3
 8105092:	f7ff ff14 	bl	8104ebe <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8105096:	6838      	ldr	r0, [r7, #0]
 8105098:	f000 f991 	bl	81053be <_ZNKSt6vectorIfSaIfEE5beginEv>
 810509c:	4605      	mov	r5, r0
 810509e:	6838      	ldr	r0, [r7, #0]
 81050a0:	f000 f99d 	bl	81053de <_ZNKSt6vectorIfSaIfEE3endEv>
 81050a4:	4606      	mov	r6, r0
 81050a6:	687b      	ldr	r3, [r7, #4]
 81050a8:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 81050aa:	687b      	ldr	r3, [r7, #4]
 81050ac:	4618      	mov	r0, r3
 81050ae:	f000 f88e 	bl	81051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81050b2:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 81050b4:	4622      	mov	r2, r4
 81050b6:	4631      	mov	r1, r6
 81050b8:	4628      	mov	r0, r5
 81050ba:	f000 f9a1 	bl	8105400 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 81050be:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 81050c0:	687b      	ldr	r3, [r7, #4]
 81050c2:	605a      	str	r2, [r3, #4]
      }
 81050c4:	687b      	ldr	r3, [r7, #4]
 81050c6:	4618      	mov	r0, r3
 81050c8:	3714      	adds	r7, #20
 81050ca:	46bd      	mov	sp, r7
 81050cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

081050ce <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 81050ce:	b580      	push	{r7, lr}
 81050d0:	b084      	sub	sp, #16
 81050d2:	af00      	add	r7, sp, #0
 81050d4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 81050d6:	687a      	ldr	r2, [r7, #4]
 81050d8:	f107 030c 	add.w	r3, r7, #12
 81050dc:	4611      	mov	r1, r2
 81050de:	4618      	mov	r0, r3
 81050e0:	f000 f99f 	bl	8105422 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 81050e4:	68fb      	ldr	r3, [r7, #12]
 81050e6:	4618      	mov	r0, r3
 81050e8:	3710      	adds	r7, #16
 81050ea:	46bd      	mov	sp, r7
 81050ec:	bd80      	pop	{r7, pc}

081050ee <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81050ee:	b580      	push	{r7, lr}
 81050f0:	b084      	sub	sp, #16
 81050f2:	af00      	add	r7, sp, #0
 81050f4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	1d1a      	adds	r2, r3, #4
 81050fa:	f107 030c 	add.w	r3, r7, #12
 81050fe:	4611      	mov	r1, r2
 8105100:	4618      	mov	r0, r3
 8105102:	f000 f98e 	bl	8105422 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8105106:	68fb      	ldr	r3, [r7, #12]
 8105108:	4618      	mov	r0, r3
 810510a:	3710      	adds	r7, #16
 810510c:	46bd      	mov	sp, r7
 810510e:	bd80      	pop	{r7, pc}

08105110 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8105110:	b590      	push	{r4, r7, lr}
 8105112:	b083      	sub	sp, #12
 8105114:	af00      	add	r7, sp, #0
 8105116:	6078      	str	r0, [r7, #4]
 8105118:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 810511a:	f7ff fc6a 	bl	81049f2 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 810511e:	4622      	mov	r2, r4
 8105120:	6839      	ldr	r1, [r7, #0]
 8105122:	6878      	ldr	r0, [r7, #4]
 8105124:	f000 f98d 	bl	8105442 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8105128:	bf00      	nop
 810512a:	370c      	adds	r7, #12
 810512c:	46bd      	mov	sp, r7
 810512e:	bd90      	pop	{r4, r7, pc}

08105130 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8105130:	b480      	push	{r7}
 8105132:	b083      	sub	sp, #12
 8105134:	af00      	add	r7, sp, #0
 8105136:	6078      	str	r0, [r7, #4]
 8105138:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 810513a:	687b      	ldr	r3, [r7, #4]
 810513c:	681a      	ldr	r2, [r3, #0]
 810513e:	683b      	ldr	r3, [r7, #0]
 8105140:	009b      	lsls	r3, r3, #2
 8105142:	4413      	add	r3, r2
      }
 8105144:	4618      	mov	r0, r3
 8105146:	370c      	adds	r7, #12
 8105148:	46bd      	mov	sp, r7
 810514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810514e:	4770      	bx	lr

08105150 <_ZNSt6vectorIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 8105150:	b580      	push	{r7, lr}
 8105152:	b082      	sub	sp, #8
 8105154:	af00      	add	r7, sp, #0
 8105156:	6078      	str	r0, [r7, #4]
 8105158:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 810515a:	6838      	ldr	r0, [r7, #0]
 810515c:	f000 f99e 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8105160:	4603      	mov	r3, r0
 8105162:	4619      	mov	r1, r3
 8105164:	6878      	ldr	r0, [r7, #4]
 8105166:	f000 f9a4 	bl	81054b2 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
 810516a:	bf00      	nop
 810516c:	3708      	adds	r7, #8
 810516e:	46bd      	mov	sp, r7
 8105170:	bd80      	pop	{r7, pc}

08105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8105172:	b580      	push	{r7, lr}
 8105174:	b084      	sub	sp, #16
 8105176:	af00      	add	r7, sp, #0
 8105178:	6078      	str	r0, [r7, #4]
 810517a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	681a      	ldr	r2, [r3, #0]
 8105180:	683b      	ldr	r3, [r7, #0]
 8105182:	009b      	lsls	r3, r3, #2
 8105184:	4413      	add	r3, r2
 8105186:	60fb      	str	r3, [r7, #12]
 8105188:	f107 020c 	add.w	r2, r7, #12
 810518c:	f107 0308 	add.w	r3, r7, #8
 8105190:	4611      	mov	r1, r2
 8105192:	4618      	mov	r0, r3
 8105194:	f000 f945 	bl	8105422 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8105198:	68bb      	ldr	r3, [r7, #8]
 810519a:	4618      	mov	r0, r3
 810519c:	3710      	adds	r7, #16
 810519e:	46bd      	mov	sp, r7
 81051a0:	bd80      	pop	{r7, pc}

081051a2 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 81051a2:	b590      	push	{r4, r7, lr}
 81051a4:	b085      	sub	sp, #20
 81051a6:	af00      	add	r7, sp, #0
 81051a8:	60f8      	str	r0, [r7, #12]
 81051aa:	60b9      	str	r1, [r7, #8]
 81051ac:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 81051ae:	f107 030c 	add.w	r3, r7, #12
 81051b2:	4618      	mov	r0, r3
 81051b4:	f000 f9ab 	bl	810550e <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return std::__rotate(__first, __middle, __last,
 81051b8:	4623      	mov	r3, r4
 81051ba:	687a      	ldr	r2, [r7, #4]
 81051bc:	68b9      	ldr	r1, [r7, #8]
 81051be:	68f8      	ldr	r0, [r7, #12]
 81051c0:	f000 f9b0 	bl	8105524 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>
 81051c4:	4603      	mov	r3, r0
    }
 81051c6:	4618      	mov	r0, r3
 81051c8:	3714      	adds	r7, #20
 81051ca:	46bd      	mov	sp, r7
 81051cc:	bd90      	pop	{r4, r7, pc}

081051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 81051ce:	b480      	push	{r7}
 81051d0:	b083      	sub	sp, #12
 81051d2:	af00      	add	r7, sp, #0
 81051d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	4618      	mov	r0, r3
 81051da:	370c      	adds	r7, #12
 81051dc:	46bd      	mov	sp, r7
 81051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051e2:	4770      	bx	lr

081051e4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 81051e4:	b580      	push	{r7, lr}
 81051e6:	b084      	sub	sp, #16
 81051e8:	af00      	add	r7, sp, #0
 81051ea:	60f8      	str	r0, [r7, #12]
 81051ec:	60b9      	str	r1, [r7, #8]
 81051ee:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 81051f0:	68b9      	ldr	r1, [r7, #8]
 81051f2:	68f8      	ldr	r0, [r7, #12]
 81051f4:	f000 fb07 	bl	8105806 <_ZSt8_DestroyIPfEvT_S1_>
    }
 81051f8:	bf00      	nop
 81051fa:	3710      	adds	r7, #16
 81051fc:	46bd      	mov	sp, r7
 81051fe:	bd80      	pop	{r7, pc}

08105200 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8105200:	b580      	push	{r7, lr}
 8105202:	b082      	sub	sp, #8
 8105204:	af00      	add	r7, sp, #0
 8105206:	6078      	str	r0, [r7, #4]
 8105208:	6878      	ldr	r0, [r7, #4]
 810520a:	f000 fb09 	bl	8105820 <_ZNSt15__new_allocatorIfEC1Ev>
 810520e:	687b      	ldr	r3, [r7, #4]
 8105210:	4618      	mov	r0, r3
 8105212:	3708      	adds	r7, #8
 8105214:	46bd      	mov	sp, r7
 8105216:	bd80      	pop	{r7, pc}

08105218 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8105218:	b480      	push	{r7}
 810521a:	b083      	sub	sp, #12
 810521c:	af00      	add	r7, sp, #0
 810521e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	2200      	movs	r2, #0
 8105224:	601a      	str	r2, [r3, #0]
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	2200      	movs	r2, #0
 810522a:	605a      	str	r2, [r3, #4]
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	2200      	movs	r2, #0
 8105230:	609a      	str	r2, [r3, #8]
	{ }
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	4618      	mov	r0, r3
 8105236:	370c      	adds	r7, #12
 8105238:	46bd      	mov	sp, r7
 810523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810523e:	4770      	bx	lr

08105240 <_ZNSt15__new_allocatorIfED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8105240:	b480      	push	{r7}
 8105242:	b083      	sub	sp, #12
 8105244:	af00      	add	r7, sp, #0
 8105246:	6078      	str	r0, [r7, #4]
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	4618      	mov	r0, r3
 810524c:	370c      	adds	r7, #12
 810524e:	46bd      	mov	sp, r7
 8105250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105254:	4770      	bx	lr

08105256 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8105256:	b580      	push	{r7, lr}
 8105258:	b084      	sub	sp, #16
 810525a:	af00      	add	r7, sp, #0
 810525c:	60f8      	str	r0, [r7, #12]
 810525e:	60b9      	str	r1, [r7, #8]
 8105260:	607a      	str	r2, [r7, #4]
	if (__p)
 8105262:	68bb      	ldr	r3, [r7, #8]
 8105264:	2b00      	cmp	r3, #0
 8105266:	d005      	beq.n	8105274 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8105268:	68fb      	ldr	r3, [r7, #12]
 810526a:	687a      	ldr	r2, [r7, #4]
 810526c:	68b9      	ldr	r1, [r7, #8]
 810526e:	4618      	mov	r0, r3
 8105270:	f000 fae1 	bl	8105836 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8105274:	bf00      	nop
 8105276:	3710      	adds	r7, #16
 8105278:	46bd      	mov	sp, r7
 810527a:	bd80      	pop	{r7, pc}

0810527c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 810527c:	b580      	push	{r7, lr}
 810527e:	b082      	sub	sp, #8
 8105280:	af00      	add	r7, sp, #0
 8105282:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	4618      	mov	r0, r3
 8105288:	f000 f86c 	bl	8105364 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810528c:	4603      	mov	r3, r0
 810528e:	4618      	mov	r0, r3
 8105290:	f000 fae0 	bl	8105854 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8105294:	4603      	mov	r3, r0
 8105296:	4618      	mov	r0, r3
 8105298:	3708      	adds	r7, #8
 810529a:	46bd      	mov	sp, r7
 810529c:	bd80      	pop	{r7, pc}

0810529e <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 810529e:	b480      	push	{r7}
 81052a0:	b083      	sub	sp, #12
 81052a2:	af00      	add	r7, sp, #0
 81052a4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 81052a6:	687b      	ldr	r3, [r7, #4]
 81052a8:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	681b      	ldr	r3, [r3, #0]
 81052ae:	1ad3      	subs	r3, r2, r3
 81052b0:	109b      	asrs	r3, r3, #2
 81052b2:	4618      	mov	r0, r3
 81052b4:	370c      	adds	r7, #12
 81052b6:	46bd      	mov	sp, r7
 81052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052bc:	4770      	bx	lr

081052be <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 81052be:	b580      	push	{r7, lr}
 81052c0:	b082      	sub	sp, #8
 81052c2:	af00      	add	r7, sp, #0
 81052c4:	6078      	str	r0, [r7, #4]
 81052c6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 81052c8:	683b      	ldr	r3, [r7, #0]
 81052ca:	2b00      	cmp	r3, #0
 81052cc:	d006      	beq.n	81052dc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	6839      	ldr	r1, [r7, #0]
 81052d2:	4618      	mov	r0, r3
 81052d4:	f000 fad8 	bl	8105888 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 81052d8:	4603      	mov	r3, r0
 81052da:	e000      	b.n	81052de <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 81052dc:	2300      	movs	r3, #0
      }
 81052de:	4618      	mov	r0, r3
 81052e0:	3708      	adds	r7, #8
 81052e2:	46bd      	mov	sp, r7
 81052e4:	bd80      	pop	{r7, pc}

081052e6 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 81052e6:	b590      	push	{r4, r7, lr}
 81052e8:	b087      	sub	sp, #28
 81052ea:	af02      	add	r7, sp, #8
 81052ec:	60f8      	str	r0, [r7, #12]
 81052ee:	60b9      	str	r1, [r7, #8]
 81052f0:	607a      	str	r2, [r7, #4]
 81052f2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 81052f4:	f88d 4000 	strb.w	r4, [sp]
 81052f8:	683b      	ldr	r3, [r7, #0]
 81052fa:	687a      	ldr	r2, [r7, #4]
 81052fc:	68b9      	ldr	r1, [r7, #8]
 81052fe:	68f8      	ldr	r0, [r7, #12]
 8105300:	f000 fad1 	bl	81058a6 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 8105304:	4603      	mov	r3, r0
      }
 8105306:	4618      	mov	r0, r3
 8105308:	3714      	adds	r7, #20
 810530a:	46bd      	mov	sp, r7
 810530c:	bd90      	pop	{r4, r7, pc}

0810530e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 810530e:	b580      	push	{r7, lr}
 8105310:	b084      	sub	sp, #16
 8105312:	af00      	add	r7, sp, #0
 8105314:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8105316:	f107 030c 	add.w	r3, r7, #12
 810531a:	6879      	ldr	r1, [r7, #4]
 810531c:	4618      	mov	r0, r3
 810531e:	f000 fad4 	bl	81058ca <_ZNSt13move_iteratorIPfEC1ES0_>
 8105322:	68fb      	ldr	r3, [r7, #12]
 8105324:	4618      	mov	r0, r3
 8105326:	3710      	adds	r7, #16
 8105328:	46bd      	mov	sp, r7
 810532a:	bd80      	pop	{r7, pc}

0810532c <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyISt13move_iteratorIPfEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 810532c:	b580      	push	{r7, lr}
 810532e:	b086      	sub	sp, #24
 8105330:	af00      	add	r7, sp, #0
 8105332:	60f8      	str	r0, [r7, #12]
 8105334:	60b9      	str	r1, [r7, #8]
 8105336:	607a      	str	r2, [r7, #4]
 8105338:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 810533a:	68fb      	ldr	r3, [r7, #12]
 810533c:	68b9      	ldr	r1, [r7, #8]
 810533e:	4618      	mov	r0, r3
 8105340:	f7ff ffbd 	bl	81052be <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8105344:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8105346:	68fb      	ldr	r3, [r7, #12]
 8105348:	4618      	mov	r0, r3
 810534a:	f7ff ff40 	bl	81051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810534e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8105350:	697a      	ldr	r2, [r7, #20]
 8105352:	6839      	ldr	r1, [r7, #0]
 8105354:	6878      	ldr	r0, [r7, #4]
 8105356:	f000 faca 	bl	81058ee <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
	      return __result;
 810535a:	697b      	ldr	r3, [r7, #20]
	}
 810535c:	4618      	mov	r0, r3
 810535e:	3718      	adds	r7, #24
 8105360:	46bd      	mov	sp, r7
 8105362:	bd80      	pop	{r7, pc}

08105364 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8105364:	b480      	push	{r7}
 8105366:	b083      	sub	sp, #12
 8105368:	af00      	add	r7, sp, #0
 810536a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	4618      	mov	r0, r3
 8105370:	370c      	adds	r7, #12
 8105372:	46bd      	mov	sp, r7
 8105374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105378:	4770      	bx	lr

0810537a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 810537a:	b580      	push	{r7, lr}
 810537c:	b082      	sub	sp, #8
 810537e:	af00      	add	r7, sp, #0
 8105380:	6078      	str	r0, [r7, #4]
 8105382:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	6839      	ldr	r1, [r7, #0]
 8105388:	4618      	mov	r0, r3
 810538a:	f000 fac1 	bl	8105910 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 810538e:	6878      	ldr	r0, [r7, #4]
 8105390:	3708      	adds	r7, #8
 8105392:	46bd      	mov	sp, r7
 8105394:	bd80      	pop	{r7, pc}

08105396 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8105396:	b580      	push	{r7, lr}
 8105398:	b084      	sub	sp, #16
 810539a:	af00      	add	r7, sp, #0
 810539c:	60f8      	str	r0, [r7, #12]
 810539e:	60b9      	str	r1, [r7, #8]
 81053a0:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 81053a2:	68fb      	ldr	r3, [r7, #12]
 81053a4:	6879      	ldr	r1, [r7, #4]
 81053a6:	4618      	mov	r0, r3
 81053a8:	f000 facd 	bl	8105946 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 81053ac:	68b9      	ldr	r1, [r7, #8]
 81053ae:	68f8      	ldr	r0, [r7, #12]
 81053b0:	f000 fadb 	bl	810596a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 81053b4:	68fb      	ldr	r3, [r7, #12]
 81053b6:	4618      	mov	r0, r3
 81053b8:	3710      	adds	r7, #16
 81053ba:	46bd      	mov	sp, r7
 81053bc:	bd80      	pop	{r7, pc}

081053be <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 81053be:	b580      	push	{r7, lr}
 81053c0:	b084      	sub	sp, #16
 81053c2:	af00      	add	r7, sp, #0
 81053c4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 81053c6:	687a      	ldr	r2, [r7, #4]
 81053c8:	f107 030c 	add.w	r3, r7, #12
 81053cc:	4611      	mov	r1, r2
 81053ce:	4618      	mov	r0, r3
 81053d0:	f000 fae6 	bl	81059a0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 81053d4:	68fb      	ldr	r3, [r7, #12]
 81053d6:	4618      	mov	r0, r3
 81053d8:	3710      	adds	r7, #16
 81053da:	46bd      	mov	sp, r7
 81053dc:	bd80      	pop	{r7, pc}

081053de <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 81053de:	b580      	push	{r7, lr}
 81053e0:	b084      	sub	sp, #16
 81053e2:	af00      	add	r7, sp, #0
 81053e4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	1d1a      	adds	r2, r3, #4
 81053ea:	f107 030c 	add.w	r3, r7, #12
 81053ee:	4611      	mov	r1, r2
 81053f0:	4618      	mov	r0, r3
 81053f2:	f000 fad5 	bl	81059a0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 81053f6:	68fb      	ldr	r3, [r7, #12]
 81053f8:	4618      	mov	r0, r3
 81053fa:	3710      	adds	r7, #16
 81053fc:	46bd      	mov	sp, r7
 81053fe:	bd80      	pop	{r7, pc}

08105400 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8105400:	b580      	push	{r7, lr}
 8105402:	b084      	sub	sp, #16
 8105404:	af00      	add	r7, sp, #0
 8105406:	60f8      	str	r0, [r7, #12]
 8105408:	60b9      	str	r1, [r7, #8]
 810540a:	607a      	str	r2, [r7, #4]
 810540c:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 810540e:	687a      	ldr	r2, [r7, #4]
 8105410:	68b9      	ldr	r1, [r7, #8]
 8105412:	68f8      	ldr	r0, [r7, #12]
 8105414:	f000 fad4 	bl	81059c0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8105418:	4603      	mov	r3, r0
    }
 810541a:	4618      	mov	r0, r3
 810541c:	3710      	adds	r7, #16
 810541e:	46bd      	mov	sp, r7
 8105420:	bd80      	pop	{r7, pc}

08105422 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8105422:	b480      	push	{r7}
 8105424:	b083      	sub	sp, #12
 8105426:	af00      	add	r7, sp, #0
 8105428:	6078      	str	r0, [r7, #4]
 810542a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810542c:	683b      	ldr	r3, [r7, #0]
 810542e:	681a      	ldr	r2, [r3, #0]
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	601a      	str	r2, [r3, #0]
 8105434:	687b      	ldr	r3, [r7, #4]
 8105436:	4618      	mov	r0, r3
 8105438:	370c      	adds	r7, #12
 810543a:	46bd      	mov	sp, r7
 810543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105440:	4770      	bx	lr

08105442 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8105442:	b5b0      	push	{r4, r5, r7, lr}
 8105444:	b084      	sub	sp, #16
 8105446:	af00      	add	r7, sp, #0
 8105448:	60f8      	str	r0, [r7, #12]
 810544a:	60b9      	str	r1, [r7, #8]
 810544c:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 810544e:	f107 0208 	add.w	r2, r7, #8
 8105452:	f107 030c 	add.w	r3, r7, #12
 8105456:	4611      	mov	r1, r2
 8105458:	4618      	mov	r0, r3
 810545a:	f000 fac5 	bl	81059e8 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810545e:	4603      	mov	r3, r0
 8105460:	2b00      	cmp	r3, #0
 8105462:	d017      	beq.n	8105494 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x52>
				std::__lg(__last - __first) * 2,
 8105464:	f107 020c 	add.w	r2, r7, #12
 8105468:	f107 0308 	add.w	r3, r7, #8
 810546c:	4611      	mov	r1, r2
 810546e:	4618      	mov	r0, r3
 8105470:	f000 fad2 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8105474:	4603      	mov	r3, r0
 8105476:	4618      	mov	r0, r3
 8105478:	f7ff fada 	bl	8104a30 <_ZSt4__lgi>
 810547c:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 810547e:	005a      	lsls	r2, r3, #1
 8105480:	462b      	mov	r3, r5
 8105482:	68b9      	ldr	r1, [r7, #8]
 8105484:	68f8      	ldr	r0, [r7, #12]
 8105486:	f000 fadc 	bl	8105a42 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 810548a:	4622      	mov	r2, r4
 810548c:	68b9      	ldr	r1, [r7, #8]
 810548e:	68f8      	ldr	r0, [r7, #12]
 8105490:	f000 fb0e 	bl	8105ab0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8105494:	bf00      	nop
 8105496:	3710      	adds	r7, #16
 8105498:	46bd      	mov	sp, r7
 810549a:	bdb0      	pop	{r4, r5, r7, pc}

0810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 810549c:	b480      	push	{r7}
 810549e:	b083      	sub	sp, #12
 81054a0:	af00      	add	r7, sp, #0
 81054a2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81054a4:	687b      	ldr	r3, [r7, #4]
 81054a6:	4618      	mov	r0, r3
 81054a8:	370c      	adds	r7, #12
 81054aa:	46bd      	mov	sp, r7
 81054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054b0:	4770      	bx	lr

081054b2 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 81054b2:	b5b0      	push	{r4, r5, r7, lr}
 81054b4:	b082      	sub	sp, #8
 81054b6:	af00      	add	r7, sp, #0
 81054b8:	6078      	str	r0, [r7, #4]
 81054ba:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	685a      	ldr	r2, [r3, #4]
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	689b      	ldr	r3, [r3, #8]
 81054c4:	429a      	cmp	r2, r3
 81054c6:	d011      	beq.n	81054ec <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 81054c8:	687c      	ldr	r4, [r7, #4]
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	685d      	ldr	r5, [r3, #4]
 81054ce:	6838      	ldr	r0, [r7, #0]
 81054d0:	f000 fb26 	bl	8105b20 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 81054d4:	4603      	mov	r3, r0
 81054d6:	461a      	mov	r2, r3
 81054d8:	4629      	mov	r1, r5
 81054da:	4620      	mov	r0, r4
 81054dc:	f000 fb2b 	bl	8105b36 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 81054e0:	687b      	ldr	r3, [r7, #4]
 81054e2:	685b      	ldr	r3, [r3, #4]
 81054e4:	1d1a      	adds	r2, r3, #4
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	605a      	str	r2, [r3, #4]
      }
 81054ea:	e00c      	b.n	8105506 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 81054ec:	6878      	ldr	r0, [r7, #4]
 81054ee:	f7ff fdfe 	bl	81050ee <_ZNSt6vectorIfSaIfEE3endEv>
 81054f2:	4604      	mov	r4, r0
 81054f4:	6838      	ldr	r0, [r7, #0]
 81054f6:	f000 fb13 	bl	8105b20 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 81054fa:	4603      	mov	r3, r0
 81054fc:	461a      	mov	r2, r3
 81054fe:	4621      	mov	r1, r4
 8105500:	6878      	ldr	r0, [r7, #4]
 8105502:	f000 fb2b 	bl	8105b5c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8105506:	bf00      	nop
 8105508:	3708      	adds	r7, #8
 810550a:	46bd      	mov	sp, r7
 810550c:	bdb0      	pop	{r4, r5, r7, pc}

0810550e <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 810550e:	b480      	push	{r7}
 8105510:	b083      	sub	sp, #12
 8105512:	af00      	add	r7, sp, #0
 8105514:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8105516:	bf00      	nop
 8105518:	4618      	mov	r0, r3
 810551a:	370c      	adds	r7, #12
 810551c:	46bd      	mov	sp, r7
 810551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105522:	4770      	bx	lr

08105524 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 8105524:	b590      	push	{r4, r7, lr}
 8105526:	b095      	sub	sp, #84	@ 0x54
 8105528:	af00      	add	r7, sp, #0
 810552a:	60f8      	str	r0, [r7, #12]
 810552c:	60b9      	str	r1, [r7, #8]
 810552e:	607a      	str	r2, [r7, #4]
 8105530:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 8105532:	f107 0208 	add.w	r2, r7, #8
 8105536:	f107 030c 	add.w	r3, r7, #12
 810553a:	4611      	mov	r1, r2
 810553c:	4618      	mov	r0, r3
 810553e:	f000 fbc9 	bl	8105cd4 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8105542:	4603      	mov	r3, r0
 8105544:	2b00      	cmp	r3, #0
 8105546:	d001      	beq.n	810554c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x28>
	return __last;
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	e158      	b.n	81057fe <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      else if (__last == __middle)
 810554c:	f107 0208 	add.w	r2, r7, #8
 8105550:	1d3b      	adds	r3, r7, #4
 8105552:	4611      	mov	r1, r2
 8105554:	4618      	mov	r0, r3
 8105556:	f000 fbbd 	bl	8105cd4 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810555a:	4603      	mov	r3, r0
 810555c:	2b00      	cmp	r3, #0
 810555e:	d001      	beq.n	8105564 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x40>
	return __first;
 8105560:	68fb      	ldr	r3, [r7, #12]
 8105562:	e14c      	b.n	81057fe <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 8105564:	f107 020c 	add.w	r2, r7, #12
 8105568:	1d3b      	adds	r3, r7, #4
 810556a:	4611      	mov	r1, r2
 810556c:	4618      	mov	r0, r3
 810556e:	f000 fa53 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8105572:	4603      	mov	r3, r0
 8105574:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __k = __middle - __first;
 8105576:	f107 020c 	add.w	r2, r7, #12
 810557a:	f107 0308 	add.w	r3, r7, #8
 810557e:	4611      	mov	r1, r2
 8105580:	4618      	mov	r0, r3
 8105582:	f000 fa49 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8105586:	4603      	mov	r3, r0
 8105588:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__k == __n - __k)
 810558a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810558e:	1ad2      	subs	r2, r2, r3
 8105590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105592:	429a      	cmp	r2, r3
 8105594:	d106      	bne.n	81055a4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 8105596:	68ba      	ldr	r2, [r7, #8]
 8105598:	68b9      	ldr	r1, [r7, #8]
 810559a:	68f8      	ldr	r0, [r7, #12]
 810559c:	f000 fbb2 	bl	8105d04 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	  return __middle;
 81055a0:	68bb      	ldr	r3, [r7, #8]
 81055a2:	e12c      	b.n	81057fe <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 81055a4:	68fb      	ldr	r3, [r7, #12]
 81055a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 81055a8:	f107 0208 	add.w	r2, r7, #8
 81055ac:	1d3b      	adds	r3, r7, #4
 81055ae:	4611      	mov	r1, r2
 81055b0:	4618      	mov	r0, r3
 81055b2:	f000 fa31 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81055b6:	4602      	mov	r2, r0
 81055b8:	f107 030c 	add.w	r3, r7, #12
 81055bc:	4611      	mov	r1, r2
 81055be:	4618      	mov	r0, r3
 81055c0:	f7ff fdd7 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81055c4:	4603      	mov	r3, r0
 81055c6:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__k < __n - __k)
 81055c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81055cc:	1ad2      	subs	r2, r2, r3
 81055ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81055d0:	429a      	cmp	r2, r3
 81055d2:	f340 8081 	ble.w	81056d8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 81055d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81055d8:	2b01      	cmp	r3, #1
 81055da:	d140      	bne.n	810565e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 81055dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81055e0:	4618      	mov	r0, r3
 81055e2:	f000 fbb3 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81055e6:	4603      	mov	r3, r0
 81055e8:	4618      	mov	r0, r3
 81055ea:	f7ff ff57 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81055ee:	4603      	mov	r3, r0
 81055f0:	681b      	ldr	r3, [r3, #0]
 81055f2:	61fb      	str	r3, [r7, #28]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 81055f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81055f8:	2101      	movs	r1, #1
 81055fa:	4618      	mov	r0, r3
 81055fc:	f7ff fdb9 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105600:	4604      	mov	r4, r0
 8105602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105604:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105608:	4611      	mov	r1, r2
 810560a:	4618      	mov	r0, r3
 810560c:	f7ff fdb1 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105610:	4603      	mov	r3, r0
 8105612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105614:	4619      	mov	r1, r3
 8105616:	4620      	mov	r0, r4
 8105618:	f000 fba4 	bl	8105d64 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 810561c:	f107 031c 	add.w	r3, r7, #28
 8105620:	4618      	mov	r0, r3
 8105622:	f7ff ff3b 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8105626:	4604      	mov	r4, r0
 8105628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810562a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810562e:	4611      	mov	r1, r2
 8105630:	4618      	mov	r0, r3
 8105632:	f7ff fd9e 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105636:	4603      	mov	r3, r0
 8105638:	63bb      	str	r3, [r7, #56]	@ 0x38
 810563a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 810563e:	2101      	movs	r1, #1
 8105640:	4618      	mov	r0, r3
 8105642:	f000 fba7 	bl	8105d94 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 8105646:	4603      	mov	r3, r0
 8105648:	637b      	str	r3, [r7, #52]	@ 0x34
 810564a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810564e:	4618      	mov	r0, r3
 8105650:	f000 fb7c 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8105654:	4602      	mov	r2, r0
 8105656:	6823      	ldr	r3, [r4, #0]
 8105658:	6013      	str	r3, [r2, #0]
		  return __ret;
 810565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810565c:	e0cf      	b.n	81057fe <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 810565e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105660:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105664:	4611      	mov	r1, r2
 8105666:	4618      	mov	r0, r3
 8105668:	f7ff fd83 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810566c:	4603      	mov	r3, r0
 810566e:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8105670:	2300      	movs	r3, #0
 8105672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105674:	e010      	b.n	8105698 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x174>
		  std::iter_swap(__p, __q);
 8105676:	6a39      	ldr	r1, [r7, #32]
 8105678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810567a:	f000 fba4 	bl	8105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
		  ++__p;
 810567e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105682:	4618      	mov	r0, r3
 8105684:	f000 fbb6 	bl	8105df4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
		  ++__q;
 8105688:	f107 0320 	add.w	r3, r7, #32
 810568c:	4618      	mov	r0, r3
 810568e:	f000 fbb1 	bl	8105df4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8105692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105694:	3301      	adds	r3, #1
 8105696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810569a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810569c:	1ad3      	subs	r3, r2, r3
 810569e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81056a0:	429a      	cmp	r2, r3
 81056a2:	dbe8      	blt.n	8105676 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x152>
	      __n %= __k;
 81056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81056a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81056a8:	fb93 f1f2 	sdiv	r1, r3, r2
 81056ac:	fb01 f202 	mul.w	r2, r1, r2
 81056b0:	1a9b      	subs	r3, r3, r2
 81056b2:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 81056b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d101      	bne.n	81056be <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x19a>
		return __ret;
 81056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81056bc:	e09f      	b.n	81057fe <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 81056be:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 81056c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81056c6:	4611      	mov	r1, r2
 81056c8:	4618      	mov	r0, r3
 81056ca:	f000 fba3 	bl	8105e14 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 81056ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81056d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81056d2:	1ad3      	subs	r3, r2, r3
 81056d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81056d6:	e777      	b.n	81055c8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 81056d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81056da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81056dc:	1ad3      	subs	r3, r2, r3
 81056de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 81056e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81056e2:	2b01      	cmp	r3, #1
 81056e4:	d149      	bne.n	810577a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 81056e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81056e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81056ec:	4611      	mov	r1, r2
 81056ee:	4618      	mov	r0, r3
 81056f0:	f7ff fd3f 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81056f4:	4603      	mov	r3, r0
 81056f6:	643b      	str	r3, [r7, #64]	@ 0x40
 81056f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 81056fc:	2101      	movs	r1, #1
 81056fe:	4618      	mov	r0, r3
 8105700:	f000 fb48 	bl	8105d94 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 8105704:	4603      	mov	r3, r0
 8105706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105708:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 810570c:	4618      	mov	r0, r3
 810570e:	f000 fb1d 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8105712:	4603      	mov	r3, r0
 8105714:	4618      	mov	r0, r3
 8105716:	f7ff fec1 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810571a:	4603      	mov	r3, r0
 810571c:	681b      	ldr	r3, [r3, #0]
 810571e:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8105720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105722:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105726:	4611      	mov	r1, r2
 8105728:	4618      	mov	r0, r3
 810572a:	f7ff fd22 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810572e:	4603      	mov	r3, r0
 8105730:	647b      	str	r3, [r7, #68]	@ 0x44
 8105732:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8105736:	2101      	movs	r1, #1
 8105738:	4618      	mov	r0, r3
 810573a:	f000 fb2b 	bl	8105d94 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810573e:	4604      	mov	r4, r0
 8105740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105742:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105746:	4611      	mov	r1, r2
 8105748:	4618      	mov	r0, r3
 810574a:	f7ff fd12 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810574e:	4603      	mov	r3, r0
 8105750:	461a      	mov	r2, r3
 8105752:	4621      	mov	r1, r4
 8105754:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105756:	f000 fb7c 	bl	8105e52 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *__p = _GLIBCXX_MOVE(__t);
 810575a:	f107 0314 	add.w	r3, r7, #20
 810575e:	4618      	mov	r0, r3
 8105760:	f7ff fe9c 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8105764:	4604      	mov	r4, r0
 8105766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810576a:	4618      	mov	r0, r3
 810576c:	f000 faee 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8105770:	4602      	mov	r2, r0
 8105772:	6823      	ldr	r3, [r4, #0]
 8105774:	6013      	str	r3, [r2, #0]
		  return __ret;
 8105776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105778:	e041      	b.n	81057fe <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 810577a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810577c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105780:	4611      	mov	r1, r2
 8105782:	4618      	mov	r0, r3
 8105784:	f7ff fcf5 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105788:	4603      	mov	r3, r0
 810578a:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 810578c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810578e:	f107 0318 	add.w	r3, r7, #24
 8105792:	4611      	mov	r1, r2
 8105794:	4618      	mov	r0, r3
 8105796:	f000 fafd 	bl	8105d94 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810579a:	4603      	mov	r3, r0
 810579c:	62bb      	str	r3, [r7, #40]	@ 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810579e:	2300      	movs	r3, #0
 81057a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 81057a2:	e010      	b.n	81057c6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2a2>
		  --__p;
 81057a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81057a8:	4618      	mov	r0, r3
 81057aa:	f000 fb6a 	bl	8105e82 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  --__q;
 81057ae:	f107 0318 	add.w	r3, r7, #24
 81057b2:	4618      	mov	r0, r3
 81057b4:	f000 fb65 	bl	8105e82 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  std::iter_swap(__p, __q);
 81057b8:	69b9      	ldr	r1, [r7, #24]
 81057ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81057bc:	f000 fb03 	bl	8105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81057c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81057c2:	3301      	adds	r3, #1
 81057c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 81057c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81057c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81057ca:	1ad3      	subs	r3, r2, r3
 81057cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81057ce:	429a      	cmp	r2, r3
 81057d0:	dbe8      	blt.n	81057a4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x280>
	      __n %= __k;
 81057d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81057d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81057d6:	fb93 f1f2 	sdiv	r1, r3, r2
 81057da:	fb01 f202 	mul.w	r2, r1, r2
 81057de:	1a9b      	subs	r3, r3, r2
 81057e0:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 81057e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81057e4:	2b00      	cmp	r3, #0
 81057e6:	d101      	bne.n	81057ec <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2c8>
		return __ret;
 81057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81057ea:	e008      	b.n	81057fe <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 81057ec:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 81057f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81057f4:	4611      	mov	r1, r2
 81057f6:	4618      	mov	r0, r3
 81057f8:	f000 fb0c 	bl	8105e14 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 81057fc:	e6e4      	b.n	81055c8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
    }
 81057fe:	4618      	mov	r0, r3
 8105800:	3754      	adds	r7, #84	@ 0x54
 8105802:	46bd      	mov	sp, r7
 8105804:	bd90      	pop	{r4, r7, pc}

08105806 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8105806:	b580      	push	{r7, lr}
 8105808:	b082      	sub	sp, #8
 810580a:	af00      	add	r7, sp, #0
 810580c:	6078      	str	r0, [r7, #4]
 810580e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8105810:	6839      	ldr	r1, [r7, #0]
 8105812:	6878      	ldr	r0, [r7, #4]
 8105814:	f000 fb45 	bl	8105ea2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8105818:	bf00      	nop
 810581a:	3708      	adds	r7, #8
 810581c:	46bd      	mov	sp, r7
 810581e:	bd80      	pop	{r7, pc}

08105820 <_ZNSt15__new_allocatorIfEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8105820:	b480      	push	{r7}
 8105822:	b083      	sub	sp, #12
 8105824:	af00      	add	r7, sp, #0
 8105826:	6078      	str	r0, [r7, #4]
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	4618      	mov	r0, r3
 810582c:	370c      	adds	r7, #12
 810582e:	46bd      	mov	sp, r7
 8105830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105834:	4770      	bx	lr

08105836 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8105836:	b580      	push	{r7, lr}
 8105838:	b084      	sub	sp, #16
 810583a:	af00      	add	r7, sp, #0
 810583c:	60f8      	str	r0, [r7, #12]
 810583e:	60b9      	str	r1, [r7, #8]
 8105840:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8105842:	687a      	ldr	r2, [r7, #4]
 8105844:	68b9      	ldr	r1, [r7, #8]
 8105846:	68f8      	ldr	r0, [r7, #12]
 8105848:	f000 fb36 	bl	8105eb8 <_ZNSt15__new_allocatorIfE10deallocateEPfj>
 810584c:	bf00      	nop
 810584e:	3710      	adds	r7, #16
 8105850:	46bd      	mov	sp, r7
 8105852:	bd80      	pop	{r7, pc}

08105854 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8105854:	b580      	push	{r7, lr}
 8105856:	b084      	sub	sp, #16
 8105858:	af00      	add	r7, sp, #0
 810585a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 810585c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8105860:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8105862:	6878      	ldr	r0, [r7, #4]
 8105864:	f000 fb38 	bl	8105ed8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8105868:	4603      	mov	r3, r0
 810586a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 810586c:	f107 0208 	add.w	r2, r7, #8
 8105870:	f107 030c 	add.w	r3, r7, #12
 8105874:	4611      	mov	r1, r2
 8105876:	4618      	mov	r0, r3
 8105878:	f7fd fc75 	bl	8103166 <_ZSt3minIjERKT_S2_S2_>
 810587c:	4603      	mov	r3, r0
 810587e:	681b      	ldr	r3, [r3, #0]
      }
 8105880:	4618      	mov	r0, r3
 8105882:	3710      	adds	r7, #16
 8105884:	46bd      	mov	sp, r7
 8105886:	bd80      	pop	{r7, pc}

08105888 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8105888:	b580      	push	{r7, lr}
 810588a:	b082      	sub	sp, #8
 810588c:	af00      	add	r7, sp, #0
 810588e:	6078      	str	r0, [r7, #4]
 8105890:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8105892:	2200      	movs	r2, #0
 8105894:	6839      	ldr	r1, [r7, #0]
 8105896:	6878      	ldr	r0, [r7, #4]
 8105898:	f000 fb2a 	bl	8105ef0 <_ZNSt15__new_allocatorIfE8allocateEjPKv>
 810589c:	4603      	mov	r3, r0
 810589e:	4618      	mov	r0, r3
 81058a0:	3708      	adds	r7, #8
 81058a2:	46bd      	mov	sp, r7
 81058a4:	bd80      	pop	{r7, pc}

081058a6 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 81058a6:	b580      	push	{r7, lr}
 81058a8:	b084      	sub	sp, #16
 81058aa:	af00      	add	r7, sp, #0
 81058ac:	60f8      	str	r0, [r7, #12]
 81058ae:	60b9      	str	r1, [r7, #8]
 81058b0:	607a      	str	r2, [r7, #4]
 81058b2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 81058b4:	683b      	ldr	r3, [r7, #0]
 81058b6:	687a      	ldr	r2, [r7, #4]
 81058b8:	68b9      	ldr	r1, [r7, #8]
 81058ba:	68f8      	ldr	r0, [r7, #12]
 81058bc:	f000 fb41 	bl	8105f42 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 81058c0:	4603      	mov	r3, r0
      }
 81058c2:	4618      	mov	r0, r3
 81058c4:	3710      	adds	r7, #16
 81058c6:	46bd      	mov	sp, r7
 81058c8:	bd80      	pop	{r7, pc}

081058ca <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 81058ca:	b580      	push	{r7, lr}
 81058cc:	b082      	sub	sp, #8
 81058ce:	af00      	add	r7, sp, #0
 81058d0:	6078      	str	r0, [r7, #4]
 81058d2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 81058d4:	463b      	mov	r3, r7
 81058d6:	4618      	mov	r0, r3
 81058d8:	f000 fb50 	bl	8105f7c <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>
 81058dc:	4603      	mov	r3, r0
 81058de:	681a      	ldr	r2, [r3, #0]
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	601a      	str	r2, [r3, #0]
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	4618      	mov	r0, r3
 81058e8:	3708      	adds	r7, #8
 81058ea:	46bd      	mov	sp, r7
 81058ec:	bd80      	pop	{r7, pc}

081058ee <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 81058ee:	b580      	push	{r7, lr}
 81058f0:	b084      	sub	sp, #16
 81058f2:	af00      	add	r7, sp, #0
 81058f4:	60f8      	str	r0, [r7, #12]
 81058f6:	60b9      	str	r1, [r7, #8]
 81058f8:	607a      	str	r2, [r7, #4]
 81058fa:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 81058fc:	687a      	ldr	r2, [r7, #4]
 81058fe:	68b9      	ldr	r1, [r7, #8]
 8105900:	68f8      	ldr	r0, [r7, #12]
 8105902:	f000 fb46 	bl	8105f92 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8105906:	4603      	mov	r3, r0
    }
 8105908:	4618      	mov	r0, r3
 810590a:	3710      	adds	r7, #16
 810590c:	46bd      	mov	sp, r7
 810590e:	bd80      	pop	{r7, pc}

08105910 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8105910:	b580      	push	{r7, lr}
 8105912:	b082      	sub	sp, #8
 8105914:	af00      	add	r7, sp, #0
 8105916:	6078      	str	r0, [r7, #4]
 8105918:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 810591a:	6839      	ldr	r1, [r7, #0]
 810591c:	6878      	ldr	r0, [r7, #4]
 810591e:	f000 f804 	bl	810592a <_ZNSaIfEC1ERKS_>
 8105922:	6878      	ldr	r0, [r7, #4]
 8105924:	3708      	adds	r7, #8
 8105926:	46bd      	mov	sp, r7
 8105928:	bd80      	pop	{r7, pc}

0810592a <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 810592a:	b580      	push	{r7, lr}
 810592c:	b082      	sub	sp, #8
 810592e:	af00      	add	r7, sp, #0
 8105930:	6078      	str	r0, [r7, #4]
 8105932:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8105934:	6839      	ldr	r1, [r7, #0]
 8105936:	6878      	ldr	r0, [r7, #4]
 8105938:	f000 fb3f 	bl	8105fba <_ZNSt15__new_allocatorIfEC1ERKS0_>
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	4618      	mov	r0, r3
 8105940:	3708      	adds	r7, #8
 8105942:	46bd      	mov	sp, r7
 8105944:	bd80      	pop	{r7, pc}

08105946 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8105946:	b580      	push	{r7, lr}
 8105948:	b082      	sub	sp, #8
 810594a:	af00      	add	r7, sp, #0
 810594c:	6078      	str	r0, [r7, #4]
 810594e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8105950:	6839      	ldr	r1, [r7, #0]
 8105952:	6878      	ldr	r0, [r7, #4]
 8105954:	f7ff ffe9 	bl	810592a <_ZNSaIfEC1ERKS_>
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	4618      	mov	r0, r3
 810595c:	f7ff fc5c 	bl	8105218 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	4618      	mov	r0, r3
 8105964:	3708      	adds	r7, #8
 8105966:	46bd      	mov	sp, r7
 8105968:	bd80      	pop	{r7, pc}

0810596a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 810596a:	b580      	push	{r7, lr}
 810596c:	b082      	sub	sp, #8
 810596e:	af00      	add	r7, sp, #0
 8105970:	6078      	str	r0, [r7, #4]
 8105972:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8105974:	6839      	ldr	r1, [r7, #0]
 8105976:	6878      	ldr	r0, [r7, #4]
 8105978:	f7ff fca1 	bl	81052be <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 810597c:	4602      	mov	r2, r0
 810597e:	687b      	ldr	r3, [r7, #4]
 8105980:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	681a      	ldr	r2, [r3, #0]
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 810598a:	687b      	ldr	r3, [r7, #4]
 810598c:	681a      	ldr	r2, [r3, #0]
 810598e:	683b      	ldr	r3, [r7, #0]
 8105990:	009b      	lsls	r3, r3, #2
 8105992:	441a      	add	r2, r3
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	609a      	str	r2, [r3, #8]
      }
 8105998:	bf00      	nop
 810599a:	3708      	adds	r7, #8
 810599c:	46bd      	mov	sp, r7
 810599e:	bd80      	pop	{r7, pc}

081059a0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 81059a0:	b480      	push	{r7}
 81059a2:	b083      	sub	sp, #12
 81059a4:	af00      	add	r7, sp, #0
 81059a6:	6078      	str	r0, [r7, #4]
 81059a8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 81059aa:	683b      	ldr	r3, [r7, #0]
 81059ac:	681a      	ldr	r2, [r3, #0]
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	601a      	str	r2, [r3, #0]
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	4618      	mov	r0, r3
 81059b6:	370c      	adds	r7, #12
 81059b8:	46bd      	mov	sp, r7
 81059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059be:	4770      	bx	lr

081059c0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 81059c0:	b580      	push	{r7, lr}
 81059c2:	b086      	sub	sp, #24
 81059c4:	af00      	add	r7, sp, #0
 81059c6:	60f8      	str	r0, [r7, #12]
 81059c8:	60b9      	str	r1, [r7, #8]
 81059ca:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 81059cc:	2301      	movs	r3, #1
 81059ce:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 81059d0:	2301      	movs	r3, #1
 81059d2:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 81059d4:	687a      	ldr	r2, [r7, #4]
 81059d6:	68b9      	ldr	r1, [r7, #8]
 81059d8:	68f8      	ldr	r0, [r7, #12]
 81059da:	f000 fafa 	bl	8105fd2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 81059de:	4603      	mov	r3, r0
    }
 81059e0:	4618      	mov	r0, r3
 81059e2:	3718      	adds	r7, #24
 81059e4:	46bd      	mov	sp, r7
 81059e6:	bd80      	pop	{r7, pc}

081059e8 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 81059e8:	b590      	push	{r4, r7, lr}
 81059ea:	b083      	sub	sp, #12
 81059ec:	af00      	add	r7, sp, #0
 81059ee:	6078      	str	r0, [r7, #4]
 81059f0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 81059f2:	6878      	ldr	r0, [r7, #4]
 81059f4:	f000 fafd 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 81059f8:	4603      	mov	r3, r0
 81059fa:	681c      	ldr	r4, [r3, #0]
 81059fc:	6838      	ldr	r0, [r7, #0]
 81059fe:	f000 faf8 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105a02:	4603      	mov	r3, r0
 8105a04:	681b      	ldr	r3, [r3, #0]
 8105a06:	429c      	cmp	r4, r3
 8105a08:	bf14      	ite	ne
 8105a0a:	2301      	movne	r3, #1
 8105a0c:	2300      	moveq	r3, #0
 8105a0e:	b2db      	uxtb	r3, r3
 8105a10:	4618      	mov	r0, r3
 8105a12:	370c      	adds	r7, #12
 8105a14:	46bd      	mov	sp, r7
 8105a16:	bd90      	pop	{r4, r7, pc}

08105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8105a18:	b590      	push	{r4, r7, lr}
 8105a1a:	b083      	sub	sp, #12
 8105a1c:	af00      	add	r7, sp, #0
 8105a1e:	6078      	str	r0, [r7, #4]
 8105a20:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8105a22:	6878      	ldr	r0, [r7, #4]
 8105a24:	f000 fae5 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105a28:	4603      	mov	r3, r0
 8105a2a:	681c      	ldr	r4, [r3, #0]
 8105a2c:	6838      	ldr	r0, [r7, #0]
 8105a2e:	f000 fae0 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105a32:	4603      	mov	r3, r0
 8105a34:	681b      	ldr	r3, [r3, #0]
 8105a36:	1ae3      	subs	r3, r4, r3
 8105a38:	109b      	asrs	r3, r3, #2
 8105a3a:	4618      	mov	r0, r3
 8105a3c:	370c      	adds	r7, #12
 8105a3e:	46bd      	mov	sp, r7
 8105a40:	bd90      	pop	{r4, r7, pc}

08105a42 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8105a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105a44:	b087      	sub	sp, #28
 8105a46:	af00      	add	r7, sp, #0
 8105a48:	60f8      	str	r0, [r7, #12]
 8105a4a:	60b9      	str	r1, [r7, #8]
 8105a4c:	607a      	str	r2, [r7, #4]
 8105a4e:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8105a50:	e01b      	b.n	8105a8a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 8105a52:	687b      	ldr	r3, [r7, #4]
 8105a54:	2b00      	cmp	r3, #0
 8105a56:	d106      	bne.n	8105a66 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 8105a58:	4633      	mov	r3, r6
 8105a5a:	68ba      	ldr	r2, [r7, #8]
 8105a5c:	68b9      	ldr	r1, [r7, #8]
 8105a5e:	68f8      	ldr	r0, [r7, #12]
 8105a60:	f000 fad2 	bl	8106008 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 8105a64:	e021      	b.n	8105aaa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	3b01      	subs	r3, #1
 8105a6a:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8105a6c:	462a      	mov	r2, r5
 8105a6e:	68b9      	ldr	r1, [r7, #8]
 8105a70:	68f8      	ldr	r0, [r7, #12]
 8105a72:	f000 fae0 	bl	8106036 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 8105a76:	4603      	mov	r3, r0
 8105a78:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8105a7a:	4623      	mov	r3, r4
 8105a7c:	687a      	ldr	r2, [r7, #4]
 8105a7e:	68b9      	ldr	r1, [r7, #8]
 8105a80:	6978      	ldr	r0, [r7, #20]
 8105a82:	f7ff ffde 	bl	8105a42 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 8105a86:	697b      	ldr	r3, [r7, #20]
 8105a88:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8105a8a:	f107 020c 	add.w	r2, r7, #12
 8105a8e:	f107 0308 	add.w	r3, r7, #8
 8105a92:	4611      	mov	r1, r2
 8105a94:	4618      	mov	r0, r3
 8105a96:	f7ff ffbf 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8105a9a:	4603      	mov	r3, r0
 8105a9c:	2b10      	cmp	r3, #16
 8105a9e:	bfcc      	ite	gt
 8105aa0:	2301      	movgt	r3, #1
 8105aa2:	2300      	movle	r3, #0
 8105aa4:	b2db      	uxtb	r3, r3
 8105aa6:	2b00      	cmp	r3, #0
 8105aa8:	d1d3      	bne.n	8105a52 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 8105aaa:	371c      	adds	r7, #28
 8105aac:	46bd      	mov	sp, r7
 8105aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08105ab0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8105ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105ab2:	b085      	sub	sp, #20
 8105ab4:	af00      	add	r7, sp, #0
 8105ab6:	60f8      	str	r0, [r7, #12]
 8105ab8:	60b9      	str	r1, [r7, #8]
 8105aba:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8105abc:	f107 020c 	add.w	r2, r7, #12
 8105ac0:	f107 0308 	add.w	r3, r7, #8
 8105ac4:	4611      	mov	r1, r2
 8105ac6:	4618      	mov	r0, r3
 8105ac8:	f7ff ffa6 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8105acc:	4603      	mov	r3, r0
 8105ace:	2b10      	cmp	r3, #16
 8105ad0:	bfcc      	ite	gt
 8105ad2:	2301      	movgt	r3, #1
 8105ad4:	2300      	movle	r3, #0
 8105ad6:	b2db      	uxtb	r3, r3
 8105ad8:	2b00      	cmp	r3, #0
 8105ada:	d018      	beq.n	8105b0e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8105adc:	f107 030c 	add.w	r3, r7, #12
 8105ae0:	2110      	movs	r1, #16
 8105ae2:	4618      	mov	r0, r3
 8105ae4:	f7ff fb45 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105ae8:	4603      	mov	r3, r0
 8105aea:	4632      	mov	r2, r6
 8105aec:	4619      	mov	r1, r3
 8105aee:	68f8      	ldr	r0, [r7, #12]
 8105af0:	f000 fae1 	bl	81060b6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8105af4:	f107 030c 	add.w	r3, r7, #12
 8105af8:	2110      	movs	r1, #16
 8105afa:	4618      	mov	r0, r3
 8105afc:	f7ff fb39 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105b00:	4603      	mov	r3, r0
 8105b02:	462a      	mov	r2, r5
 8105b04:	68b9      	ldr	r1, [r7, #8]
 8105b06:	4618      	mov	r0, r3
 8105b08:	f000 fb3b 	bl	8106182 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8105b0c:	e004      	b.n	8105b18 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8105b0e:	4622      	mov	r2, r4
 8105b10:	68b9      	ldr	r1, [r7, #8]
 8105b12:	68f8      	ldr	r0, [r7, #12]
 8105b14:	f000 facf 	bl	81060b6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8105b18:	bf00      	nop
 8105b1a:	3714      	adds	r7, #20
 8105b1c:	46bd      	mov	sp, r7
 8105b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08105b20 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8105b20:	b480      	push	{r7}
 8105b22:	b083      	sub	sp, #12
 8105b24:	af00      	add	r7, sp, #0
 8105b26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8105b28:	687b      	ldr	r3, [r7, #4]
 8105b2a:	4618      	mov	r0, r3
 8105b2c:	370c      	adds	r7, #12
 8105b2e:	46bd      	mov	sp, r7
 8105b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b34:	4770      	bx	lr

08105b36 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8105b36:	b580      	push	{r7, lr}
 8105b38:	b084      	sub	sp, #16
 8105b3a:	af00      	add	r7, sp, #0
 8105b3c:	60f8      	str	r0, [r7, #12]
 8105b3e:	60b9      	str	r1, [r7, #8]
 8105b40:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8105b42:	6878      	ldr	r0, [r7, #4]
 8105b44:	f7ff ffec 	bl	8105b20 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8105b48:	4603      	mov	r3, r0
 8105b4a:	461a      	mov	r2, r3
 8105b4c:	68b9      	ldr	r1, [r7, #8]
 8105b4e:	68f8      	ldr	r0, [r7, #12]
 8105b50:	f000 fb3c 	bl	81061cc <_ZNSt15__new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>
	}
 8105b54:	bf00      	nop
 8105b56:	3710      	adds	r7, #16
 8105b58:	46bd      	mov	sp, r7
 8105b5a:	bd80      	pop	{r7, pc}

08105b5c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8105b5c:	b5b0      	push	{r4, r5, r7, lr}
 8105b5e:	b08c      	sub	sp, #48	@ 0x30
 8105b60:	af00      	add	r7, sp, #0
 8105b62:	60f8      	str	r0, [r7, #12]
 8105b64:	60b9      	str	r1, [r7, #8]
 8105b66:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8105b68:	4a59      	ldr	r2, [pc, #356]	@ (8105cd0 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x174>)
 8105b6a:	2101      	movs	r1, #1
 8105b6c:	68f8      	ldr	r0, [r7, #12]
 8105b6e:	f000 fb43 	bl	81061f8 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8105b72:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8105b74:	68fb      	ldr	r3, [r7, #12]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8105b7a:	68fb      	ldr	r3, [r7, #12]
 8105b7c:	685b      	ldr	r3, [r3, #4]
 8105b7e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8105b80:	68f8      	ldr	r0, [r7, #12]
 8105b82:	f7ff faa4 	bl	81050ce <_ZNSt6vectorIfSaIfEE5beginEv>
 8105b86:	4603      	mov	r3, r0
 8105b88:	617b      	str	r3, [r7, #20]
 8105b8a:	f107 0214 	add.w	r2, r7, #20
 8105b8e:	f107 0308 	add.w	r3, r7, #8
 8105b92:	4611      	mov	r1, r2
 8105b94:	4618      	mov	r0, r3
 8105b96:	f7ff ff3f 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8105b9a:	4603      	mov	r3, r0
 8105b9c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8105b9e:	68fb      	ldr	r3, [r7, #12]
 8105ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8105ba2:	4618      	mov	r0, r3
 8105ba4:	f7ff fb8b 	bl	81052be <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8105ba8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8105baa:	69bb      	ldr	r3, [r7, #24]
 8105bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8105bae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8105bb0:	69fb      	ldr	r3, [r7, #28]
 8105bb2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8105bb4:	69ba      	ldr	r2, [r7, #24]
 8105bb6:	18d5      	adds	r5, r2, r3
 8105bb8:	6878      	ldr	r0, [r7, #4]
 8105bba:	f7ff ffb1 	bl	8105b20 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8105bbe:	4603      	mov	r3, r0
 8105bc0:	461a      	mov	r2, r3
 8105bc2:	4629      	mov	r1, r5
 8105bc4:	4620      	mov	r0, r4
 8105bc6:	f7ff ffb6 	bl	8105b36 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8105bca:	2300      	movs	r3, #0
 8105bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8105bce:	f7ff f99b 	bl	8104f08 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8105bd2:	4603      	mov	r3, r0
 8105bd4:	2b00      	cmp	r3, #0
 8105bd6:	d027      	beq.n	8105c28 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8105bd8:	f107 0308 	add.w	r3, r7, #8
 8105bdc:	4618      	mov	r0, r3
 8105bde:	f000 fa08 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105be2:	4603      	mov	r3, r0
 8105be4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8105be6:	68fb      	ldr	r3, [r7, #12]
 8105be8:	4618      	mov	r0, r3
 8105bea:	f7ff faf0 	bl	81051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105bee:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8105bf0:	69ba      	ldr	r2, [r7, #24]
 8105bf2:	4621      	mov	r1, r4
 8105bf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8105bf6:	f7ff fb76 	bl	81052e6 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8105bfa:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 8105bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105bfe:	3304      	adds	r3, #4
 8105c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8105c02:	f107 0308 	add.w	r3, r7, #8
 8105c06:	4618      	mov	r0, r3
 8105c08:	f000 f9f3 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105c0c:	4603      	mov	r3, r0
 8105c0e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8105c10:	68fb      	ldr	r3, [r7, #12]
 8105c12:	4618      	mov	r0, r3
 8105c14:	f7ff fadb 	bl	81051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105c18:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8105c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105c1c:	6a39      	ldr	r1, [r7, #32]
 8105c1e:	4620      	mov	r0, r4
 8105c20:	f7ff fb61 	bl	81052e6 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8105c24:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8105c26:	e026      	b.n	8105c76 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8105c28:	f107 0308 	add.w	r3, r7, #8
 8105c2c:	4618      	mov	r0, r3
 8105c2e:	f000 f9e0 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105c32:	4603      	mov	r3, r0
 8105c34:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8105c36:	68fb      	ldr	r3, [r7, #12]
 8105c38:	4618      	mov	r0, r3
 8105c3a:	f7ff fac8 	bl	81051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105c3e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8105c40:	69ba      	ldr	r2, [r7, #24]
 8105c42:	4621      	mov	r1, r4
 8105c44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8105c46:	f000 fb1e 	bl	8106286 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8105c4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 8105c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105c4e:	3304      	adds	r3, #4
 8105c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
		(__position.base(), __old_finish,
 8105c52:	f107 0308 	add.w	r3, r7, #8
 8105c56:	4618      	mov	r0, r3
 8105c58:	f000 f9cb 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105c5c:	4603      	mov	r3, r0
 8105c5e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8105c60:	68fb      	ldr	r3, [r7, #12]
 8105c62:	4618      	mov	r0, r3
 8105c64:	f7ff fab3 	bl	81051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105c68:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8105c6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105c6c:	6a39      	ldr	r1, [r7, #32]
 8105c6e:	4620      	mov	r0, r4
 8105c70:	f000 fb09 	bl	8106286 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8105c74:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8105c76:	f7ff f947 	bl	8104f08 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8105c7a:	4603      	mov	r3, r0
 8105c7c:	f083 0301 	eor.w	r3, r3, #1
 8105c80:	b2db      	uxtb	r3, r3
 8105c82:	2b00      	cmp	r3, #0
 8105c84:	d009      	beq.n	8105c9a <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8105c86:	68fb      	ldr	r3, [r7, #12]
 8105c88:	4618      	mov	r0, r3
 8105c8a:	f7ff faa0 	bl	81051ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105c8e:	4603      	mov	r3, r0
 8105c90:	461a      	mov	r2, r3
 8105c92:	6a39      	ldr	r1, [r7, #32]
 8105c94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8105c96:	f7ff faa5 	bl	81051e4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8105c9a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8105c9c:	68fb      	ldr	r3, [r7, #12]
 8105c9e:	689a      	ldr	r2, [r3, #8]
 8105ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105ca2:	1ad3      	subs	r3, r2, r3
 8105ca4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8105ca6:	461a      	mov	r2, r3
 8105ca8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8105caa:	f7ff fad4 	bl	8105256 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 8105cae:	68fb      	ldr	r3, [r7, #12]
 8105cb0:	69ba      	ldr	r2, [r7, #24]
 8105cb2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8105cb4:	68fb      	ldr	r3, [r7, #12]
 8105cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105cb8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8105cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105cbc:	009b      	lsls	r3, r3, #2
 8105cbe:	69ba      	ldr	r2, [r7, #24]
 8105cc0:	441a      	add	r2, r3
 8105cc2:	68fb      	ldr	r3, [r7, #12]
 8105cc4:	609a      	str	r2, [r3, #8]
    }
 8105cc6:	bf00      	nop
 8105cc8:	3730      	adds	r7, #48	@ 0x30
 8105cca:	46bd      	mov	sp, r7
 8105ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8105cce:	bf00      	nop
 8105cd0:	0811ccf4 	.word	0x0811ccf4

08105cd4 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8105cd4:	b590      	push	{r4, r7, lr}
 8105cd6:	b083      	sub	sp, #12
 8105cd8:	af00      	add	r7, sp, #0
 8105cda:	6078      	str	r0, [r7, #4]
 8105cdc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8105cde:	6878      	ldr	r0, [r7, #4]
 8105ce0:	f000 f987 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105ce4:	4603      	mov	r3, r0
 8105ce6:	681c      	ldr	r4, [r3, #0]
 8105ce8:	6838      	ldr	r0, [r7, #0]
 8105cea:	f000 f982 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105cee:	4603      	mov	r3, r0
 8105cf0:	681b      	ldr	r3, [r3, #0]
 8105cf2:	429c      	cmp	r4, r3
 8105cf4:	bf0c      	ite	eq
 8105cf6:	2301      	moveq	r3, #1
 8105cf8:	2300      	movne	r3, #0
 8105cfa:	b2db      	uxtb	r3, r3
 8105cfc:	4618      	mov	r0, r3
 8105cfe:	370c      	adds	r7, #12
 8105d00:	46bd      	mov	sp, r7
 8105d02:	bd90      	pop	{r4, r7, pc}

08105d04 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8105d04:	b580      	push	{r7, lr}
 8105d06:	b084      	sub	sp, #16
 8105d08:	af00      	add	r7, sp, #0
 8105d0a:	60f8      	str	r0, [r7, #12]
 8105d0c:	60b9      	str	r1, [r7, #8]
 8105d0e:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8105d10:	e00c      	b.n	8105d2c <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0x28>
	std::iter_swap(__first1, __first2);
 8105d12:	6879      	ldr	r1, [r7, #4]
 8105d14:	68f8      	ldr	r0, [r7, #12]
 8105d16:	f000 f856 	bl	8105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8105d1a:	f107 030c 	add.w	r3, r7, #12
 8105d1e:	4618      	mov	r0, r3
 8105d20:	f000 f868 	bl	8105df4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8105d24:	1d3b      	adds	r3, r7, #4
 8105d26:	4618      	mov	r0, r3
 8105d28:	f000 f864 	bl	8105df4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8105d2c:	f107 0208 	add.w	r2, r7, #8
 8105d30:	f107 030c 	add.w	r3, r7, #12
 8105d34:	4611      	mov	r1, r2
 8105d36:	4618      	mov	r0, r3
 8105d38:	f7ff fe56 	bl	81059e8 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8105d3c:	4603      	mov	r3, r0
 8105d3e:	2b00      	cmp	r3, #0
 8105d40:	d1e7      	bne.n	8105d12 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0xe>
      return __first2;
 8105d42:	687b      	ldr	r3, [r7, #4]
    }
 8105d44:	4618      	mov	r0, r3
 8105d46:	3710      	adds	r7, #16
 8105d48:	46bd      	mov	sp, r7
 8105d4a:	bd80      	pop	{r7, pc}

08105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8105d4c:	b480      	push	{r7}
 8105d4e:	b083      	sub	sp, #12
 8105d50:	af00      	add	r7, sp, #0
 8105d52:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	4618      	mov	r0, r3
 8105d5a:	370c      	adds	r7, #12
 8105d5c:	46bd      	mov	sp, r7
 8105d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d62:	4770      	bx	lr

08105d64 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move(_II __first, _II __last, _OI __result)
 8105d64:	b590      	push	{r4, r7, lr}
 8105d66:	b085      	sub	sp, #20
 8105d68:	af00      	add	r7, sp, #0
 8105d6a:	60f8      	str	r0, [r7, #12]
 8105d6c:	60b9      	str	r1, [r7, #8]
 8105d6e:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8105d70:	68f8      	ldr	r0, [r7, #12]
 8105d72:	f000 faa1 	bl	81062b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8105d76:	4604      	mov	r4, r0
 8105d78:	68b8      	ldr	r0, [r7, #8]
 8105d7a:	f000 fa9d 	bl	81062b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8105d7e:	4603      	mov	r3, r0
 8105d80:	687a      	ldr	r2, [r7, #4]
 8105d82:	4619      	mov	r1, r3
 8105d84:	4620      	mov	r0, r4
 8105d86:	f000 faa2 	bl	81062ce <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 8105d8a:	4603      	mov	r3, r0
    }
 8105d8c:	4618      	mov	r0, r3
 8105d8e:	3714      	adds	r7, #20
 8105d90:	46bd      	mov	sp, r7
 8105d92:	bd90      	pop	{r4, r7, pc}

08105d94 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8105d94:	b580      	push	{r7, lr}
 8105d96:	b084      	sub	sp, #16
 8105d98:	af00      	add	r7, sp, #0
 8105d9a:	6078      	str	r0, [r7, #4]
 8105d9c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8105d9e:	687b      	ldr	r3, [r7, #4]
 8105da0:	681a      	ldr	r2, [r3, #0]
 8105da2:	683b      	ldr	r3, [r7, #0]
 8105da4:	009b      	lsls	r3, r3, #2
 8105da6:	425b      	negs	r3, r3
 8105da8:	4413      	add	r3, r2
 8105daa:	60fb      	str	r3, [r7, #12]
 8105dac:	f107 020c 	add.w	r2, r7, #12
 8105db0:	f107 0308 	add.w	r3, r7, #8
 8105db4:	4611      	mov	r1, r2
 8105db6:	4618      	mov	r0, r3
 8105db8:	f7ff fb33 	bl	8105422 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8105dbc:	68bb      	ldr	r3, [r7, #8]
 8105dbe:	4618      	mov	r0, r3
 8105dc0:	3710      	adds	r7, #16
 8105dc2:	46bd      	mov	sp, r7
 8105dc4:	bd80      	pop	{r7, pc}

08105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8105dc6:	b590      	push	{r4, r7, lr}
 8105dc8:	b083      	sub	sp, #12
 8105dca:	af00      	add	r7, sp, #0
 8105dcc:	6078      	str	r0, [r7, #4]
 8105dce:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8105dd0:	1d3b      	adds	r3, r7, #4
 8105dd2:	4618      	mov	r0, r3
 8105dd4:	f7ff ffba 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8105dd8:	4604      	mov	r4, r0
 8105dda:	463b      	mov	r3, r7
 8105ddc:	4618      	mov	r0, r3
 8105dde:	f7ff ffb5 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8105de2:	4603      	mov	r3, r0
 8105de4:	4619      	mov	r1, r3
 8105de6:	4620      	mov	r0, r4
 8105de8:	f000 fa92 	bl	8106310 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8105dec:	bf00      	nop
 8105dee:	370c      	adds	r7, #12
 8105df0:	46bd      	mov	sp, r7
 8105df2:	bd90      	pop	{r4, r7, pc}

08105df4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8105df4:	b480      	push	{r7}
 8105df6:	b083      	sub	sp, #12
 8105df8:	af00      	add	r7, sp, #0
 8105dfa:	6078      	str	r0, [r7, #4]
	++_M_current;
 8105dfc:	687b      	ldr	r3, [r7, #4]
 8105dfe:	681b      	ldr	r3, [r3, #0]
 8105e00:	1d1a      	adds	r2, r3, #4
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	601a      	str	r2, [r3, #0]
	return *this;
 8105e06:	687b      	ldr	r3, [r7, #4]
      }
 8105e08:	4618      	mov	r0, r3
 8105e0a:	370c      	adds	r7, #12
 8105e0c:	46bd      	mov	sp, r7
 8105e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e12:	4770      	bx	lr

08105e14 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8105e14:	b580      	push	{r7, lr}
 8105e16:	b084      	sub	sp, #16
 8105e18:	af00      	add	r7, sp, #0
 8105e1a:	6078      	str	r0, [r7, #4]
 8105e1c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8105e1e:	6878      	ldr	r0, [r7, #4]
 8105e20:	f000 fa95 	bl	810634e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8105e24:	4603      	mov	r3, r0
 8105e26:	681b      	ldr	r3, [r3, #0]
 8105e28:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8105e2a:	6838      	ldr	r0, [r7, #0]
 8105e2c:	f000 fa8f 	bl	810634e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8105e30:	4603      	mov	r3, r0
 8105e32:	681a      	ldr	r2, [r3, #0]
 8105e34:	687b      	ldr	r3, [r7, #4]
 8105e36:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8105e38:	f107 030c 	add.w	r3, r7, #12
 8105e3c:	4618      	mov	r0, r3
 8105e3e:	f000 fa86 	bl	810634e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8105e42:	4603      	mov	r3, r0
 8105e44:	681a      	ldr	r2, [r3, #0]
 8105e46:	683b      	ldr	r3, [r7, #0]
 8105e48:	601a      	str	r2, [r3, #0]
    }
 8105e4a:	bf00      	nop
 8105e4c:	3710      	adds	r7, #16
 8105e4e:	46bd      	mov	sp, r7
 8105e50:	bd80      	pop	{r7, pc}

08105e52 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8105e52:	b590      	push	{r4, r7, lr}
 8105e54:	b085      	sub	sp, #20
 8105e56:	af00      	add	r7, sp, #0
 8105e58:	60f8      	str	r0, [r7, #12]
 8105e5a:	60b9      	str	r1, [r7, #8]
 8105e5c:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8105e5e:	68f8      	ldr	r0, [r7, #12]
 8105e60:	f000 fa2a 	bl	81062b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8105e64:	4604      	mov	r4, r0
 8105e66:	68b8      	ldr	r0, [r7, #8]
 8105e68:	f000 fa26 	bl	81062b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8105e6c:	4603      	mov	r3, r0
 8105e6e:	687a      	ldr	r2, [r7, #4]
 8105e70:	4619      	mov	r1, r3
 8105e72:	4620      	mov	r0, r4
 8105e74:	f000 fa76 	bl	8106364 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 8105e78:	4603      	mov	r3, r0
    }
 8105e7a:	4618      	mov	r0, r3
 8105e7c:	3714      	adds	r7, #20
 8105e7e:	46bd      	mov	sp, r7
 8105e80:	bd90      	pop	{r4, r7, pc}

08105e82 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8105e82:	b480      	push	{r7}
 8105e84:	b083      	sub	sp, #12
 8105e86:	af00      	add	r7, sp, #0
 8105e88:	6078      	str	r0, [r7, #4]
	--_M_current;
 8105e8a:	687b      	ldr	r3, [r7, #4]
 8105e8c:	681b      	ldr	r3, [r3, #0]
 8105e8e:	1f1a      	subs	r2, r3, #4
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	601a      	str	r2, [r3, #0]
	return *this;
 8105e94:	687b      	ldr	r3, [r7, #4]
      }
 8105e96:	4618      	mov	r0, r3
 8105e98:	370c      	adds	r7, #12
 8105e9a:	46bd      	mov	sp, r7
 8105e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ea0:	4770      	bx	lr

08105ea2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8105ea2:	b480      	push	{r7}
 8105ea4:	b083      	sub	sp, #12
 8105ea6:	af00      	add	r7, sp, #0
 8105ea8:	6078      	str	r0, [r7, #4]
 8105eaa:	6039      	str	r1, [r7, #0]
 8105eac:	bf00      	nop
 8105eae:	370c      	adds	r7, #12
 8105eb0:	46bd      	mov	sp, r7
 8105eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105eb6:	4770      	bx	lr

08105eb8 <_ZNSt15__new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8105eb8:	b580      	push	{r7, lr}
 8105eba:	b084      	sub	sp, #16
 8105ebc:	af00      	add	r7, sp, #0
 8105ebe:	60f8      	str	r0, [r7, #12]
 8105ec0:	60b9      	str	r1, [r7, #8]
 8105ec2:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	009b      	lsls	r3, r3, #2
 8105ec8:	4619      	mov	r1, r3
 8105eca:	68b8      	ldr	r0, [r7, #8]
 8105ecc:	f015 fcd6 	bl	811b87c <_ZdlPvj>
      }
 8105ed0:	bf00      	nop
 8105ed2:	3710      	adds	r7, #16
 8105ed4:	46bd      	mov	sp, r7
 8105ed6:	bd80      	pop	{r7, pc}

08105ed8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8105ed8:	b580      	push	{r7, lr}
 8105eda:	b082      	sub	sp, #8
 8105edc:	af00      	add	r7, sp, #0
 8105ede:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8105ee0:	6878      	ldr	r0, [r7, #4]
 8105ee2:	f000 fa60 	bl	81063a6 <_ZNKSt15__new_allocatorIfE8max_sizeEv>
 8105ee6:	4603      	mov	r3, r0
      }
 8105ee8:	4618      	mov	r0, r3
 8105eea:	3708      	adds	r7, #8
 8105eec:	46bd      	mov	sp, r7
 8105eee:	bd80      	pop	{r7, pc}

08105ef0 <_ZNSt15__new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8105ef0:	b580      	push	{r7, lr}
 8105ef2:	b084      	sub	sp, #16
 8105ef4:	af00      	add	r7, sp, #0
 8105ef6:	60f8      	str	r0, [r7, #12]
 8105ef8:	60b9      	str	r1, [r7, #8]
 8105efa:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8105efc:	68f8      	ldr	r0, [r7, #12]
 8105efe:	f000 fa5e 	bl	81063be <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 8105f02:	4602      	mov	r2, r0
 8105f04:	68bb      	ldr	r3, [r7, #8]
 8105f06:	4293      	cmp	r3, r2
 8105f08:	bf8c      	ite	hi
 8105f0a:	2301      	movhi	r3, #1
 8105f0c:	2300      	movls	r3, #0
 8105f0e:	b2db      	uxtb	r3, r3
 8105f10:	2b00      	cmp	r3, #0
 8105f12:	bf14      	ite	ne
 8105f14:	2301      	movne	r3, #1
 8105f16:	2300      	moveq	r3, #0
 8105f18:	b2db      	uxtb	r3, r3
 8105f1a:	2b00      	cmp	r3, #0
 8105f1c:	d007      	beq.n	8105f2e <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8105f1e:	68bb      	ldr	r3, [r7, #8]
 8105f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105f24:	d301      	bcc.n	8105f2a <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8105f26:	f015 fd7c 	bl	811ba22 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8105f2a:	f015 fd77 	bl	811ba1c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8105f2e:	68bb      	ldr	r3, [r7, #8]
 8105f30:	009b      	lsls	r3, r3, #2
 8105f32:	4618      	mov	r0, r3
 8105f34:	f015 fca4 	bl	811b880 <_Znwj>
 8105f38:	4603      	mov	r3, r0
      }
 8105f3a:	4618      	mov	r0, r3
 8105f3c:	3710      	adds	r7, #16
 8105f3e:	46bd      	mov	sp, r7
 8105f40:	bd80      	pop	{r7, pc}

08105f42 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8105f42:	b5b0      	push	{r4, r5, r7, lr}
 8105f44:	b084      	sub	sp, #16
 8105f46:	af00      	add	r7, sp, #0
 8105f48:	60f8      	str	r0, [r7, #12]
 8105f4a:	60b9      	str	r1, [r7, #8]
 8105f4c:	607a      	str	r2, [r7, #4]
 8105f4e:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 8105f50:	68f8      	ldr	r0, [r7, #12]
 8105f52:	f000 fa40 	bl	81063d6 <_ZSt12__niter_baseIPfET_S1_>
 8105f56:	4604      	mov	r4, r0
 8105f58:	68b8      	ldr	r0, [r7, #8]
 8105f5a:	f000 fa3c 	bl	81063d6 <_ZSt12__niter_baseIPfET_S1_>
 8105f5e:	4605      	mov	r5, r0
 8105f60:	6878      	ldr	r0, [r7, #4]
 8105f62:	f000 fa38 	bl	81063d6 <_ZSt12__niter_baseIPfET_S1_>
 8105f66:	4602      	mov	r2, r0
 8105f68:	683b      	ldr	r3, [r7, #0]
 8105f6a:	4629      	mov	r1, r5
 8105f6c:	4620      	mov	r0, r4
 8105f6e:	f000 fa3d 	bl	81063ec <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8105f72:	4603      	mov	r3, r0
    }
 8105f74:	4618      	mov	r0, r3
 8105f76:	3710      	adds	r7, #16
 8105f78:	46bd      	mov	sp, r7
 8105f7a:	bdb0      	pop	{r4, r5, r7, pc}

08105f7c <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8105f7c:	b480      	push	{r7}
 8105f7e:	b083      	sub	sp, #12
 8105f80:	af00      	add	r7, sp, #0
 8105f82:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8105f84:	687b      	ldr	r3, [r7, #4]
 8105f86:	4618      	mov	r0, r3
 8105f88:	370c      	adds	r7, #12
 8105f8a:	46bd      	mov	sp, r7
 8105f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f90:	4770      	bx	lr

08105f92 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8105f92:	b580      	push	{r7, lr}
 8105f94:	b086      	sub	sp, #24
 8105f96:	af00      	add	r7, sp, #0
 8105f98:	60f8      	str	r0, [r7, #12]
 8105f9a:	60b9      	str	r1, [r7, #8]
 8105f9c:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8105f9e:	2301      	movs	r3, #1
 8105fa0:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8105fa2:	2301      	movs	r3, #1
 8105fa4:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8105fa6:	687a      	ldr	r2, [r7, #4]
 8105fa8:	68b9      	ldr	r1, [r7, #8]
 8105faa:	68f8      	ldr	r0, [r7, #12]
 8105fac:	f000 fa3c 	bl	8106428 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8105fb0:	4603      	mov	r3, r0
    }
 8105fb2:	4618      	mov	r0, r3
 8105fb4:	3718      	adds	r7, #24
 8105fb6:	46bd      	mov	sp, r7
 8105fb8:	bd80      	pop	{r7, pc}

08105fba <_ZNSt15__new_allocatorIfEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8105fba:	b480      	push	{r7}
 8105fbc:	b083      	sub	sp, #12
 8105fbe:	af00      	add	r7, sp, #0
 8105fc0:	6078      	str	r0, [r7, #4]
 8105fc2:	6039      	str	r1, [r7, #0]
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	4618      	mov	r0, r3
 8105fc8:	370c      	adds	r7, #12
 8105fca:	46bd      	mov	sp, r7
 8105fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fd0:	4770      	bx	lr

08105fd2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8105fd2:	b580      	push	{r7, lr}
 8105fd4:	b084      	sub	sp, #16
 8105fd6:	af00      	add	r7, sp, #0
 8105fd8:	60f8      	str	r0, [r7, #12]
 8105fda:	60b9      	str	r1, [r7, #8]
 8105fdc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8105fde:	687a      	ldr	r2, [r7, #4]
 8105fe0:	68b9      	ldr	r1, [r7, #8]
 8105fe2:	68f8      	ldr	r0, [r7, #12]
 8105fe4:	f000 fa30 	bl	8106448 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8105fe8:	4603      	mov	r3, r0
 8105fea:	4618      	mov	r0, r3
 8105fec:	3710      	adds	r7, #16
 8105fee:	46bd      	mov	sp, r7
 8105ff0:	bd80      	pop	{r7, pc}

08105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8105ff2:	b480      	push	{r7}
 8105ff4:	b083      	sub	sp, #12
 8105ff6:	af00      	add	r7, sp, #0
 8105ff8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	4618      	mov	r0, r3
 8105ffe:	370c      	adds	r7, #12
 8106000:	46bd      	mov	sp, r7
 8106002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106006:	4770      	bx	lr

08106008 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8106008:	b590      	push	{r4, r7, lr}
 810600a:	b085      	sub	sp, #20
 810600c:	af00      	add	r7, sp, #0
 810600e:	60f8      	str	r0, [r7, #12]
 8106010:	60b9      	str	r1, [r7, #8]
 8106012:	607a      	str	r2, [r7, #4]
 8106014:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8106016:	4623      	mov	r3, r4
 8106018:	687a      	ldr	r2, [r7, #4]
 810601a:	68b9      	ldr	r1, [r7, #8]
 810601c:	68f8      	ldr	r0, [r7, #12]
 810601e:	f000 fa2b 	bl	8106478 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 8106022:	463b      	mov	r3, r7
 8106024:	461a      	mov	r2, r3
 8106026:	68b9      	ldr	r1, [r7, #8]
 8106028:	68f8      	ldr	r0, [r7, #12]
 810602a:	f000 fa58 	bl	81064de <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 810602e:	bf00      	nop
 8106030:	3714      	adds	r7, #20
 8106032:	46bd      	mov	sp, r7
 8106034:	bd90      	pop	{r4, r7, pc}

08106036 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8106036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8106038:	b089      	sub	sp, #36	@ 0x24
 810603a:	af02      	add	r7, sp, #8
 810603c:	60f8      	str	r0, [r7, #12]
 810603e:	60b9      	str	r1, [r7, #8]
 8106040:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8106042:	f107 020c 	add.w	r2, r7, #12
 8106046:	f107 0308 	add.w	r3, r7, #8
 810604a:	4611      	mov	r1, r2
 810604c:	4618      	mov	r0, r3
 810604e:	f7ff fce3 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8106052:	4603      	mov	r3, r0
 8106054:	0fda      	lsrs	r2, r3, #31
 8106056:	4413      	add	r3, r2
 8106058:	105b      	asrs	r3, r3, #1
 810605a:	461a      	mov	r2, r3
 810605c:	f107 030c 	add.w	r3, r7, #12
 8106060:	4611      	mov	r1, r2
 8106062:	4618      	mov	r0, r3
 8106064:	f7ff f885 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106068:	4603      	mov	r3, r0
 810606a:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 810606c:	f107 030c 	add.w	r3, r7, #12
 8106070:	2101      	movs	r1, #1
 8106072:	4618      	mov	r0, r3
 8106074:	f7ff f87d 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106078:	4604      	mov	r4, r0
 810607a:	f107 0308 	add.w	r3, r7, #8
 810607e:	2101      	movs	r1, #1
 8106080:	4618      	mov	r0, r3
 8106082:	f7ff fe87 	bl	8105d94 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 8106086:	4603      	mov	r3, r0
 8106088:	f88d 5000 	strb.w	r5, [sp]
 810608c:	697a      	ldr	r2, [r7, #20]
 810608e:	4621      	mov	r1, r4
 8106090:	68f8      	ldr	r0, [r7, #12]
 8106092:	f000 fa4b 	bl	810652c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8106096:	f107 030c 	add.w	r3, r7, #12
 810609a:	2101      	movs	r1, #1
 810609c:	4618      	mov	r0, r3
 810609e:	f7ff f868 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81060a2:	4633      	mov	r3, r6
 81060a4:	68fa      	ldr	r2, [r7, #12]
 81060a6:	68b9      	ldr	r1, [r7, #8]
 81060a8:	f000 fa95 	bl	81065d6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 81060ac:	4603      	mov	r3, r0
    }
 81060ae:	4618      	mov	r0, r3
 81060b0:	371c      	adds	r7, #28
 81060b2:	46bd      	mov	sp, r7
 81060b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

081060b6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 81060b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 81060b8:	b087      	sub	sp, #28
 81060ba:	af00      	add	r7, sp, #0
 81060bc:	60f8      	str	r0, [r7, #12]
 81060be:	60b9      	str	r1, [r7, #8]
 81060c0:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 81060c2:	f107 0208 	add.w	r2, r7, #8
 81060c6:	f107 030c 	add.w	r3, r7, #12
 81060ca:	4611      	mov	r1, r2
 81060cc:	4618      	mov	r0, r3
 81060ce:	f7ff fe01 	bl	8105cd4 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81060d2:	4603      	mov	r3, r0
 81060d4:	2b00      	cmp	r3, #0
 81060d6:	d150      	bne.n	810617a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc4>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 81060d8:	f107 030c 	add.w	r3, r7, #12
 81060dc:	2101      	movs	r1, #1
 81060de:	4618      	mov	r0, r3
 81060e0:	f7ff f847 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81060e4:	4603      	mov	r3, r0
 81060e6:	617b      	str	r3, [r7, #20]
 81060e8:	e03b      	b.n	8106162 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 81060ea:	1d3b      	adds	r3, r7, #4
 81060ec:	68fa      	ldr	r2, [r7, #12]
 81060ee:	6979      	ldr	r1, [r7, #20]
 81060f0:	4618      	mov	r0, r3
 81060f2:	f000 fab8 	bl	8106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81060f6:	4603      	mov	r3, r0
 81060f8:	2b00      	cmp	r3, #0
 81060fa:	d026      	beq.n	810614a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 81060fc:	f107 0314 	add.w	r3, r7, #20
 8106100:	4618      	mov	r0, r3
 8106102:	f7ff fe23 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106106:	4603      	mov	r3, r0
 8106108:	4618      	mov	r0, r3
 810610a:	f7ff f9c7 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810610e:	4603      	mov	r3, r0
 8106110:	681b      	ldr	r3, [r3, #0]
 8106112:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8106114:	f107 0314 	add.w	r3, r7, #20
 8106118:	2101      	movs	r1, #1
 810611a:	4618      	mov	r0, r3
 810611c:	f7ff f829 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106120:	4603      	mov	r3, r0
 8106122:	461a      	mov	r2, r3
 8106124:	6979      	ldr	r1, [r7, #20]
 8106126:	68f8      	ldr	r0, [r7, #12]
 8106128:	f7ff fe93 	bl	8105e52 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 810612c:	f107 0310 	add.w	r3, r7, #16
 8106130:	4618      	mov	r0, r3
 8106132:	f7ff f9b3 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106136:	4604      	mov	r4, r0
 8106138:	f107 030c 	add.w	r3, r7, #12
 810613c:	4618      	mov	r0, r3
 810613e:	f7ff fe05 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106142:	4602      	mov	r2, r0
 8106144:	6823      	ldr	r3, [r4, #0]
 8106146:	6013      	str	r3, [r2, #0]
 8106148:	e006      	b.n	8106158 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 810614a:	4630      	mov	r0, r6
 810614c:	f7fe fc65 	bl	8104a1a <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 8106150:	4629      	mov	r1, r5
 8106152:	6978      	ldr	r0, [r7, #20]
 8106154:	f000 faac 	bl	81066b0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8106158:	f107 0314 	add.w	r3, r7, #20
 810615c:	4618      	mov	r0, r3
 810615e:	f7ff fe49 	bl	8105df4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8106162:	f107 0208 	add.w	r2, r7, #8
 8106166:	f107 0314 	add.w	r3, r7, #20
 810616a:	4611      	mov	r1, r2
 810616c:	4618      	mov	r0, r3
 810616e:	f7ff fc3b 	bl	81059e8 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8106172:	4603      	mov	r3, r0
 8106174:	2b00      	cmp	r3, #0
 8106176:	d1b8      	bne.n	81060ea <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 8106178:	e000      	b.n	810617c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc6>
      if (__first == __last) return;
 810617a:	bf00      	nop
    }
 810617c:	371c      	adds	r7, #28
 810617e:	46bd      	mov	sp, r7
 8106180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08106182 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8106182:	b5b0      	push	{r4, r5, r7, lr}
 8106184:	b086      	sub	sp, #24
 8106186:	af00      	add	r7, sp, #0
 8106188:	60f8      	str	r0, [r7, #12]
 810618a:	60b9      	str	r1, [r7, #8]
 810618c:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 810618e:	68fb      	ldr	r3, [r7, #12]
 8106190:	617b      	str	r3, [r7, #20]
 8106192:	e00b      	b.n	81061ac <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 8106194:	4628      	mov	r0, r5
 8106196:	f7fe fc40 	bl	8104a1a <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 810619a:	4621      	mov	r1, r4
 810619c:	6978      	ldr	r0, [r7, #20]
 810619e:	f000 fa87 	bl	81066b0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 81061a2:	f107 0314 	add.w	r3, r7, #20
 81061a6:	4618      	mov	r0, r3
 81061a8:	f7ff fe24 	bl	8105df4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 81061ac:	f107 0208 	add.w	r2, r7, #8
 81061b0:	f107 0314 	add.w	r3, r7, #20
 81061b4:	4611      	mov	r1, r2
 81061b6:	4618      	mov	r0, r3
 81061b8:	f7ff fc16 	bl	81059e8 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81061bc:	4603      	mov	r3, r0
 81061be:	2b00      	cmp	r3, #0
 81061c0:	d1e8      	bne.n	8106194 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 81061c2:	bf00      	nop
 81061c4:	bf00      	nop
 81061c6:	3718      	adds	r7, #24
 81061c8:	46bd      	mov	sp, r7
 81061ca:	bdb0      	pop	{r4, r5, r7, pc}

081061cc <_ZNSt15__new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 81061cc:	b590      	push	{r4, r7, lr}
 81061ce:	b085      	sub	sp, #20
 81061d0:	af00      	add	r7, sp, #0
 81061d2:	60f8      	str	r0, [r7, #12]
 81061d4:	60b9      	str	r1, [r7, #8]
 81061d6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81061d8:	68bb      	ldr	r3, [r7, #8]
 81061da:	4619      	mov	r1, r3
 81061dc:	2004      	movs	r0, #4
 81061de:	f7fa fdd1 	bl	8100d84 <_ZnwjPv>
 81061e2:	4604      	mov	r4, r0
 81061e4:	6878      	ldr	r0, [r7, #4]
 81061e6:	f7ff fc9b 	bl	8105b20 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 81061ea:	4603      	mov	r3, r0
 81061ec:	681b      	ldr	r3, [r3, #0]
 81061ee:	6023      	str	r3, [r4, #0]
 81061f0:	bf00      	nop
 81061f2:	3714      	adds	r7, #20
 81061f4:	46bd      	mov	sp, r7
 81061f6:	bd90      	pop	{r4, r7, pc}

081061f8 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 81061f8:	b590      	push	{r4, r7, lr}
 81061fa:	b087      	sub	sp, #28
 81061fc:	af00      	add	r7, sp, #0
 81061fe:	60f8      	str	r0, [r7, #12]
 8106200:	60b9      	str	r1, [r7, #8]
 8106202:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8106204:	68f8      	ldr	r0, [r7, #12]
 8106206:	f7ff f839 	bl	810527c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810620a:	4604      	mov	r4, r0
 810620c:	68f8      	ldr	r0, [r7, #12]
 810620e:	f7fe ff11 	bl	8105034 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8106212:	4603      	mov	r3, r0
 8106214:	1ae2      	subs	r2, r4, r3
 8106216:	68bb      	ldr	r3, [r7, #8]
 8106218:	429a      	cmp	r2, r3
 810621a:	bf34      	ite	cc
 810621c:	2301      	movcc	r3, #1
 810621e:	2300      	movcs	r3, #0
 8106220:	b2db      	uxtb	r3, r3
 8106222:	2b00      	cmp	r3, #0
 8106224:	d002      	beq.n	810622c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8106226:	6878      	ldr	r0, [r7, #4]
 8106228:	f015 fbfe 	bl	811ba28 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 810622c:	68f8      	ldr	r0, [r7, #12]
 810622e:	f7fe ff01 	bl	8105034 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8106232:	4604      	mov	r4, r0
 8106234:	68f8      	ldr	r0, [r7, #12]
 8106236:	f7fe fefd 	bl	8105034 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810623a:	4603      	mov	r3, r0
 810623c:	613b      	str	r3, [r7, #16]
 810623e:	f107 0208 	add.w	r2, r7, #8
 8106242:	f107 0310 	add.w	r3, r7, #16
 8106246:	4611      	mov	r1, r2
 8106248:	4618      	mov	r0, r3
 810624a:	f7fc fc77 	bl	8102b3c <_ZSt3maxIjERKT_S2_S2_>
 810624e:	4603      	mov	r3, r0
 8106250:	681b      	ldr	r3, [r3, #0]
 8106252:	4423      	add	r3, r4
 8106254:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8106256:	68f8      	ldr	r0, [r7, #12]
 8106258:	f7fe feec 	bl	8105034 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810625c:	4602      	mov	r2, r0
 810625e:	697b      	ldr	r3, [r7, #20]
 8106260:	4293      	cmp	r3, r2
 8106262:	d306      	bcc.n	8106272 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 8106264:	68f8      	ldr	r0, [r7, #12]
 8106266:	f7ff f809 	bl	810527c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810626a:	4602      	mov	r2, r0
 810626c:	697b      	ldr	r3, [r7, #20]
 810626e:	4293      	cmp	r3, r2
 8106270:	d904      	bls.n	810627c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 8106272:	68f8      	ldr	r0, [r7, #12]
 8106274:	f7ff f802 	bl	810527c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8106278:	4603      	mov	r3, r0
 810627a:	e000      	b.n	810627e <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 810627c:	697b      	ldr	r3, [r7, #20]
      }
 810627e:	4618      	mov	r0, r3
 8106280:	371c      	adds	r7, #28
 8106282:	46bd      	mov	sp, r7
 8106284:	bd90      	pop	{r4, r7, pc}

08106286 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8106286:	b590      	push	{r4, r7, lr}
 8106288:	b085      	sub	sp, #20
 810628a:	af00      	add	r7, sp, #0
 810628c:	60f8      	str	r0, [r7, #12]
 810628e:	60b9      	str	r1, [r7, #8]
 8106290:	607a      	str	r2, [r7, #4]
 8106292:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8106294:	68f8      	ldr	r0, [r7, #12]
 8106296:	f7ff f83a 	bl	810530e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 810629a:	4604      	mov	r4, r0
 810629c:	68b8      	ldr	r0, [r7, #8]
 810629e:	f7ff f836 	bl	810530e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 81062a2:	4601      	mov	r1, r0
 81062a4:	683b      	ldr	r3, [r7, #0]
 81062a6:	687a      	ldr	r2, [r7, #4]
 81062a8:	4620      	mov	r0, r4
 81062aa:	f7ff fb20 	bl	81058ee <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 81062ae:	4603      	mov	r3, r0
    }
 81062b0:	4618      	mov	r0, r3
 81062b2:	3714      	adds	r7, #20
 81062b4:	46bd      	mov	sp, r7
 81062b6:	bd90      	pop	{r4, r7, pc}

081062b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 81062b8:	b480      	push	{r7}
 81062ba:	b083      	sub	sp, #12
 81062bc:	af00      	add	r7, sp, #0
 81062be:	6078      	str	r0, [r7, #4]
    { return __it; }
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	4618      	mov	r0, r3
 81062c4:	370c      	adds	r7, #12
 81062c6:	46bd      	mov	sp, r7
 81062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062cc:	4770      	bx	lr

081062ce <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 81062ce:	b5b0      	push	{r4, r5, r7, lr}
 81062d0:	b084      	sub	sp, #16
 81062d2:	af00      	add	r7, sp, #0
 81062d4:	60f8      	str	r0, [r7, #12]
 81062d6:	60b9      	str	r1, [r7, #8]
 81062d8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 81062da:	68f8      	ldr	r0, [r7, #12]
 81062dc:	f000 fa33 	bl	8106746 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81062e0:	4604      	mov	r4, r0
 81062e2:	68b8      	ldr	r0, [r7, #8]
 81062e4:	f000 fa2f 	bl	8106746 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81062e8:	4605      	mov	r5, r0
 81062ea:	6878      	ldr	r0, [r7, #4]
 81062ec:	f000 fa2b 	bl	8106746 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81062f0:	4603      	mov	r3, r0
 81062f2:	461a      	mov	r2, r3
 81062f4:	4629      	mov	r1, r5
 81062f6:	4620      	mov	r0, r4
 81062f8:	f000 fa33 	bl	8106762 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 81062fc:	4603      	mov	r3, r0
 81062fe:	4619      	mov	r1, r3
 8106300:	6878      	ldr	r0, [r7, #4]
 8106302:	f000 fa3e 	bl	8106782 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 8106306:	4603      	mov	r3, r0
    }
 8106308:	4618      	mov	r0, r3
 810630a:	3710      	adds	r7, #16
 810630c:	46bd      	mov	sp, r7
 810630e:	bdb0      	pop	{r4, r5, r7, pc}

08106310 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8106310:	b580      	push	{r7, lr}
 8106312:	b084      	sub	sp, #16
 8106314:	af00      	add	r7, sp, #0
 8106316:	6078      	str	r0, [r7, #4]
 8106318:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810631a:	6878      	ldr	r0, [r7, #4]
 810631c:	f7ff f8be 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106320:	4603      	mov	r3, r0
 8106322:	681b      	ldr	r3, [r3, #0]
 8106324:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8106326:	6838      	ldr	r0, [r7, #0]
 8106328:	f7ff f8b8 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810632c:	4603      	mov	r3, r0
 810632e:	681a      	ldr	r2, [r3, #0]
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8106334:	f107 030c 	add.w	r3, r7, #12
 8106338:	4618      	mov	r0, r3
 810633a:	f7ff f8af 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810633e:	4603      	mov	r3, r0
 8106340:	681a      	ldr	r2, [r3, #0]
 8106342:	683b      	ldr	r3, [r7, #0]
 8106344:	601a      	str	r2, [r3, #0]
    }
 8106346:	bf00      	nop
 8106348:	3710      	adds	r7, #16
 810634a:	46bd      	mov	sp, r7
 810634c:	bd80      	pop	{r7, pc}

0810634e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 810634e:	b480      	push	{r7}
 8106350:	b083      	sub	sp, #12
 8106352:	af00      	add	r7, sp, #0
 8106354:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	4618      	mov	r0, r3
 810635a:	370c      	adds	r7, #12
 810635c:	46bd      	mov	sp, r7
 810635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106362:	4770      	bx	lr

08106364 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8106364:	b5b0      	push	{r4, r5, r7, lr}
 8106366:	b084      	sub	sp, #16
 8106368:	af00      	add	r7, sp, #0
 810636a:	60f8      	str	r0, [r7, #12]
 810636c:	60b9      	str	r1, [r7, #8]
 810636e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8106370:	68f8      	ldr	r0, [r7, #12]
 8106372:	f000 f9e8 	bl	8106746 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8106376:	4604      	mov	r4, r0
 8106378:	68b8      	ldr	r0, [r7, #8]
 810637a:	f000 f9e4 	bl	8106746 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810637e:	4605      	mov	r5, r0
 8106380:	6878      	ldr	r0, [r7, #4]
 8106382:	f000 f9e0 	bl	8106746 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8106386:	4603      	mov	r3, r0
 8106388:	461a      	mov	r2, r3
 810638a:	4629      	mov	r1, r5
 810638c:	4620      	mov	r0, r4
 810638e:	f000 fa0f 	bl	81067b0 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 8106392:	4603      	mov	r3, r0
 8106394:	4619      	mov	r1, r3
 8106396:	6878      	ldr	r0, [r7, #4]
 8106398:	f000 f9f3 	bl	8106782 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 810639c:	4603      	mov	r3, r0
    }
 810639e:	4618      	mov	r0, r3
 81063a0:	3710      	adds	r7, #16
 81063a2:	46bd      	mov	sp, r7
 81063a4:	bdb0      	pop	{r4, r5, r7, pc}

081063a6 <_ZNKSt15__new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 81063a6:	b580      	push	{r7, lr}
 81063a8:	b082      	sub	sp, #8
 81063aa:	af00      	add	r7, sp, #0
 81063ac:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 81063ae:	6878      	ldr	r0, [r7, #4]
 81063b0:	f000 f805 	bl	81063be <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 81063b4:	4603      	mov	r3, r0
 81063b6:	4618      	mov	r0, r3
 81063b8:	3708      	adds	r7, #8
 81063ba:	46bd      	mov	sp, r7
 81063bc:	bd80      	pop	{r7, pc}

081063be <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81063be:	b480      	push	{r7}
 81063c0:	b083      	sub	sp, #12
 81063c2:	af00      	add	r7, sp, #0
 81063c4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81063c6:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 81063ca:	4618      	mov	r0, r3
 81063cc:	370c      	adds	r7, #12
 81063ce:	46bd      	mov	sp, r7
 81063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063d4:	4770      	bx	lr

081063d6 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 81063d6:	b480      	push	{r7}
 81063d8:	b083      	sub	sp, #12
 81063da:	af00      	add	r7, sp, #0
 81063dc:	6078      	str	r0, [r7, #4]
    { return __it; }
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	4618      	mov	r0, r3
 81063e2:	370c      	adds	r7, #12
 81063e4:	46bd      	mov	sp, r7
 81063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063ea:	4770      	bx	lr

081063ec <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 81063ec:	b580      	push	{r7, lr}
 81063ee:	b086      	sub	sp, #24
 81063f0:	af00      	add	r7, sp, #0
 81063f2:	60f8      	str	r0, [r7, #12]
 81063f4:	60b9      	str	r1, [r7, #8]
 81063f6:	607a      	str	r2, [r7, #4]
 81063f8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 81063fa:	68ba      	ldr	r2, [r7, #8]
 81063fc:	68fb      	ldr	r3, [r7, #12]
 81063fe:	1ad3      	subs	r3, r2, r3
 8106400:	109b      	asrs	r3, r3, #2
 8106402:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8106404:	697b      	ldr	r3, [r7, #20]
 8106406:	2b00      	cmp	r3, #0
 8106408:	dd06      	ble.n	8106418 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 810640a:	697b      	ldr	r3, [r7, #20]
 810640c:	009b      	lsls	r3, r3, #2
 810640e:	461a      	mov	r2, r3
 8106410:	68f9      	ldr	r1, [r7, #12]
 8106412:	6878      	ldr	r0, [r7, #4]
 8106414:	f015 fd67 	bl	811bee6 <memmove>
      return __result + __count;
 8106418:	697b      	ldr	r3, [r7, #20]
 810641a:	009b      	lsls	r3, r3, #2
 810641c:	687a      	ldr	r2, [r7, #4]
 810641e:	4413      	add	r3, r2
    }
 8106420:	4618      	mov	r0, r3
 8106422:	3718      	adds	r7, #24
 8106424:	46bd      	mov	sp, r7
 8106426:	bd80      	pop	{r7, pc}

08106428 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8106428:	b580      	push	{r7, lr}
 810642a:	b084      	sub	sp, #16
 810642c:	af00      	add	r7, sp, #0
 810642e:	60f8      	str	r0, [r7, #12]
 8106430:	60b9      	str	r1, [r7, #8]
 8106432:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8106434:	687a      	ldr	r2, [r7, #4]
 8106436:	68b9      	ldr	r1, [r7, #8]
 8106438:	68f8      	ldr	r0, [r7, #12]
 810643a:	f000 f9c9 	bl	81067d0 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 810643e:	4603      	mov	r3, r0
 8106440:	4618      	mov	r0, r3
 8106442:	3710      	adds	r7, #16
 8106444:	46bd      	mov	sp, r7
 8106446:	bd80      	pop	{r7, pc}

08106448 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8106448:	b590      	push	{r4, r7, lr}
 810644a:	b085      	sub	sp, #20
 810644c:	af00      	add	r7, sp, #0
 810644e:	60f8      	str	r0, [r7, #12]
 8106450:	60b9      	str	r1, [r7, #8]
 8106452:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8106454:	68f8      	ldr	r0, [r7, #12]
 8106456:	f000 f9d3 	bl	8106800 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 810645a:	4604      	mov	r4, r0
 810645c:	68b8      	ldr	r0, [r7, #8]
 810645e:	f000 f9cf 	bl	8106800 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8106462:	4603      	mov	r3, r0
 8106464:	687a      	ldr	r2, [r7, #4]
 8106466:	4619      	mov	r1, r3
 8106468:	4620      	mov	r0, r4
 810646a:	f000 f9d4 	bl	8106816 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 810646e:	4603      	mov	r3, r0
    }
 8106470:	4618      	mov	r0, r3
 8106472:	3714      	adds	r7, #20
 8106474:	46bd      	mov	sp, r7
 8106476:	bd90      	pop	{r4, r7, pc}

08106478 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8106478:	b580      	push	{r7, lr}
 810647a:	b086      	sub	sp, #24
 810647c:	af00      	add	r7, sp, #0
 810647e:	60f8      	str	r0, [r7, #12]
 8106480:	60b9      	str	r1, [r7, #8]
 8106482:	607a      	str	r2, [r7, #4]
 8106484:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8106486:	463b      	mov	r3, r7
 8106488:	461a      	mov	r2, r3
 810648a:	68b9      	ldr	r1, [r7, #8]
 810648c:	68f8      	ldr	r0, [r7, #12]
 810648e:	f000 f9e5 	bl	810685c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8106492:	68bb      	ldr	r3, [r7, #8]
 8106494:	617b      	str	r3, [r7, #20]
 8106496:	e013      	b.n	81064c0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 8106498:	463b      	mov	r3, r7
 810649a:	68fa      	ldr	r2, [r7, #12]
 810649c:	6979      	ldr	r1, [r7, #20]
 810649e:	4618      	mov	r0, r3
 81064a0:	f000 f8e1 	bl	8106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81064a4:	4603      	mov	r3, r0
 81064a6:	2b00      	cmp	r3, #0
 81064a8:	d005      	beq.n	81064b6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 81064aa:	463b      	mov	r3, r7
 81064ac:	697a      	ldr	r2, [r7, #20]
 81064ae:	68b9      	ldr	r1, [r7, #8]
 81064b0:	68f8      	ldr	r0, [r7, #12]
 81064b2:	f000 fa41 	bl	8106938 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 81064b6:	f107 0314 	add.w	r3, r7, #20
 81064ba:	4618      	mov	r0, r3
 81064bc:	f7ff fc9a 	bl	8105df4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 81064c0:	1d3a      	adds	r2, r7, #4
 81064c2:	f107 0314 	add.w	r3, r7, #20
 81064c6:	4611      	mov	r1, r2
 81064c8:	4618      	mov	r0, r3
 81064ca:	f000 fa1d 	bl	8106908 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81064ce:	4603      	mov	r3, r0
 81064d0:	2b00      	cmp	r3, #0
 81064d2:	d1e1      	bne.n	8106498 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 81064d4:	bf00      	nop
 81064d6:	bf00      	nop
 81064d8:	3718      	adds	r7, #24
 81064da:	46bd      	mov	sp, r7
 81064dc:	bd80      	pop	{r7, pc}

081064de <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 81064de:	b580      	push	{r7, lr}
 81064e0:	b084      	sub	sp, #16
 81064e2:	af00      	add	r7, sp, #0
 81064e4:	60f8      	str	r0, [r7, #12]
 81064e6:	60b9      	str	r1, [r7, #8]
 81064e8:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 81064ea:	e00a      	b.n	8106502 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 81064ec:	f107 0308 	add.w	r3, r7, #8
 81064f0:	4618      	mov	r0, r3
 81064f2:	f7ff fcc6 	bl	8105e82 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	68ba      	ldr	r2, [r7, #8]
 81064fa:	68b9      	ldr	r1, [r7, #8]
 81064fc:	68f8      	ldr	r0, [r7, #12]
 81064fe:	f000 fa1b 	bl	8106938 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 8106502:	f107 020c 	add.w	r2, r7, #12
 8106506:	f107 0308 	add.w	r3, r7, #8
 810650a:	4611      	mov	r1, r2
 810650c:	4618      	mov	r0, r3
 810650e:	f7ff fa83 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8106512:	4603      	mov	r3, r0
 8106514:	2b01      	cmp	r3, #1
 8106516:	bfcc      	ite	gt
 8106518:	2301      	movgt	r3, #1
 810651a:	2300      	movle	r3, #0
 810651c:	b2db      	uxtb	r3, r3
 810651e:	2b00      	cmp	r3, #0
 8106520:	d1e4      	bne.n	81064ec <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 8106522:	bf00      	nop
 8106524:	bf00      	nop
 8106526:	3710      	adds	r7, #16
 8106528:	46bd      	mov	sp, r7
 810652a:	bd80      	pop	{r7, pc}

0810652c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 810652c:	b580      	push	{r7, lr}
 810652e:	b084      	sub	sp, #16
 8106530:	af00      	add	r7, sp, #0
 8106532:	60f8      	str	r0, [r7, #12]
 8106534:	60b9      	str	r1, [r7, #8]
 8106536:	607a      	str	r2, [r7, #4]
 8106538:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 810653a:	687a      	ldr	r2, [r7, #4]
 810653c:	68b9      	ldr	r1, [r7, #8]
 810653e:	f107 0018 	add.w	r0, r7, #24
 8106542:	f000 f890 	bl	8106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8106546:	4603      	mov	r3, r0
 8106548:	2b00      	cmp	r3, #0
 810654a:	d020      	beq.n	810658e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 810654c:	683a      	ldr	r2, [r7, #0]
 810654e:	6879      	ldr	r1, [r7, #4]
 8106550:	f107 0018 	add.w	r0, r7, #24
 8106554:	f000 f887 	bl	8106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8106558:	4603      	mov	r3, r0
 810655a:	2b00      	cmp	r3, #0
 810655c:	d004      	beq.n	8106568 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 810655e:	6879      	ldr	r1, [r7, #4]
 8106560:	68f8      	ldr	r0, [r7, #12]
 8106562:	f7ff fc30 	bl	8105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 8106566:	e032      	b.n	81065ce <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 8106568:	683a      	ldr	r2, [r7, #0]
 810656a:	68b9      	ldr	r1, [r7, #8]
 810656c:	f107 0018 	add.w	r0, r7, #24
 8106570:	f000 f879 	bl	8106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8106574:	4603      	mov	r3, r0
 8106576:	2b00      	cmp	r3, #0
 8106578:	d004      	beq.n	8106584 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 810657a:	6839      	ldr	r1, [r7, #0]
 810657c:	68f8      	ldr	r0, [r7, #12]
 810657e:	f7ff fc22 	bl	8105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 8106582:	e024      	b.n	81065ce <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8106584:	68b9      	ldr	r1, [r7, #8]
 8106586:	68f8      	ldr	r0, [r7, #12]
 8106588:	f7ff fc1d 	bl	8105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810658c:	e01f      	b.n	81065ce <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 810658e:	683a      	ldr	r2, [r7, #0]
 8106590:	68b9      	ldr	r1, [r7, #8]
 8106592:	f107 0018 	add.w	r0, r7, #24
 8106596:	f000 f866 	bl	8106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810659a:	4603      	mov	r3, r0
 810659c:	2b00      	cmp	r3, #0
 810659e:	d004      	beq.n	81065aa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 81065a0:	68b9      	ldr	r1, [r7, #8]
 81065a2:	68f8      	ldr	r0, [r7, #12]
 81065a4:	f7ff fc0f 	bl	8105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81065a8:	e011      	b.n	81065ce <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 81065aa:	683a      	ldr	r2, [r7, #0]
 81065ac:	6879      	ldr	r1, [r7, #4]
 81065ae:	f107 0018 	add.w	r0, r7, #24
 81065b2:	f000 f858 	bl	8106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81065b6:	4603      	mov	r3, r0
 81065b8:	2b00      	cmp	r3, #0
 81065ba:	d004      	beq.n	81065c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 81065bc:	6839      	ldr	r1, [r7, #0]
 81065be:	68f8      	ldr	r0, [r7, #12]
 81065c0:	f7ff fc01 	bl	8105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81065c4:	e003      	b.n	81065ce <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 81065c6:	6879      	ldr	r1, [r7, #4]
 81065c8:	68f8      	ldr	r0, [r7, #12]
 81065ca:	f7ff fbfc 	bl	8105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81065ce:	bf00      	nop
 81065d0:	3710      	adds	r7, #16
 81065d2:	46bd      	mov	sp, r7
 81065d4:	bd80      	pop	{r7, pc}

081065d6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 81065d6:	b580      	push	{r7, lr}
 81065d8:	b084      	sub	sp, #16
 81065da:	af00      	add	r7, sp, #0
 81065dc:	60f8      	str	r0, [r7, #12]
 81065de:	60b9      	str	r1, [r7, #8]
 81065e0:	607a      	str	r2, [r7, #4]
 81065e2:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 81065e4:	e004      	b.n	81065f0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 81065e6:	f107 030c 	add.w	r3, r7, #12
 81065ea:	4618      	mov	r0, r3
 81065ec:	f7ff fc02 	bl	8105df4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 81065f0:	463b      	mov	r3, r7
 81065f2:	687a      	ldr	r2, [r7, #4]
 81065f4:	68f9      	ldr	r1, [r7, #12]
 81065f6:	4618      	mov	r0, r3
 81065f8:	f000 f835 	bl	8106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81065fc:	4603      	mov	r3, r0
 81065fe:	2b00      	cmp	r3, #0
 8106600:	d1f1      	bne.n	81065e6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 8106602:	f107 0308 	add.w	r3, r7, #8
 8106606:	4618      	mov	r0, r3
 8106608:	f7ff fc3b 	bl	8105e82 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 810660c:	e004      	b.n	8106618 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 810660e:	f107 0308 	add.w	r3, r7, #8
 8106612:	4618      	mov	r0, r3
 8106614:	f7ff fc35 	bl	8105e82 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8106618:	463b      	mov	r3, r7
 810661a:	68ba      	ldr	r2, [r7, #8]
 810661c:	6879      	ldr	r1, [r7, #4]
 810661e:	4618      	mov	r0, r3
 8106620:	f000 f821 	bl	8106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8106624:	4603      	mov	r3, r0
 8106626:	2b00      	cmp	r3, #0
 8106628:	d1f1      	bne.n	810660e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 810662a:	f107 0208 	add.w	r2, r7, #8
 810662e:	f107 030c 	add.w	r3, r7, #12
 8106632:	4611      	mov	r1, r2
 8106634:	4618      	mov	r0, r3
 8106636:	f000 f967 	bl	8106908 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810663a:	4603      	mov	r3, r0
 810663c:	f083 0301 	eor.w	r3, r3, #1
 8106640:	b2db      	uxtb	r3, r3
 8106642:	2b00      	cmp	r3, #0
 8106644:	d001      	beq.n	810664a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x74>
	    return __first;
 8106646:	68fb      	ldr	r3, [r7, #12]
 8106648:	e009      	b.n	810665e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x88>
	  std::iter_swap(__first, __last);
 810664a:	68b9      	ldr	r1, [r7, #8]
 810664c:	68f8      	ldr	r0, [r7, #12]
 810664e:	f7ff fbba 	bl	8105dc6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 8106652:	f107 030c 	add.w	r3, r7, #12
 8106656:	4618      	mov	r0, r3
 8106658:	f7ff fbcc 	bl	8105df4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 810665c:	e7c8      	b.n	81065f0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 810665e:	4618      	mov	r0, r3
 8106660:	3710      	adds	r7, #16
 8106662:	46bd      	mov	sp, r7
 8106664:	bd80      	pop	{r7, pc}

08106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 8106666:	b580      	push	{r7, lr}
 8106668:	ed2d 8b02 	vpush	{d8}
 810666c:	b084      	sub	sp, #16
 810666e:	af00      	add	r7, sp, #0
 8106670:	60f8      	str	r0, [r7, #12]
 8106672:	60b9      	str	r1, [r7, #8]
 8106674:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 8106676:	f107 0308 	add.w	r3, r7, #8
 810667a:	4618      	mov	r0, r3
 810667c:	f7ff fb66 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106680:	4603      	mov	r3, r0
 8106682:	ed93 8a00 	vldr	s16, [r3]
 8106686:	1d3b      	adds	r3, r7, #4
 8106688:	4618      	mov	r0, r3
 810668a:	f7ff fb5f 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810668e:	4603      	mov	r3, r0
 8106690:	edd3 7a00 	vldr	s15, [r3]
 8106694:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8106698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810669c:	bf4c      	ite	mi
 810669e:	2301      	movmi	r3, #1
 81066a0:	2300      	movpl	r3, #0
 81066a2:	b2db      	uxtb	r3, r3
 81066a4:	4618      	mov	r0, r3
 81066a6:	3710      	adds	r7, #16
 81066a8:	46bd      	mov	sp, r7
 81066aa:	ecbd 8b02 	vpop	{d8}
 81066ae:	bd80      	pop	{r7, pc}

081066b0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 81066b0:	b590      	push	{r4, r7, lr}
 81066b2:	b085      	sub	sp, #20
 81066b4:	af00      	add	r7, sp, #0
 81066b6:	6078      	str	r0, [r7, #4]
 81066b8:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 81066ba:	1d3b      	adds	r3, r7, #4
 81066bc:	4618      	mov	r0, r3
 81066be:	f7ff fb45 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81066c2:	4603      	mov	r3, r0
 81066c4:	4618      	mov	r0, r3
 81066c6:	f7fe fee9 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81066ca:	4603      	mov	r3, r0
 81066cc:	681b      	ldr	r3, [r3, #0]
 81066ce:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	60bb      	str	r3, [r7, #8]
      --__next;
 81066d4:	f107 0308 	add.w	r3, r7, #8
 81066d8:	4618      	mov	r0, r3
 81066da:	f7ff fbd2 	bl	8105e82 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 81066de:	e017      	b.n	8106710 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 81066e0:	f107 0308 	add.w	r3, r7, #8
 81066e4:	4618      	mov	r0, r3
 81066e6:	f7ff fb31 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81066ea:	4603      	mov	r3, r0
 81066ec:	4618      	mov	r0, r3
 81066ee:	f7fe fed5 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81066f2:	4604      	mov	r4, r0
 81066f4:	1d3b      	adds	r3, r7, #4
 81066f6:	4618      	mov	r0, r3
 81066f8:	f7ff fb28 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81066fc:	4602      	mov	r2, r0
 81066fe:	6823      	ldr	r3, [r4, #0]
 8106700:	6013      	str	r3, [r2, #0]
	  __last = __next;
 8106702:	68bb      	ldr	r3, [r7, #8]
 8106704:	607b      	str	r3, [r7, #4]
	  --__next;
 8106706:	f107 0308 	add.w	r3, r7, #8
 810670a:	4618      	mov	r0, r3
 810670c:	f7ff fbb9 	bl	8105e82 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 8106710:	f107 010c 	add.w	r1, r7, #12
 8106714:	463b      	mov	r3, r7
 8106716:	68ba      	ldr	r2, [r7, #8]
 8106718:	4618      	mov	r0, r3
 810671a:	f000 f94d 	bl	81069b8 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 810671e:	4603      	mov	r3, r0
 8106720:	2b00      	cmp	r3, #0
 8106722:	d1dd      	bne.n	81066e0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 8106724:	f107 030c 	add.w	r3, r7, #12
 8106728:	4618      	mov	r0, r3
 810672a:	f7fe feb7 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810672e:	4604      	mov	r4, r0
 8106730:	1d3b      	adds	r3, r7, #4
 8106732:	4618      	mov	r0, r3
 8106734:	f7ff fb0a 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106738:	4602      	mov	r2, r0
 810673a:	6823      	ldr	r3, [r4, #0]
 810673c:	6013      	str	r3, [r2, #0]
    }
 810673e:	bf00      	nop
 8106740:	3714      	adds	r7, #20
 8106742:	46bd      	mov	sp, r7
 8106744:	bd90      	pop	{r4, r7, pc}

08106746 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8106746:	b580      	push	{r7, lr}
 8106748:	b082      	sub	sp, #8
 810674a:	af00      	add	r7, sp, #0
 810674c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 810674e:	1d3b      	adds	r3, r7, #4
 8106750:	4618      	mov	r0, r3
 8106752:	f7ff fc4e 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106756:	4603      	mov	r3, r0
 8106758:	681b      	ldr	r3, [r3, #0]
 810675a:	4618      	mov	r0, r3
 810675c:	3708      	adds	r7, #8
 810675e:	46bd      	mov	sp, r7
 8106760:	bd80      	pop	{r7, pc}

08106762 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8106762:	b580      	push	{r7, lr}
 8106764:	b084      	sub	sp, #16
 8106766:	af00      	add	r7, sp, #0
 8106768:	60f8      	str	r0, [r7, #12]
 810676a:	60b9      	str	r1, [r7, #8]
 810676c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 810676e:	687a      	ldr	r2, [r7, #4]
 8106770:	68b9      	ldr	r1, [r7, #8]
 8106772:	68f8      	ldr	r0, [r7, #12]
 8106774:	f000 f940 	bl	81069f8 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 8106778:	4603      	mov	r3, r0
 810677a:	4618      	mov	r0, r3
 810677c:	3710      	adds	r7, #16
 810677e:	46bd      	mov	sp, r7
 8106780:	bd80      	pop	{r7, pc}

08106782 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8106782:	b580      	push	{r7, lr}
 8106784:	b082      	sub	sp, #8
 8106786:	af00      	add	r7, sp, #0
 8106788:	6078      	str	r0, [r7, #4]
 810678a:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 810678c:	6878      	ldr	r0, [r7, #4]
 810678e:	f7ff ffda 	bl	8106746 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8106792:	4602      	mov	r2, r0
 8106794:	683b      	ldr	r3, [r7, #0]
 8106796:	1a9b      	subs	r3, r3, r2
 8106798:	109b      	asrs	r3, r3, #2
 810679a:	461a      	mov	r2, r3
 810679c:	1d3b      	adds	r3, r7, #4
 810679e:	4611      	mov	r1, r2
 81067a0:	4618      	mov	r0, r3
 81067a2:	f7fe fce6 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81067a6:	4603      	mov	r3, r0
 81067a8:	4618      	mov	r0, r3
 81067aa:	3708      	adds	r7, #8
 81067ac:	46bd      	mov	sp, r7
 81067ae:	bd80      	pop	{r7, pc}

081067b0 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 81067b0:	b580      	push	{r7, lr}
 81067b2:	b084      	sub	sp, #16
 81067b4:	af00      	add	r7, sp, #0
 81067b6:	60f8      	str	r0, [r7, #12]
 81067b8:	60b9      	str	r1, [r7, #8]
 81067ba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 81067bc:	687a      	ldr	r2, [r7, #4]
 81067be:	68b9      	ldr	r1, [r7, #8]
 81067c0:	68f8      	ldr	r0, [r7, #12]
 81067c2:	f000 f929 	bl	8106a18 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 81067c6:	4603      	mov	r3, r0
 81067c8:	4618      	mov	r0, r3
 81067ca:	3710      	adds	r7, #16
 81067cc:	46bd      	mov	sp, r7
 81067ce:	bd80      	pop	{r7, pc}

081067d0 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 81067d0:	b590      	push	{r4, r7, lr}
 81067d2:	b085      	sub	sp, #20
 81067d4:	af00      	add	r7, sp, #0
 81067d6:	60f8      	str	r0, [r7, #12]
 81067d8:	60b9      	str	r1, [r7, #8]
 81067da:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 81067dc:	68f8      	ldr	r0, [r7, #12]
 81067de:	f000 f92b 	bl	8106a38 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 81067e2:	4604      	mov	r4, r0
 81067e4:	68b8      	ldr	r0, [r7, #8]
 81067e6:	f000 f927 	bl	8106a38 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 81067ea:	4603      	mov	r3, r0
 81067ec:	687a      	ldr	r2, [r7, #4]
 81067ee:	4619      	mov	r1, r3
 81067f0:	4620      	mov	r0, r4
 81067f2:	f000 f932 	bl	8106a5a <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 81067f6:	4603      	mov	r3, r0
    }
 81067f8:	4618      	mov	r0, r3
 81067fa:	3714      	adds	r7, #20
 81067fc:	46bd      	mov	sp, r7
 81067fe:	bd90      	pop	{r4, r7, pc}

08106800 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8106800:	b480      	push	{r7}
 8106802:	b083      	sub	sp, #12
 8106804:	af00      	add	r7, sp, #0
 8106806:	6078      	str	r0, [r7, #4]
    { return __it; }
 8106808:	687b      	ldr	r3, [r7, #4]
 810680a:	4618      	mov	r0, r3
 810680c:	370c      	adds	r7, #12
 810680e:	46bd      	mov	sp, r7
 8106810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106814:	4770      	bx	lr

08106816 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8106816:	b5b0      	push	{r4, r5, r7, lr}
 8106818:	b084      	sub	sp, #16
 810681a:	af00      	add	r7, sp, #0
 810681c:	60f8      	str	r0, [r7, #12]
 810681e:	60b9      	str	r1, [r7, #8]
 8106820:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8106822:	68f8      	ldr	r0, [r7, #12]
 8106824:	f000 f93c 	bl	8106aa0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8106828:	4604      	mov	r4, r0
 810682a:	68b8      	ldr	r0, [r7, #8]
 810682c:	f000 f938 	bl	8106aa0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8106830:	4605      	mov	r5, r0
 8106832:	687b      	ldr	r3, [r7, #4]
 8106834:	4618      	mov	r0, r3
 8106836:	f7ff fdce 	bl	81063d6 <_ZSt12__niter_baseIPfET_S1_>
 810683a:	4603      	mov	r3, r0
 810683c:	461a      	mov	r2, r3
 810683e:	4629      	mov	r1, r5
 8106840:	4620      	mov	r0, r4
 8106842:	f000 f93b 	bl	8106abc <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8106846:	4602      	mov	r2, r0
 8106848:	1d3b      	adds	r3, r7, #4
 810684a:	4611      	mov	r1, r2
 810684c:	4618      	mov	r0, r3
 810684e:	f000 f945 	bl	8106adc <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8106852:	4603      	mov	r3, r0
    }
 8106854:	4618      	mov	r0, r3
 8106856:	3710      	adds	r7, #16
 8106858:	46bd      	mov	sp, r7
 810685a:	bdb0      	pop	{r4, r5, r7, pc}

0810685c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810685c:	b590      	push	{r4, r7, lr}
 810685e:	b089      	sub	sp, #36	@ 0x24
 8106860:	af00      	add	r7, sp, #0
 8106862:	60f8      	str	r0, [r7, #12]
 8106864:	60b9      	str	r1, [r7, #8]
 8106866:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8106868:	f107 020c 	add.w	r2, r7, #12
 810686c:	f107 0308 	add.w	r3, r7, #8
 8106870:	4611      	mov	r1, r2
 8106872:	4618      	mov	r0, r3
 8106874:	f7ff f8d0 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8106878:	4603      	mov	r3, r0
 810687a:	2b01      	cmp	r3, #1
 810687c:	bfd4      	ite	le
 810687e:	2301      	movle	r3, #1
 8106880:	2300      	movgt	r3, #0
 8106882:	b2db      	uxtb	r3, r3
 8106884:	2b00      	cmp	r3, #0
 8106886:	d139      	bne.n	81068fc <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 8106888:	f107 020c 	add.w	r2, r7, #12
 810688c:	f107 0308 	add.w	r3, r7, #8
 8106890:	4611      	mov	r1, r2
 8106892:	4618      	mov	r0, r3
 8106894:	f7ff f8c0 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8106898:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 810689a:	69bb      	ldr	r3, [r7, #24]
 810689c:	3b02      	subs	r3, #2
 810689e:	0fda      	lsrs	r2, r3, #31
 81068a0:	4413      	add	r3, r2
 81068a2:	105b      	asrs	r3, r3, #1
 81068a4:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 81068a6:	f107 030c 	add.w	r3, r7, #12
 81068aa:	69f9      	ldr	r1, [r7, #28]
 81068ac:	4618      	mov	r0, r3
 81068ae:	f7fe fc60 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81068b2:	4603      	mov	r3, r0
 81068b4:	617b      	str	r3, [r7, #20]
 81068b6:	f107 0314 	add.w	r3, r7, #20
 81068ba:	4618      	mov	r0, r3
 81068bc:	f7ff fa46 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81068c0:	4603      	mov	r3, r0
 81068c2:	4618      	mov	r0, r3
 81068c4:	f7fe fdea 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81068c8:	4603      	mov	r3, r0
 81068ca:	681b      	ldr	r3, [r3, #0]
 81068cc:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 81068ce:	f107 0310 	add.w	r3, r7, #16
 81068d2:	4618      	mov	r0, r3
 81068d4:	f7fe fde2 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81068d8:	4603      	mov	r3, r0
 81068da:	edd3 7a00 	vldr	s15, [r3]
 81068de:	4623      	mov	r3, r4
 81068e0:	eeb0 0a67 	vmov.f32	s0, s15
 81068e4:	69ba      	ldr	r2, [r7, #24]
 81068e6:	69f9      	ldr	r1, [r7, #28]
 81068e8:	68f8      	ldr	r0, [r7, #12]
 81068ea:	f000 f903 	bl	8106af4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 81068ee:	69fb      	ldr	r3, [r7, #28]
 81068f0:	2b00      	cmp	r3, #0
 81068f2:	d005      	beq.n	8106900 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 81068f4:	69fb      	ldr	r3, [r7, #28]
 81068f6:	3b01      	subs	r3, #1
 81068f8:	61fb      	str	r3, [r7, #28]
      while (true)
 81068fa:	e7d4      	b.n	81068a6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 81068fc:	bf00      	nop
 81068fe:	e000      	b.n	8106902 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 8106900:	bf00      	nop
    }
 8106902:	3724      	adds	r7, #36	@ 0x24
 8106904:	46bd      	mov	sp, r7
 8106906:	bd90      	pop	{r4, r7, pc}

08106908 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8106908:	b590      	push	{r4, r7, lr}
 810690a:	b083      	sub	sp, #12
 810690c:	af00      	add	r7, sp, #0
 810690e:	6078      	str	r0, [r7, #4]
 8106910:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 8106912:	6878      	ldr	r0, [r7, #4]
 8106914:	f7ff fb6d 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106918:	4603      	mov	r3, r0
 810691a:	681c      	ldr	r4, [r3, #0]
 810691c:	6838      	ldr	r0, [r7, #0]
 810691e:	f7ff fb68 	bl	8105ff2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106922:	4603      	mov	r3, r0
 8106924:	681b      	ldr	r3, [r3, #0]
 8106926:	429c      	cmp	r4, r3
 8106928:	bf34      	ite	cc
 810692a:	2301      	movcc	r3, #1
 810692c:	2300      	movcs	r3, #0
 810692e:	b2db      	uxtb	r3, r3
 8106930:	4618      	mov	r0, r3
 8106932:	370c      	adds	r7, #12
 8106934:	46bd      	mov	sp, r7
 8106936:	bd90      	pop	{r4, r7, pc}

08106938 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8106938:	b5b0      	push	{r4, r5, r7, lr}
 810693a:	b086      	sub	sp, #24
 810693c:	af00      	add	r7, sp, #0
 810693e:	60f8      	str	r0, [r7, #12]
 8106940:	60b9      	str	r1, [r7, #8]
 8106942:	607a      	str	r2, [r7, #4]
 8106944:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8106946:	1d3b      	adds	r3, r7, #4
 8106948:	4618      	mov	r0, r3
 810694a:	f7ff f9ff 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810694e:	4603      	mov	r3, r0
 8106950:	4618      	mov	r0, r3
 8106952:	f7fe fda3 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106956:	4603      	mov	r3, r0
 8106958:	681b      	ldr	r3, [r3, #0]
 810695a:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 810695c:	f107 030c 	add.w	r3, r7, #12
 8106960:	4618      	mov	r0, r3
 8106962:	f7ff f9f3 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106966:	4603      	mov	r3, r0
 8106968:	4618      	mov	r0, r3
 810696a:	f7fe fd97 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810696e:	4604      	mov	r4, r0
 8106970:	1d3b      	adds	r3, r7, #4
 8106972:	4618      	mov	r0, r3
 8106974:	f7ff f9ea 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106978:	4602      	mov	r2, r0
 810697a:	6823      	ldr	r3, [r4, #0]
 810697c:	6013      	str	r3, [r2, #0]
			 _DistanceType(__last - __first),
 810697e:	f107 020c 	add.w	r2, r7, #12
 8106982:	f107 0308 	add.w	r3, r7, #8
 8106986:	4611      	mov	r1, r2
 8106988:	4618      	mov	r0, r3
 810698a:	f7ff f845 	bl	8105a18 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810698e:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8106990:	f107 0314 	add.w	r3, r7, #20
 8106994:	4618      	mov	r0, r3
 8106996:	f7fe fd81 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810699a:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 810699c:	edd3 7a00 	vldr	s15, [r3]
 81069a0:	462b      	mov	r3, r5
 81069a2:	eeb0 0a67 	vmov.f32	s0, s15
 81069a6:	4622      	mov	r2, r4
 81069a8:	2100      	movs	r1, #0
 81069aa:	68f8      	ldr	r0, [r7, #12]
 81069ac:	f000 f8a2 	bl	8106af4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 81069b0:	bf00      	nop
 81069b2:	3718      	adds	r7, #24
 81069b4:	46bd      	mov	sp, r7
 81069b6:	bdb0      	pop	{r4, r5, r7, pc}

081069b8 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 81069b8:	b580      	push	{r7, lr}
 81069ba:	ed2d 8b02 	vpush	{d8}
 81069be:	b084      	sub	sp, #16
 81069c0:	af00      	add	r7, sp, #0
 81069c2:	60f8      	str	r0, [r7, #12]
 81069c4:	60b9      	str	r1, [r7, #8]
 81069c6:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 81069c8:	68bb      	ldr	r3, [r7, #8]
 81069ca:	ed93 8a00 	vldr	s16, [r3]
 81069ce:	1d3b      	adds	r3, r7, #4
 81069d0:	4618      	mov	r0, r3
 81069d2:	f7ff f9bb 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81069d6:	4603      	mov	r3, r0
 81069d8:	edd3 7a00 	vldr	s15, [r3]
 81069dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 81069e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81069e4:	bf4c      	ite	mi
 81069e6:	2301      	movmi	r3, #1
 81069e8:	2300      	movpl	r3, #0
 81069ea:	b2db      	uxtb	r3, r3
 81069ec:	4618      	mov	r0, r3
 81069ee:	3710      	adds	r7, #16
 81069f0:	46bd      	mov	sp, r7
 81069f2:	ecbd 8b02 	vpop	{d8}
 81069f6:	bd80      	pop	{r7, pc}

081069f8 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 81069f8:	b580      	push	{r7, lr}
 81069fa:	b084      	sub	sp, #16
 81069fc:	af00      	add	r7, sp, #0
 81069fe:	60f8      	str	r0, [r7, #12]
 8106a00:	60b9      	str	r1, [r7, #8]
 8106a02:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8106a04:	687a      	ldr	r2, [r7, #4]
 8106a06:	68b9      	ldr	r1, [r7, #8]
 8106a08:	68f8      	ldr	r0, [r7, #12]
 8106a0a:	f000 f925 	bl	8106c58 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8106a0e:	4603      	mov	r3, r0
    }
 8106a10:	4618      	mov	r0, r3
 8106a12:	3710      	adds	r7, #16
 8106a14:	46bd      	mov	sp, r7
 8106a16:	bd80      	pop	{r7, pc}

08106a18 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8106a18:	b580      	push	{r7, lr}
 8106a1a:	b084      	sub	sp, #16
 8106a1c:	af00      	add	r7, sp, #0
 8106a1e:	60f8      	str	r0, [r7, #12]
 8106a20:	60b9      	str	r1, [r7, #8]
 8106a22:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8106a24:	687a      	ldr	r2, [r7, #4]
 8106a26:	68b9      	ldr	r1, [r7, #8]
 8106a28:	68f8      	ldr	r0, [r7, #12]
 8106a2a:	f000 f932 	bl	8106c92 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 8106a2e:	4603      	mov	r3, r0
    }
 8106a30:	4618      	mov	r0, r3
 8106a32:	3710      	adds	r7, #16
 8106a34:	46bd      	mov	sp, r7
 8106a36:	bd80      	pop	{r7, pc}

08106a38 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8106a38:	b580      	push	{r7, lr}
 8106a3a:	b082      	sub	sp, #8
 8106a3c:	af00      	add	r7, sp, #0
 8106a3e:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8106a40:	1d3b      	adds	r3, r7, #4
 8106a42:	4618      	mov	r0, r3
 8106a44:	f000 f947 	bl	8106cd6 <_ZNKSt13move_iteratorIPfE4baseEv>
 8106a48:	4603      	mov	r3, r0
 8106a4a:	4618      	mov	r0, r3
 8106a4c:	f000 f94f 	bl	8106cee <_ZSt12__miter_baseIPfET_S1_>
 8106a50:	4603      	mov	r3, r0
 8106a52:	4618      	mov	r0, r3
 8106a54:	3708      	adds	r7, #8
 8106a56:	46bd      	mov	sp, r7
 8106a58:	bd80      	pop	{r7, pc}

08106a5a <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8106a5a:	b5b0      	push	{r4, r5, r7, lr}
 8106a5c:	b084      	sub	sp, #16
 8106a5e:	af00      	add	r7, sp, #0
 8106a60:	60f8      	str	r0, [r7, #12]
 8106a62:	60b9      	str	r1, [r7, #8]
 8106a64:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8106a66:	68f8      	ldr	r0, [r7, #12]
 8106a68:	f7ff fcb5 	bl	81063d6 <_ZSt12__niter_baseIPfET_S1_>
 8106a6c:	4604      	mov	r4, r0
 8106a6e:	68b8      	ldr	r0, [r7, #8]
 8106a70:	f7ff fcb1 	bl	81063d6 <_ZSt12__niter_baseIPfET_S1_>
 8106a74:	4605      	mov	r5, r0
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	4618      	mov	r0, r3
 8106a7a:	f7ff fcac 	bl	81063d6 <_ZSt12__niter_baseIPfET_S1_>
 8106a7e:	4603      	mov	r3, r0
 8106a80:	461a      	mov	r2, r3
 8106a82:	4629      	mov	r1, r5
 8106a84:	4620      	mov	r0, r4
 8106a86:	f7ff fe6c 	bl	8106762 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 8106a8a:	4602      	mov	r2, r0
 8106a8c:	1d3b      	adds	r3, r7, #4
 8106a8e:	4611      	mov	r1, r2
 8106a90:	4618      	mov	r0, r3
 8106a92:	f000 f823 	bl	8106adc <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8106a96:	4603      	mov	r3, r0
    }
 8106a98:	4618      	mov	r0, r3
 8106a9a:	3710      	adds	r7, #16
 8106a9c:	46bd      	mov	sp, r7
 8106a9e:	bdb0      	pop	{r4, r5, r7, pc}

08106aa0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8106aa0:	b580      	push	{r7, lr}
 8106aa2:	b082      	sub	sp, #8
 8106aa4:	af00      	add	r7, sp, #0
 8106aa6:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8106aa8:	1d3b      	adds	r3, r7, #4
 8106aaa:	4618      	mov	r0, r3
 8106aac:	f000 f92a 	bl	8106d04 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8106ab0:	4603      	mov	r3, r0
 8106ab2:	681b      	ldr	r3, [r3, #0]
 8106ab4:	4618      	mov	r0, r3
 8106ab6:	3708      	adds	r7, #8
 8106ab8:	46bd      	mov	sp, r7
 8106aba:	bd80      	pop	{r7, pc}

08106abc <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8106abc:	b580      	push	{r7, lr}
 8106abe:	b084      	sub	sp, #16
 8106ac0:	af00      	add	r7, sp, #0
 8106ac2:	60f8      	str	r0, [r7, #12]
 8106ac4:	60b9      	str	r1, [r7, #8]
 8106ac6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8106ac8:	687a      	ldr	r2, [r7, #4]
 8106aca:	68b9      	ldr	r1, [r7, #8]
 8106acc:	68f8      	ldr	r0, [r7, #12]
 8106ace:	f000 f924 	bl	8106d1a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8106ad2:	4603      	mov	r3, r0
 8106ad4:	4618      	mov	r0, r3
 8106ad6:	3710      	adds	r7, #16
 8106ad8:	46bd      	mov	sp, r7
 8106ada:	bd80      	pop	{r7, pc}

08106adc <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8106adc:	b480      	push	{r7}
 8106ade:	b083      	sub	sp, #12
 8106ae0:	af00      	add	r7, sp, #0
 8106ae2:	6078      	str	r0, [r7, #4]
 8106ae4:	6039      	str	r1, [r7, #0]
    { return __res; }
 8106ae6:	683b      	ldr	r3, [r7, #0]
 8106ae8:	4618      	mov	r0, r3
 8106aea:	370c      	adds	r7, #12
 8106aec:	46bd      	mov	sp, r7
 8106aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106af2:	4770      	bx	lr

08106af4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8106af4:	b5b0      	push	{r4, r5, r7, lr}
 8106af6:	b08e      	sub	sp, #56	@ 0x38
 8106af8:	af00      	add	r7, sp, #0
 8106afa:	6178      	str	r0, [r7, #20]
 8106afc:	6139      	str	r1, [r7, #16]
 8106afe:	60fa      	str	r2, [r7, #12]
 8106b00:	ed87 0a02 	vstr	s0, [r7, #8]
 8106b04:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 8106b06:	693b      	ldr	r3, [r7, #16]
 8106b08:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __secondChild = __holeIndex;
 8106b0a:	693b      	ldr	r3, [r7, #16]
 8106b0c:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__secondChild < (__len - 1) / 2)
 8106b0e:	e042      	b.n	8106b96 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 8106b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106b12:	3301      	adds	r3, #1
 8106b14:	005b      	lsls	r3, r3, #1
 8106b16:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (__comp(__first + __secondChild,
 8106b18:	f107 0314 	add.w	r3, r7, #20
 8106b1c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8106b1e:	4618      	mov	r0, r3
 8106b20:	f7fe fb27 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106b24:	4604      	mov	r4, r0
 8106b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106b28:	1e5a      	subs	r2, r3, #1
 8106b2a:	f107 0314 	add.w	r3, r7, #20
 8106b2e:	4611      	mov	r1, r2
 8106b30:	4618      	mov	r0, r3
 8106b32:	f7fe fb1e 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106b36:	4602      	mov	r2, r0
 8106b38:	1d3b      	adds	r3, r7, #4
 8106b3a:	4621      	mov	r1, r4
 8106b3c:	4618      	mov	r0, r3
 8106b3e:	f7ff fd92 	bl	8106666 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8106b42:	4603      	mov	r3, r0
 8106b44:	2b00      	cmp	r3, #0
 8106b46:	d002      	beq.n	8106b4e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 8106b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106b4a:	3b01      	subs	r3, #1
 8106b4c:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8106b4e:	f107 0314 	add.w	r3, r7, #20
 8106b52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8106b54:	4618      	mov	r0, r3
 8106b56:	f7fe fb0c 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106b5a:	4603      	mov	r3, r0
 8106b5c:	623b      	str	r3, [r7, #32]
 8106b5e:	f107 0320 	add.w	r3, r7, #32
 8106b62:	4618      	mov	r0, r3
 8106b64:	f7ff f8f2 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106b68:	4603      	mov	r3, r0
 8106b6a:	4618      	mov	r0, r3
 8106b6c:	f7fe fc96 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106b70:	4604      	mov	r4, r0
 8106b72:	f107 0314 	add.w	r3, r7, #20
 8106b76:	6939      	ldr	r1, [r7, #16]
 8106b78:	4618      	mov	r0, r3
 8106b7a:	f7fe fafa 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106b7e:	4603      	mov	r3, r0
 8106b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8106b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106b86:	4618      	mov	r0, r3
 8106b88:	f7ff f8e0 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106b8c:	4602      	mov	r2, r0
 8106b8e:	6823      	ldr	r3, [r4, #0]
 8106b90:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild;
 8106b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106b94:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8106b96:	68fb      	ldr	r3, [r7, #12]
 8106b98:	3b01      	subs	r3, #1
 8106b9a:	0fda      	lsrs	r2, r3, #31
 8106b9c:	4413      	add	r3, r2
 8106b9e:	105b      	asrs	r3, r3, #1
 8106ba0:	461a      	mov	r2, r3
 8106ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106ba4:	4293      	cmp	r3, r2
 8106ba6:	dbb3      	blt.n	8106b10 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8106ba8:	68fb      	ldr	r3, [r7, #12]
 8106baa:	f003 0301 	and.w	r3, r3, #1
 8106bae:	2b00      	cmp	r3, #0
 8106bb0:	d133      	bne.n	8106c1a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 8106bb2:	68fb      	ldr	r3, [r7, #12]
 8106bb4:	3b02      	subs	r3, #2
 8106bb6:	0fda      	lsrs	r2, r3, #31
 8106bb8:	4413      	add	r3, r2
 8106bba:	105b      	asrs	r3, r3, #1
 8106bbc:	461a      	mov	r2, r3
 8106bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106bc0:	4293      	cmp	r3, r2
 8106bc2:	d12a      	bne.n	8106c1a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 8106bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106bc6:	3301      	adds	r3, #1
 8106bc8:	005b      	lsls	r3, r3, #1
 8106bca:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8106bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106bce:	1e5a      	subs	r2, r3, #1
 8106bd0:	f107 0314 	add.w	r3, r7, #20
 8106bd4:	4611      	mov	r1, r2
 8106bd6:	4618      	mov	r0, r3
 8106bd8:	f7fe facb 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106bdc:	4603      	mov	r3, r0
 8106bde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8106be0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8106be4:	4618      	mov	r0, r3
 8106be6:	f7ff f8b1 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106bea:	4603      	mov	r3, r0
 8106bec:	4618      	mov	r0, r3
 8106bee:	f7fe fc55 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106bf2:	4604      	mov	r4, r0
 8106bf4:	f107 0314 	add.w	r3, r7, #20
 8106bf8:	6939      	ldr	r1, [r7, #16]
 8106bfa:	4618      	mov	r0, r3
 8106bfc:	f7fe fab9 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106c00:	4603      	mov	r3, r0
 8106c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106c04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8106c08:	4618      	mov	r0, r3
 8106c0a:	f7ff f89f 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106c0e:	4602      	mov	r2, r0
 8106c10:	6823      	ldr	r3, [r4, #0]
 8106c12:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild - 1;
 8106c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106c16:	3b01      	subs	r3, #1
 8106c18:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8106c1a:	1d3b      	adds	r3, r7, #4
 8106c1c:	4618      	mov	r0, r3
 8106c1e:	f000 f88c 	bl	8106d3a <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 8106c22:	f107 031c 	add.w	r3, r7, #28
 8106c26:	4629      	mov	r1, r5
 8106c28:	4618      	mov	r0, r3
 8106c2a:	f7fd feea 	bl	8104a02 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8106c2e:	f107 0308 	add.w	r3, r7, #8
 8106c32:	4618      	mov	r0, r3
 8106c34:	f7fe fc32 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106c38:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8106c3a:	edd3 7a00 	vldr	s15, [r3]
 8106c3e:	f107 031c 	add.w	r3, r7, #28
 8106c42:	eeb0 0a67 	vmov.f32	s0, s15
 8106c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106c48:	6939      	ldr	r1, [r7, #16]
 8106c4a:	6978      	ldr	r0, [r7, #20]
 8106c4c:	f000 f880 	bl	8106d50 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 8106c50:	bf00      	nop
 8106c52:	3738      	adds	r7, #56	@ 0x38
 8106c54:	46bd      	mov	sp, r7
 8106c56:	bdb0      	pop	{r4, r5, r7, pc}

08106c58 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8106c58:	b580      	push	{r7, lr}
 8106c5a:	b086      	sub	sp, #24
 8106c5c:	af00      	add	r7, sp, #0
 8106c5e:	60f8      	str	r0, [r7, #12]
 8106c60:	60b9      	str	r1, [r7, #8]
 8106c62:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8106c64:	68ba      	ldr	r2, [r7, #8]
 8106c66:	68fb      	ldr	r3, [r7, #12]
 8106c68:	1ad3      	subs	r3, r2, r3
 8106c6a:	109b      	asrs	r3, r3, #2
 8106c6c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8106c6e:	697b      	ldr	r3, [r7, #20]
 8106c70:	2b00      	cmp	r3, #0
 8106c72:	d006      	beq.n	8106c82 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8106c74:	697b      	ldr	r3, [r7, #20]
 8106c76:	009b      	lsls	r3, r3, #2
 8106c78:	461a      	mov	r2, r3
 8106c7a:	68f9      	ldr	r1, [r7, #12]
 8106c7c:	6878      	ldr	r0, [r7, #4]
 8106c7e:	f015 f932 	bl	811bee6 <memmove>
	  return __result + _Num;
 8106c82:	697b      	ldr	r3, [r7, #20]
 8106c84:	009b      	lsls	r3, r3, #2
 8106c86:	687a      	ldr	r2, [r7, #4]
 8106c88:	4413      	add	r3, r2
	}
 8106c8a:	4618      	mov	r0, r3
 8106c8c:	3718      	adds	r7, #24
 8106c8e:	46bd      	mov	sp, r7
 8106c90:	bd80      	pop	{r7, pc}

08106c92 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8106c92:	b580      	push	{r7, lr}
 8106c94:	b086      	sub	sp, #24
 8106c96:	af00      	add	r7, sp, #0
 8106c98:	60f8      	str	r0, [r7, #12]
 8106c9a:	60b9      	str	r1, [r7, #8]
 8106c9c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8106c9e:	68ba      	ldr	r2, [r7, #8]
 8106ca0:	68fb      	ldr	r3, [r7, #12]
 8106ca2:	1ad3      	subs	r3, r2, r3
 8106ca4:	109b      	asrs	r3, r3, #2
 8106ca6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8106ca8:	697b      	ldr	r3, [r7, #20]
 8106caa:	2b00      	cmp	r3, #0
 8106cac:	d00a      	beq.n	8106cc4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8106cae:	697b      	ldr	r3, [r7, #20]
 8106cb0:	009b      	lsls	r3, r3, #2
 8106cb2:	425b      	negs	r3, r3
 8106cb4:	687a      	ldr	r2, [r7, #4]
 8106cb6:	18d0      	adds	r0, r2, r3
 8106cb8:	697b      	ldr	r3, [r7, #20]
 8106cba:	009b      	lsls	r3, r3, #2
 8106cbc:	461a      	mov	r2, r3
 8106cbe:	68f9      	ldr	r1, [r7, #12]
 8106cc0:	f015 f911 	bl	811bee6 <memmove>
	  return __result - _Num;
 8106cc4:	697b      	ldr	r3, [r7, #20]
 8106cc6:	009b      	lsls	r3, r3, #2
 8106cc8:	425b      	negs	r3, r3
 8106cca:	687a      	ldr	r2, [r7, #4]
 8106ccc:	4413      	add	r3, r2
	}
 8106cce:	4618      	mov	r0, r3
 8106cd0:	3718      	adds	r7, #24
 8106cd2:	46bd      	mov	sp, r7
 8106cd4:	bd80      	pop	{r7, pc}

08106cd6 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 8106cd6:	b480      	push	{r7}
 8106cd8:	b083      	sub	sp, #12
 8106cda:	af00      	add	r7, sp, #0
 8106cdc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	681b      	ldr	r3, [r3, #0]
 8106ce2:	4618      	mov	r0, r3
 8106ce4:	370c      	adds	r7, #12
 8106ce6:	46bd      	mov	sp, r7
 8106ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cec:	4770      	bx	lr

08106cee <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8106cee:	b480      	push	{r7}
 8106cf0:	b083      	sub	sp, #12
 8106cf2:	af00      	add	r7, sp, #0
 8106cf4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	4618      	mov	r0, r3
 8106cfa:	370c      	adds	r7, #12
 8106cfc:	46bd      	mov	sp, r7
 8106cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d02:	4770      	bx	lr

08106d04 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8106d04:	b480      	push	{r7}
 8106d06:	b083      	sub	sp, #12
 8106d08:	af00      	add	r7, sp, #0
 8106d0a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	4618      	mov	r0, r3
 8106d10:	370c      	adds	r7, #12
 8106d12:	46bd      	mov	sp, r7
 8106d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d18:	4770      	bx	lr

08106d1a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8106d1a:	b580      	push	{r7, lr}
 8106d1c:	b084      	sub	sp, #16
 8106d1e:	af00      	add	r7, sp, #0
 8106d20:	60f8      	str	r0, [r7, #12]
 8106d22:	60b9      	str	r1, [r7, #8]
 8106d24:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8106d26:	687a      	ldr	r2, [r7, #4]
 8106d28:	68b9      	ldr	r1, [r7, #8]
 8106d2a:	68f8      	ldr	r0, [r7, #12]
 8106d2c:	f000 f87d 	bl	8106e2a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8106d30:	4603      	mov	r3, r0
    }
 8106d32:	4618      	mov	r0, r3
 8106d34:	3710      	adds	r7, #16
 8106d36:	46bd      	mov	sp, r7
 8106d38:	bd80      	pop	{r7, pc}

08106d3a <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8106d3a:	b480      	push	{r7}
 8106d3c:	b083      	sub	sp, #12
 8106d3e:	af00      	add	r7, sp, #0
 8106d40:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8106d42:	687b      	ldr	r3, [r7, #4]
 8106d44:	4618      	mov	r0, r3
 8106d46:	370c      	adds	r7, #12
 8106d48:	46bd      	mov	sp, r7
 8106d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d4e:	4770      	bx	lr

08106d50 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8106d50:	b590      	push	{r4, r7, lr}
 8106d52:	b08b      	sub	sp, #44	@ 0x2c
 8106d54:	af00      	add	r7, sp, #0
 8106d56:	6178      	str	r0, [r7, #20]
 8106d58:	6139      	str	r1, [r7, #16]
 8106d5a:	60fa      	str	r2, [r7, #12]
 8106d5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8106d60:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 8106d62:	693b      	ldr	r3, [r7, #16]
 8106d64:	3b01      	subs	r3, #1
 8106d66:	0fda      	lsrs	r2, r3, #31
 8106d68:	4413      	add	r3, r2
 8106d6a:	105b      	asrs	r3, r3, #1
 8106d6c:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8106d6e:	e029      	b.n	8106dc4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8106d70:	f107 0314 	add.w	r3, r7, #20
 8106d74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8106d76:	4618      	mov	r0, r3
 8106d78:	f7fe f9fb 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106d7c:	4603      	mov	r3, r0
 8106d7e:	61bb      	str	r3, [r7, #24]
 8106d80:	f107 0318 	add.w	r3, r7, #24
 8106d84:	4618      	mov	r0, r3
 8106d86:	f7fe ffe1 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106d8a:	4603      	mov	r3, r0
 8106d8c:	4618      	mov	r0, r3
 8106d8e:	f7fe fb85 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106d92:	4604      	mov	r4, r0
 8106d94:	f107 0314 	add.w	r3, r7, #20
 8106d98:	6939      	ldr	r1, [r7, #16]
 8106d9a:	4618      	mov	r0, r3
 8106d9c:	f7fe f9e9 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106da0:	4603      	mov	r3, r0
 8106da2:	61fb      	str	r3, [r7, #28]
 8106da4:	f107 031c 	add.w	r3, r7, #28
 8106da8:	4618      	mov	r0, r3
 8106daa:	f7fe ffcf 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106dae:	4602      	mov	r2, r0
 8106db0:	6823      	ldr	r3, [r4, #0]
 8106db2:	6013      	str	r3, [r2, #0]
	  __holeIndex = __parent;
 8106db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106db6:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8106db8:	693b      	ldr	r3, [r7, #16]
 8106dba:	3b01      	subs	r3, #1
 8106dbc:	0fda      	lsrs	r2, r3, #31
 8106dbe:	4413      	add	r3, r2
 8106dc0:	105b      	asrs	r3, r3, #1
 8106dc2:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8106dc4:	693a      	ldr	r2, [r7, #16]
 8106dc6:	68fb      	ldr	r3, [r7, #12]
 8106dc8:	429a      	cmp	r2, r3
 8106dca:	dd11      	ble.n	8106df0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8106dcc:	f107 0314 	add.w	r3, r7, #20
 8106dd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8106dd2:	4618      	mov	r0, r3
 8106dd4:	f7fe f9cd 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106dd8:	4601      	mov	r1, r0
 8106dda:	f107 0308 	add.w	r3, r7, #8
 8106dde:	461a      	mov	r2, r3
 8106de0:	6878      	ldr	r0, [r7, #4]
 8106de2:	f000 f83f 	bl	8106e64 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 8106de6:	4603      	mov	r3, r0
 8106de8:	2b00      	cmp	r3, #0
 8106dea:	d001      	beq.n	8106df0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8106dec:	2301      	movs	r3, #1
 8106dee:	e000      	b.n	8106df2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 8106df0:	2300      	movs	r3, #0
 8106df2:	2b00      	cmp	r3, #0
 8106df4:	d1bc      	bne.n	8106d70 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8106df6:	f107 0308 	add.w	r3, r7, #8
 8106dfa:	4618      	mov	r0, r3
 8106dfc:	f7fe fb4e 	bl	810549c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106e00:	4604      	mov	r4, r0
 8106e02:	f107 0314 	add.w	r3, r7, #20
 8106e06:	6939      	ldr	r1, [r7, #16]
 8106e08:	4618      	mov	r0, r3
 8106e0a:	f7fe f9b2 	bl	8105172 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106e0e:	4603      	mov	r3, r0
 8106e10:	623b      	str	r3, [r7, #32]
 8106e12:	f107 0320 	add.w	r3, r7, #32
 8106e16:	4618      	mov	r0, r3
 8106e18:	f7fe ff98 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106e1c:	4602      	mov	r2, r0
 8106e1e:	6823      	ldr	r3, [r4, #0]
 8106e20:	6013      	str	r3, [r2, #0]
    }
 8106e22:	bf00      	nop
 8106e24:	372c      	adds	r7, #44	@ 0x2c
 8106e26:	46bd      	mov	sp, r7
 8106e28:	bd90      	pop	{r4, r7, pc}

08106e2a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8106e2a:	b580      	push	{r7, lr}
 8106e2c:	b086      	sub	sp, #24
 8106e2e:	af00      	add	r7, sp, #0
 8106e30:	60f8      	str	r0, [r7, #12]
 8106e32:	60b9      	str	r1, [r7, #8]
 8106e34:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8106e36:	68ba      	ldr	r2, [r7, #8]
 8106e38:	68fb      	ldr	r3, [r7, #12]
 8106e3a:	1ad3      	subs	r3, r2, r3
 8106e3c:	109b      	asrs	r3, r3, #2
 8106e3e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8106e40:	697b      	ldr	r3, [r7, #20]
 8106e42:	2b00      	cmp	r3, #0
 8106e44:	d006      	beq.n	8106e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8106e46:	697b      	ldr	r3, [r7, #20]
 8106e48:	009b      	lsls	r3, r3, #2
 8106e4a:	461a      	mov	r2, r3
 8106e4c:	68f9      	ldr	r1, [r7, #12]
 8106e4e:	6878      	ldr	r0, [r7, #4]
 8106e50:	f015 f849 	bl	811bee6 <memmove>
	  return __result + _Num;
 8106e54:	697b      	ldr	r3, [r7, #20]
 8106e56:	009b      	lsls	r3, r3, #2
 8106e58:	687a      	ldr	r2, [r7, #4]
 8106e5a:	4413      	add	r3, r2
	}
 8106e5c:	4618      	mov	r0, r3
 8106e5e:	3718      	adds	r7, #24
 8106e60:	46bd      	mov	sp, r7
 8106e62:	bd80      	pop	{r7, pc}

08106e64 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8106e64:	b580      	push	{r7, lr}
 8106e66:	b084      	sub	sp, #16
 8106e68:	af00      	add	r7, sp, #0
 8106e6a:	60f8      	str	r0, [r7, #12]
 8106e6c:	60b9      	str	r1, [r7, #8]
 8106e6e:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8106e70:	f107 0308 	add.w	r3, r7, #8
 8106e74:	4618      	mov	r0, r3
 8106e76:	f7fe ff69 	bl	8105d4c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106e7a:	4603      	mov	r3, r0
 8106e7c:	ed93 7a00 	vldr	s14, [r3]
 8106e80:	687b      	ldr	r3, [r7, #4]
 8106e82:	edd3 7a00 	vldr	s15, [r3]
 8106e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8106e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106e8e:	bf4c      	ite	mi
 8106e90:	2301      	movmi	r3, #1
 8106e92:	2300      	movpl	r3, #0
 8106e94:	b2db      	uxtb	r3, r3
 8106e96:	4618      	mov	r0, r3
 8106e98:	3710      	adds	r7, #16
 8106e9a:	46bd      	mov	sp, r7
 8106e9c:	bd80      	pop	{r7, pc}

08106e9e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8106e9e:	b480      	push	{r7}
 8106ea0:	b083      	sub	sp, #12
 8106ea2:	af00      	add	r7, sp, #0
 8106ea4:	6078      	str	r0, [r7, #4]
 8106ea6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	2b00      	cmp	r3, #0
 8106eac:	d00b      	beq.n	8106ec6 <LAN8742_RegisterBusIO+0x28>
 8106eae:	683b      	ldr	r3, [r7, #0]
 8106eb0:	68db      	ldr	r3, [r3, #12]
 8106eb2:	2b00      	cmp	r3, #0
 8106eb4:	d007      	beq.n	8106ec6 <LAN8742_RegisterBusIO+0x28>
 8106eb6:	683b      	ldr	r3, [r7, #0]
 8106eb8:	689b      	ldr	r3, [r3, #8]
 8106eba:	2b00      	cmp	r3, #0
 8106ebc:	d003      	beq.n	8106ec6 <LAN8742_RegisterBusIO+0x28>
 8106ebe:	683b      	ldr	r3, [r7, #0]
 8106ec0:	691b      	ldr	r3, [r3, #16]
 8106ec2:	2b00      	cmp	r3, #0
 8106ec4:	d102      	bne.n	8106ecc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8106ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8106eca:	e014      	b.n	8106ef6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8106ecc:	683b      	ldr	r3, [r7, #0]
 8106ece:	681a      	ldr	r2, [r3, #0]
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8106ed4:	683b      	ldr	r3, [r7, #0]
 8106ed6:	685a      	ldr	r2, [r3, #4]
 8106ed8:	687b      	ldr	r3, [r7, #4]
 8106eda:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8106edc:	683b      	ldr	r3, [r7, #0]
 8106ede:	68da      	ldr	r2, [r3, #12]
 8106ee0:	687b      	ldr	r3, [r7, #4]
 8106ee2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8106ee4:	683b      	ldr	r3, [r7, #0]
 8106ee6:	689a      	ldr	r2, [r3, #8]
 8106ee8:	687b      	ldr	r3, [r7, #4]
 8106eea:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8106eec:	683b      	ldr	r3, [r7, #0]
 8106eee:	691a      	ldr	r2, [r3, #16]
 8106ef0:	687b      	ldr	r3, [r7, #4]
 8106ef2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8106ef4:	2300      	movs	r3, #0
}
 8106ef6:	4618      	mov	r0, r3
 8106ef8:	370c      	adds	r7, #12
 8106efa:	46bd      	mov	sp, r7
 8106efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f00:	4770      	bx	lr

08106f02 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8106f02:	b580      	push	{r7, lr}
 8106f04:	b086      	sub	sp, #24
 8106f06:	af00      	add	r7, sp, #0
 8106f08:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8106f0a:	2300      	movs	r3, #0
 8106f0c:	60fb      	str	r3, [r7, #12]
 8106f0e:	2300      	movs	r3, #0
 8106f10:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8106f12:	2300      	movs	r3, #0
 8106f14:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8106f16:	687b      	ldr	r3, [r7, #4]
 8106f18:	685b      	ldr	r3, [r3, #4]
 8106f1a:	2b00      	cmp	r3, #0
 8106f1c:	d139      	bne.n	8106f92 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8106f1e:	687b      	ldr	r3, [r7, #4]
 8106f20:	689b      	ldr	r3, [r3, #8]
 8106f22:	2b00      	cmp	r3, #0
 8106f24:	d002      	beq.n	8106f2c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	689b      	ldr	r3, [r3, #8]
 8106f2a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	2220      	movs	r2, #32
 8106f30:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8106f32:	2300      	movs	r3, #0
 8106f34:	617b      	str	r3, [r7, #20]
 8106f36:	e01c      	b.n	8106f72 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8106f38:	687b      	ldr	r3, [r7, #4]
 8106f3a:	695b      	ldr	r3, [r3, #20]
 8106f3c:	f107 020c 	add.w	r2, r7, #12
 8106f40:	2112      	movs	r1, #18
 8106f42:	6978      	ldr	r0, [r7, #20]
 8106f44:	4798      	blx	r3
 8106f46:	4603      	mov	r3, r0
 8106f48:	2b00      	cmp	r3, #0
 8106f4a:	da03      	bge.n	8106f54 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8106f4c:	f06f 0304 	mvn.w	r3, #4
 8106f50:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8106f52:	e00b      	b.n	8106f6c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8106f54:	68fb      	ldr	r3, [r7, #12]
 8106f56:	f003 031f 	and.w	r3, r3, #31
 8106f5a:	697a      	ldr	r2, [r7, #20]
 8106f5c:	429a      	cmp	r2, r3
 8106f5e:	d105      	bne.n	8106f6c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8106f60:	687b      	ldr	r3, [r7, #4]
 8106f62:	697a      	ldr	r2, [r7, #20]
 8106f64:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8106f66:	2300      	movs	r3, #0
 8106f68:	613b      	str	r3, [r7, #16]
         break;
 8106f6a:	e005      	b.n	8106f78 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8106f6c:	697b      	ldr	r3, [r7, #20]
 8106f6e:	3301      	adds	r3, #1
 8106f70:	617b      	str	r3, [r7, #20]
 8106f72:	697b      	ldr	r3, [r7, #20]
 8106f74:	2b1f      	cmp	r3, #31
 8106f76:	d9df      	bls.n	8106f38 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8106f78:	687b      	ldr	r3, [r7, #4]
 8106f7a:	681b      	ldr	r3, [r3, #0]
 8106f7c:	2b1f      	cmp	r3, #31
 8106f7e:	d902      	bls.n	8106f86 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8106f80:	f06f 0302 	mvn.w	r3, #2
 8106f84:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8106f86:	693b      	ldr	r3, [r7, #16]
 8106f88:	2b00      	cmp	r3, #0
 8106f8a:	d102      	bne.n	8106f92 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	2201      	movs	r2, #1
 8106f90:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8106f92:	693b      	ldr	r3, [r7, #16]
 }
 8106f94:	4618      	mov	r0, r3
 8106f96:	3718      	adds	r7, #24
 8106f98:	46bd      	mov	sp, r7
 8106f9a:	bd80      	pop	{r7, pc}

08106f9c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8106f9c:	b580      	push	{r7, lr}
 8106f9e:	b084      	sub	sp, #16
 8106fa0:	af00      	add	r7, sp, #0
 8106fa2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8106fa4:	2300      	movs	r3, #0
 8106fa6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8106fa8:	687b      	ldr	r3, [r7, #4]
 8106faa:	695b      	ldr	r3, [r3, #20]
 8106fac:	687a      	ldr	r2, [r7, #4]
 8106fae:	6810      	ldr	r0, [r2, #0]
 8106fb0:	f107 020c 	add.w	r2, r7, #12
 8106fb4:	2101      	movs	r1, #1
 8106fb6:	4798      	blx	r3
 8106fb8:	4603      	mov	r3, r0
 8106fba:	2b00      	cmp	r3, #0
 8106fbc:	da02      	bge.n	8106fc4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8106fbe:	f06f 0304 	mvn.w	r3, #4
 8106fc2:	e06e      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	695b      	ldr	r3, [r3, #20]
 8106fc8:	687a      	ldr	r2, [r7, #4]
 8106fca:	6810      	ldr	r0, [r2, #0]
 8106fcc:	f107 020c 	add.w	r2, r7, #12
 8106fd0:	2101      	movs	r1, #1
 8106fd2:	4798      	blx	r3
 8106fd4:	4603      	mov	r3, r0
 8106fd6:	2b00      	cmp	r3, #0
 8106fd8:	da02      	bge.n	8106fe0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8106fda:	f06f 0304 	mvn.w	r3, #4
 8106fde:	e060      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8106fe0:	68fb      	ldr	r3, [r7, #12]
 8106fe2:	f003 0304 	and.w	r3, r3, #4
 8106fe6:	2b00      	cmp	r3, #0
 8106fe8:	d101      	bne.n	8106fee <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8106fea:	2301      	movs	r3, #1
 8106fec:	e059      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	695b      	ldr	r3, [r3, #20]
 8106ff2:	687a      	ldr	r2, [r7, #4]
 8106ff4:	6810      	ldr	r0, [r2, #0]
 8106ff6:	f107 020c 	add.w	r2, r7, #12
 8106ffa:	2100      	movs	r1, #0
 8106ffc:	4798      	blx	r3
 8106ffe:	4603      	mov	r3, r0
 8107000:	2b00      	cmp	r3, #0
 8107002:	da02      	bge.n	810700a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8107004:	f06f 0304 	mvn.w	r3, #4
 8107008:	e04b      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 810700a:	68fb      	ldr	r3, [r7, #12]
 810700c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8107010:	2b00      	cmp	r3, #0
 8107012:	d11b      	bne.n	810704c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8107014:	68fb      	ldr	r3, [r7, #12]
 8107016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810701a:	2b00      	cmp	r3, #0
 810701c:	d006      	beq.n	810702c <LAN8742_GetLinkState+0x90>
 810701e:	68fb      	ldr	r3, [r7, #12]
 8107020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107024:	2b00      	cmp	r3, #0
 8107026:	d001      	beq.n	810702c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8107028:	2302      	movs	r3, #2
 810702a:	e03a      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 810702c:	68fb      	ldr	r3, [r7, #12]
 810702e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8107032:	2b00      	cmp	r3, #0
 8107034:	d001      	beq.n	810703a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8107036:	2303      	movs	r3, #3
 8107038:	e033      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 810703a:	68fb      	ldr	r3, [r7, #12]
 810703c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107040:	2b00      	cmp	r3, #0
 8107042:	d001      	beq.n	8107048 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8107044:	2304      	movs	r3, #4
 8107046:	e02c      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8107048:	2305      	movs	r3, #5
 810704a:	e02a      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	695b      	ldr	r3, [r3, #20]
 8107050:	687a      	ldr	r2, [r7, #4]
 8107052:	6810      	ldr	r0, [r2, #0]
 8107054:	f107 020c 	add.w	r2, r7, #12
 8107058:	211f      	movs	r1, #31
 810705a:	4798      	blx	r3
 810705c:	4603      	mov	r3, r0
 810705e:	2b00      	cmp	r3, #0
 8107060:	da02      	bge.n	8107068 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8107062:	f06f 0304 	mvn.w	r3, #4
 8107066:	e01c      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8107068:	68fb      	ldr	r3, [r7, #12]
 810706a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810706e:	2b00      	cmp	r3, #0
 8107070:	d101      	bne.n	8107076 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8107072:	2306      	movs	r3, #6
 8107074:	e015      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8107076:	68fb      	ldr	r3, [r7, #12]
 8107078:	f003 031c 	and.w	r3, r3, #28
 810707c:	2b18      	cmp	r3, #24
 810707e:	d101      	bne.n	8107084 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8107080:	2302      	movs	r3, #2
 8107082:	e00e      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8107084:	68fb      	ldr	r3, [r7, #12]
 8107086:	f003 031c 	and.w	r3, r3, #28
 810708a:	2b08      	cmp	r3, #8
 810708c:	d101      	bne.n	8107092 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810708e:	2303      	movs	r3, #3
 8107090:	e007      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8107092:	68fb      	ldr	r3, [r7, #12]
 8107094:	f003 031c 	and.w	r3, r3, #28
 8107098:	2b14      	cmp	r3, #20
 810709a:	d101      	bne.n	81070a0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810709c:	2304      	movs	r3, #4
 810709e:	e000      	b.n	81070a2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 81070a0:	2305      	movs	r3, #5
    }
  }
}
 81070a2:	4618      	mov	r0, r3
 81070a4:	3710      	adds	r7, #16
 81070a6:	46bd      	mov	sp, r7
 81070a8:	bd80      	pop	{r7, pc}
	...

081070ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81070ac:	b480      	push	{r7}
 81070ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81070b0:	4b0b      	ldr	r3, [pc, #44]	@ (81070e0 <SystemInit+0x34>)
 81070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81070b6:	4a0a      	ldr	r2, [pc, #40]	@ (81070e0 <SystemInit+0x34>)
 81070b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81070bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81070c0:	4b07      	ldr	r3, [pc, #28]	@ (81070e0 <SystemInit+0x34>)
 81070c2:	691b      	ldr	r3, [r3, #16]
 81070c4:	4a06      	ldr	r2, [pc, #24]	@ (81070e0 <SystemInit+0x34>)
 81070c6:	f043 0310 	orr.w	r3, r3, #16
 81070ca:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81070cc:	4b04      	ldr	r3, [pc, #16]	@ (81070e0 <SystemInit+0x34>)
 81070ce:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 81070d2:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81070d4:	bf00      	nop
 81070d6:	46bd      	mov	sp, r7
 81070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070dc:	4770      	bx	lr
 81070de:	bf00      	nop
 81070e0:	e000ed00 	.word	0xe000ed00

081070e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81070e4:	b580      	push	{r7, lr}
 81070e6:	b082      	sub	sp, #8
 81070e8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81070ea:	4b28      	ldr	r3, [pc, #160]	@ (810718c <HAL_Init+0xa8>)
 81070ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81070f0:	4a26      	ldr	r2, [pc, #152]	@ (810718c <HAL_Init+0xa8>)
 81070f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81070f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81070fa:	4b24      	ldr	r3, [pc, #144]	@ (810718c <HAL_Init+0xa8>)
 81070fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8107100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107104:	603b      	str	r3, [r7, #0]
 8107106:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8107108:	4b21      	ldr	r3, [pc, #132]	@ (8107190 <HAL_Init+0xac>)
 810710a:	681b      	ldr	r3, [r3, #0]
 810710c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8107110:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8107114:	4a1e      	ldr	r2, [pc, #120]	@ (8107190 <HAL_Init+0xac>)
 8107116:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810711a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810711c:	4b1c      	ldr	r3, [pc, #112]	@ (8107190 <HAL_Init+0xac>)
 810711e:	681b      	ldr	r3, [r3, #0]
 8107120:	4a1b      	ldr	r2, [pc, #108]	@ (8107190 <HAL_Init+0xac>)
 8107122:	f043 0301 	orr.w	r3, r3, #1
 8107126:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8107128:	2003      	movs	r0, #3
 810712a:	f000 f91a 	bl	8107362 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810712e:	f002 ff79 	bl	810a024 <HAL_RCC_GetSysClockFreq>
 8107132:	4602      	mov	r2, r0
 8107134:	4b15      	ldr	r3, [pc, #84]	@ (810718c <HAL_Init+0xa8>)
 8107136:	699b      	ldr	r3, [r3, #24]
 8107138:	0a1b      	lsrs	r3, r3, #8
 810713a:	f003 030f 	and.w	r3, r3, #15
 810713e:	4915      	ldr	r1, [pc, #84]	@ (8107194 <HAL_Init+0xb0>)
 8107140:	5ccb      	ldrb	r3, [r1, r3]
 8107142:	f003 031f 	and.w	r3, r3, #31
 8107146:	fa22 f303 	lsr.w	r3, r2, r3
 810714a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810714c:	4b0f      	ldr	r3, [pc, #60]	@ (810718c <HAL_Init+0xa8>)
 810714e:	699b      	ldr	r3, [r3, #24]
 8107150:	f003 030f 	and.w	r3, r3, #15
 8107154:	4a0f      	ldr	r2, [pc, #60]	@ (8107194 <HAL_Init+0xb0>)
 8107156:	5cd3      	ldrb	r3, [r2, r3]
 8107158:	f003 031f 	and.w	r3, r3, #31
 810715c:	687a      	ldr	r2, [r7, #4]
 810715e:	fa22 f303 	lsr.w	r3, r2, r3
 8107162:	4a0d      	ldr	r2, [pc, #52]	@ (8107198 <HAL_Init+0xb4>)
 8107164:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8107166:	4b0c      	ldr	r3, [pc, #48]	@ (8107198 <HAL_Init+0xb4>)
 8107168:	681b      	ldr	r3, [r3, #0]
 810716a:	4a0c      	ldr	r2, [pc, #48]	@ (810719c <HAL_Init+0xb8>)
 810716c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810716e:	2000      	movs	r0, #0
 8107170:	f7f9 fc92 	bl	8100a98 <HAL_InitTick>
 8107174:	4603      	mov	r3, r0
 8107176:	2b00      	cmp	r3, #0
 8107178:	d001      	beq.n	810717e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810717a:	2301      	movs	r3, #1
 810717c:	e002      	b.n	8107184 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810717e:	f7f9 fbd5 	bl	810092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8107182:	2300      	movs	r3, #0
}
 8107184:	4618      	mov	r0, r3
 8107186:	3708      	adds	r7, #8
 8107188:	46bd      	mov	sp, r7
 810718a:	bd80      	pop	{r7, pc}
 810718c:	58024400 	.word	0x58024400
 8107190:	40024400 	.word	0x40024400
 8107194:	0811fc00 	.word	0x0811fc00
 8107198:	10000018 	.word	0x10000018
 810719c:	10000014 	.word	0x10000014

081071a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81071a0:	b480      	push	{r7}
 81071a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81071a4:	4b06      	ldr	r3, [pc, #24]	@ (81071c0 <HAL_IncTick+0x20>)
 81071a6:	781b      	ldrb	r3, [r3, #0]
 81071a8:	461a      	mov	r2, r3
 81071aa:	4b06      	ldr	r3, [pc, #24]	@ (81071c4 <HAL_IncTick+0x24>)
 81071ac:	681b      	ldr	r3, [r3, #0]
 81071ae:	4413      	add	r3, r2
 81071b0:	4a04      	ldr	r2, [pc, #16]	@ (81071c4 <HAL_IncTick+0x24>)
 81071b2:	6013      	str	r3, [r2, #0]
}
 81071b4:	bf00      	nop
 81071b6:	46bd      	mov	sp, r7
 81071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071bc:	4770      	bx	lr
 81071be:	bf00      	nop
 81071c0:	10000020 	.word	0x10000020
 81071c4:	10000364 	.word	0x10000364

081071c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81071c8:	b480      	push	{r7}
 81071ca:	af00      	add	r7, sp, #0
  return uwTick;
 81071cc:	4b03      	ldr	r3, [pc, #12]	@ (81071dc <HAL_GetTick+0x14>)
 81071ce:	681b      	ldr	r3, [r3, #0]
}
 81071d0:	4618      	mov	r0, r3
 81071d2:	46bd      	mov	sp, r7
 81071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071d8:	4770      	bx	lr
 81071da:	bf00      	nop
 81071dc:	10000364 	.word	0x10000364

081071e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 81071e0:	b480      	push	{r7}
 81071e2:	b083      	sub	sp, #12
 81071e4:	af00      	add	r7, sp, #0
 81071e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 81071e8:	4b06      	ldr	r3, [pc, #24]	@ (8107204 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81071ea:	685b      	ldr	r3, [r3, #4]
 81071ec:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 81071f0:	4904      	ldr	r1, [pc, #16]	@ (8107204 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81071f2:	687b      	ldr	r3, [r7, #4]
 81071f4:	4313      	orrs	r3, r2
 81071f6:	604b      	str	r3, [r1, #4]
}
 81071f8:	bf00      	nop
 81071fa:	370c      	adds	r7, #12
 81071fc:	46bd      	mov	sp, r7
 81071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107202:	4770      	bx	lr
 8107204:	58000400 	.word	0x58000400

08107208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8107208:	b480      	push	{r7}
 810720a:	b085      	sub	sp, #20
 810720c:	af00      	add	r7, sp, #0
 810720e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8107210:	687b      	ldr	r3, [r7, #4]
 8107212:	f003 0307 	and.w	r3, r3, #7
 8107216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8107218:	4b0c      	ldr	r3, [pc, #48]	@ (810724c <__NVIC_SetPriorityGrouping+0x44>)
 810721a:	68db      	ldr	r3, [r3, #12]
 810721c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810721e:	68ba      	ldr	r2, [r7, #8]
 8107220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8107224:	4013      	ands	r3, r2
 8107226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8107228:	68fb      	ldr	r3, [r7, #12]
 810722a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810722c:	68bb      	ldr	r3, [r7, #8]
 810722e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8107230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8107234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810723a:	4a04      	ldr	r2, [pc, #16]	@ (810724c <__NVIC_SetPriorityGrouping+0x44>)
 810723c:	68bb      	ldr	r3, [r7, #8]
 810723e:	60d3      	str	r3, [r2, #12]
}
 8107240:	bf00      	nop
 8107242:	3714      	adds	r7, #20
 8107244:	46bd      	mov	sp, r7
 8107246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810724a:	4770      	bx	lr
 810724c:	e000ed00 	.word	0xe000ed00

08107250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8107250:	b480      	push	{r7}
 8107252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8107254:	4b04      	ldr	r3, [pc, #16]	@ (8107268 <__NVIC_GetPriorityGrouping+0x18>)
 8107256:	68db      	ldr	r3, [r3, #12]
 8107258:	0a1b      	lsrs	r3, r3, #8
 810725a:	f003 0307 	and.w	r3, r3, #7
}
 810725e:	4618      	mov	r0, r3
 8107260:	46bd      	mov	sp, r7
 8107262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107266:	4770      	bx	lr
 8107268:	e000ed00 	.word	0xe000ed00

0810726c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810726c:	b480      	push	{r7}
 810726e:	b083      	sub	sp, #12
 8107270:	af00      	add	r7, sp, #0
 8107272:	4603      	mov	r3, r0
 8107274:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8107276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810727a:	2b00      	cmp	r3, #0
 810727c:	db0b      	blt.n	8107296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810727e:	88fb      	ldrh	r3, [r7, #6]
 8107280:	f003 021f 	and.w	r2, r3, #31
 8107284:	4907      	ldr	r1, [pc, #28]	@ (81072a4 <__NVIC_EnableIRQ+0x38>)
 8107286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810728a:	095b      	lsrs	r3, r3, #5
 810728c:	2001      	movs	r0, #1
 810728e:	fa00 f202 	lsl.w	r2, r0, r2
 8107292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8107296:	bf00      	nop
 8107298:	370c      	adds	r7, #12
 810729a:	46bd      	mov	sp, r7
 810729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072a0:	4770      	bx	lr
 81072a2:	bf00      	nop
 81072a4:	e000e100 	.word	0xe000e100

081072a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81072a8:	b480      	push	{r7}
 81072aa:	b083      	sub	sp, #12
 81072ac:	af00      	add	r7, sp, #0
 81072ae:	4603      	mov	r3, r0
 81072b0:	6039      	str	r1, [r7, #0]
 81072b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81072b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81072b8:	2b00      	cmp	r3, #0
 81072ba:	db0a      	blt.n	81072d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81072bc:	683b      	ldr	r3, [r7, #0]
 81072be:	b2da      	uxtb	r2, r3
 81072c0:	490c      	ldr	r1, [pc, #48]	@ (81072f4 <__NVIC_SetPriority+0x4c>)
 81072c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81072c6:	0112      	lsls	r2, r2, #4
 81072c8:	b2d2      	uxtb	r2, r2
 81072ca:	440b      	add	r3, r1
 81072cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81072d0:	e00a      	b.n	81072e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81072d2:	683b      	ldr	r3, [r7, #0]
 81072d4:	b2da      	uxtb	r2, r3
 81072d6:	4908      	ldr	r1, [pc, #32]	@ (81072f8 <__NVIC_SetPriority+0x50>)
 81072d8:	88fb      	ldrh	r3, [r7, #6]
 81072da:	f003 030f 	and.w	r3, r3, #15
 81072de:	3b04      	subs	r3, #4
 81072e0:	0112      	lsls	r2, r2, #4
 81072e2:	b2d2      	uxtb	r2, r2
 81072e4:	440b      	add	r3, r1
 81072e6:	761a      	strb	r2, [r3, #24]
}
 81072e8:	bf00      	nop
 81072ea:	370c      	adds	r7, #12
 81072ec:	46bd      	mov	sp, r7
 81072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072f2:	4770      	bx	lr
 81072f4:	e000e100 	.word	0xe000e100
 81072f8:	e000ed00 	.word	0xe000ed00

081072fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81072fc:	b480      	push	{r7}
 81072fe:	b089      	sub	sp, #36	@ 0x24
 8107300:	af00      	add	r7, sp, #0
 8107302:	60f8      	str	r0, [r7, #12]
 8107304:	60b9      	str	r1, [r7, #8]
 8107306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8107308:	68fb      	ldr	r3, [r7, #12]
 810730a:	f003 0307 	and.w	r3, r3, #7
 810730e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8107310:	69fb      	ldr	r3, [r7, #28]
 8107312:	f1c3 0307 	rsb	r3, r3, #7
 8107316:	2b04      	cmp	r3, #4
 8107318:	bf28      	it	cs
 810731a:	2304      	movcs	r3, #4
 810731c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810731e:	69fb      	ldr	r3, [r7, #28]
 8107320:	3304      	adds	r3, #4
 8107322:	2b06      	cmp	r3, #6
 8107324:	d902      	bls.n	810732c <NVIC_EncodePriority+0x30>
 8107326:	69fb      	ldr	r3, [r7, #28]
 8107328:	3b03      	subs	r3, #3
 810732a:	e000      	b.n	810732e <NVIC_EncodePriority+0x32>
 810732c:	2300      	movs	r3, #0
 810732e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8107330:	f04f 32ff 	mov.w	r2, #4294967295
 8107334:	69bb      	ldr	r3, [r7, #24]
 8107336:	fa02 f303 	lsl.w	r3, r2, r3
 810733a:	43da      	mvns	r2, r3
 810733c:	68bb      	ldr	r3, [r7, #8]
 810733e:	401a      	ands	r2, r3
 8107340:	697b      	ldr	r3, [r7, #20]
 8107342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8107344:	f04f 31ff 	mov.w	r1, #4294967295
 8107348:	697b      	ldr	r3, [r7, #20]
 810734a:	fa01 f303 	lsl.w	r3, r1, r3
 810734e:	43d9      	mvns	r1, r3
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8107354:	4313      	orrs	r3, r2
         );
}
 8107356:	4618      	mov	r0, r3
 8107358:	3724      	adds	r7, #36	@ 0x24
 810735a:	46bd      	mov	sp, r7
 810735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107360:	4770      	bx	lr

08107362 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8107362:	b580      	push	{r7, lr}
 8107364:	b082      	sub	sp, #8
 8107366:	af00      	add	r7, sp, #0
 8107368:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810736a:	6878      	ldr	r0, [r7, #4]
 810736c:	f7ff ff4c 	bl	8107208 <__NVIC_SetPriorityGrouping>
}
 8107370:	bf00      	nop
 8107372:	3708      	adds	r7, #8
 8107374:	46bd      	mov	sp, r7
 8107376:	bd80      	pop	{r7, pc}

08107378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8107378:	b580      	push	{r7, lr}
 810737a:	b086      	sub	sp, #24
 810737c:	af00      	add	r7, sp, #0
 810737e:	4603      	mov	r3, r0
 8107380:	60b9      	str	r1, [r7, #8]
 8107382:	607a      	str	r2, [r7, #4]
 8107384:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8107386:	f7ff ff63 	bl	8107250 <__NVIC_GetPriorityGrouping>
 810738a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810738c:	687a      	ldr	r2, [r7, #4]
 810738e:	68b9      	ldr	r1, [r7, #8]
 8107390:	6978      	ldr	r0, [r7, #20]
 8107392:	f7ff ffb3 	bl	81072fc <NVIC_EncodePriority>
 8107396:	4602      	mov	r2, r0
 8107398:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810739c:	4611      	mov	r1, r2
 810739e:	4618      	mov	r0, r3
 81073a0:	f7ff ff82 	bl	81072a8 <__NVIC_SetPriority>
}
 81073a4:	bf00      	nop
 81073a6:	3718      	adds	r7, #24
 81073a8:	46bd      	mov	sp, r7
 81073aa:	bd80      	pop	{r7, pc}

081073ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81073ac:	b580      	push	{r7, lr}
 81073ae:	b082      	sub	sp, #8
 81073b0:	af00      	add	r7, sp, #0
 81073b2:	4603      	mov	r3, r0
 81073b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81073b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81073ba:	4618      	mov	r0, r3
 81073bc:	f7ff ff56 	bl	810726c <__NVIC_EnableIRQ>
}
 81073c0:	bf00      	nop
 81073c2:	3708      	adds	r7, #8
 81073c4:	46bd      	mov	sp, r7
 81073c6:	bd80      	pop	{r7, pc}

081073c8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81073c8:	b480      	push	{r7}
 81073ca:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81073cc:	4b07      	ldr	r3, [pc, #28]	@ (81073ec <HAL_GetCurrentCPUID+0x24>)
 81073ce:	681b      	ldr	r3, [r3, #0]
 81073d0:	091b      	lsrs	r3, r3, #4
 81073d2:	f003 030f 	and.w	r3, r3, #15
 81073d6:	2b07      	cmp	r3, #7
 81073d8:	d101      	bne.n	81073de <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81073da:	2303      	movs	r3, #3
 81073dc:	e000      	b.n	81073e0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81073de:	2301      	movs	r3, #1
  }
}
 81073e0:	4618      	mov	r0, r3
 81073e2:	46bd      	mov	sp, r7
 81073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073e8:	4770      	bx	lr
 81073ea:	bf00      	nop
 81073ec:	e000ed00 	.word	0xe000ed00

081073f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 81073f0:	b580      	push	{r7, lr}
 81073f2:	b084      	sub	sp, #16
 81073f4:	af00      	add	r7, sp, #0
 81073f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 81073f8:	687b      	ldr	r3, [r7, #4]
 81073fa:	2b00      	cmp	r3, #0
 81073fc:	d101      	bne.n	8107402 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 81073fe:	2301      	movs	r3, #1
 8107400:	e0e7      	b.n	81075d2 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8107402:	687b      	ldr	r3, [r7, #4]
 8107404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107408:	2b00      	cmp	r3, #0
 810740a:	d106      	bne.n	810741a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810740c:	687b      	ldr	r3, [r7, #4]
 810740e:	2223      	movs	r2, #35	@ 0x23
 8107410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8107414:	6878      	ldr	r0, [r7, #4]
 8107416:	f7fd f8af 	bl	8104578 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810741a:	4b70      	ldr	r3, [pc, #448]	@ (81075dc <HAL_ETH_Init+0x1ec>)
 810741c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8107420:	4a6e      	ldr	r2, [pc, #440]	@ (81075dc <HAL_ETH_Init+0x1ec>)
 8107422:	f043 0302 	orr.w	r3, r3, #2
 8107426:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810742a:	4b6c      	ldr	r3, [pc, #432]	@ (81075dc <HAL_ETH_Init+0x1ec>)
 810742c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8107430:	f003 0302 	and.w	r3, r3, #2
 8107434:	60bb      	str	r3, [r7, #8]
 8107436:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8107438:	687b      	ldr	r3, [r7, #4]
 810743a:	7a1b      	ldrb	r3, [r3, #8]
 810743c:	2b00      	cmp	r3, #0
 810743e:	d103      	bne.n	8107448 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8107440:	2000      	movs	r0, #0
 8107442:	f7ff fecd 	bl	81071e0 <HAL_SYSCFG_ETHInterfaceSelect>
 8107446:	e003      	b.n	8107450 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8107448:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 810744c:	f7ff fec8 	bl	81071e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8107450:	4b63      	ldr	r3, [pc, #396]	@ (81075e0 <HAL_ETH_Init+0x1f0>)
 8107452:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8107454:	687b      	ldr	r3, [r7, #4]
 8107456:	681b      	ldr	r3, [r3, #0]
 8107458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810745c:	681b      	ldr	r3, [r3, #0]
 810745e:	687a      	ldr	r2, [r7, #4]
 8107460:	6812      	ldr	r2, [r2, #0]
 8107462:	f043 0301 	orr.w	r3, r3, #1
 8107466:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810746a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 810746c:	f7ff feac 	bl	81071c8 <HAL_GetTick>
 8107470:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8107472:	e011      	b.n	8107498 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8107474:	f7ff fea8 	bl	81071c8 <HAL_GetTick>
 8107478:	4602      	mov	r2, r0
 810747a:	68fb      	ldr	r3, [r7, #12]
 810747c:	1ad3      	subs	r3, r2, r3
 810747e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8107482:	d909      	bls.n	8107498 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	2204      	movs	r2, #4
 8107488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 810748c:	687b      	ldr	r3, [r7, #4]
 810748e:	22e0      	movs	r2, #224	@ 0xe0
 8107490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8107494:	2301      	movs	r3, #1
 8107496:	e09c      	b.n	81075d2 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8107498:	687b      	ldr	r3, [r7, #4]
 810749a:	681b      	ldr	r3, [r3, #0]
 810749c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81074a0:	681b      	ldr	r3, [r3, #0]
 81074a2:	f003 0301 	and.w	r3, r3, #1
 81074a6:	2b00      	cmp	r3, #0
 81074a8:	d1e4      	bne.n	8107474 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 81074aa:	6878      	ldr	r0, [r7, #4]
 81074ac:	f000 ff34 	bl	8108318 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81074b0:	f002 ff32 	bl	810a318 <HAL_RCC_GetHCLKFreq>
 81074b4:	4603      	mov	r3, r0
 81074b6:	4a4b      	ldr	r2, [pc, #300]	@ (81075e4 <HAL_ETH_Init+0x1f4>)
 81074b8:	fba2 2303 	umull	r2, r3, r2, r3
 81074bc:	0c9a      	lsrs	r2, r3, #18
 81074be:	687b      	ldr	r3, [r7, #4]
 81074c0:	681b      	ldr	r3, [r3, #0]
 81074c2:	3a01      	subs	r2, #1
 81074c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 81074c8:	6878      	ldr	r0, [r7, #4]
 81074ca:	f001 f931 	bl	8108730 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 81074ce:	687b      	ldr	r3, [r7, #4]
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81074d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 81074da:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 81074de:	687a      	ldr	r2, [r7, #4]
 81074e0:	6812      	ldr	r2, [r2, #0]
 81074e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81074e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81074ea:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	695b      	ldr	r3, [r3, #20]
 81074f2:	f003 0303 	and.w	r3, r3, #3
 81074f6:	2b00      	cmp	r3, #0
 81074f8:	d009      	beq.n	810750e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 81074fa:	687b      	ldr	r3, [r7, #4]
 81074fc:	2201      	movs	r2, #1
 81074fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	22e0      	movs	r2, #224	@ 0xe0
 8107506:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810750a:	2301      	movs	r3, #1
 810750c:	e061      	b.n	81075d2 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810750e:	687b      	ldr	r3, [r7, #4]
 8107510:	681b      	ldr	r3, [r3, #0]
 8107512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107516:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810751a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810751e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8107522:	687a      	ldr	r2, [r7, #4]
 8107524:	6952      	ldr	r2, [r2, #20]
 8107526:	0051      	lsls	r1, r2, #1
 8107528:	687a      	ldr	r2, [r7, #4]
 810752a:	6812      	ldr	r2, [r2, #0]
 810752c:	430b      	orrs	r3, r1
 810752e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107532:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8107536:	6878      	ldr	r0, [r7, #4]
 8107538:	f001 f997 	bl	810886a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 810753c:	6878      	ldr	r0, [r7, #4]
 810753e:	f001 f9dd 	bl	81088fc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8107542:	687b      	ldr	r3, [r7, #4]
 8107544:	685b      	ldr	r3, [r3, #4]
 8107546:	3305      	adds	r3, #5
 8107548:	781b      	ldrb	r3, [r3, #0]
 810754a:	021a      	lsls	r2, r3, #8
 810754c:	687b      	ldr	r3, [r7, #4]
 810754e:	685b      	ldr	r3, [r3, #4]
 8107550:	3304      	adds	r3, #4
 8107552:	781b      	ldrb	r3, [r3, #0]
 8107554:	4619      	mov	r1, r3
 8107556:	687b      	ldr	r3, [r7, #4]
 8107558:	681b      	ldr	r3, [r3, #0]
 810755a:	430a      	orrs	r2, r1
 810755c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8107560:	687b      	ldr	r3, [r7, #4]
 8107562:	685b      	ldr	r3, [r3, #4]
 8107564:	3303      	adds	r3, #3
 8107566:	781b      	ldrb	r3, [r3, #0]
 8107568:	061a      	lsls	r2, r3, #24
 810756a:	687b      	ldr	r3, [r7, #4]
 810756c:	685b      	ldr	r3, [r3, #4]
 810756e:	3302      	adds	r3, #2
 8107570:	781b      	ldrb	r3, [r3, #0]
 8107572:	041b      	lsls	r3, r3, #16
 8107574:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8107576:	687b      	ldr	r3, [r7, #4]
 8107578:	685b      	ldr	r3, [r3, #4]
 810757a:	3301      	adds	r3, #1
 810757c:	781b      	ldrb	r3, [r3, #0]
 810757e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8107580:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8107582:	687b      	ldr	r3, [r7, #4]
 8107584:	685b      	ldr	r3, [r3, #4]
 8107586:	781b      	ldrb	r3, [r3, #0]
 8107588:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810758a:	687b      	ldr	r3, [r7, #4]
 810758c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810758e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8107590:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8107594:	687b      	ldr	r3, [r7, #4]
 8107596:	681b      	ldr	r3, [r3, #0]
 8107598:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	681a      	ldr	r2, [r3, #0]
 81075a0:	4b11      	ldr	r3, [pc, #68]	@ (81075e8 <HAL_ETH_Init+0x1f8>)
 81075a2:	430b      	orrs	r3, r1
 81075a4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 81075a8:	687b      	ldr	r3, [r7, #4]
 81075aa:	681b      	ldr	r3, [r3, #0]
 81075ac:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 81075b0:	687a      	ldr	r2, [r7, #4]
 81075b2:	6812      	ldr	r2, [r2, #0]
 81075b4:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 81075b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 81075bc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81075c0:	687b      	ldr	r3, [r7, #4]
 81075c2:	2200      	movs	r2, #0
 81075c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 81075c8:	687b      	ldr	r3, [r7, #4]
 81075ca:	2210      	movs	r2, #16
 81075cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81075d0:	2300      	movs	r3, #0
}
 81075d2:	4618      	mov	r0, r3
 81075d4:	3710      	adds	r7, #16
 81075d6:	46bd      	mov	sp, r7
 81075d8:	bd80      	pop	{r7, pc}
 81075da:	bf00      	nop
 81075dc:	58024400 	.word	0x58024400
 81075e0:	58000400 	.word	0x58000400
 81075e4:	431bde83 	.word	0x431bde83
 81075e8:	0c020060 	.word	0x0c020060

081075ec <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 81075ec:	b580      	push	{r7, lr}
 81075ee:	b082      	sub	sp, #8
 81075f0:	af00      	add	r7, sp, #0
 81075f2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 81075f4:	687b      	ldr	r3, [r7, #4]
 81075f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81075fa:	2b10      	cmp	r3, #16
 81075fc:	d166      	bne.n	81076cc <HAL_ETH_Start_IT+0xe0>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 81075fe:	687b      	ldr	r3, [r7, #4]
 8107600:	2223      	movs	r2, #35	@ 0x23
 8107602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8107606:	687b      	ldr	r3, [r7, #4]
 8107608:	2201      	movs	r2, #1
 810760a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 810760c:	687b      	ldr	r3, [r7, #4]
 810760e:	2204      	movs	r2, #4
 8107610:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8107612:	6878      	ldr	r0, [r7, #4]
 8107614:	f000 f9e5 	bl	81079e2 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8107618:	687b      	ldr	r3, [r7, #4]
 810761a:	681b      	ldr	r3, [r3, #0]
 810761c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107620:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8107624:	687a      	ldr	r2, [r7, #4]
 8107626:	6812      	ldr	r2, [r2, #0]
 8107628:	f043 0301 	orr.w	r3, r3, #1
 810762c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107630:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	681b      	ldr	r3, [r3, #0]
 8107638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810763c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8107640:	687a      	ldr	r2, [r7, #4]
 8107642:	6812      	ldr	r2, [r2, #0]
 8107644:	f043 0301 	orr.w	r3, r3, #1
 8107648:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810764c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8107650:	687b      	ldr	r3, [r7, #4]
 8107652:	681b      	ldr	r3, [r3, #0]
 8107654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107658:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810765c:	687a      	ldr	r2, [r7, #4]
 810765e:	6812      	ldr	r2, [r2, #0]
 8107660:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8107664:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107668:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 810766c:	687b      	ldr	r3, [r7, #4]
 810766e:	681b      	ldr	r3, [r3, #0]
 8107670:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8107674:	687b      	ldr	r3, [r7, #4]
 8107676:	681b      	ldr	r3, [r3, #0]
 8107678:	f042 0201 	orr.w	r2, r2, #1
 810767c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8107680:	687b      	ldr	r3, [r7, #4]
 8107682:	681b      	ldr	r3, [r3, #0]
 8107684:	681a      	ldr	r2, [r3, #0]
 8107686:	687b      	ldr	r3, [r7, #4]
 8107688:	681b      	ldr	r3, [r3, #0]
 810768a:	f042 0202 	orr.w	r2, r2, #2
 810768e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8107690:	687b      	ldr	r3, [r7, #4]
 8107692:	681b      	ldr	r3, [r3, #0]
 8107694:	681a      	ldr	r2, [r3, #0]
 8107696:	687b      	ldr	r3, [r7, #4]
 8107698:	681b      	ldr	r3, [r3, #0]
 810769a:	f042 0201 	orr.w	r2, r2, #1
 810769e:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 81076a0:	687b      	ldr	r3, [r7, #4]
 81076a2:	681b      	ldr	r3, [r3, #0]
 81076a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81076a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 81076ac:	687a      	ldr	r2, [r7, #4]
 81076ae:	6812      	ldr	r2, [r2, #0]
 81076b0:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 81076b4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 81076b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81076bc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 81076c0:	687b      	ldr	r3, [r7, #4]
 81076c2:	2223      	movs	r2, #35	@ 0x23
 81076c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 81076c8:	2300      	movs	r3, #0
 81076ca:	e000      	b.n	81076ce <HAL_ETH_Start_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 81076cc:	2301      	movs	r3, #1
  }
}
 81076ce:	4618      	mov	r0, r3
 81076d0:	3708      	adds	r7, #8
 81076d2:	46bd      	mov	sp, r7
 81076d4:	bd80      	pop	{r7, pc}

081076d6 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 81076d6:	b480      	push	{r7}
 81076d8:	b085      	sub	sp, #20
 81076da:	af00      	add	r7, sp, #0
 81076dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81076e4:	2b23      	cmp	r3, #35	@ 0x23
 81076e6:	d167      	bne.n	81077b8 <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 81076e8:	687b      	ldr	r3, [r7, #4]
 81076ea:	2223      	movs	r2, #35	@ 0x23
 81076ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 81076f0:	687b      	ldr	r3, [r7, #4]
 81076f2:	681b      	ldr	r3, [r3, #0]
 81076f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81076f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 81076fc:	687a      	ldr	r2, [r7, #4]
 81076fe:	6812      	ldr	r2, [r2, #0]
 8107700:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8107704:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8107708:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810770c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8107710:	687b      	ldr	r3, [r7, #4]
 8107712:	681b      	ldr	r3, [r3, #0]
 8107714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107718:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810771c:	687a      	ldr	r2, [r7, #4]
 810771e:	6812      	ldr	r2, [r2, #0]
 8107720:	f023 0301 	bic.w	r3, r3, #1
 8107724:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107728:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810772c:	687b      	ldr	r3, [r7, #4]
 810772e:	681b      	ldr	r3, [r3, #0]
 8107730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107734:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8107738:	687a      	ldr	r2, [r7, #4]
 810773a:	6812      	ldr	r2, [r2, #0]
 810773c:	f023 0301 	bic.w	r3, r3, #1
 8107740:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107744:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8107748:	687b      	ldr	r3, [r7, #4]
 810774a:	681b      	ldr	r3, [r3, #0]
 810774c:	681a      	ldr	r2, [r3, #0]
 810774e:	687b      	ldr	r3, [r7, #4]
 8107750:	681b      	ldr	r3, [r3, #0]
 8107752:	f022 0201 	bic.w	r2, r2, #1
 8107756:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8107758:	687b      	ldr	r3, [r7, #4]
 810775a:	681b      	ldr	r3, [r3, #0]
 810775c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8107760:	687b      	ldr	r3, [r7, #4]
 8107762:	681b      	ldr	r3, [r3, #0]
 8107764:	f042 0201 	orr.w	r2, r2, #1
 8107768:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 810776c:	687b      	ldr	r3, [r7, #4]
 810776e:	681b      	ldr	r3, [r3, #0]
 8107770:	681a      	ldr	r2, [r3, #0]
 8107772:	687b      	ldr	r3, [r7, #4]
 8107774:	681b      	ldr	r3, [r3, #0]
 8107776:	f022 0202 	bic.w	r2, r2, #2
 810777a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810777c:	2300      	movs	r3, #0
 810777e:	60fb      	str	r3, [r7, #12]
 8107780:	e00e      	b.n	81077a0 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8107782:	687b      	ldr	r3, [r7, #4]
 8107784:	68fa      	ldr	r2, [r7, #12]
 8107786:	3212      	adds	r2, #18
 8107788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810778c:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 810778e:	68bb      	ldr	r3, [r7, #8]
 8107790:	68db      	ldr	r3, [r3, #12]
 8107792:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8107796:	68bb      	ldr	r3, [r7, #8]
 8107798:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810779a:	68fb      	ldr	r3, [r7, #12]
 810779c:	3301      	adds	r3, #1
 810779e:	60fb      	str	r3, [r7, #12]
 81077a0:	68fb      	ldr	r3, [r7, #12]
 81077a2:	2b03      	cmp	r3, #3
 81077a4:	d9ed      	bls.n	8107782 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 81077a6:	687b      	ldr	r3, [r7, #4]
 81077a8:	2200      	movs	r2, #0
 81077aa:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 81077ac:	687b      	ldr	r3, [r7, #4]
 81077ae:	2210      	movs	r2, #16
 81077b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 81077b4:	2300      	movs	r3, #0
 81077b6:	e000      	b.n	81077ba <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 81077b8:	2301      	movs	r3, #1
  }
}
 81077ba:	4618      	mov	r0, r3
 81077bc:	3714      	adds	r7, #20
 81077be:	46bd      	mov	sp, r7
 81077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077c4:	4770      	bx	lr

081077c6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 81077c6:	b580      	push	{r7, lr}
 81077c8:	b082      	sub	sp, #8
 81077ca:	af00      	add	r7, sp, #0
 81077cc:	6078      	str	r0, [r7, #4]
 81077ce:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 81077d0:	683b      	ldr	r3, [r7, #0]
 81077d2:	2b00      	cmp	r3, #0
 81077d4:	d109      	bne.n	81077ea <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 81077d6:	687b      	ldr	r3, [r7, #4]
 81077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81077dc:	f043 0201 	orr.w	r2, r3, #1
 81077e0:	687b      	ldr	r3, [r7, #4]
 81077e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 81077e6:	2301      	movs	r3, #1
 81077e8:	e03a      	b.n	8107860 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 81077ea:	687b      	ldr	r3, [r7, #4]
 81077ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81077f0:	2b23      	cmp	r3, #35	@ 0x23
 81077f2:	d134      	bne.n	810785e <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 81077f4:	683b      	ldr	r3, [r7, #0]
 81077f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81077f8:	687b      	ldr	r3, [r7, #4]
 81077fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 81077fc:	2201      	movs	r2, #1
 81077fe:	6839      	ldr	r1, [r7, #0]
 8107800:	6878      	ldr	r0, [r7, #4]
 8107802:	f001 f8d8 	bl	81089b6 <ETH_Prepare_Tx_Descriptors>
 8107806:	4603      	mov	r3, r0
 8107808:	2b00      	cmp	r3, #0
 810780a:	d009      	beq.n	8107820 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 810780c:	687b      	ldr	r3, [r7, #4]
 810780e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107812:	f043 0202 	orr.w	r2, r3, #2
 8107816:	687b      	ldr	r3, [r7, #4]
 8107818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 810781c:	2301      	movs	r3, #1
 810781e:	e01f      	b.n	8107860 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8107820:	f3bf 8f4f 	dsb	sy
}
 8107824:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810782a:	1c5a      	adds	r2, r3, #1
 810782c:	687b      	ldr	r3, [r7, #4]
 810782e:	629a      	str	r2, [r3, #40]	@ 0x28
 8107830:	687b      	ldr	r3, [r7, #4]
 8107832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107834:	2b03      	cmp	r3, #3
 8107836:	d904      	bls.n	8107842 <HAL_ETH_Transmit_IT+0x7c>
 8107838:	687b      	ldr	r3, [r7, #4]
 810783a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810783c:	1f1a      	subs	r2, r3, #4
 810783e:	687b      	ldr	r3, [r7, #4]
 8107840:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8107842:	687b      	ldr	r3, [r7, #4]
 8107844:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8107846:	687b      	ldr	r3, [r7, #4]
 8107848:	681a      	ldr	r2, [r3, #0]
 810784a:	687b      	ldr	r3, [r7, #4]
 810784c:	3106      	adds	r1, #6
 810784e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8107852:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107856:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 810785a:	2300      	movs	r3, #0
 810785c:	e000      	b.n	8107860 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 810785e:	2301      	movs	r3, #1
  }
}
 8107860:	4618      	mov	r0, r3
 8107862:	3708      	adds	r7, #8
 8107864:	46bd      	mov	sp, r7
 8107866:	bd80      	pop	{r7, pc}

08107868 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8107868:	b580      	push	{r7, lr}
 810786a:	b088      	sub	sp, #32
 810786c:	af00      	add	r7, sp, #0
 810786e:	6078      	str	r0, [r7, #4]
 8107870:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8107872:	2300      	movs	r3, #0
 8107874:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8107876:	2300      	movs	r3, #0
 8107878:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 810787a:	683b      	ldr	r3, [r7, #0]
 810787c:	2b00      	cmp	r3, #0
 810787e:	d109      	bne.n	8107894 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8107880:	687b      	ldr	r3, [r7, #4]
 8107882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107886:	f043 0201 	orr.w	r2, r3, #1
 810788a:	687b      	ldr	r3, [r7, #4]
 810788c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8107890:	2301      	movs	r3, #1
 8107892:	e0a2      	b.n	81079da <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8107894:	687b      	ldr	r3, [r7, #4]
 8107896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810789a:	2b23      	cmp	r3, #35	@ 0x23
 810789c:	d001      	beq.n	81078a2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 810789e:	2301      	movs	r3, #1
 81078a0:	e09b      	b.n	81079da <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 81078a2:	687b      	ldr	r3, [r7, #4]
 81078a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81078a6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 81078a8:	687b      	ldr	r3, [r7, #4]
 81078aa:	69fa      	ldr	r2, [r7, #28]
 81078ac:	3212      	adds	r2, #18
 81078ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81078b2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 81078b4:	687b      	ldr	r3, [r7, #4]
 81078b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81078b8:	f1c3 0304 	rsb	r3, r3, #4
 81078bc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 81078be:	e064      	b.n	810798a <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 81078c0:	69bb      	ldr	r3, [r7, #24]
 81078c2:	68db      	ldr	r3, [r3, #12]
 81078c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81078c8:	2b00      	cmp	r3, #0
 81078ca:	d007      	beq.n	81078dc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 81078cc:	69bb      	ldr	r3, [r7, #24]
 81078ce:	685a      	ldr	r2, [r3, #4]
 81078d0:	687b      	ldr	r3, [r7, #4]
 81078d2:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 81078d4:	69bb      	ldr	r3, [r7, #24]
 81078d6:	681a      	ldr	r2, [r3, #0]
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 81078dc:	69bb      	ldr	r3, [r7, #24]
 81078de:	68db      	ldr	r3, [r3, #12]
 81078e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81078e4:	2b00      	cmp	r3, #0
 81078e6:	d103      	bne.n	81078f0 <HAL_ETH_ReadData+0x88>
 81078e8:	687b      	ldr	r3, [r7, #4]
 81078ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81078ec:	2b00      	cmp	r3, #0
 81078ee:	d03a      	beq.n	8107966 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 81078f0:	69bb      	ldr	r3, [r7, #24]
 81078f2:	68db      	ldr	r3, [r3, #12]
 81078f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81078f8:	2b00      	cmp	r3, #0
 81078fa:	d005      	beq.n	8107908 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 81078fc:	687b      	ldr	r3, [r7, #4]
 81078fe:	2200      	movs	r2, #0
 8107900:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	2200      	movs	r2, #0
 8107906:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8107908:	69bb      	ldr	r3, [r7, #24]
 810790a:	68db      	ldr	r3, [r3, #12]
 810790c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107914:	1ad3      	subs	r3, r2, r3
 8107916:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8107918:	69bb      	ldr	r3, [r7, #24]
 810791a:	68db      	ldr	r3, [r3, #12]
 810791c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8107920:	2b00      	cmp	r3, #0
 8107922:	d005      	beq.n	8107930 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8107924:	69bb      	ldr	r3, [r7, #24]
 8107926:	68da      	ldr	r2, [r3, #12]
 8107928:	687b      	ldr	r3, [r7, #4]
 810792a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 810792c:	2301      	movs	r3, #1
 810792e:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8107930:	687b      	ldr	r3, [r7, #4]
 8107932:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8107936:	687b      	ldr	r3, [r7, #4]
 8107938:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 810793c:	69bb      	ldr	r3, [r7, #24]
 810793e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8107940:	461a      	mov	r2, r3
 8107942:	68bb      	ldr	r3, [r7, #8]
 8107944:	b29b      	uxth	r3, r3
 8107946:	f7fc ffdf 	bl	8104908 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 810794a:	687b      	ldr	r3, [r7, #4]
 810794c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810794e:	1c5a      	adds	r2, r3, #1
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8107954:	687b      	ldr	r3, [r7, #4]
 8107956:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8107958:	68bb      	ldr	r3, [r7, #8]
 810795a:	441a      	add	r2, r3
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8107960:	69bb      	ldr	r3, [r7, #24]
 8107962:	2200      	movs	r2, #0
 8107964:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8107966:	69fb      	ldr	r3, [r7, #28]
 8107968:	3301      	adds	r3, #1
 810796a:	61fb      	str	r3, [r7, #28]
 810796c:	69fb      	ldr	r3, [r7, #28]
 810796e:	2b03      	cmp	r3, #3
 8107970:	d902      	bls.n	8107978 <HAL_ETH_ReadData+0x110>
 8107972:	69fb      	ldr	r3, [r7, #28]
 8107974:	3b04      	subs	r3, #4
 8107976:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	69fa      	ldr	r2, [r7, #28]
 810797c:	3212      	adds	r2, #18
 810797e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107982:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8107984:	697b      	ldr	r3, [r7, #20]
 8107986:	3301      	adds	r3, #1
 8107988:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810798a:	69bb      	ldr	r3, [r7, #24]
 810798c:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 810798e:	2b00      	cmp	r3, #0
 8107990:	db06      	blt.n	81079a0 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8107992:	697a      	ldr	r2, [r7, #20]
 8107994:	68fb      	ldr	r3, [r7, #12]
 8107996:	429a      	cmp	r2, r3
 8107998:	d202      	bcs.n	81079a0 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 810799a:	7cfb      	ldrb	r3, [r7, #19]
 810799c:	2b00      	cmp	r3, #0
 810799e:	d08f      	beq.n	81078c0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 81079a0:	687b      	ldr	r3, [r7, #4]
 81079a2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81079a4:	697b      	ldr	r3, [r7, #20]
 81079a6:	441a      	add	r2, r3
 81079a8:	687b      	ldr	r3, [r7, #4]
 81079aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 81079ac:	687b      	ldr	r3, [r7, #4]
 81079ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81079b0:	2b00      	cmp	r3, #0
 81079b2:	d002      	beq.n	81079ba <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 81079b4:	6878      	ldr	r0, [r7, #4]
 81079b6:	f000 f814 	bl	81079e2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	69fa      	ldr	r2, [r7, #28]
 81079be:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 81079c0:	7cfb      	ldrb	r3, [r7, #19]
 81079c2:	2b01      	cmp	r3, #1
 81079c4:	d108      	bne.n	81079d8 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 81079c6:	687b      	ldr	r3, [r7, #4]
 81079c8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 81079ca:	683b      	ldr	r3, [r7, #0]
 81079cc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 81079ce:	687b      	ldr	r3, [r7, #4]
 81079d0:	2200      	movs	r2, #0
 81079d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 81079d4:	2300      	movs	r3, #0
 81079d6:	e000      	b.n	81079da <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 81079d8:	2301      	movs	r3, #1
}
 81079da:	4618      	mov	r0, r3
 81079dc:	3720      	adds	r7, #32
 81079de:	46bd      	mov	sp, r7
 81079e0:	bd80      	pop	{r7, pc}

081079e2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 81079e2:	b580      	push	{r7, lr}
 81079e4:	b088      	sub	sp, #32
 81079e6:	af00      	add	r7, sp, #0
 81079e8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 81079ea:	2300      	movs	r3, #0
 81079ec:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 81079ee:	2301      	movs	r3, #1
 81079f0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 81079f2:	687b      	ldr	r3, [r7, #4]
 81079f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81079f6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 81079f8:	687b      	ldr	r3, [r7, #4]
 81079fa:	69fa      	ldr	r2, [r7, #28]
 81079fc:	3212      	adds	r2, #18
 81079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107a02:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8107a04:	687b      	ldr	r3, [r7, #4]
 8107a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107a08:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8107a0a:	e038      	b.n	8107a7e <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8107a0c:	697b      	ldr	r3, [r7, #20]
 8107a0e:	691b      	ldr	r3, [r3, #16]
 8107a10:	2b00      	cmp	r3, #0
 8107a12:	d112      	bne.n	8107a3a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8107a14:	f107 0308 	add.w	r3, r7, #8
 8107a18:	4618      	mov	r0, r3
 8107a1a:	f7fc ff45 	bl	81048a8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8107a1e:	68bb      	ldr	r3, [r7, #8]
 8107a20:	2b00      	cmp	r3, #0
 8107a22:	d102      	bne.n	8107a2a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8107a24:	2300      	movs	r3, #0
 8107a26:	74fb      	strb	r3, [r7, #19]
 8107a28:	e007      	b.n	8107a3a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8107a2a:	68bb      	ldr	r3, [r7, #8]
 8107a2c:	461a      	mov	r2, r3
 8107a2e:	697b      	ldr	r3, [r7, #20]
 8107a30:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8107a32:	68bb      	ldr	r3, [r7, #8]
 8107a34:	461a      	mov	r2, r3
 8107a36:	697b      	ldr	r3, [r7, #20]
 8107a38:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8107a3a:	7cfb      	ldrb	r3, [r7, #19]
 8107a3c:	2b00      	cmp	r3, #0
 8107a3e:	d01e      	beq.n	8107a7e <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107a44:	2b00      	cmp	r3, #0
 8107a46:	d004      	beq.n	8107a52 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8107a48:	697b      	ldr	r3, [r7, #20]
 8107a4a:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8107a4e:	60da      	str	r2, [r3, #12]
 8107a50:	e003      	b.n	8107a5a <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8107a52:	697b      	ldr	r3, [r7, #20]
 8107a54:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8107a58:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8107a5a:	69fb      	ldr	r3, [r7, #28]
 8107a5c:	3301      	adds	r3, #1
 8107a5e:	61fb      	str	r3, [r7, #28]
 8107a60:	69fb      	ldr	r3, [r7, #28]
 8107a62:	2b03      	cmp	r3, #3
 8107a64:	d902      	bls.n	8107a6c <ETH_UpdateDescriptor+0x8a>
 8107a66:	69fb      	ldr	r3, [r7, #28]
 8107a68:	3b04      	subs	r3, #4
 8107a6a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8107a6c:	687b      	ldr	r3, [r7, #4]
 8107a6e:	69fa      	ldr	r2, [r7, #28]
 8107a70:	3212      	adds	r2, #18
 8107a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107a76:	617b      	str	r3, [r7, #20]
      desccount--;
 8107a78:	69bb      	ldr	r3, [r7, #24]
 8107a7a:	3b01      	subs	r3, #1
 8107a7c:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8107a7e:	69bb      	ldr	r3, [r7, #24]
 8107a80:	2b00      	cmp	r3, #0
 8107a82:	d002      	beq.n	8107a8a <ETH_UpdateDescriptor+0xa8>
 8107a84:	7cfb      	ldrb	r3, [r7, #19]
 8107a86:	2b00      	cmp	r3, #0
 8107a88:	d1c0      	bne.n	8107a0c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107a8e:	69ba      	ldr	r2, [r7, #24]
 8107a90:	429a      	cmp	r2, r3
 8107a92:	d01b      	beq.n	8107acc <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8107a94:	69fb      	ldr	r3, [r7, #28]
 8107a96:	3301      	adds	r3, #1
 8107a98:	f003 0303 	and.w	r3, r3, #3
 8107a9c:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8107a9e:	f3bf 8f5f 	dmb	sy
}
 8107aa2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	6919      	ldr	r1, [r3, #16]
 8107aa8:	68fa      	ldr	r2, [r7, #12]
 8107aaa:	4613      	mov	r3, r2
 8107aac:	005b      	lsls	r3, r3, #1
 8107aae:	4413      	add	r3, r2
 8107ab0:	00db      	lsls	r3, r3, #3
 8107ab2:	18ca      	adds	r2, r1, r3
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	681b      	ldr	r3, [r3, #0]
 8107ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107abc:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8107ac0:	687b      	ldr	r3, [r7, #4]
 8107ac2:	69fa      	ldr	r2, [r7, #28]
 8107ac4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8107ac6:	687b      	ldr	r3, [r7, #4]
 8107ac8:	69ba      	ldr	r2, [r7, #24]
 8107aca:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8107acc:	bf00      	nop
 8107ace:	3720      	adds	r7, #32
 8107ad0:	46bd      	mov	sp, r7
 8107ad2:	bd80      	pop	{r7, pc}

08107ad4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8107ad4:	b580      	push	{r7, lr}
 8107ad6:	b086      	sub	sp, #24
 8107ad8:	af00      	add	r7, sp, #0
 8107ada:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	3318      	adds	r3, #24
 8107ae0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8107ae2:	68bb      	ldr	r3, [r7, #8]
 8107ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107ae6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8107ae8:	68bb      	ldr	r3, [r7, #8]
 8107aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107aec:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8107aee:	2301      	movs	r3, #1
 8107af0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8107af2:	e047      	b.n	8107b84 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8107af4:	2301      	movs	r3, #1
 8107af6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8107af8:	697b      	ldr	r3, [r7, #20]
 8107afa:	3b01      	subs	r3, #1
 8107afc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8107afe:	68ba      	ldr	r2, [r7, #8]
 8107b00:	693b      	ldr	r3, [r7, #16]
 8107b02:	3304      	adds	r3, #4
 8107b04:	009b      	lsls	r3, r3, #2
 8107b06:	4413      	add	r3, r2
 8107b08:	685b      	ldr	r3, [r3, #4]
 8107b0a:	2b00      	cmp	r3, #0
 8107b0c:	d10a      	bne.n	8107b24 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8107b0e:	693b      	ldr	r3, [r7, #16]
 8107b10:	3301      	adds	r3, #1
 8107b12:	613b      	str	r3, [r7, #16]
 8107b14:	693b      	ldr	r3, [r7, #16]
 8107b16:	2b03      	cmp	r3, #3
 8107b18:	d902      	bls.n	8107b20 <HAL_ETH_ReleaseTxPacket+0x4c>
 8107b1a:	693b      	ldr	r3, [r7, #16]
 8107b1c:	3b04      	subs	r3, #4
 8107b1e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8107b20:	2300      	movs	r3, #0
 8107b22:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8107b24:	7bbb      	ldrb	r3, [r7, #14]
 8107b26:	2b00      	cmp	r3, #0
 8107b28:	d02c      	beq.n	8107b84 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8107b2a:	687b      	ldr	r3, [r7, #4]
 8107b2c:	68d9      	ldr	r1, [r3, #12]
 8107b2e:	693a      	ldr	r2, [r7, #16]
 8107b30:	4613      	mov	r3, r2
 8107b32:	005b      	lsls	r3, r3, #1
 8107b34:	4413      	add	r3, r2
 8107b36:	00db      	lsls	r3, r3, #3
 8107b38:	440b      	add	r3, r1
 8107b3a:	68db      	ldr	r3, [r3, #12]
 8107b3c:	2b00      	cmp	r3, #0
 8107b3e:	db1f      	blt.n	8107b80 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8107b40:	68ba      	ldr	r2, [r7, #8]
 8107b42:	693b      	ldr	r3, [r7, #16]
 8107b44:	3304      	adds	r3, #4
 8107b46:	009b      	lsls	r3, r3, #2
 8107b48:	4413      	add	r3, r2
 8107b4a:	685b      	ldr	r3, [r3, #4]
 8107b4c:	4618      	mov	r0, r3
 8107b4e:	f7fc ff1b 	bl	8104988 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8107b52:	68ba      	ldr	r2, [r7, #8]
 8107b54:	693b      	ldr	r3, [r7, #16]
 8107b56:	3304      	adds	r3, #4
 8107b58:	009b      	lsls	r3, r3, #2
 8107b5a:	4413      	add	r3, r2
 8107b5c:	2200      	movs	r2, #0
 8107b5e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8107b60:	693b      	ldr	r3, [r7, #16]
 8107b62:	3301      	adds	r3, #1
 8107b64:	613b      	str	r3, [r7, #16]
 8107b66:	693b      	ldr	r3, [r7, #16]
 8107b68:	2b03      	cmp	r3, #3
 8107b6a:	d902      	bls.n	8107b72 <HAL_ETH_ReleaseTxPacket+0x9e>
 8107b6c:	693b      	ldr	r3, [r7, #16]
 8107b6e:	3b04      	subs	r3, #4
 8107b70:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8107b72:	68bb      	ldr	r3, [r7, #8]
 8107b74:	697a      	ldr	r2, [r7, #20]
 8107b76:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8107b78:	68bb      	ldr	r3, [r7, #8]
 8107b7a:	693a      	ldr	r2, [r7, #16]
 8107b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8107b7e:	e001      	b.n	8107b84 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8107b80:	2300      	movs	r3, #0
 8107b82:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8107b84:	697b      	ldr	r3, [r7, #20]
 8107b86:	2b00      	cmp	r3, #0
 8107b88:	d002      	beq.n	8107b90 <HAL_ETH_ReleaseTxPacket+0xbc>
 8107b8a:	7bfb      	ldrb	r3, [r7, #15]
 8107b8c:	2b00      	cmp	r3, #0
 8107b8e:	d1b1      	bne.n	8107af4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8107b90:	2300      	movs	r3, #0
}
 8107b92:	4618      	mov	r0, r3
 8107b94:	3718      	adds	r7, #24
 8107b96:	46bd      	mov	sp, r7
 8107b98:	bd80      	pop	{r7, pc}
	...

08107b9c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8107b9c:	b580      	push	{r7, lr}
 8107b9e:	b088      	sub	sp, #32
 8107ba0:	af00      	add	r7, sp, #0
 8107ba2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	681b      	ldr	r3, [r3, #0]
 8107ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8107bac:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8107bae:	687b      	ldr	r3, [r7, #4]
 8107bb0:	681b      	ldr	r3, [r3, #0]
 8107bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107bb6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8107bba:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	681b      	ldr	r3, [r3, #0]
 8107bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107bc4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8107bc8:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8107bca:	4b77      	ldr	r3, [pc, #476]	@ (8107da8 <HAL_ETH_IRQHandler+0x20c>)
 8107bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107bce:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 8107bd0:	4b76      	ldr	r3, [pc, #472]	@ (8107dac <HAL_ETH_IRQHandler+0x210>)
 8107bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107bd4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8107bd6:	69bb      	ldr	r3, [r7, #24]
 8107bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107bdc:	2b00      	cmp	r3, #0
 8107bde:	d010      	beq.n	8107c02 <HAL_ETH_IRQHandler+0x66>
 8107be0:	697b      	ldr	r3, [r7, #20]
 8107be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107be6:	2b00      	cmp	r3, #0
 8107be8:	d00b      	beq.n	8107c02 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8107bea:	687b      	ldr	r3, [r7, #4]
 8107bec:	681b      	ldr	r3, [r3, #0]
 8107bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107bf2:	461a      	mov	r2, r3
 8107bf4:	f248 0340 	movw	r3, #32832	@ 0x8040
 8107bf8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8107bfc:	6878      	ldr	r0, [r7, #4]
 8107bfe:	f7fc f9fb 	bl	8103ff8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8107c02:	69bb      	ldr	r3, [r7, #24]
 8107c04:	f003 0301 	and.w	r3, r3, #1
 8107c08:	2b00      	cmp	r3, #0
 8107c0a:	d010      	beq.n	8107c2e <HAL_ETH_IRQHandler+0x92>
 8107c0c:	697b      	ldr	r3, [r7, #20]
 8107c0e:	f003 0301 	and.w	r3, r3, #1
 8107c12:	2b00      	cmp	r3, #0
 8107c14:	d00b      	beq.n	8107c2e <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8107c16:	687b      	ldr	r3, [r7, #4]
 8107c18:	681b      	ldr	r3, [r3, #0]
 8107c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107c1e:	461a      	mov	r2, r3
 8107c20:	f248 0301 	movw	r3, #32769	@ 0x8001
 8107c24:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8107c28:	6878      	ldr	r0, [r7, #4]
 8107c2a:	f7fc f9f5 	bl	8104018 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8107c2e:	69bb      	ldr	r3, [r7, #24]
 8107c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107c34:	2b00      	cmp	r3, #0
 8107c36:	d047      	beq.n	8107cc8 <HAL_ETH_IRQHandler+0x12c>
 8107c38:	697b      	ldr	r3, [r7, #20]
 8107c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107c3e:	2b00      	cmp	r3, #0
 8107c40:	d042      	beq.n	8107cc8 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107c48:	f043 0208 	orr.w	r2, r3, #8
 8107c4c:	687b      	ldr	r3, [r7, #4]
 8107c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8107c52:	69bb      	ldr	r3, [r7, #24]
 8107c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8107c58:	2b00      	cmp	r3, #0
 8107c5a:	d01e      	beq.n	8107c9a <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8107c5c:	687b      	ldr	r3, [r7, #4]
 8107c5e:	681b      	ldr	r3, [r3, #0]
 8107c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107c64:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8107c68:	f241 1302 	movw	r3, #4354	@ 0x1102
 8107c6c:	4013      	ands	r3, r2
 8107c6e:	687a      	ldr	r2, [r7, #4]
 8107c70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8107c74:	687b      	ldr	r3, [r7, #4]
 8107c76:	681b      	ldr	r3, [r3, #0]
 8107c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107c7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8107c80:	687a      	ldr	r2, [r7, #4]
 8107c82:	6812      	ldr	r2, [r2, #0]
 8107c84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8107c88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107c8c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8107c90:	687b      	ldr	r3, [r7, #4]
 8107c92:	22e0      	movs	r2, #224	@ 0xe0
 8107c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8107c98:	e013      	b.n	8107cc2 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8107c9a:	687b      	ldr	r3, [r7, #4]
 8107c9c:	681b      	ldr	r3, [r3, #0]
 8107c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107ca2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8107ca6:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8107caa:	687b      	ldr	r3, [r7, #4]
 8107cac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	681b      	ldr	r3, [r3, #0]
 8107cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107cb8:	461a      	mov	r2, r3
 8107cba:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8107cbe:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8107cc2:	6878      	ldr	r0, [r7, #4]
 8107cc4:	f7fc f9b8 	bl	8104038 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8107cc8:	69fb      	ldr	r3, [r7, #28]
 8107cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107cce:	2b00      	cmp	r3, #0
 8107cd0:	d104      	bne.n	8107cdc <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8107cd2:	69fb      	ldr	r3, [r7, #28]
 8107cd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8107cd8:	2b00      	cmp	r3, #0
 8107cda:	d019      	beq.n	8107d10 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8107cdc:	687b      	ldr	r3, [r7, #4]
 8107cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107ce2:	f043 0210 	orr.w	r2, r3, #16
 8107ce6:	687b      	ldr	r3, [r7, #4]
 8107ce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	681b      	ldr	r3, [r3, #0]
 8107cf0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8107cf4:	687b      	ldr	r3, [r7, #4]
 8107cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8107cfa:	687b      	ldr	r3, [r7, #4]
 8107cfc:	22e0      	movs	r2, #224	@ 0xe0
 8107cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8107d02:	6878      	ldr	r0, [r7, #4]
 8107d04:	f7fc f998 	bl	8104038 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	2200      	movs	r2, #0
 8107d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8107d10:	69fb      	ldr	r3, [r7, #28]
 8107d12:	f003 0310 	and.w	r3, r3, #16
 8107d16:	2b00      	cmp	r3, #0
 8107d18:	d00f      	beq.n	8107d3a <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8107d1a:	687b      	ldr	r3, [r7, #4]
 8107d1c:	681b      	ldr	r3, [r3, #0]
 8107d1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8107d22:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8107d2c:	6878      	ldr	r0, [r7, #4]
 8107d2e:	f000 f83f 	bl	8107db0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8107d32:	687b      	ldr	r3, [r7, #4]
 8107d34:	2200      	movs	r2, #0
 8107d36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8107d3a:	69fb      	ldr	r3, [r7, #28]
 8107d3c:	f003 0320 	and.w	r3, r3, #32
 8107d40:	2b00      	cmp	r3, #0
 8107d42:	d00f      	beq.n	8107d64 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8107d44:	687b      	ldr	r3, [r7, #4]
 8107d46:	681b      	ldr	r3, [r3, #0]
 8107d48:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8107d4c:	f003 020f 	and.w	r2, r3, #15
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8107d56:	6878      	ldr	r0, [r7, #4]
 8107d58:	f000 f834 	bl	8107dc4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	2200      	movs	r2, #0
 8107d60:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8107d64:	f7ff fb30 	bl	81073c8 <HAL_GetCurrentCPUID>
 8107d68:	4603      	mov	r3, r0
 8107d6a:	2b03      	cmp	r3, #3
 8107d6c:	d10c      	bne.n	8107d88 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8107d6e:	693b      	ldr	r3, [r7, #16]
 8107d70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107d74:	2b00      	cmp	r3, #0
 8107d76:	d013      	beq.n	8107da0 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8107d78:	4b0b      	ldr	r3, [pc, #44]	@ (8107da8 <HAL_ETH_IRQHandler+0x20c>)
 8107d7a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8107d7e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8107d80:	6878      	ldr	r0, [r7, #4]
 8107d82:	f000 f829 	bl	8107dd8 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8107d86:	e00b      	b.n	8107da0 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8107d88:	68fb      	ldr	r3, [r7, #12]
 8107d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107d8e:	2b00      	cmp	r3, #0
 8107d90:	d006      	beq.n	8107da0 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8107d92:	4b06      	ldr	r3, [pc, #24]	@ (8107dac <HAL_ETH_IRQHandler+0x210>)
 8107d94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8107d98:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 8107d9a:	6878      	ldr	r0, [r7, #4]
 8107d9c:	f000 f81c 	bl	8107dd8 <HAL_ETH_WakeUpCallback>
}
 8107da0:	bf00      	nop
 8107da2:	3720      	adds	r7, #32
 8107da4:	46bd      	mov	sp, r7
 8107da6:	bd80      	pop	{r7, pc}
 8107da8:	58000080 	.word	0x58000080
 8107dac:	580000c0 	.word	0x580000c0

08107db0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8107db0:	b480      	push	{r7}
 8107db2:	b083      	sub	sp, #12
 8107db4:	af00      	add	r7, sp, #0
 8107db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8107db8:	bf00      	nop
 8107dba:	370c      	adds	r7, #12
 8107dbc:	46bd      	mov	sp, r7
 8107dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dc2:	4770      	bx	lr

08107dc4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8107dc4:	b480      	push	{r7}
 8107dc6:	b083      	sub	sp, #12
 8107dc8:	af00      	add	r7, sp, #0
 8107dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8107dcc:	bf00      	nop
 8107dce:	370c      	adds	r7, #12
 8107dd0:	46bd      	mov	sp, r7
 8107dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dd6:	4770      	bx	lr

08107dd8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8107dd8:	b480      	push	{r7}
 8107dda:	b083      	sub	sp, #12
 8107ddc:	af00      	add	r7, sp, #0
 8107dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8107de0:	bf00      	nop
 8107de2:	370c      	adds	r7, #12
 8107de4:	46bd      	mov	sp, r7
 8107de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dea:	4770      	bx	lr

08107dec <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8107dec:	b580      	push	{r7, lr}
 8107dee:	b086      	sub	sp, #24
 8107df0:	af00      	add	r7, sp, #0
 8107df2:	60f8      	str	r0, [r7, #12]
 8107df4:	60b9      	str	r1, [r7, #8]
 8107df6:	607a      	str	r2, [r7, #4]
 8107df8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8107dfa:	68fb      	ldr	r3, [r7, #12]
 8107dfc:	681b      	ldr	r3, [r3, #0]
 8107dfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107e02:	f003 0301 	and.w	r3, r3, #1
 8107e06:	2b00      	cmp	r3, #0
 8107e08:	d001      	beq.n	8107e0e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8107e0a:	2301      	movs	r3, #1
 8107e0c:	e03e      	b.n	8107e8c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8107e0e:	68fb      	ldr	r3, [r7, #12]
 8107e10:	681b      	ldr	r3, [r3, #0]
 8107e12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107e16:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8107e18:	697b      	ldr	r3, [r7, #20]
 8107e1a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8107e1e:	68bb      	ldr	r3, [r7, #8]
 8107e20:	055b      	lsls	r3, r3, #21
 8107e22:	4313      	orrs	r3, r2
 8107e24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8107e26:	697b      	ldr	r3, [r7, #20]
 8107e28:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8107e2c:	687b      	ldr	r3, [r7, #4]
 8107e2e:	041b      	lsls	r3, r3, #16
 8107e30:	4313      	orrs	r3, r2
 8107e32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8107e34:	697b      	ldr	r3, [r7, #20]
 8107e36:	f043 030c 	orr.w	r3, r3, #12
 8107e3a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8107e3c:	697b      	ldr	r3, [r7, #20]
 8107e3e:	f043 0301 	orr.w	r3, r3, #1
 8107e42:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8107e44:	68fb      	ldr	r3, [r7, #12]
 8107e46:	681b      	ldr	r3, [r3, #0]
 8107e48:	697a      	ldr	r2, [r7, #20]
 8107e4a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8107e4e:	f7ff f9bb 	bl	81071c8 <HAL_GetTick>
 8107e52:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8107e54:	e009      	b.n	8107e6a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8107e56:	f7ff f9b7 	bl	81071c8 <HAL_GetTick>
 8107e5a:	4602      	mov	r2, r0
 8107e5c:	693b      	ldr	r3, [r7, #16]
 8107e5e:	1ad3      	subs	r3, r2, r3
 8107e60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8107e64:	d901      	bls.n	8107e6a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8107e66:	2301      	movs	r3, #1
 8107e68:	e010      	b.n	8107e8c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8107e6a:	68fb      	ldr	r3, [r7, #12]
 8107e6c:	681b      	ldr	r3, [r3, #0]
 8107e6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107e72:	f003 0301 	and.w	r3, r3, #1
 8107e76:	2b00      	cmp	r3, #0
 8107e78:	d1ed      	bne.n	8107e56 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8107e7a:	68fb      	ldr	r3, [r7, #12]
 8107e7c:	681b      	ldr	r3, [r3, #0]
 8107e7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8107e82:	b29b      	uxth	r3, r3
 8107e84:	461a      	mov	r2, r3
 8107e86:	683b      	ldr	r3, [r7, #0]
 8107e88:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8107e8a:	2300      	movs	r3, #0
}
 8107e8c:	4618      	mov	r0, r3
 8107e8e:	3718      	adds	r7, #24
 8107e90:	46bd      	mov	sp, r7
 8107e92:	bd80      	pop	{r7, pc}

08107e94 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8107e94:	b580      	push	{r7, lr}
 8107e96:	b086      	sub	sp, #24
 8107e98:	af00      	add	r7, sp, #0
 8107e9a:	60f8      	str	r0, [r7, #12]
 8107e9c:	60b9      	str	r1, [r7, #8]
 8107e9e:	607a      	str	r2, [r7, #4]
 8107ea0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8107ea2:	68fb      	ldr	r3, [r7, #12]
 8107ea4:	681b      	ldr	r3, [r3, #0]
 8107ea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107eaa:	f003 0301 	and.w	r3, r3, #1
 8107eae:	2b00      	cmp	r3, #0
 8107eb0:	d001      	beq.n	8107eb6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8107eb2:	2301      	movs	r3, #1
 8107eb4:	e03c      	b.n	8107f30 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8107eb6:	68fb      	ldr	r3, [r7, #12]
 8107eb8:	681b      	ldr	r3, [r3, #0]
 8107eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107ebe:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8107ec0:	697b      	ldr	r3, [r7, #20]
 8107ec2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8107ec6:	68bb      	ldr	r3, [r7, #8]
 8107ec8:	055b      	lsls	r3, r3, #21
 8107eca:	4313      	orrs	r3, r2
 8107ecc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8107ece:	697b      	ldr	r3, [r7, #20]
 8107ed0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8107ed4:	687b      	ldr	r3, [r7, #4]
 8107ed6:	041b      	lsls	r3, r3, #16
 8107ed8:	4313      	orrs	r3, r2
 8107eda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8107edc:	697b      	ldr	r3, [r7, #20]
 8107ede:	f023 030c 	bic.w	r3, r3, #12
 8107ee2:	f043 0304 	orr.w	r3, r3, #4
 8107ee6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8107ee8:	697b      	ldr	r3, [r7, #20]
 8107eea:	f043 0301 	orr.w	r3, r3, #1
 8107eee:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8107ef0:	683b      	ldr	r3, [r7, #0]
 8107ef2:	b29a      	uxth	r2, r3
 8107ef4:	4b10      	ldr	r3, [pc, #64]	@ (8107f38 <HAL_ETH_WritePHYRegister+0xa4>)
 8107ef6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8107efa:	4a0f      	ldr	r2, [pc, #60]	@ (8107f38 <HAL_ETH_WritePHYRegister+0xa4>)
 8107efc:	697b      	ldr	r3, [r7, #20]
 8107efe:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8107f02:	f7ff f961 	bl	81071c8 <HAL_GetTick>
 8107f06:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8107f08:	e009      	b.n	8107f1e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8107f0a:	f7ff f95d 	bl	81071c8 <HAL_GetTick>
 8107f0e:	4602      	mov	r2, r0
 8107f10:	693b      	ldr	r3, [r7, #16]
 8107f12:	1ad3      	subs	r3, r2, r3
 8107f14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8107f18:	d901      	bls.n	8107f1e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8107f1a:	2301      	movs	r3, #1
 8107f1c:	e008      	b.n	8107f30 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8107f1e:	68fb      	ldr	r3, [r7, #12]
 8107f20:	681b      	ldr	r3, [r3, #0]
 8107f22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107f26:	f003 0301 	and.w	r3, r3, #1
 8107f2a:	2b00      	cmp	r3, #0
 8107f2c:	d1ed      	bne.n	8107f0a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8107f2e:	2300      	movs	r3, #0
}
 8107f30:	4618      	mov	r0, r3
 8107f32:	3718      	adds	r7, #24
 8107f34:	46bd      	mov	sp, r7
 8107f36:	bd80      	pop	{r7, pc}
 8107f38:	40028000 	.word	0x40028000

08107f3c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8107f3c:	b480      	push	{r7}
 8107f3e:	b083      	sub	sp, #12
 8107f40:	af00      	add	r7, sp, #0
 8107f42:	6078      	str	r0, [r7, #4]
 8107f44:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8107f46:	683b      	ldr	r3, [r7, #0]
 8107f48:	2b00      	cmp	r3, #0
 8107f4a:	d101      	bne.n	8107f50 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8107f4c:	2301      	movs	r3, #1
 8107f4e:	e1c3      	b.n	81082d8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8107f50:	687b      	ldr	r3, [r7, #4]
 8107f52:	681b      	ldr	r3, [r3, #0]
 8107f54:	681b      	ldr	r3, [r3, #0]
 8107f56:	f003 020c 	and.w	r2, r3, #12
 8107f5a:	683b      	ldr	r3, [r7, #0]
 8107f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	681b      	ldr	r3, [r3, #0]
 8107f64:	f003 0310 	and.w	r3, r3, #16
 8107f68:	2b00      	cmp	r3, #0
 8107f6a:	bf14      	ite	ne
 8107f6c:	2301      	movne	r3, #1
 8107f6e:	2300      	moveq	r3, #0
 8107f70:	b2db      	uxtb	r3, r3
 8107f72:	461a      	mov	r2, r3
 8107f74:	683b      	ldr	r3, [r7, #0]
 8107f76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8107f7a:	687b      	ldr	r3, [r7, #4]
 8107f7c:	681b      	ldr	r3, [r3, #0]
 8107f7e:	681b      	ldr	r3, [r3, #0]
 8107f80:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8107f84:	683b      	ldr	r3, [r7, #0]
 8107f86:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	681b      	ldr	r3, [r3, #0]
 8107f8c:	681b      	ldr	r3, [r3, #0]
 8107f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107f92:	2b00      	cmp	r3, #0
 8107f94:	bf0c      	ite	eq
 8107f96:	2301      	moveq	r3, #1
 8107f98:	2300      	movne	r3, #0
 8107f9a:	b2db      	uxtb	r3, r3
 8107f9c:	461a      	mov	r2, r3
 8107f9e:	683b      	ldr	r3, [r7, #0]
 8107fa0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8107fa4:	687b      	ldr	r3, [r7, #4]
 8107fa6:	681b      	ldr	r3, [r3, #0]
 8107fa8:	681b      	ldr	r3, [r3, #0]
 8107faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8107fae:	2b00      	cmp	r3, #0
 8107fb0:	bf14      	ite	ne
 8107fb2:	2301      	movne	r3, #1
 8107fb4:	2300      	moveq	r3, #0
 8107fb6:	b2db      	uxtb	r3, r3
 8107fb8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8107fba:	683b      	ldr	r3, [r7, #0]
 8107fbc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8107fbe:	687b      	ldr	r3, [r7, #4]
 8107fc0:	681b      	ldr	r3, [r3, #0]
 8107fc2:	681b      	ldr	r3, [r3, #0]
 8107fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8107fc8:	2b00      	cmp	r3, #0
 8107fca:	bf0c      	ite	eq
 8107fcc:	2301      	moveq	r3, #1
 8107fce:	2300      	movne	r3, #0
 8107fd0:	b2db      	uxtb	r3, r3
 8107fd2:	461a      	mov	r2, r3
 8107fd4:	683b      	ldr	r3, [r7, #0]
 8107fd6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	681b      	ldr	r3, [r3, #0]
 8107fdc:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8107fde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8107fe2:	2b00      	cmp	r3, #0
 8107fe4:	bf14      	ite	ne
 8107fe6:	2301      	movne	r3, #1
 8107fe8:	2300      	moveq	r3, #0
 8107fea:	b2db      	uxtb	r3, r3
 8107fec:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8107fee:	683b      	ldr	r3, [r7, #0]
 8107ff0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8107ff2:	687b      	ldr	r3, [r7, #4]
 8107ff4:	681b      	ldr	r3, [r3, #0]
 8107ff6:	681b      	ldr	r3, [r3, #0]
 8107ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8107ffc:	2b00      	cmp	r3, #0
 8107ffe:	bf14      	ite	ne
 8108000:	2301      	movne	r3, #1
 8108002:	2300      	moveq	r3, #0
 8108004:	b2db      	uxtb	r3, r3
 8108006:	461a      	mov	r2, r3
 8108008:	683b      	ldr	r3, [r7, #0]
 810800a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	681b      	ldr	r3, [r3, #0]
 8108010:	681b      	ldr	r3, [r3, #0]
 8108012:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8108016:	683b      	ldr	r3, [r7, #0]
 8108018:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	681b      	ldr	r3, [r3, #0]
 810801e:	681b      	ldr	r3, [r3, #0]
 8108020:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8108024:	683b      	ldr	r3, [r7, #0]
 8108026:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	681b      	ldr	r3, [r3, #0]
 810802c:	681b      	ldr	r3, [r3, #0]
 810802e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108032:	2b00      	cmp	r3, #0
 8108034:	bf14      	ite	ne
 8108036:	2301      	movne	r3, #1
 8108038:	2300      	moveq	r3, #0
 810803a:	b2db      	uxtb	r3, r3
 810803c:	461a      	mov	r2, r3
 810803e:	683b      	ldr	r3, [r7, #0]
 8108040:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8108042:	687b      	ldr	r3, [r7, #4]
 8108044:	681b      	ldr	r3, [r3, #0]
 8108046:	681b      	ldr	r3, [r3, #0]
 8108048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810804c:	2b00      	cmp	r3, #0
 810804e:	bf0c      	ite	eq
 8108050:	2301      	moveq	r3, #1
 8108052:	2300      	movne	r3, #0
 8108054:	b2db      	uxtb	r3, r3
 8108056:	461a      	mov	r2, r3
 8108058:	683b      	ldr	r3, [r7, #0]
 810805a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 810805c:	687b      	ldr	r3, [r7, #4]
 810805e:	681b      	ldr	r3, [r3, #0]
 8108060:	681b      	ldr	r3, [r3, #0]
 8108062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8108066:	2b00      	cmp	r3, #0
 8108068:	bf0c      	ite	eq
 810806a:	2301      	moveq	r3, #1
 810806c:	2300      	movne	r3, #0
 810806e:	b2db      	uxtb	r3, r3
 8108070:	461a      	mov	r2, r3
 8108072:	683b      	ldr	r3, [r7, #0]
 8108074:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8108076:	687b      	ldr	r3, [r7, #4]
 8108078:	681b      	ldr	r3, [r3, #0]
 810807a:	681b      	ldr	r3, [r3, #0]
 810807c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8108080:	2b00      	cmp	r3, #0
 8108082:	bf14      	ite	ne
 8108084:	2301      	movne	r3, #1
 8108086:	2300      	moveq	r3, #0
 8108088:	b2db      	uxtb	r3, r3
 810808a:	461a      	mov	r2, r3
 810808c:	683b      	ldr	r3, [r7, #0]
 810808e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	681b      	ldr	r3, [r3, #0]
 8108094:	681b      	ldr	r3, [r3, #0]
 8108096:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810809a:	2b00      	cmp	r3, #0
 810809c:	bf14      	ite	ne
 810809e:	2301      	movne	r3, #1
 81080a0:	2300      	moveq	r3, #0
 81080a2:	b2db      	uxtb	r3, r3
 81080a4:	461a      	mov	r2, r3
 81080a6:	683b      	ldr	r3, [r7, #0]
 81080a8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 81080aa:	687b      	ldr	r3, [r7, #4]
 81080ac:	681b      	ldr	r3, [r3, #0]
 81080ae:	681b      	ldr	r3, [r3, #0]
 81080b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81080b4:	2b00      	cmp	r3, #0
 81080b6:	bf14      	ite	ne
 81080b8:	2301      	movne	r3, #1
 81080ba:	2300      	moveq	r3, #0
 81080bc:	b2db      	uxtb	r3, r3
 81080be:	461a      	mov	r2, r3
 81080c0:	683b      	ldr	r3, [r7, #0]
 81080c2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 81080c4:	687b      	ldr	r3, [r7, #4]
 81080c6:	681b      	ldr	r3, [r3, #0]
 81080c8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 81080ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81080ce:	2b00      	cmp	r3, #0
 81080d0:	bf14      	ite	ne
 81080d2:	2301      	movne	r3, #1
 81080d4:	2300      	moveq	r3, #0
 81080d6:	b2db      	uxtb	r3, r3
 81080d8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 81080da:	683b      	ldr	r3, [r7, #0]
 81080dc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 81080de:	687b      	ldr	r3, [r7, #4]
 81080e0:	681b      	ldr	r3, [r3, #0]
 81080e2:	681b      	ldr	r3, [r3, #0]
 81080e4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 81080e8:	683b      	ldr	r3, [r7, #0]
 81080ea:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 81080ec:	687b      	ldr	r3, [r7, #4]
 81080ee:	681b      	ldr	r3, [r3, #0]
 81080f0:	681b      	ldr	r3, [r3, #0]
 81080f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81080f6:	2b00      	cmp	r3, #0
 81080f8:	bf14      	ite	ne
 81080fa:	2301      	movne	r3, #1
 81080fc:	2300      	moveq	r3, #0
 81080fe:	b2db      	uxtb	r3, r3
 8108100:	461a      	mov	r2, r3
 8108102:	683b      	ldr	r3, [r7, #0]
 8108104:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8108106:	687b      	ldr	r3, [r7, #4]
 8108108:	681b      	ldr	r3, [r3, #0]
 810810a:	681b      	ldr	r3, [r3, #0]
 810810c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8108110:	683b      	ldr	r3, [r7, #0]
 8108112:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8108114:	687b      	ldr	r3, [r7, #4]
 8108116:	681b      	ldr	r3, [r3, #0]
 8108118:	685b      	ldr	r3, [r3, #4]
 810811a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 810811e:	683b      	ldr	r3, [r7, #0]
 8108120:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8108122:	687b      	ldr	r3, [r7, #4]
 8108124:	681b      	ldr	r3, [r3, #0]
 8108126:	685b      	ldr	r3, [r3, #4]
 8108128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810812c:	2b00      	cmp	r3, #0
 810812e:	bf0c      	ite	eq
 8108130:	2301      	moveq	r3, #1
 8108132:	2300      	movne	r3, #0
 8108134:	b2db      	uxtb	r3, r3
 8108136:	461a      	mov	r2, r3
 8108138:	683b      	ldr	r3, [r7, #0]
 810813a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 810813e:	687b      	ldr	r3, [r7, #4]
 8108140:	681b      	ldr	r3, [r3, #0]
 8108142:	685b      	ldr	r3, [r3, #4]
 8108144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108148:	2b00      	cmp	r3, #0
 810814a:	bf14      	ite	ne
 810814c:	2301      	movne	r3, #1
 810814e:	2300      	moveq	r3, #0
 8108150:	b2db      	uxtb	r3, r3
 8108152:	461a      	mov	r2, r3
 8108154:	683b      	ldr	r3, [r7, #0]
 8108156:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810815a:	687b      	ldr	r3, [r7, #4]
 810815c:	681b      	ldr	r3, [r3, #0]
 810815e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8108160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8108164:	2b00      	cmp	r3, #0
 8108166:	bf14      	ite	ne
 8108168:	2301      	movne	r3, #1
 810816a:	2300      	moveq	r3, #0
 810816c:	b2db      	uxtb	r3, r3
 810816e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8108170:	683b      	ldr	r3, [r7, #0]
 8108172:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8108176:	687b      	ldr	r3, [r7, #4]
 8108178:	681b      	ldr	r3, [r3, #0]
 810817a:	685b      	ldr	r3, [r3, #4]
 810817c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8108180:	2b00      	cmp	r3, #0
 8108182:	bf14      	ite	ne
 8108184:	2301      	movne	r3, #1
 8108186:	2300      	moveq	r3, #0
 8108188:	b2db      	uxtb	r3, r3
 810818a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810818c:	683b      	ldr	r3, [r7, #0]
 810818e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8108192:	687b      	ldr	r3, [r7, #4]
 8108194:	681b      	ldr	r3, [r3, #0]
 8108196:	685b      	ldr	r3, [r3, #4]
 8108198:	0e5b      	lsrs	r3, r3, #25
 810819a:	f003 021f 	and.w	r2, r3, #31
 810819e:	683b      	ldr	r3, [r7, #0]
 81081a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 81081a2:	687b      	ldr	r3, [r7, #4]
 81081a4:	681b      	ldr	r3, [r3, #0]
 81081a6:	68db      	ldr	r3, [r3, #12]
 81081a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81081ac:	2b00      	cmp	r3, #0
 81081ae:	bf14      	ite	ne
 81081b0:	2301      	movne	r3, #1
 81081b2:	2300      	moveq	r3, #0
 81081b4:	b2db      	uxtb	r3, r3
 81081b6:	461a      	mov	r2, r3
 81081b8:	683b      	ldr	r3, [r7, #0]
 81081ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	681b      	ldr	r3, [r3, #0]
 81081c2:	68db      	ldr	r3, [r3, #12]
 81081c4:	f003 020f 	and.w	r2, r3, #15
 81081c8:	683b      	ldr	r3, [r7, #0]
 81081ca:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 81081cc:	687b      	ldr	r3, [r7, #4]
 81081ce:	681b      	ldr	r3, [r3, #0]
 81081d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81081d2:	f003 0302 	and.w	r3, r3, #2
 81081d6:	2b00      	cmp	r3, #0
 81081d8:	bf14      	ite	ne
 81081da:	2301      	movne	r3, #1
 81081dc:	2300      	moveq	r3, #0
 81081de:	b2db      	uxtb	r3, r3
 81081e0:	461a      	mov	r2, r3
 81081e2:	683b      	ldr	r3, [r7, #0]
 81081e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 81081e8:	687b      	ldr	r3, [r7, #4]
 81081ea:	681b      	ldr	r3, [r3, #0]
 81081ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81081ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81081f2:	2b00      	cmp	r3, #0
 81081f4:	bf0c      	ite	eq
 81081f6:	2301      	moveq	r3, #1
 81081f8:	2300      	movne	r3, #0
 81081fa:	b2db      	uxtb	r3, r3
 81081fc:	461a      	mov	r2, r3
 81081fe:	683b      	ldr	r3, [r7, #0]
 8108200:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8108204:	687b      	ldr	r3, [r7, #4]
 8108206:	681b      	ldr	r3, [r3, #0]
 8108208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810820a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810820e:	683b      	ldr	r3, [r7, #0]
 8108210:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8108212:	687b      	ldr	r3, [r7, #4]
 8108214:	681b      	ldr	r3, [r3, #0]
 8108216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108218:	0c1b      	lsrs	r3, r3, #16
 810821a:	b29a      	uxth	r2, r3
 810821c:	683b      	ldr	r3, [r7, #0]
 810821e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8108220:	687b      	ldr	r3, [r7, #4]
 8108222:	681b      	ldr	r3, [r3, #0]
 8108224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108228:	f003 0301 	and.w	r3, r3, #1
 810822c:	2b00      	cmp	r3, #0
 810822e:	bf14      	ite	ne
 8108230:	2301      	movne	r3, #1
 8108232:	2300      	moveq	r3, #0
 8108234:	b2db      	uxtb	r3, r3
 8108236:	461a      	mov	r2, r3
 8108238:	683b      	ldr	r3, [r7, #0]
 810823a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	681b      	ldr	r3, [r3, #0]
 8108242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108246:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 810824a:	2b00      	cmp	r3, #0
 810824c:	bf14      	ite	ne
 810824e:	2301      	movne	r3, #1
 8108250:	2300      	moveq	r3, #0
 8108252:	b2db      	uxtb	r3, r3
 8108254:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8108256:	683b      	ldr	r3, [r7, #0]
 8108258:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 810825c:	687b      	ldr	r3, [r7, #4]
 810825e:	681b      	ldr	r3, [r3, #0]
 8108260:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8108264:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8108268:	683b      	ldr	r3, [r7, #0]
 810826a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 810826c:	687b      	ldr	r3, [r7, #4]
 810826e:	681b      	ldr	r3, [r3, #0]
 8108270:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8108274:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8108278:	683b      	ldr	r3, [r7, #0]
 810827a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810827c:	687b      	ldr	r3, [r7, #4]
 810827e:	681b      	ldr	r3, [r3, #0]
 8108280:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8108284:	f003 0308 	and.w	r3, r3, #8
 8108288:	2b00      	cmp	r3, #0
 810828a:	bf14      	ite	ne
 810828c:	2301      	movne	r3, #1
 810828e:	2300      	moveq	r3, #0
 8108290:	b2db      	uxtb	r3, r3
 8108292:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8108294:	683b      	ldr	r3, [r7, #0]
 8108296:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 810829a:	687b      	ldr	r3, [r7, #4]
 810829c:	681b      	ldr	r3, [r3, #0]
 810829e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81082a2:	f003 0310 	and.w	r3, r3, #16
 81082a6:	2b00      	cmp	r3, #0
 81082a8:	bf14      	ite	ne
 81082aa:	2301      	movne	r3, #1
 81082ac:	2300      	moveq	r3, #0
 81082ae:	b2db      	uxtb	r3, r3
 81082b0:	461a      	mov	r2, r3
 81082b2:	683b      	ldr	r3, [r7, #0]
 81082b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81082b8:	687b      	ldr	r3, [r7, #4]
 81082ba:	681b      	ldr	r3, [r3, #0]
 81082bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 81082c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81082c4:	2b00      	cmp	r3, #0
 81082c6:	bf0c      	ite	eq
 81082c8:	2301      	moveq	r3, #1
 81082ca:	2300      	movne	r3, #0
 81082cc:	b2db      	uxtb	r3, r3
 81082ce:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81082d0:	683b      	ldr	r3, [r7, #0]
 81082d2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 81082d6:	2300      	movs	r3, #0
}
 81082d8:	4618      	mov	r0, r3
 81082da:	370c      	adds	r7, #12
 81082dc:	46bd      	mov	sp, r7
 81082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082e2:	4770      	bx	lr

081082e4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 81082e4:	b580      	push	{r7, lr}
 81082e6:	b082      	sub	sp, #8
 81082e8:	af00      	add	r7, sp, #0
 81082ea:	6078      	str	r0, [r7, #4]
 81082ec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 81082ee:	683b      	ldr	r3, [r7, #0]
 81082f0:	2b00      	cmp	r3, #0
 81082f2:	d101      	bne.n	81082f8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 81082f4:	2301      	movs	r3, #1
 81082f6:	e00b      	b.n	8108310 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81082fe:	2b10      	cmp	r3, #16
 8108300:	d105      	bne.n	810830e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8108302:	6839      	ldr	r1, [r7, #0]
 8108304:	6878      	ldr	r0, [r7, #4]
 8108306:	f000 f871 	bl	81083ec <ETH_SetMACConfig>

    return HAL_OK;
 810830a:	2300      	movs	r3, #0
 810830c:	e000      	b.n	8108310 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 810830e:	2301      	movs	r3, #1
  }
}
 8108310:	4618      	mov	r0, r3
 8108312:	3708      	adds	r7, #8
 8108314:	46bd      	mov	sp, r7
 8108316:	bd80      	pop	{r7, pc}

08108318 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8108318:	b580      	push	{r7, lr}
 810831a:	b084      	sub	sp, #16
 810831c:	af00      	add	r7, sp, #0
 810831e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8108320:	687b      	ldr	r3, [r7, #4]
 8108322:	681b      	ldr	r3, [r3, #0]
 8108324:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8108328:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810832a:	68fb      	ldr	r3, [r7, #12]
 810832c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8108330:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8108332:	f001 fff1 	bl	810a318 <HAL_RCC_GetHCLKFreq>
 8108336:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8108338:	68bb      	ldr	r3, [r7, #8]
 810833a:	4a1a      	ldr	r2, [pc, #104]	@ (81083a4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 810833c:	4293      	cmp	r3, r2
 810833e:	d804      	bhi.n	810834a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8108340:	68fb      	ldr	r3, [r7, #12]
 8108342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8108346:	60fb      	str	r3, [r7, #12]
 8108348:	e022      	b.n	8108390 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 810834a:	68bb      	ldr	r3, [r7, #8]
 810834c:	4a16      	ldr	r2, [pc, #88]	@ (81083a8 <HAL_ETH_SetMDIOClockRange+0x90>)
 810834e:	4293      	cmp	r3, r2
 8108350:	d204      	bcs.n	810835c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8108352:	68fb      	ldr	r3, [r7, #12]
 8108354:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8108358:	60fb      	str	r3, [r7, #12]
 810835a:	e019      	b.n	8108390 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 810835c:	68bb      	ldr	r3, [r7, #8]
 810835e:	4a13      	ldr	r2, [pc, #76]	@ (81083ac <HAL_ETH_SetMDIOClockRange+0x94>)
 8108360:	4293      	cmp	r3, r2
 8108362:	d915      	bls.n	8108390 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8108364:	68bb      	ldr	r3, [r7, #8]
 8108366:	4a12      	ldr	r2, [pc, #72]	@ (81083b0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8108368:	4293      	cmp	r3, r2
 810836a:	d804      	bhi.n	8108376 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 810836c:	68fb      	ldr	r3, [r7, #12]
 810836e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108372:	60fb      	str	r3, [r7, #12]
 8108374:	e00c      	b.n	8108390 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8108376:	68bb      	ldr	r3, [r7, #8]
 8108378:	4a0e      	ldr	r2, [pc, #56]	@ (81083b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 810837a:	4293      	cmp	r3, r2
 810837c:	d804      	bhi.n	8108388 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 810837e:	68fb      	ldr	r3, [r7, #12]
 8108380:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8108384:	60fb      	str	r3, [r7, #12]
 8108386:	e003      	b.n	8108390 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8108388:	68fb      	ldr	r3, [r7, #12]
 810838a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 810838e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8108390:	687b      	ldr	r3, [r7, #4]
 8108392:	681b      	ldr	r3, [r3, #0]
 8108394:	68fa      	ldr	r2, [r7, #12]
 8108396:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 810839a:	bf00      	nop
 810839c:	3710      	adds	r7, #16
 810839e:	46bd      	mov	sp, r7
 81083a0:	bd80      	pop	{r7, pc}
 81083a2:	bf00      	nop
 81083a4:	02160ebf 	.word	0x02160ebf
 81083a8:	03938700 	.word	0x03938700
 81083ac:	05f5e0ff 	.word	0x05f5e0ff
 81083b0:	08f0d17f 	.word	0x08f0d17f
 81083b4:	0ee6b27f 	.word	0x0ee6b27f

081083b8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 81083b8:	b480      	push	{r7}
 81083ba:	b083      	sub	sp, #12
 81083bc:	af00      	add	r7, sp, #0
 81083be:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 81083c0:	687b      	ldr	r3, [r7, #4]
 81083c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 81083c6:	4618      	mov	r0, r3
 81083c8:	370c      	adds	r7, #12
 81083ca:	46bd      	mov	sp, r7
 81083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083d0:	4770      	bx	lr

081083d2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 81083d2:	b480      	push	{r7}
 81083d4:	b083      	sub	sp, #12
 81083d6:	af00      	add	r7, sp, #0
 81083d8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 81083e0:	4618      	mov	r0, r3
 81083e2:	370c      	adds	r7, #12
 81083e4:	46bd      	mov	sp, r7
 81083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083ea:	4770      	bx	lr

081083ec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 81083ec:	b480      	push	{r7}
 81083ee:	b085      	sub	sp, #20
 81083f0:	af00      	add	r7, sp, #0
 81083f2:	6078      	str	r0, [r7, #4]
 81083f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 81083f6:	683b      	ldr	r3, [r7, #0]
 81083f8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 81083fa:	683b      	ldr	r3, [r7, #0]
 81083fc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 81083fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8108400:	683b      	ldr	r3, [r7, #0]
 8108402:	791b      	ldrb	r3, [r3, #4]
 8108404:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8108406:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8108408:	683b      	ldr	r3, [r7, #0]
 810840a:	7b1b      	ldrb	r3, [r3, #12]
 810840c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810840e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8108410:	683b      	ldr	r3, [r7, #0]
 8108412:	7b5b      	ldrb	r3, [r3, #13]
 8108414:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8108416:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8108418:	683b      	ldr	r3, [r7, #0]
 810841a:	7b9b      	ldrb	r3, [r3, #14]
 810841c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810841e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8108420:	683b      	ldr	r3, [r7, #0]
 8108422:	7bdb      	ldrb	r3, [r3, #15]
 8108424:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8108426:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8108428:	683a      	ldr	r2, [r7, #0]
 810842a:	7c12      	ldrb	r2, [r2, #16]
 810842c:	2a00      	cmp	r2, #0
 810842e:	d102      	bne.n	8108436 <ETH_SetMACConfig+0x4a>
 8108430:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8108434:	e000      	b.n	8108438 <ETH_SetMACConfig+0x4c>
 8108436:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8108438:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810843a:	683a      	ldr	r2, [r7, #0]
 810843c:	7c52      	ldrb	r2, [r2, #17]
 810843e:	2a00      	cmp	r2, #0
 8108440:	d102      	bne.n	8108448 <ETH_SetMACConfig+0x5c>
 8108442:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8108446:	e000      	b.n	810844a <ETH_SetMACConfig+0x5e>
 8108448:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810844a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 810844c:	683b      	ldr	r3, [r7, #0]
 810844e:	7c9b      	ldrb	r3, [r3, #18]
 8108450:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8108452:	431a      	orrs	r2, r3
               macconf->Speed |
 8108454:	683b      	ldr	r3, [r7, #0]
 8108456:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8108458:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810845a:	683b      	ldr	r3, [r7, #0]
 810845c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810845e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8108460:	683b      	ldr	r3, [r7, #0]
 8108462:	7f1b      	ldrb	r3, [r3, #28]
 8108464:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8108466:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8108468:	683b      	ldr	r3, [r7, #0]
 810846a:	7f5b      	ldrb	r3, [r3, #29]
 810846c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810846e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8108470:	683a      	ldr	r2, [r7, #0]
 8108472:	7f92      	ldrb	r2, [r2, #30]
 8108474:	2a00      	cmp	r2, #0
 8108476:	d102      	bne.n	810847e <ETH_SetMACConfig+0x92>
 8108478:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810847c:	e000      	b.n	8108480 <ETH_SetMACConfig+0x94>
 810847e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8108480:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8108482:	683b      	ldr	r3, [r7, #0]
 8108484:	7fdb      	ldrb	r3, [r3, #31]
 8108486:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8108488:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810848a:	683a      	ldr	r2, [r7, #0]
 810848c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8108490:	2a00      	cmp	r2, #0
 8108492:	d102      	bne.n	810849a <ETH_SetMACConfig+0xae>
 8108494:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8108498:	e000      	b.n	810849c <ETH_SetMACConfig+0xb0>
 810849a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810849c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 810849e:	683b      	ldr	r3, [r7, #0]
 81084a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 81084a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 81084a4:	683b      	ldr	r3, [r7, #0]
 81084a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81084aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 81084ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 81084ae:	683b      	ldr	r3, [r7, #0]
 81084b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 81084b2:	4313      	orrs	r3, r2
 81084b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 81084b6:	687b      	ldr	r3, [r7, #4]
 81084b8:	681b      	ldr	r3, [r3, #0]
 81084ba:	681a      	ldr	r2, [r3, #0]
 81084bc:	4b57      	ldr	r3, [pc, #348]	@ (810861c <ETH_SetMACConfig+0x230>)
 81084be:	4013      	ands	r3, r2
 81084c0:	687a      	ldr	r2, [r7, #4]
 81084c2:	6812      	ldr	r2, [r2, #0]
 81084c4:	68f9      	ldr	r1, [r7, #12]
 81084c6:	430b      	orrs	r3, r1
 81084c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81084ca:	683b      	ldr	r3, [r7, #0]
 81084cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81084ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81084d0:	683b      	ldr	r3, [r7, #0]
 81084d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81084d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81084d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81084da:	683b      	ldr	r3, [r7, #0]
 81084dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81084e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81084e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81084e4:	683b      	ldr	r3, [r7, #0]
 81084e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 81084ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81084ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 81084ee:	683a      	ldr	r2, [r7, #0]
 81084f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 81084f4:	2a00      	cmp	r2, #0
 81084f6:	d102      	bne.n	81084fe <ETH_SetMACConfig+0x112>
 81084f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 81084fc:	e000      	b.n	8108500 <ETH_SetMACConfig+0x114>
 81084fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8108500:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8108502:	683b      	ldr	r3, [r7, #0]
 8108504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8108506:	4313      	orrs	r3, r2
 8108508:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810850a:	687b      	ldr	r3, [r7, #4]
 810850c:	681b      	ldr	r3, [r3, #0]
 810850e:	685a      	ldr	r2, [r3, #4]
 8108510:	4b43      	ldr	r3, [pc, #268]	@ (8108620 <ETH_SetMACConfig+0x234>)
 8108512:	4013      	ands	r3, r2
 8108514:	687a      	ldr	r2, [r7, #4]
 8108516:	6812      	ldr	r2, [r2, #0]
 8108518:	68f9      	ldr	r1, [r7, #12]
 810851a:	430b      	orrs	r3, r1
 810851c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810851e:	683b      	ldr	r3, [r7, #0]
 8108520:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8108524:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8108526:	683b      	ldr	r3, [r7, #0]
 8108528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810852a:	4313      	orrs	r3, r2
 810852c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810852e:	687b      	ldr	r3, [r7, #4]
 8108530:	681b      	ldr	r3, [r3, #0]
 8108532:	68db      	ldr	r3, [r3, #12]
 8108534:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8108538:	f023 0301 	bic.w	r3, r3, #1
 810853c:	687a      	ldr	r2, [r7, #4]
 810853e:	6812      	ldr	r2, [r2, #0]
 8108540:	68f9      	ldr	r1, [r7, #12]
 8108542:	430b      	orrs	r3, r1
 8108544:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8108546:	683b      	ldr	r3, [r7, #0]
 8108548:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 810854c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810854e:	683b      	ldr	r3, [r7, #0]
 8108550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8108552:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8108554:	683a      	ldr	r2, [r7, #0]
 8108556:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 810855a:	2a00      	cmp	r2, #0
 810855c:	d101      	bne.n	8108562 <ETH_SetMACConfig+0x176>
 810855e:	2280      	movs	r2, #128	@ 0x80
 8108560:	e000      	b.n	8108564 <ETH_SetMACConfig+0x178>
 8108562:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8108564:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8108566:	683b      	ldr	r3, [r7, #0]
 8108568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810856a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810856c:	4313      	orrs	r3, r2
 810856e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8108570:	687b      	ldr	r3, [r7, #4]
 8108572:	681b      	ldr	r3, [r3, #0]
 8108574:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8108576:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810857a:	4013      	ands	r3, r2
 810857c:	687a      	ldr	r2, [r7, #4]
 810857e:	6812      	ldr	r2, [r2, #0]
 8108580:	68f9      	ldr	r1, [r7, #12]
 8108582:	430b      	orrs	r3, r1
 8108584:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8108586:	683b      	ldr	r3, [r7, #0]
 8108588:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 810858c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810858e:	683b      	ldr	r3, [r7, #0]
 8108590:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8108594:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8108596:	4313      	orrs	r3, r2
 8108598:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810859a:	687b      	ldr	r3, [r7, #4]
 810859c:	681b      	ldr	r3, [r3, #0]
 810859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81085a2:	f023 0103 	bic.w	r1, r3, #3
 81085a6:	687b      	ldr	r3, [r7, #4]
 81085a8:	681b      	ldr	r3, [r3, #0]
 81085aa:	68fa      	ldr	r2, [r7, #12]
 81085ac:	430a      	orrs	r2, r1
 81085ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 81085b2:	687b      	ldr	r3, [r7, #4]
 81085b4:	681b      	ldr	r3, [r3, #0]
 81085b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 81085ba:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 81085be:	683b      	ldr	r3, [r7, #0]
 81085c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81085c2:	687b      	ldr	r3, [r7, #4]
 81085c4:	681b      	ldr	r3, [r3, #0]
 81085c6:	430a      	orrs	r2, r1
 81085c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 81085cc:	683b      	ldr	r3, [r7, #0]
 81085ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81085d0:	683a      	ldr	r2, [r7, #0]
 81085d2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 81085d6:	2a00      	cmp	r2, #0
 81085d8:	d101      	bne.n	81085de <ETH_SetMACConfig+0x1f2>
 81085da:	2240      	movs	r2, #64	@ 0x40
 81085dc:	e000      	b.n	81085e0 <ETH_SetMACConfig+0x1f4>
 81085de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 81085e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 81085e2:	683b      	ldr	r3, [r7, #0]
 81085e4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 81085e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81085ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81085ec:	683b      	ldr	r3, [r7, #0]
 81085ee:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 81085f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 81085f4:	4313      	orrs	r3, r2
 81085f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 81085f8:	687b      	ldr	r3, [r7, #4]
 81085fa:	681b      	ldr	r3, [r3, #0]
 81085fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8108600:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8108604:	687b      	ldr	r3, [r7, #4]
 8108606:	681b      	ldr	r3, [r3, #0]
 8108608:	68fa      	ldr	r2, [r7, #12]
 810860a:	430a      	orrs	r2, r1
 810860c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8108610:	bf00      	nop
 8108612:	3714      	adds	r7, #20
 8108614:	46bd      	mov	sp, r7
 8108616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810861a:	4770      	bx	lr
 810861c:	00048083 	.word	0x00048083
 8108620:	c0f88000 	.word	0xc0f88000

08108624 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8108624:	b480      	push	{r7}
 8108626:	b085      	sub	sp, #20
 8108628:	af00      	add	r7, sp, #0
 810862a:	6078      	str	r0, [r7, #4]
 810862c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810862e:	687b      	ldr	r3, [r7, #4]
 8108630:	681b      	ldr	r3, [r3, #0]
 8108632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108636:	681b      	ldr	r3, [r3, #0]
 8108638:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 810863c:	f023 0302 	bic.w	r3, r3, #2
 8108640:	683a      	ldr	r2, [r7, #0]
 8108642:	6811      	ldr	r1, [r2, #0]
 8108644:	687a      	ldr	r2, [r7, #4]
 8108646:	6812      	ldr	r2, [r2, #0]
 8108648:	430b      	orrs	r3, r1
 810864a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810864e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8108650:	683b      	ldr	r3, [r7, #0]
 8108652:	791b      	ldrb	r3, [r3, #4]
 8108654:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8108656:	683b      	ldr	r3, [r7, #0]
 8108658:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810865a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 810865c:	683b      	ldr	r3, [r7, #0]
 810865e:	7b1b      	ldrb	r3, [r3, #12]
 8108660:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8108662:	4313      	orrs	r3, r2
 8108664:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8108666:	687b      	ldr	r3, [r7, #4]
 8108668:	681b      	ldr	r3, [r3, #0]
 810866a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810866e:	685b      	ldr	r3, [r3, #4]
 8108670:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8108674:	f023 0301 	bic.w	r3, r3, #1
 8108678:	687a      	ldr	r2, [r7, #4]
 810867a:	6812      	ldr	r2, [r2, #0]
 810867c:	68f9      	ldr	r1, [r7, #12]
 810867e:	430b      	orrs	r3, r1
 8108680:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108684:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8108686:	683b      	ldr	r3, [r7, #0]
 8108688:	7b5b      	ldrb	r3, [r3, #13]
 810868a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 810868c:	683b      	ldr	r3, [r7, #0]
 810868e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8108690:	4313      	orrs	r3, r2
 8108692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8108694:	687b      	ldr	r3, [r7, #4]
 8108696:	681b      	ldr	r3, [r3, #0]
 8108698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810869c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 81086a0:	4b21      	ldr	r3, [pc, #132]	@ (8108728 <ETH_SetDMAConfig+0x104>)
 81086a2:	4013      	ands	r3, r2
 81086a4:	687a      	ldr	r2, [r7, #4]
 81086a6:	6812      	ldr	r2, [r2, #0]
 81086a8:	68f9      	ldr	r1, [r7, #12]
 81086aa:	430b      	orrs	r3, r1
 81086ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81086b0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 81086b4:	683b      	ldr	r3, [r7, #0]
 81086b6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 81086b8:	683b      	ldr	r3, [r7, #0]
 81086ba:	7d1b      	ldrb	r3, [r3, #20]
 81086bc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 81086be:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 81086c0:	683b      	ldr	r3, [r7, #0]
 81086c2:	7f5b      	ldrb	r3, [r3, #29]
 81086c4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 81086c6:	4313      	orrs	r3, r2
 81086c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 81086ca:	687b      	ldr	r3, [r7, #4]
 81086cc:	681b      	ldr	r3, [r3, #0]
 81086ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81086d2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 81086d6:	4b15      	ldr	r3, [pc, #84]	@ (810872c <ETH_SetDMAConfig+0x108>)
 81086d8:	4013      	ands	r3, r2
 81086da:	687a      	ldr	r2, [r7, #4]
 81086dc:	6812      	ldr	r2, [r2, #0]
 81086de:	68f9      	ldr	r1, [r7, #12]
 81086e0:	430b      	orrs	r3, r1
 81086e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81086e6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81086ea:	683b      	ldr	r3, [r7, #0]
 81086ec:	7f1b      	ldrb	r3, [r3, #28]
 81086ee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 81086f0:	683b      	ldr	r3, [r7, #0]
 81086f2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81086f4:	4313      	orrs	r3, r2
 81086f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 81086f8:	687b      	ldr	r3, [r7, #4]
 81086fa:	681b      	ldr	r3, [r3, #0]
 81086fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108700:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8108704:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8108708:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810870c:	687a      	ldr	r2, [r7, #4]
 810870e:	6812      	ldr	r2, [r2, #0]
 8108710:	68f9      	ldr	r1, [r7, #12]
 8108712:	430b      	orrs	r3, r1
 8108714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108718:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 810871c:	bf00      	nop
 810871e:	3714      	adds	r7, #20
 8108720:	46bd      	mov	sp, r7
 8108722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108726:	4770      	bx	lr
 8108728:	fffec000 	.word	0xfffec000
 810872c:	ffc0efef 	.word	0xffc0efef

08108730 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8108730:	b580      	push	{r7, lr}
 8108732:	b0a4      	sub	sp, #144	@ 0x90
 8108734:	af00      	add	r7, sp, #0
 8108736:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8108738:	2301      	movs	r3, #1
 810873a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810873e:	2300      	movs	r3, #0
 8108740:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8108742:	2300      	movs	r3, #0
 8108744:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8108748:	2300      	movs	r3, #0
 810874a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810874e:	2301      	movs	r3, #1
 8108750:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8108754:	2301      	movs	r3, #1
 8108756:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810875a:	2301      	movs	r3, #1
 810875c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8108760:	2300      	movs	r3, #0
 8108762:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8108766:	2301      	movs	r3, #1
 8108768:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 810876c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8108770:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8108772:	2300      	movs	r3, #0
 8108774:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8108778:	2300      	movs	r3, #0
 810877a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 810877c:	2300      	movs	r3, #0
 810877e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8108782:	2300      	movs	r3, #0
 8108784:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8108788:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 810878c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810878e:	2300      	movs	r3, #0
 8108790:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8108794:	2300      	movs	r3, #0
 8108796:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8108798:	2301      	movs	r3, #1
 810879a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 810879e:	2300      	movs	r3, #0
 81087a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 81087a4:	2300      	movs	r3, #0
 81087a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 81087aa:	2300      	movs	r3, #0
 81087ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 81087ae:	2300      	movs	r3, #0
 81087b0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 81087b2:	2300      	movs	r3, #0
 81087b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 81087b6:	2300      	movs	r3, #0
 81087b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 81087bc:	2300      	movs	r3, #0
 81087be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 81087c2:	2301      	movs	r3, #1
 81087c4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 81087c8:	2320      	movs	r3, #32
 81087ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 81087ce:	2301      	movs	r3, #1
 81087d0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 81087d4:	2300      	movs	r3, #0
 81087d6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 81087da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 81087de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81087e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81087e4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81087e6:	2300      	movs	r3, #0
 81087e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81087ec:	2302      	movs	r3, #2
 81087ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 81087f2:	2300      	movs	r3, #0
 81087f4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 81087f8:	2300      	movs	r3, #0
 81087fa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81087fe:	2300      	movs	r3, #0
 8108800:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8108804:	2301      	movs	r3, #1
 8108806:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810880a:	2300      	movs	r3, #0
 810880c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 810880e:	2301      	movs	r3, #1
 8108810:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8108814:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8108818:	4619      	mov	r1, r3
 810881a:	6878      	ldr	r0, [r7, #4]
 810881c:	f7ff fde6 	bl	81083ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8108820:	2301      	movs	r3, #1
 8108822:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8108824:	2301      	movs	r3, #1
 8108826:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8108828:	2300      	movs	r3, #0
 810882a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 810882c:	2300      	movs	r3, #0
 810882e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8108832:	2300      	movs	r3, #0
 8108834:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8108836:	2300      	movs	r3, #0
 8108838:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 810883a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810883e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8108840:	2300      	movs	r3, #0
 8108842:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8108844:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8108848:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810884a:	2300      	movs	r3, #0
 810884c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8108850:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8108854:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8108856:	f107 0308 	add.w	r3, r7, #8
 810885a:	4619      	mov	r1, r3
 810885c:	6878      	ldr	r0, [r7, #4]
 810885e:	f7ff fee1 	bl	8108624 <ETH_SetDMAConfig>
}
 8108862:	bf00      	nop
 8108864:	3790      	adds	r7, #144	@ 0x90
 8108866:	46bd      	mov	sp, r7
 8108868:	bd80      	pop	{r7, pc}

0810886a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810886a:	b480      	push	{r7}
 810886c:	b085      	sub	sp, #20
 810886e:	af00      	add	r7, sp, #0
 8108870:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8108872:	2300      	movs	r3, #0
 8108874:	60fb      	str	r3, [r7, #12]
 8108876:	e01d      	b.n	81088b4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8108878:	687b      	ldr	r3, [r7, #4]
 810887a:	68d9      	ldr	r1, [r3, #12]
 810887c:	68fa      	ldr	r2, [r7, #12]
 810887e:	4613      	mov	r3, r2
 8108880:	005b      	lsls	r3, r3, #1
 8108882:	4413      	add	r3, r2
 8108884:	00db      	lsls	r3, r3, #3
 8108886:	440b      	add	r3, r1
 8108888:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 810888a:	68bb      	ldr	r3, [r7, #8]
 810888c:	2200      	movs	r2, #0
 810888e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8108890:	68bb      	ldr	r3, [r7, #8]
 8108892:	2200      	movs	r2, #0
 8108894:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8108896:	68bb      	ldr	r3, [r7, #8]
 8108898:	2200      	movs	r2, #0
 810889a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 810889c:	68bb      	ldr	r3, [r7, #8]
 810889e:	2200      	movs	r2, #0
 81088a0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 81088a2:	68b9      	ldr	r1, [r7, #8]
 81088a4:	687b      	ldr	r3, [r7, #4]
 81088a6:	68fa      	ldr	r2, [r7, #12]
 81088a8:	3206      	adds	r2, #6
 81088aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 81088ae:	68fb      	ldr	r3, [r7, #12]
 81088b0:	3301      	adds	r3, #1
 81088b2:	60fb      	str	r3, [r7, #12]
 81088b4:	68fb      	ldr	r3, [r7, #12]
 81088b6:	2b03      	cmp	r3, #3
 81088b8:	d9de      	bls.n	8108878 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 81088ba:	687b      	ldr	r3, [r7, #4]
 81088bc:	2200      	movs	r2, #0
 81088be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 81088c0:	687b      	ldr	r3, [r7, #4]
 81088c2:	681b      	ldr	r3, [r3, #0]
 81088c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81088c8:	461a      	mov	r2, r3
 81088ca:	2303      	movs	r3, #3
 81088cc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 81088d0:	687b      	ldr	r3, [r7, #4]
 81088d2:	68da      	ldr	r2, [r3, #12]
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	681b      	ldr	r3, [r3, #0]
 81088d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81088dc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 81088e0:	687b      	ldr	r3, [r7, #4]
 81088e2:	68da      	ldr	r2, [r3, #12]
 81088e4:	687b      	ldr	r3, [r7, #4]
 81088e6:	681b      	ldr	r3, [r3, #0]
 81088e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81088ec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 81088f0:	bf00      	nop
 81088f2:	3714      	adds	r7, #20
 81088f4:	46bd      	mov	sp, r7
 81088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088fa:	4770      	bx	lr

081088fc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81088fc:	b480      	push	{r7}
 81088fe:	b085      	sub	sp, #20
 8108900:	af00      	add	r7, sp, #0
 8108902:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8108904:	2300      	movs	r3, #0
 8108906:	60fb      	str	r3, [r7, #12]
 8108908:	e023      	b.n	8108952 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 810890a:	687b      	ldr	r3, [r7, #4]
 810890c:	6919      	ldr	r1, [r3, #16]
 810890e:	68fa      	ldr	r2, [r7, #12]
 8108910:	4613      	mov	r3, r2
 8108912:	005b      	lsls	r3, r3, #1
 8108914:	4413      	add	r3, r2
 8108916:	00db      	lsls	r3, r3, #3
 8108918:	440b      	add	r3, r1
 810891a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 810891c:	68bb      	ldr	r3, [r7, #8]
 810891e:	2200      	movs	r2, #0
 8108920:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8108922:	68bb      	ldr	r3, [r7, #8]
 8108924:	2200      	movs	r2, #0
 8108926:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8108928:	68bb      	ldr	r3, [r7, #8]
 810892a:	2200      	movs	r2, #0
 810892c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 810892e:	68bb      	ldr	r3, [r7, #8]
 8108930:	2200      	movs	r2, #0
 8108932:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8108934:	68bb      	ldr	r3, [r7, #8]
 8108936:	2200      	movs	r2, #0
 8108938:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 810893a:	68bb      	ldr	r3, [r7, #8]
 810893c:	2200      	movs	r2, #0
 810893e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8108940:	68b9      	ldr	r1, [r7, #8]
 8108942:	687b      	ldr	r3, [r7, #4]
 8108944:	68fa      	ldr	r2, [r7, #12]
 8108946:	3212      	adds	r2, #18
 8108948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 810894c:	68fb      	ldr	r3, [r7, #12]
 810894e:	3301      	adds	r3, #1
 8108950:	60fb      	str	r3, [r7, #12]
 8108952:	68fb      	ldr	r3, [r7, #12]
 8108954:	2b03      	cmp	r3, #3
 8108956:	d9d8      	bls.n	810890a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8108958:	687b      	ldr	r3, [r7, #4]
 810895a:	2200      	movs	r2, #0
 810895c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 810895e:	687b      	ldr	r3, [r7, #4]
 8108960:	2200      	movs	r2, #0
 8108962:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8108964:	687b      	ldr	r3, [r7, #4]
 8108966:	2200      	movs	r2, #0
 8108968:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 810896a:	687b      	ldr	r3, [r7, #4]
 810896c:	2200      	movs	r2, #0
 810896e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8108970:	687b      	ldr	r3, [r7, #4]
 8108972:	2200      	movs	r2, #0
 8108974:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8108976:	687b      	ldr	r3, [r7, #4]
 8108978:	681b      	ldr	r3, [r3, #0]
 810897a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810897e:	461a      	mov	r2, r3
 8108980:	2303      	movs	r3, #3
 8108982:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8108986:	687b      	ldr	r3, [r7, #4]
 8108988:	691a      	ldr	r2, [r3, #16]
 810898a:	687b      	ldr	r3, [r7, #4]
 810898c:	681b      	ldr	r3, [r3, #0]
 810898e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108992:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8108996:	687b      	ldr	r3, [r7, #4]
 8108998:	691b      	ldr	r3, [r3, #16]
 810899a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 810899e:	687b      	ldr	r3, [r7, #4]
 81089a0:	681b      	ldr	r3, [r3, #0]
 81089a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81089a6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 81089aa:	bf00      	nop
 81089ac:	3714      	adds	r7, #20
 81089ae:	46bd      	mov	sp, r7
 81089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089b4:	4770      	bx	lr

081089b6 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 81089b6:	b480      	push	{r7}
 81089b8:	b091      	sub	sp, #68	@ 0x44
 81089ba:	af00      	add	r7, sp, #0
 81089bc:	60f8      	str	r0, [r7, #12]
 81089be:	60b9      	str	r1, [r7, #8]
 81089c0:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 81089c2:	68fb      	ldr	r3, [r7, #12]
 81089c4:	3318      	adds	r3, #24
 81089c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 81089c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81089ca:	691b      	ldr	r3, [r3, #16]
 81089cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 81089ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81089d0:	691b      	ldr	r3, [r3, #16]
 81089d2:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 81089d4:	2300      	movs	r3, #0
 81089d6:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81089d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81089da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81089dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81089e0:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 81089e2:	68bb      	ldr	r3, [r7, #8]
 81089e4:	689b      	ldr	r3, [r3, #8]
 81089e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 81089e8:	2300      	movs	r3, #0
 81089ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 81089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81089ee:	68db      	ldr	r3, [r3, #12]
 81089f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 81089f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81089f8:	d007      	beq.n	8108a0a <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 81089fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81089fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81089fe:	3304      	adds	r3, #4
 8108a00:	009b      	lsls	r3, r3, #2
 8108a02:	4413      	add	r3, r2
 8108a04:	685b      	ldr	r3, [r3, #4]
 8108a06:	2b00      	cmp	r3, #0
 8108a08:	d001      	beq.n	8108a0e <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8108a0a:	2302      	movs	r3, #2
 8108a0c:	e267      	b.n	8108ede <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8108a0e:	68bb      	ldr	r3, [r7, #8]
 8108a10:	681b      	ldr	r3, [r3, #0]
 8108a12:	f003 0304 	and.w	r3, r3, #4
 8108a16:	2b00      	cmp	r3, #0
 8108a18:	d044      	beq.n	8108aa4 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8108a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a1c:	68db      	ldr	r3, [r3, #12]
 8108a1e:	0c1b      	lsrs	r3, r3, #16
 8108a20:	041b      	lsls	r3, r3, #16
 8108a22:	68ba      	ldr	r2, [r7, #8]
 8108a24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8108a26:	431a      	orrs	r2, r3
 8108a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a2a:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8108a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a2e:	68db      	ldr	r3, [r3, #12]
 8108a30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8108a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a36:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8108a38:	68fb      	ldr	r3, [r7, #12]
 8108a3a:	681b      	ldr	r3, [r3, #0]
 8108a3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8108a3e:	68fb      	ldr	r3, [r7, #12]
 8108a40:	681b      	ldr	r3, [r3, #0]
 8108a42:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8108a46:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8108a48:	68bb      	ldr	r3, [r7, #8]
 8108a4a:	681b      	ldr	r3, [r3, #0]
 8108a4c:	f003 0308 	and.w	r3, r3, #8
 8108a50:	2b00      	cmp	r3, #0
 8108a52:	d027      	beq.n	8108aa4 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8108a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a56:	689b      	ldr	r3, [r3, #8]
 8108a58:	b29a      	uxth	r2, r3
 8108a5a:	68bb      	ldr	r3, [r7, #8]
 8108a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a5e:	041b      	lsls	r3, r3, #16
 8108a60:	431a      	orrs	r2, r3
 8108a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a64:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8108a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a68:	68db      	ldr	r3, [r3, #12]
 8108a6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8108a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a70:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8108a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a74:	68db      	ldr	r3, [r3, #12]
 8108a76:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8108a7a:	68bb      	ldr	r3, [r7, #8]
 8108a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108a7e:	431a      	orrs	r2, r3
 8108a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a82:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8108a84:	68fb      	ldr	r3, [r7, #12]
 8108a86:	681b      	ldr	r3, [r3, #0]
 8108a88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8108a8a:	68fb      	ldr	r3, [r7, #12]
 8108a8c:	681b      	ldr	r3, [r3, #0]
 8108a8e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8108a92:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8108a94:	68fb      	ldr	r3, [r7, #12]
 8108a96:	681b      	ldr	r3, [r3, #0]
 8108a98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8108a9a:	68fb      	ldr	r3, [r7, #12]
 8108a9c:	681b      	ldr	r3, [r3, #0]
 8108a9e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8108aa2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8108aa4:	68bb      	ldr	r3, [r7, #8]
 8108aa6:	681b      	ldr	r3, [r3, #0]
 8108aa8:	f003 0310 	and.w	r3, r3, #16
 8108aac:	2b00      	cmp	r3, #0
 8108aae:	d010      	beq.n	8108ad2 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8108ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ab2:	689b      	ldr	r3, [r3, #8]
 8108ab4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8108ab8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8108abc:	68ba      	ldr	r2, [r7, #8]
 8108abe:	6992      	ldr	r2, [r2, #24]
 8108ac0:	431a      	orrs	r2, r3
 8108ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ac4:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8108ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ac8:	68db      	ldr	r3, [r3, #12]
 8108aca:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8108ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ad0:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8108ad2:	68bb      	ldr	r3, [r7, #8]
 8108ad4:	681b      	ldr	r3, [r3, #0]
 8108ad6:	f003 0304 	and.w	r3, r3, #4
 8108ada:	2b00      	cmp	r3, #0
 8108adc:	d105      	bne.n	8108aea <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8108ade:	68bb      	ldr	r3, [r7, #8]
 8108ae0:	681b      	ldr	r3, [r3, #0]
 8108ae2:	f003 0310 	and.w	r3, r3, #16
 8108ae6:	2b00      	cmp	r3, #0
 8108ae8:	d036      	beq.n	8108b58 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8108aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108aec:	68db      	ldr	r3, [r3, #12]
 8108aee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8108af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108af4:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8108af6:	f3bf 8f5f 	dmb	sy
}
 8108afa:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8108afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108afe:	68db      	ldr	r3, [r3, #12]
 8108b00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8108b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b06:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8108b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108b0a:	3301      	adds	r3, #1
 8108b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108b10:	2b03      	cmp	r3, #3
 8108b12:	d902      	bls.n	8108b1a <ETH_Prepare_Tx_Descriptors+0x164>
 8108b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108b16:	3b04      	subs	r3, #4
 8108b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8108b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108b1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108b22:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8108b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108b26:	3301      	adds	r3, #1
 8108b28:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8108b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b2c:	68db      	ldr	r3, [r3, #12]
 8108b2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8108b32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108b36:	d10f      	bne.n	8108b58 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8108b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108b3a:	6a3a      	ldr	r2, [r7, #32]
 8108b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108b40:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8108b42:	f3bf 8f5f 	dmb	sy
}
 8108b46:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8108b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b4a:	68db      	ldr	r3, [r3, #12]
 8108b4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8108b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b52:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8108b54:	2302      	movs	r3, #2
 8108b56:	e1c2      	b.n	8108ede <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8108b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108b5a:	3301      	adds	r3, #1
 8108b5c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8108b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108b60:	681b      	ldr	r3, [r3, #0]
 8108b62:	461a      	mov	r2, r3
 8108b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b66:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8108b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b6a:	689b      	ldr	r3, [r3, #8]
 8108b6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8108b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8108b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108b76:	6852      	ldr	r2, [r2, #4]
 8108b78:	431a      	orrs	r2, r3
 8108b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b7c:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8108b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108b80:	689b      	ldr	r3, [r3, #8]
 8108b82:	2b00      	cmp	r3, #0
 8108b84:	d014      	beq.n	8108bb0 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8108b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108b88:	689b      	ldr	r3, [r3, #8]
 8108b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8108b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108b8e:	681b      	ldr	r3, [r3, #0]
 8108b90:	461a      	mov	r2, r3
 8108b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b94:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8108b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b98:	689b      	ldr	r3, [r3, #8]
 8108b9a:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8108b9e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8108ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108ba4:	6852      	ldr	r2, [r2, #4]
 8108ba6:	0412      	lsls	r2, r2, #16
 8108ba8:	431a      	orrs	r2, r3
 8108baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bac:	609a      	str	r2, [r3, #8]
 8108bae:	e00a      	b.n	8108bc6 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8108bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bb2:	2200      	movs	r2, #0
 8108bb4:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8108bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bb8:	689b      	ldr	r3, [r3, #8]
 8108bba:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8108bbe:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8108bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108bc4:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8108bc6:	68bb      	ldr	r3, [r7, #8]
 8108bc8:	681b      	ldr	r3, [r3, #0]
 8108bca:	f003 0310 	and.w	r3, r3, #16
 8108bce:	2b00      	cmp	r3, #0
 8108bd0:	d019      	beq.n	8108c06 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8108bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bd4:	68db      	ldr	r3, [r3, #12]
 8108bd6:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8108bda:	68bb      	ldr	r3, [r7, #8]
 8108bdc:	6a1b      	ldr	r3, [r3, #32]
 8108bde:	04db      	lsls	r3, r3, #19
 8108be0:	431a      	orrs	r2, r3
 8108be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108be4:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8108be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108be8:	68db      	ldr	r3, [r3, #12]
 8108bea:	0c9b      	lsrs	r3, r3, #18
 8108bec:	049b      	lsls	r3, r3, #18
 8108bee:	68ba      	ldr	r2, [r7, #8]
 8108bf0:	69d2      	ldr	r2, [r2, #28]
 8108bf2:	431a      	orrs	r2, r3
 8108bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bf6:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8108bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bfa:	68db      	ldr	r3, [r3, #12]
 8108bfc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8108c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c02:	60da      	str	r2, [r3, #12]
 8108c04:	e028      	b.n	8108c58 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8108c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c08:	68db      	ldr	r3, [r3, #12]
 8108c0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8108c0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8108c12:	68ba      	ldr	r2, [r7, #8]
 8108c14:	6852      	ldr	r2, [r2, #4]
 8108c16:	431a      	orrs	r2, r3
 8108c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c1a:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8108c1c:	68bb      	ldr	r3, [r7, #8]
 8108c1e:	681b      	ldr	r3, [r3, #0]
 8108c20:	f003 0301 	and.w	r3, r3, #1
 8108c24:	2b00      	cmp	r3, #0
 8108c26:	d008      	beq.n	8108c3a <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8108c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c2a:	68db      	ldr	r3, [r3, #12]
 8108c2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8108c30:	68bb      	ldr	r3, [r7, #8]
 8108c32:	695b      	ldr	r3, [r3, #20]
 8108c34:	431a      	orrs	r2, r3
 8108c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c38:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8108c3a:	68bb      	ldr	r3, [r7, #8]
 8108c3c:	681b      	ldr	r3, [r3, #0]
 8108c3e:	f003 0320 	and.w	r3, r3, #32
 8108c42:	2b00      	cmp	r3, #0
 8108c44:	d008      	beq.n	8108c58 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8108c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c48:	68db      	ldr	r3, [r3, #12]
 8108c4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8108c4e:	68bb      	ldr	r3, [r7, #8]
 8108c50:	691b      	ldr	r3, [r3, #16]
 8108c52:	431a      	orrs	r2, r3
 8108c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c56:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8108c58:	68bb      	ldr	r3, [r7, #8]
 8108c5a:	681b      	ldr	r3, [r3, #0]
 8108c5c:	f003 0304 	and.w	r3, r3, #4
 8108c60:	2b00      	cmp	r3, #0
 8108c62:	d008      	beq.n	8108c76 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8108c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c66:	689b      	ldr	r3, [r3, #8]
 8108c68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8108c6c:	68bb      	ldr	r3, [r7, #8]
 8108c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108c70:	431a      	orrs	r2, r3
 8108c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c74:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8108c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c78:	68db      	ldr	r3, [r3, #12]
 8108c7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8108c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c80:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8108c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c84:	68db      	ldr	r3, [r3, #12]
 8108c86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8108c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c8c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8108c8e:	f3bf 8f5f 	dmb	sy
}
 8108c92:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8108c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c96:	68db      	ldr	r3, [r3, #12]
 8108c98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8108c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c9e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8108ca0:	68bb      	ldr	r3, [r7, #8]
 8108ca2:	681b      	ldr	r3, [r3, #0]
 8108ca4:	f003 0302 	and.w	r3, r3, #2
 8108ca8:	2b00      	cmp	r3, #0
 8108caa:	f000 80d9 	beq.w	8108e60 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8108cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cb0:	68db      	ldr	r3, [r3, #12]
 8108cb2:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8108cb6:	68bb      	ldr	r3, [r7, #8]
 8108cb8:	68db      	ldr	r3, [r3, #12]
 8108cba:	431a      	orrs	r2, r3
 8108cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cbe:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8108cc0:	e0ce      	b.n	8108e60 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8108cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cc4:	68db      	ldr	r3, [r3, #12]
 8108cc6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8108cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ccc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8108cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108cd0:	3301      	adds	r3, #1
 8108cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108cd6:	2b03      	cmp	r3, #3
 8108cd8:	d902      	bls.n	8108ce0 <ETH_Prepare_Tx_Descriptors+0x32a>
 8108cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108cdc:	3b04      	subs	r3, #4
 8108cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8108ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108ce2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108ce8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8108cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cec:	68db      	ldr	r3, [r3, #12]
 8108cee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8108cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cf4:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8108cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cf8:	68db      	ldr	r3, [r3, #12]
 8108cfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8108cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108d02:	d007      	beq.n	8108d14 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8108d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d08:	3304      	adds	r3, #4
 8108d0a:	009b      	lsls	r3, r3, #2
 8108d0c:	4413      	add	r3, r2
 8108d0e:	685b      	ldr	r3, [r3, #4]
 8108d10:	2b00      	cmp	r3, #0
 8108d12:	d029      	beq.n	8108d68 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8108d14:	6a3b      	ldr	r3, [r7, #32]
 8108d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8108d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108d20:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8108d22:	2300      	movs	r3, #0
 8108d24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8108d26:	e019      	b.n	8108d5c <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8108d28:	f3bf 8f5f 	dmb	sy
}
 8108d2c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8108d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d30:	68db      	ldr	r3, [r3, #12]
 8108d32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8108d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d38:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8108d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d3c:	3301      	adds	r3, #1
 8108d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d42:	2b03      	cmp	r3, #3
 8108d44:	d902      	bls.n	8108d4c <ETH_Prepare_Tx_Descriptors+0x396>
 8108d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d48:	3b04      	subs	r3, #4
 8108d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8108d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108d54:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8108d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d58:	3301      	adds	r3, #1
 8108d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8108d5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8108d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108d60:	429a      	cmp	r2, r3
 8108d62:	d3e1      	bcc.n	8108d28 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8108d64:	2302      	movs	r3, #2
 8108d66:	e0ba      	b.n	8108ede <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 8108d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108d6a:	3301      	adds	r3, #1
 8108d6c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8108d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108d70:	689b      	ldr	r3, [r3, #8]
 8108d72:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8108d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108d76:	681b      	ldr	r3, [r3, #0]
 8108d78:	461a      	mov	r2, r3
 8108d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d7c:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8108d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d80:	689b      	ldr	r3, [r3, #8]
 8108d82:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8108d86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8108d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108d8c:	6852      	ldr	r2, [r2, #4]
 8108d8e:	431a      	orrs	r2, r3
 8108d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d92:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8108d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108d96:	689b      	ldr	r3, [r3, #8]
 8108d98:	2b00      	cmp	r3, #0
 8108d9a:	d014      	beq.n	8108dc6 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8108d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108d9e:	689b      	ldr	r3, [r3, #8]
 8108da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8108da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108da4:	681b      	ldr	r3, [r3, #0]
 8108da6:	461a      	mov	r2, r3
 8108da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108daa:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8108dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dae:	689b      	ldr	r3, [r3, #8]
 8108db0:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8108db4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8108db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108dba:	6852      	ldr	r2, [r2, #4]
 8108dbc:	0412      	lsls	r2, r2, #16
 8108dbe:	431a      	orrs	r2, r3
 8108dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dc2:	609a      	str	r2, [r3, #8]
 8108dc4:	e00a      	b.n	8108ddc <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8108dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dc8:	2200      	movs	r2, #0
 8108dca:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8108dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dce:	689b      	ldr	r3, [r3, #8]
 8108dd0:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8108dd4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8108dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108dda:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8108ddc:	68bb      	ldr	r3, [r7, #8]
 8108dde:	681b      	ldr	r3, [r3, #0]
 8108de0:	f003 0310 	and.w	r3, r3, #16
 8108de4:	2b00      	cmp	r3, #0
 8108de6:	d00f      	beq.n	8108e08 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8108de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dea:	68db      	ldr	r3, [r3, #12]
 8108dec:	0c9b      	lsrs	r3, r3, #18
 8108dee:	049b      	lsls	r3, r3, #18
 8108df0:	68ba      	ldr	r2, [r7, #8]
 8108df2:	69d2      	ldr	r2, [r2, #28]
 8108df4:	431a      	orrs	r2, r3
 8108df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108df8:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8108dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dfc:	68db      	ldr	r3, [r3, #12]
 8108dfe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8108e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e04:	60da      	str	r2, [r3, #12]
 8108e06:	e019      	b.n	8108e3c <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8108e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e0a:	68db      	ldr	r3, [r3, #12]
 8108e0c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8108e10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8108e14:	68ba      	ldr	r2, [r7, #8]
 8108e16:	6852      	ldr	r2, [r2, #4]
 8108e18:	431a      	orrs	r2, r3
 8108e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e1c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8108e1e:	68bb      	ldr	r3, [r7, #8]
 8108e20:	681b      	ldr	r3, [r3, #0]
 8108e22:	f003 0301 	and.w	r3, r3, #1
 8108e26:	2b00      	cmp	r3, #0
 8108e28:	d008      	beq.n	8108e3c <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8108e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e2c:	68db      	ldr	r3, [r3, #12]
 8108e2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8108e32:	68bb      	ldr	r3, [r7, #8]
 8108e34:	695b      	ldr	r3, [r3, #20]
 8108e36:	431a      	orrs	r2, r3
 8108e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e3a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8108e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e3e:	3301      	adds	r3, #1
 8108e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8108e42:	f3bf 8f5f 	dmb	sy
}
 8108e46:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8108e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e4a:	68db      	ldr	r3, [r3, #12]
 8108e4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8108e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e52:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8108e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e56:	68db      	ldr	r3, [r3, #12]
 8108e58:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8108e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e5e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8108e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108e62:	689b      	ldr	r3, [r3, #8]
 8108e64:	2b00      	cmp	r3, #0
 8108e66:	f47f af2c 	bne.w	8108cc2 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8108e6a:	687b      	ldr	r3, [r7, #4]
 8108e6c:	2b00      	cmp	r3, #0
 8108e6e:	d006      	beq.n	8108e7e <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8108e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e72:	689b      	ldr	r3, [r3, #8]
 8108e74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8108e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e7a:	609a      	str	r2, [r3, #8]
 8108e7c:	e005      	b.n	8108e8a <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8108e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e80:	689b      	ldr	r3, [r3, #8]
 8108e82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8108e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e88:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8108e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e8c:	68db      	ldr	r3, [r3, #12]
 8108e8e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8108e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e94:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8108e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8108e9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108e9e:	3304      	adds	r3, #4
 8108ea0:	009b      	lsls	r3, r3, #2
 8108ea2:	440b      	add	r3, r1
 8108ea4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8108ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108ea8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108eaa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8108eac:	f3ef 8310 	mrs	r3, PRIMASK
 8108eb0:	613b      	str	r3, [r7, #16]
  return(result);
 8108eb2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8108eb4:	61fb      	str	r3, [r7, #28]
 8108eb6:	2301      	movs	r3, #1
 8108eb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8108eba:	697b      	ldr	r3, [r7, #20]
 8108ebc:	f383 8810 	msr	PRIMASK, r3
}
 8108ec0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8108ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108ec4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8108ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108ec8:	4413      	add	r3, r2
 8108eca:	1c5a      	adds	r2, r3, #1
 8108ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108ece:	629a      	str	r2, [r3, #40]	@ 0x28
 8108ed0:	69fb      	ldr	r3, [r7, #28]
 8108ed2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8108ed4:	69bb      	ldr	r3, [r7, #24]
 8108ed6:	f383 8810 	msr	PRIMASK, r3
}
 8108eda:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8108edc:	2300      	movs	r3, #0
}
 8108ede:	4618      	mov	r0, r3
 8108ee0:	3744      	adds	r7, #68	@ 0x44
 8108ee2:	46bd      	mov	sp, r7
 8108ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ee8:	4770      	bx	lr
	...

08108eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8108eec:	b480      	push	{r7}
 8108eee:	b089      	sub	sp, #36	@ 0x24
 8108ef0:	af00      	add	r7, sp, #0
 8108ef2:	6078      	str	r0, [r7, #4]
 8108ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8108ef6:	2300      	movs	r3, #0
 8108ef8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8108efa:	4b89      	ldr	r3, [pc, #548]	@ (8109120 <HAL_GPIO_Init+0x234>)
 8108efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8108efe:	e194      	b.n	810922a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8108f00:	683b      	ldr	r3, [r7, #0]
 8108f02:	681a      	ldr	r2, [r3, #0]
 8108f04:	2101      	movs	r1, #1
 8108f06:	69fb      	ldr	r3, [r7, #28]
 8108f08:	fa01 f303 	lsl.w	r3, r1, r3
 8108f0c:	4013      	ands	r3, r2
 8108f0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8108f10:	693b      	ldr	r3, [r7, #16]
 8108f12:	2b00      	cmp	r3, #0
 8108f14:	f000 8186 	beq.w	8109224 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8108f18:	683b      	ldr	r3, [r7, #0]
 8108f1a:	685b      	ldr	r3, [r3, #4]
 8108f1c:	f003 0303 	and.w	r3, r3, #3
 8108f20:	2b01      	cmp	r3, #1
 8108f22:	d005      	beq.n	8108f30 <HAL_GPIO_Init+0x44>
 8108f24:	683b      	ldr	r3, [r7, #0]
 8108f26:	685b      	ldr	r3, [r3, #4]
 8108f28:	f003 0303 	and.w	r3, r3, #3
 8108f2c:	2b02      	cmp	r3, #2
 8108f2e:	d130      	bne.n	8108f92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	689b      	ldr	r3, [r3, #8]
 8108f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8108f36:	69fb      	ldr	r3, [r7, #28]
 8108f38:	005b      	lsls	r3, r3, #1
 8108f3a:	2203      	movs	r2, #3
 8108f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8108f40:	43db      	mvns	r3, r3
 8108f42:	69ba      	ldr	r2, [r7, #24]
 8108f44:	4013      	ands	r3, r2
 8108f46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8108f48:	683b      	ldr	r3, [r7, #0]
 8108f4a:	68da      	ldr	r2, [r3, #12]
 8108f4c:	69fb      	ldr	r3, [r7, #28]
 8108f4e:	005b      	lsls	r3, r3, #1
 8108f50:	fa02 f303 	lsl.w	r3, r2, r3
 8108f54:	69ba      	ldr	r2, [r7, #24]
 8108f56:	4313      	orrs	r3, r2
 8108f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8108f5a:	687b      	ldr	r3, [r7, #4]
 8108f5c:	69ba      	ldr	r2, [r7, #24]
 8108f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8108f60:	687b      	ldr	r3, [r7, #4]
 8108f62:	685b      	ldr	r3, [r3, #4]
 8108f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8108f66:	2201      	movs	r2, #1
 8108f68:	69fb      	ldr	r3, [r7, #28]
 8108f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8108f6e:	43db      	mvns	r3, r3
 8108f70:	69ba      	ldr	r2, [r7, #24]
 8108f72:	4013      	ands	r3, r2
 8108f74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8108f76:	683b      	ldr	r3, [r7, #0]
 8108f78:	685b      	ldr	r3, [r3, #4]
 8108f7a:	091b      	lsrs	r3, r3, #4
 8108f7c:	f003 0201 	and.w	r2, r3, #1
 8108f80:	69fb      	ldr	r3, [r7, #28]
 8108f82:	fa02 f303 	lsl.w	r3, r2, r3
 8108f86:	69ba      	ldr	r2, [r7, #24]
 8108f88:	4313      	orrs	r3, r2
 8108f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8108f8c:	687b      	ldr	r3, [r7, #4]
 8108f8e:	69ba      	ldr	r2, [r7, #24]
 8108f90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8108f92:	683b      	ldr	r3, [r7, #0]
 8108f94:	685b      	ldr	r3, [r3, #4]
 8108f96:	f003 0303 	and.w	r3, r3, #3
 8108f9a:	2b03      	cmp	r3, #3
 8108f9c:	d017      	beq.n	8108fce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8108f9e:	687b      	ldr	r3, [r7, #4]
 8108fa0:	68db      	ldr	r3, [r3, #12]
 8108fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8108fa4:	69fb      	ldr	r3, [r7, #28]
 8108fa6:	005b      	lsls	r3, r3, #1
 8108fa8:	2203      	movs	r2, #3
 8108faa:	fa02 f303 	lsl.w	r3, r2, r3
 8108fae:	43db      	mvns	r3, r3
 8108fb0:	69ba      	ldr	r2, [r7, #24]
 8108fb2:	4013      	ands	r3, r2
 8108fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8108fb6:	683b      	ldr	r3, [r7, #0]
 8108fb8:	689a      	ldr	r2, [r3, #8]
 8108fba:	69fb      	ldr	r3, [r7, #28]
 8108fbc:	005b      	lsls	r3, r3, #1
 8108fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8108fc2:	69ba      	ldr	r2, [r7, #24]
 8108fc4:	4313      	orrs	r3, r2
 8108fc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	69ba      	ldr	r2, [r7, #24]
 8108fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8108fce:	683b      	ldr	r3, [r7, #0]
 8108fd0:	685b      	ldr	r3, [r3, #4]
 8108fd2:	f003 0303 	and.w	r3, r3, #3
 8108fd6:	2b02      	cmp	r3, #2
 8108fd8:	d123      	bne.n	8109022 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8108fda:	69fb      	ldr	r3, [r7, #28]
 8108fdc:	08da      	lsrs	r2, r3, #3
 8108fde:	687b      	ldr	r3, [r7, #4]
 8108fe0:	3208      	adds	r2, #8
 8108fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8108fe8:	69fb      	ldr	r3, [r7, #28]
 8108fea:	f003 0307 	and.w	r3, r3, #7
 8108fee:	009b      	lsls	r3, r3, #2
 8108ff0:	220f      	movs	r2, #15
 8108ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8108ff6:	43db      	mvns	r3, r3
 8108ff8:	69ba      	ldr	r2, [r7, #24]
 8108ffa:	4013      	ands	r3, r2
 8108ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8108ffe:	683b      	ldr	r3, [r7, #0]
 8109000:	691a      	ldr	r2, [r3, #16]
 8109002:	69fb      	ldr	r3, [r7, #28]
 8109004:	f003 0307 	and.w	r3, r3, #7
 8109008:	009b      	lsls	r3, r3, #2
 810900a:	fa02 f303 	lsl.w	r3, r2, r3
 810900e:	69ba      	ldr	r2, [r7, #24]
 8109010:	4313      	orrs	r3, r2
 8109012:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8109014:	69fb      	ldr	r3, [r7, #28]
 8109016:	08da      	lsrs	r2, r3, #3
 8109018:	687b      	ldr	r3, [r7, #4]
 810901a:	3208      	adds	r2, #8
 810901c:	69b9      	ldr	r1, [r7, #24]
 810901e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8109022:	687b      	ldr	r3, [r7, #4]
 8109024:	681b      	ldr	r3, [r3, #0]
 8109026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8109028:	69fb      	ldr	r3, [r7, #28]
 810902a:	005b      	lsls	r3, r3, #1
 810902c:	2203      	movs	r2, #3
 810902e:	fa02 f303 	lsl.w	r3, r2, r3
 8109032:	43db      	mvns	r3, r3
 8109034:	69ba      	ldr	r2, [r7, #24]
 8109036:	4013      	ands	r3, r2
 8109038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810903a:	683b      	ldr	r3, [r7, #0]
 810903c:	685b      	ldr	r3, [r3, #4]
 810903e:	f003 0203 	and.w	r2, r3, #3
 8109042:	69fb      	ldr	r3, [r7, #28]
 8109044:	005b      	lsls	r3, r3, #1
 8109046:	fa02 f303 	lsl.w	r3, r2, r3
 810904a:	69ba      	ldr	r2, [r7, #24]
 810904c:	4313      	orrs	r3, r2
 810904e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8109050:	687b      	ldr	r3, [r7, #4]
 8109052:	69ba      	ldr	r2, [r7, #24]
 8109054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8109056:	683b      	ldr	r3, [r7, #0]
 8109058:	685b      	ldr	r3, [r3, #4]
 810905a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810905e:	2b00      	cmp	r3, #0
 8109060:	f000 80e0 	beq.w	8109224 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8109064:	4b2f      	ldr	r3, [pc, #188]	@ (8109124 <HAL_GPIO_Init+0x238>)
 8109066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810906a:	4a2e      	ldr	r2, [pc, #184]	@ (8109124 <HAL_GPIO_Init+0x238>)
 810906c:	f043 0302 	orr.w	r3, r3, #2
 8109070:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8109074:	4b2b      	ldr	r3, [pc, #172]	@ (8109124 <HAL_GPIO_Init+0x238>)
 8109076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810907a:	f003 0302 	and.w	r3, r3, #2
 810907e:	60fb      	str	r3, [r7, #12]
 8109080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8109082:	4a29      	ldr	r2, [pc, #164]	@ (8109128 <HAL_GPIO_Init+0x23c>)
 8109084:	69fb      	ldr	r3, [r7, #28]
 8109086:	089b      	lsrs	r3, r3, #2
 8109088:	3302      	adds	r3, #2
 810908a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810908e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8109090:	69fb      	ldr	r3, [r7, #28]
 8109092:	f003 0303 	and.w	r3, r3, #3
 8109096:	009b      	lsls	r3, r3, #2
 8109098:	220f      	movs	r2, #15
 810909a:	fa02 f303 	lsl.w	r3, r2, r3
 810909e:	43db      	mvns	r3, r3
 81090a0:	69ba      	ldr	r2, [r7, #24]
 81090a2:	4013      	ands	r3, r2
 81090a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81090a6:	687b      	ldr	r3, [r7, #4]
 81090a8:	4a20      	ldr	r2, [pc, #128]	@ (810912c <HAL_GPIO_Init+0x240>)
 81090aa:	4293      	cmp	r3, r2
 81090ac:	d052      	beq.n	8109154 <HAL_GPIO_Init+0x268>
 81090ae:	687b      	ldr	r3, [r7, #4]
 81090b0:	4a1f      	ldr	r2, [pc, #124]	@ (8109130 <HAL_GPIO_Init+0x244>)
 81090b2:	4293      	cmp	r3, r2
 81090b4:	d031      	beq.n	810911a <HAL_GPIO_Init+0x22e>
 81090b6:	687b      	ldr	r3, [r7, #4]
 81090b8:	4a1e      	ldr	r2, [pc, #120]	@ (8109134 <HAL_GPIO_Init+0x248>)
 81090ba:	4293      	cmp	r3, r2
 81090bc:	d02b      	beq.n	8109116 <HAL_GPIO_Init+0x22a>
 81090be:	687b      	ldr	r3, [r7, #4]
 81090c0:	4a1d      	ldr	r2, [pc, #116]	@ (8109138 <HAL_GPIO_Init+0x24c>)
 81090c2:	4293      	cmp	r3, r2
 81090c4:	d025      	beq.n	8109112 <HAL_GPIO_Init+0x226>
 81090c6:	687b      	ldr	r3, [r7, #4]
 81090c8:	4a1c      	ldr	r2, [pc, #112]	@ (810913c <HAL_GPIO_Init+0x250>)
 81090ca:	4293      	cmp	r3, r2
 81090cc:	d01f      	beq.n	810910e <HAL_GPIO_Init+0x222>
 81090ce:	687b      	ldr	r3, [r7, #4]
 81090d0:	4a1b      	ldr	r2, [pc, #108]	@ (8109140 <HAL_GPIO_Init+0x254>)
 81090d2:	4293      	cmp	r3, r2
 81090d4:	d019      	beq.n	810910a <HAL_GPIO_Init+0x21e>
 81090d6:	687b      	ldr	r3, [r7, #4]
 81090d8:	4a1a      	ldr	r2, [pc, #104]	@ (8109144 <HAL_GPIO_Init+0x258>)
 81090da:	4293      	cmp	r3, r2
 81090dc:	d013      	beq.n	8109106 <HAL_GPIO_Init+0x21a>
 81090de:	687b      	ldr	r3, [r7, #4]
 81090e0:	4a19      	ldr	r2, [pc, #100]	@ (8109148 <HAL_GPIO_Init+0x25c>)
 81090e2:	4293      	cmp	r3, r2
 81090e4:	d00d      	beq.n	8109102 <HAL_GPIO_Init+0x216>
 81090e6:	687b      	ldr	r3, [r7, #4]
 81090e8:	4a18      	ldr	r2, [pc, #96]	@ (810914c <HAL_GPIO_Init+0x260>)
 81090ea:	4293      	cmp	r3, r2
 81090ec:	d007      	beq.n	81090fe <HAL_GPIO_Init+0x212>
 81090ee:	687b      	ldr	r3, [r7, #4]
 81090f0:	4a17      	ldr	r2, [pc, #92]	@ (8109150 <HAL_GPIO_Init+0x264>)
 81090f2:	4293      	cmp	r3, r2
 81090f4:	d101      	bne.n	81090fa <HAL_GPIO_Init+0x20e>
 81090f6:	2309      	movs	r3, #9
 81090f8:	e02d      	b.n	8109156 <HAL_GPIO_Init+0x26a>
 81090fa:	230a      	movs	r3, #10
 81090fc:	e02b      	b.n	8109156 <HAL_GPIO_Init+0x26a>
 81090fe:	2308      	movs	r3, #8
 8109100:	e029      	b.n	8109156 <HAL_GPIO_Init+0x26a>
 8109102:	2307      	movs	r3, #7
 8109104:	e027      	b.n	8109156 <HAL_GPIO_Init+0x26a>
 8109106:	2306      	movs	r3, #6
 8109108:	e025      	b.n	8109156 <HAL_GPIO_Init+0x26a>
 810910a:	2305      	movs	r3, #5
 810910c:	e023      	b.n	8109156 <HAL_GPIO_Init+0x26a>
 810910e:	2304      	movs	r3, #4
 8109110:	e021      	b.n	8109156 <HAL_GPIO_Init+0x26a>
 8109112:	2303      	movs	r3, #3
 8109114:	e01f      	b.n	8109156 <HAL_GPIO_Init+0x26a>
 8109116:	2302      	movs	r3, #2
 8109118:	e01d      	b.n	8109156 <HAL_GPIO_Init+0x26a>
 810911a:	2301      	movs	r3, #1
 810911c:	e01b      	b.n	8109156 <HAL_GPIO_Init+0x26a>
 810911e:	bf00      	nop
 8109120:	580000c0 	.word	0x580000c0
 8109124:	58024400 	.word	0x58024400
 8109128:	58000400 	.word	0x58000400
 810912c:	58020000 	.word	0x58020000
 8109130:	58020400 	.word	0x58020400
 8109134:	58020800 	.word	0x58020800
 8109138:	58020c00 	.word	0x58020c00
 810913c:	58021000 	.word	0x58021000
 8109140:	58021400 	.word	0x58021400
 8109144:	58021800 	.word	0x58021800
 8109148:	58021c00 	.word	0x58021c00
 810914c:	58022000 	.word	0x58022000
 8109150:	58022400 	.word	0x58022400
 8109154:	2300      	movs	r3, #0
 8109156:	69fa      	ldr	r2, [r7, #28]
 8109158:	f002 0203 	and.w	r2, r2, #3
 810915c:	0092      	lsls	r2, r2, #2
 810915e:	4093      	lsls	r3, r2
 8109160:	69ba      	ldr	r2, [r7, #24]
 8109162:	4313      	orrs	r3, r2
 8109164:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8109166:	4938      	ldr	r1, [pc, #224]	@ (8109248 <HAL_GPIO_Init+0x35c>)
 8109168:	69fb      	ldr	r3, [r7, #28]
 810916a:	089b      	lsrs	r3, r3, #2
 810916c:	3302      	adds	r3, #2
 810916e:	69ba      	ldr	r2, [r7, #24]
 8109170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8109174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8109178:	681b      	ldr	r3, [r3, #0]
 810917a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810917c:	693b      	ldr	r3, [r7, #16]
 810917e:	43db      	mvns	r3, r3
 8109180:	69ba      	ldr	r2, [r7, #24]
 8109182:	4013      	ands	r3, r2
 8109184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8109186:	683b      	ldr	r3, [r7, #0]
 8109188:	685b      	ldr	r3, [r3, #4]
 810918a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810918e:	2b00      	cmp	r3, #0
 8109190:	d003      	beq.n	810919a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8109192:	69ba      	ldr	r2, [r7, #24]
 8109194:	693b      	ldr	r3, [r7, #16]
 8109196:	4313      	orrs	r3, r2
 8109198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810919a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810919e:	69bb      	ldr	r3, [r7, #24]
 81091a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81091a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81091a6:	685b      	ldr	r3, [r3, #4]
 81091a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81091aa:	693b      	ldr	r3, [r7, #16]
 81091ac:	43db      	mvns	r3, r3
 81091ae:	69ba      	ldr	r2, [r7, #24]
 81091b0:	4013      	ands	r3, r2
 81091b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81091b4:	683b      	ldr	r3, [r7, #0]
 81091b6:	685b      	ldr	r3, [r3, #4]
 81091b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81091bc:	2b00      	cmp	r3, #0
 81091be:	d003      	beq.n	81091c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81091c0:	69ba      	ldr	r2, [r7, #24]
 81091c2:	693b      	ldr	r3, [r7, #16]
 81091c4:	4313      	orrs	r3, r2
 81091c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81091c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81091cc:	69bb      	ldr	r3, [r7, #24]
 81091ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81091d0:	697b      	ldr	r3, [r7, #20]
 81091d2:	685b      	ldr	r3, [r3, #4]
 81091d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81091d6:	693b      	ldr	r3, [r7, #16]
 81091d8:	43db      	mvns	r3, r3
 81091da:	69ba      	ldr	r2, [r7, #24]
 81091dc:	4013      	ands	r3, r2
 81091de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81091e0:	683b      	ldr	r3, [r7, #0]
 81091e2:	685b      	ldr	r3, [r3, #4]
 81091e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81091e8:	2b00      	cmp	r3, #0
 81091ea:	d003      	beq.n	81091f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81091ec:	69ba      	ldr	r2, [r7, #24]
 81091ee:	693b      	ldr	r3, [r7, #16]
 81091f0:	4313      	orrs	r3, r2
 81091f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81091f4:	697b      	ldr	r3, [r7, #20]
 81091f6:	69ba      	ldr	r2, [r7, #24]
 81091f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81091fa:	697b      	ldr	r3, [r7, #20]
 81091fc:	681b      	ldr	r3, [r3, #0]
 81091fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8109200:	693b      	ldr	r3, [r7, #16]
 8109202:	43db      	mvns	r3, r3
 8109204:	69ba      	ldr	r2, [r7, #24]
 8109206:	4013      	ands	r3, r2
 8109208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810920a:	683b      	ldr	r3, [r7, #0]
 810920c:	685b      	ldr	r3, [r3, #4]
 810920e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109212:	2b00      	cmp	r3, #0
 8109214:	d003      	beq.n	810921e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8109216:	69ba      	ldr	r2, [r7, #24]
 8109218:	693b      	ldr	r3, [r7, #16]
 810921a:	4313      	orrs	r3, r2
 810921c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810921e:	697b      	ldr	r3, [r7, #20]
 8109220:	69ba      	ldr	r2, [r7, #24]
 8109222:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8109224:	69fb      	ldr	r3, [r7, #28]
 8109226:	3301      	adds	r3, #1
 8109228:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810922a:	683b      	ldr	r3, [r7, #0]
 810922c:	681a      	ldr	r2, [r3, #0]
 810922e:	69fb      	ldr	r3, [r7, #28]
 8109230:	fa22 f303 	lsr.w	r3, r2, r3
 8109234:	2b00      	cmp	r3, #0
 8109236:	f47f ae63 	bne.w	8108f00 <HAL_GPIO_Init+0x14>
  }
}
 810923a:	bf00      	nop
 810923c:	bf00      	nop
 810923e:	3724      	adds	r7, #36	@ 0x24
 8109240:	46bd      	mov	sp, r7
 8109242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109246:	4770      	bx	lr
 8109248:	58000400 	.word	0x58000400

0810924c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 810924c:	b480      	push	{r7}
 810924e:	b087      	sub	sp, #28
 8109250:	af00      	add	r7, sp, #0
 8109252:	6078      	str	r0, [r7, #4]
 8109254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8109256:	2300      	movs	r3, #0
 8109258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810925a:	4b75      	ldr	r3, [pc, #468]	@ (8109430 <HAL_GPIO_DeInit+0x1e4>)
 810925c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 810925e:	e0d9      	b.n	8109414 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8109260:	2201      	movs	r2, #1
 8109262:	697b      	ldr	r3, [r7, #20]
 8109264:	fa02 f303 	lsl.w	r3, r2, r3
 8109268:	683a      	ldr	r2, [r7, #0]
 810926a:	4013      	ands	r3, r2
 810926c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 810926e:	68fb      	ldr	r3, [r7, #12]
 8109270:	2b00      	cmp	r3, #0
 8109272:	f000 80cc 	beq.w	810940e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8109276:	4a6f      	ldr	r2, [pc, #444]	@ (8109434 <HAL_GPIO_DeInit+0x1e8>)
 8109278:	697b      	ldr	r3, [r7, #20]
 810927a:	089b      	lsrs	r3, r3, #2
 810927c:	3302      	adds	r3, #2
 810927e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8109282:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8109284:	697b      	ldr	r3, [r7, #20]
 8109286:	f003 0303 	and.w	r3, r3, #3
 810928a:	009b      	lsls	r3, r3, #2
 810928c:	220f      	movs	r2, #15
 810928e:	fa02 f303 	lsl.w	r3, r2, r3
 8109292:	68ba      	ldr	r2, [r7, #8]
 8109294:	4013      	ands	r3, r2
 8109296:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8109298:	687b      	ldr	r3, [r7, #4]
 810929a:	4a67      	ldr	r2, [pc, #412]	@ (8109438 <HAL_GPIO_DeInit+0x1ec>)
 810929c:	4293      	cmp	r3, r2
 810929e:	d037      	beq.n	8109310 <HAL_GPIO_DeInit+0xc4>
 81092a0:	687b      	ldr	r3, [r7, #4]
 81092a2:	4a66      	ldr	r2, [pc, #408]	@ (810943c <HAL_GPIO_DeInit+0x1f0>)
 81092a4:	4293      	cmp	r3, r2
 81092a6:	d031      	beq.n	810930c <HAL_GPIO_DeInit+0xc0>
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	4a65      	ldr	r2, [pc, #404]	@ (8109440 <HAL_GPIO_DeInit+0x1f4>)
 81092ac:	4293      	cmp	r3, r2
 81092ae:	d02b      	beq.n	8109308 <HAL_GPIO_DeInit+0xbc>
 81092b0:	687b      	ldr	r3, [r7, #4]
 81092b2:	4a64      	ldr	r2, [pc, #400]	@ (8109444 <HAL_GPIO_DeInit+0x1f8>)
 81092b4:	4293      	cmp	r3, r2
 81092b6:	d025      	beq.n	8109304 <HAL_GPIO_DeInit+0xb8>
 81092b8:	687b      	ldr	r3, [r7, #4]
 81092ba:	4a63      	ldr	r2, [pc, #396]	@ (8109448 <HAL_GPIO_DeInit+0x1fc>)
 81092bc:	4293      	cmp	r3, r2
 81092be:	d01f      	beq.n	8109300 <HAL_GPIO_DeInit+0xb4>
 81092c0:	687b      	ldr	r3, [r7, #4]
 81092c2:	4a62      	ldr	r2, [pc, #392]	@ (810944c <HAL_GPIO_DeInit+0x200>)
 81092c4:	4293      	cmp	r3, r2
 81092c6:	d019      	beq.n	81092fc <HAL_GPIO_DeInit+0xb0>
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	4a61      	ldr	r2, [pc, #388]	@ (8109450 <HAL_GPIO_DeInit+0x204>)
 81092cc:	4293      	cmp	r3, r2
 81092ce:	d013      	beq.n	81092f8 <HAL_GPIO_DeInit+0xac>
 81092d0:	687b      	ldr	r3, [r7, #4]
 81092d2:	4a60      	ldr	r2, [pc, #384]	@ (8109454 <HAL_GPIO_DeInit+0x208>)
 81092d4:	4293      	cmp	r3, r2
 81092d6:	d00d      	beq.n	81092f4 <HAL_GPIO_DeInit+0xa8>
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	4a5f      	ldr	r2, [pc, #380]	@ (8109458 <HAL_GPIO_DeInit+0x20c>)
 81092dc:	4293      	cmp	r3, r2
 81092de:	d007      	beq.n	81092f0 <HAL_GPIO_DeInit+0xa4>
 81092e0:	687b      	ldr	r3, [r7, #4]
 81092e2:	4a5e      	ldr	r2, [pc, #376]	@ (810945c <HAL_GPIO_DeInit+0x210>)
 81092e4:	4293      	cmp	r3, r2
 81092e6:	d101      	bne.n	81092ec <HAL_GPIO_DeInit+0xa0>
 81092e8:	2309      	movs	r3, #9
 81092ea:	e012      	b.n	8109312 <HAL_GPIO_DeInit+0xc6>
 81092ec:	230a      	movs	r3, #10
 81092ee:	e010      	b.n	8109312 <HAL_GPIO_DeInit+0xc6>
 81092f0:	2308      	movs	r3, #8
 81092f2:	e00e      	b.n	8109312 <HAL_GPIO_DeInit+0xc6>
 81092f4:	2307      	movs	r3, #7
 81092f6:	e00c      	b.n	8109312 <HAL_GPIO_DeInit+0xc6>
 81092f8:	2306      	movs	r3, #6
 81092fa:	e00a      	b.n	8109312 <HAL_GPIO_DeInit+0xc6>
 81092fc:	2305      	movs	r3, #5
 81092fe:	e008      	b.n	8109312 <HAL_GPIO_DeInit+0xc6>
 8109300:	2304      	movs	r3, #4
 8109302:	e006      	b.n	8109312 <HAL_GPIO_DeInit+0xc6>
 8109304:	2303      	movs	r3, #3
 8109306:	e004      	b.n	8109312 <HAL_GPIO_DeInit+0xc6>
 8109308:	2302      	movs	r3, #2
 810930a:	e002      	b.n	8109312 <HAL_GPIO_DeInit+0xc6>
 810930c:	2301      	movs	r3, #1
 810930e:	e000      	b.n	8109312 <HAL_GPIO_DeInit+0xc6>
 8109310:	2300      	movs	r3, #0
 8109312:	697a      	ldr	r2, [r7, #20]
 8109314:	f002 0203 	and.w	r2, r2, #3
 8109318:	0092      	lsls	r2, r2, #2
 810931a:	4093      	lsls	r3, r2
 810931c:	68ba      	ldr	r2, [r7, #8]
 810931e:	429a      	cmp	r2, r3
 8109320:	d136      	bne.n	8109390 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8109322:	693b      	ldr	r3, [r7, #16]
 8109324:	681a      	ldr	r2, [r3, #0]
 8109326:	68fb      	ldr	r3, [r7, #12]
 8109328:	43db      	mvns	r3, r3
 810932a:	401a      	ands	r2, r3
 810932c:	693b      	ldr	r3, [r7, #16]
 810932e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8109330:	693b      	ldr	r3, [r7, #16]
 8109332:	685a      	ldr	r2, [r3, #4]
 8109334:	68fb      	ldr	r3, [r7, #12]
 8109336:	43db      	mvns	r3, r3
 8109338:	401a      	ands	r2, r3
 810933a:	693b      	ldr	r3, [r7, #16]
 810933c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 810933e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8109342:	685a      	ldr	r2, [r3, #4]
 8109344:	68fb      	ldr	r3, [r7, #12]
 8109346:	43db      	mvns	r3, r3
 8109348:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810934c:	4013      	ands	r3, r2
 810934e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8109350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8109354:	681a      	ldr	r2, [r3, #0]
 8109356:	68fb      	ldr	r3, [r7, #12]
 8109358:	43db      	mvns	r3, r3
 810935a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810935e:	4013      	ands	r3, r2
 8109360:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8109362:	697b      	ldr	r3, [r7, #20]
 8109364:	f003 0303 	and.w	r3, r3, #3
 8109368:	009b      	lsls	r3, r3, #2
 810936a:	220f      	movs	r2, #15
 810936c:	fa02 f303 	lsl.w	r3, r2, r3
 8109370:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8109372:	4a30      	ldr	r2, [pc, #192]	@ (8109434 <HAL_GPIO_DeInit+0x1e8>)
 8109374:	697b      	ldr	r3, [r7, #20]
 8109376:	089b      	lsrs	r3, r3, #2
 8109378:	3302      	adds	r3, #2
 810937a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 810937e:	68bb      	ldr	r3, [r7, #8]
 8109380:	43da      	mvns	r2, r3
 8109382:	482c      	ldr	r0, [pc, #176]	@ (8109434 <HAL_GPIO_DeInit+0x1e8>)
 8109384:	697b      	ldr	r3, [r7, #20]
 8109386:	089b      	lsrs	r3, r3, #2
 8109388:	400a      	ands	r2, r1
 810938a:	3302      	adds	r3, #2
 810938c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8109390:	687b      	ldr	r3, [r7, #4]
 8109392:	681a      	ldr	r2, [r3, #0]
 8109394:	697b      	ldr	r3, [r7, #20]
 8109396:	005b      	lsls	r3, r3, #1
 8109398:	2103      	movs	r1, #3
 810939a:	fa01 f303 	lsl.w	r3, r1, r3
 810939e:	431a      	orrs	r2, r3
 81093a0:	687b      	ldr	r3, [r7, #4]
 81093a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 81093a4:	697b      	ldr	r3, [r7, #20]
 81093a6:	08da      	lsrs	r2, r3, #3
 81093a8:	687b      	ldr	r3, [r7, #4]
 81093aa:	3208      	adds	r2, #8
 81093ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81093b0:	697b      	ldr	r3, [r7, #20]
 81093b2:	f003 0307 	and.w	r3, r3, #7
 81093b6:	009b      	lsls	r3, r3, #2
 81093b8:	220f      	movs	r2, #15
 81093ba:	fa02 f303 	lsl.w	r3, r2, r3
 81093be:	43db      	mvns	r3, r3
 81093c0:	697a      	ldr	r2, [r7, #20]
 81093c2:	08d2      	lsrs	r2, r2, #3
 81093c4:	4019      	ands	r1, r3
 81093c6:	687b      	ldr	r3, [r7, #4]
 81093c8:	3208      	adds	r2, #8
 81093ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81093ce:	687b      	ldr	r3, [r7, #4]
 81093d0:	68da      	ldr	r2, [r3, #12]
 81093d2:	697b      	ldr	r3, [r7, #20]
 81093d4:	005b      	lsls	r3, r3, #1
 81093d6:	2103      	movs	r1, #3
 81093d8:	fa01 f303 	lsl.w	r3, r1, r3
 81093dc:	43db      	mvns	r3, r3
 81093de:	401a      	ands	r2, r3
 81093e0:	687b      	ldr	r3, [r7, #4]
 81093e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 81093e4:	687b      	ldr	r3, [r7, #4]
 81093e6:	685a      	ldr	r2, [r3, #4]
 81093e8:	2101      	movs	r1, #1
 81093ea:	697b      	ldr	r3, [r7, #20]
 81093ec:	fa01 f303 	lsl.w	r3, r1, r3
 81093f0:	43db      	mvns	r3, r3
 81093f2:	401a      	ands	r2, r3
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81093f8:	687b      	ldr	r3, [r7, #4]
 81093fa:	689a      	ldr	r2, [r3, #8]
 81093fc:	697b      	ldr	r3, [r7, #20]
 81093fe:	005b      	lsls	r3, r3, #1
 8109400:	2103      	movs	r1, #3
 8109402:	fa01 f303 	lsl.w	r3, r1, r3
 8109406:	43db      	mvns	r3, r3
 8109408:	401a      	ands	r2, r3
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	609a      	str	r2, [r3, #8]
    }

    position++;
 810940e:	697b      	ldr	r3, [r7, #20]
 8109410:	3301      	adds	r3, #1
 8109412:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8109414:	683a      	ldr	r2, [r7, #0]
 8109416:	697b      	ldr	r3, [r7, #20]
 8109418:	fa22 f303 	lsr.w	r3, r2, r3
 810941c:	2b00      	cmp	r3, #0
 810941e:	f47f af1f 	bne.w	8109260 <HAL_GPIO_DeInit+0x14>
  }
}
 8109422:	bf00      	nop
 8109424:	bf00      	nop
 8109426:	371c      	adds	r7, #28
 8109428:	46bd      	mov	sp, r7
 810942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810942e:	4770      	bx	lr
 8109430:	580000c0 	.word	0x580000c0
 8109434:	58000400 	.word	0x58000400
 8109438:	58020000 	.word	0x58020000
 810943c:	58020400 	.word	0x58020400
 8109440:	58020800 	.word	0x58020800
 8109444:	58020c00 	.word	0x58020c00
 8109448:	58021000 	.word	0x58021000
 810944c:	58021400 	.word	0x58021400
 8109450:	58021800 	.word	0x58021800
 8109454:	58021c00 	.word	0x58021c00
 8109458:	58022000 	.word	0x58022000
 810945c:	58022400 	.word	0x58022400

08109460 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8109460:	b480      	push	{r7}
 8109462:	b083      	sub	sp, #12
 8109464:	af00      	add	r7, sp, #0
 8109466:	6078      	str	r0, [r7, #4]
 8109468:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810946a:	490e      	ldr	r1, [pc, #56]	@ (81094a4 <HAL_HSEM_Take+0x44>)
 810946c:	683b      	ldr	r3, [r7, #0]
 810946e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8109472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8109476:	687a      	ldr	r2, [r7, #4]
 8109478:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 810947c:	4a09      	ldr	r2, [pc, #36]	@ (81094a4 <HAL_HSEM_Take+0x44>)
 810947e:	687b      	ldr	r3, [r7, #4]
 8109480:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8109484:	683b      	ldr	r3, [r7, #0]
 8109486:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810948a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810948e:	429a      	cmp	r2, r3
 8109490:	d101      	bne.n	8109496 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8109492:	2300      	movs	r3, #0
 8109494:	e000      	b.n	8109498 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8109496:	2301      	movs	r3, #1
}
 8109498:	4618      	mov	r0, r3
 810949a:	370c      	adds	r7, #12
 810949c:	46bd      	mov	sp, r7
 810949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094a2:	4770      	bx	lr
 81094a4:	58026400 	.word	0x58026400

081094a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81094a8:	b480      	push	{r7}
 81094aa:	b083      	sub	sp, #12
 81094ac:	af00      	add	r7, sp, #0
 81094ae:	6078      	str	r0, [r7, #4]
 81094b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81094b2:	4906      	ldr	r1, [pc, #24]	@ (81094cc <HAL_HSEM_Release+0x24>)
 81094b4:	683b      	ldr	r3, [r7, #0]
 81094b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81094ba:	687b      	ldr	r3, [r7, #4]
 81094bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81094c0:	bf00      	nop
 81094c2:	370c      	adds	r7, #12
 81094c4:	46bd      	mov	sp, r7
 81094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094ca:	4770      	bx	lr
 81094cc:	58026400 	.word	0x58026400

081094d0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81094d0:	b480      	push	{r7}
 81094d2:	b083      	sub	sp, #12
 81094d4:	af00      	add	r7, sp, #0
 81094d6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81094d8:	4b05      	ldr	r3, [pc, #20]	@ (81094f0 <HAL_HSEM_ActivateNotification+0x20>)
 81094da:	681a      	ldr	r2, [r3, #0]
 81094dc:	4904      	ldr	r1, [pc, #16]	@ (81094f0 <HAL_HSEM_ActivateNotification+0x20>)
 81094de:	687b      	ldr	r3, [r7, #4]
 81094e0:	4313      	orrs	r3, r2
 81094e2:	600b      	str	r3, [r1, #0]
#endif
}
 81094e4:	bf00      	nop
 81094e6:	370c      	adds	r7, #12
 81094e8:	46bd      	mov	sp, r7
 81094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094ee:	4770      	bx	lr
 81094f0:	58026510 	.word	0x58026510

081094f4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81094f4:	b580      	push	{r7, lr}
 81094f6:	b082      	sub	sp, #8
 81094f8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81094fa:	4b0a      	ldr	r3, [pc, #40]	@ (8109524 <HAL_HSEM_IRQHandler+0x30>)
 81094fc:	68db      	ldr	r3, [r3, #12]
 81094fe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8109500:	4b08      	ldr	r3, [pc, #32]	@ (8109524 <HAL_HSEM_IRQHandler+0x30>)
 8109502:	681a      	ldr	r2, [r3, #0]
 8109504:	687b      	ldr	r3, [r7, #4]
 8109506:	43db      	mvns	r3, r3
 8109508:	4906      	ldr	r1, [pc, #24]	@ (8109524 <HAL_HSEM_IRQHandler+0x30>)
 810950a:	4013      	ands	r3, r2
 810950c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810950e:	4a05      	ldr	r2, [pc, #20]	@ (8109524 <HAL_HSEM_IRQHandler+0x30>)
 8109510:	687b      	ldr	r3, [r7, #4]
 8109512:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8109514:	6878      	ldr	r0, [r7, #4]
 8109516:	f7f6 ff3b 	bl	8100390 <HAL_HSEM_FreeCallback>
}
 810951a:	bf00      	nop
 810951c:	3708      	adds	r7, #8
 810951e:	46bd      	mov	sp, r7
 8109520:	bd80      	pop	{r7, pc}
 8109522:	bf00      	nop
 8109524:	58026510 	.word	0x58026510

08109528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8109528:	b580      	push	{r7, lr}
 810952a:	b082      	sub	sp, #8
 810952c:	af00      	add	r7, sp, #0
 810952e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8109530:	687b      	ldr	r3, [r7, #4]
 8109532:	2b00      	cmp	r3, #0
 8109534:	d101      	bne.n	810953a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8109536:	2301      	movs	r3, #1
 8109538:	e08d      	b.n	8109656 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810953a:	687b      	ldr	r3, [r7, #4]
 810953c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109540:	b2db      	uxtb	r3, r3
 8109542:	2b00      	cmp	r3, #0
 8109544:	d106      	bne.n	8109554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8109546:	687b      	ldr	r3, [r7, #4]
 8109548:	2200      	movs	r2, #0
 810954a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810954e:	6878      	ldr	r0, [r7, #4]
 8109550:	f7f7 fa12 	bl	8100978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8109554:	687b      	ldr	r3, [r7, #4]
 8109556:	2224      	movs	r2, #36	@ 0x24
 8109558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810955c:	687b      	ldr	r3, [r7, #4]
 810955e:	681b      	ldr	r3, [r3, #0]
 8109560:	681a      	ldr	r2, [r3, #0]
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	681b      	ldr	r3, [r3, #0]
 8109566:	f022 0201 	bic.w	r2, r2, #1
 810956a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810956c:	687b      	ldr	r3, [r7, #4]
 810956e:	685a      	ldr	r2, [r3, #4]
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	681b      	ldr	r3, [r3, #0]
 8109574:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8109578:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810957a:	687b      	ldr	r3, [r7, #4]
 810957c:	681b      	ldr	r3, [r3, #0]
 810957e:	689a      	ldr	r2, [r3, #8]
 8109580:	687b      	ldr	r3, [r7, #4]
 8109582:	681b      	ldr	r3, [r3, #0]
 8109584:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8109588:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810958a:	687b      	ldr	r3, [r7, #4]
 810958c:	68db      	ldr	r3, [r3, #12]
 810958e:	2b01      	cmp	r3, #1
 8109590:	d107      	bne.n	81095a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8109592:	687b      	ldr	r3, [r7, #4]
 8109594:	689a      	ldr	r2, [r3, #8]
 8109596:	687b      	ldr	r3, [r7, #4]
 8109598:	681b      	ldr	r3, [r3, #0]
 810959a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810959e:	609a      	str	r2, [r3, #8]
 81095a0:	e006      	b.n	81095b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81095a2:	687b      	ldr	r3, [r7, #4]
 81095a4:	689a      	ldr	r2, [r3, #8]
 81095a6:	687b      	ldr	r3, [r7, #4]
 81095a8:	681b      	ldr	r3, [r3, #0]
 81095aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 81095ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81095b0:	687b      	ldr	r3, [r7, #4]
 81095b2:	68db      	ldr	r3, [r3, #12]
 81095b4:	2b02      	cmp	r3, #2
 81095b6:	d108      	bne.n	81095ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 81095b8:	687b      	ldr	r3, [r7, #4]
 81095ba:	681b      	ldr	r3, [r3, #0]
 81095bc:	685a      	ldr	r2, [r3, #4]
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	681b      	ldr	r3, [r3, #0]
 81095c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81095c6:	605a      	str	r2, [r3, #4]
 81095c8:	e007      	b.n	81095da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 81095ca:	687b      	ldr	r3, [r7, #4]
 81095cc:	681b      	ldr	r3, [r3, #0]
 81095ce:	685a      	ldr	r2, [r3, #4]
 81095d0:	687b      	ldr	r3, [r7, #4]
 81095d2:	681b      	ldr	r3, [r3, #0]
 81095d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 81095d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	681b      	ldr	r3, [r3, #0]
 81095de:	685b      	ldr	r3, [r3, #4]
 81095e0:	687a      	ldr	r2, [r7, #4]
 81095e2:	6812      	ldr	r2, [r2, #0]
 81095e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81095e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81095ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81095ee:	687b      	ldr	r3, [r7, #4]
 81095f0:	681b      	ldr	r3, [r3, #0]
 81095f2:	68da      	ldr	r2, [r3, #12]
 81095f4:	687b      	ldr	r3, [r7, #4]
 81095f6:	681b      	ldr	r3, [r3, #0]
 81095f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81095fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81095fe:	687b      	ldr	r3, [r7, #4]
 8109600:	691a      	ldr	r2, [r3, #16]
 8109602:	687b      	ldr	r3, [r7, #4]
 8109604:	695b      	ldr	r3, [r3, #20]
 8109606:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810960a:	687b      	ldr	r3, [r7, #4]
 810960c:	699b      	ldr	r3, [r3, #24]
 810960e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8109610:	687b      	ldr	r3, [r7, #4]
 8109612:	681b      	ldr	r3, [r3, #0]
 8109614:	430a      	orrs	r2, r1
 8109616:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8109618:	687b      	ldr	r3, [r7, #4]
 810961a:	69d9      	ldr	r1, [r3, #28]
 810961c:	687b      	ldr	r3, [r7, #4]
 810961e:	6a1a      	ldr	r2, [r3, #32]
 8109620:	687b      	ldr	r3, [r7, #4]
 8109622:	681b      	ldr	r3, [r3, #0]
 8109624:	430a      	orrs	r2, r1
 8109626:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	681b      	ldr	r3, [r3, #0]
 810962c:	681a      	ldr	r2, [r3, #0]
 810962e:	687b      	ldr	r3, [r7, #4]
 8109630:	681b      	ldr	r3, [r3, #0]
 8109632:	f042 0201 	orr.w	r2, r2, #1
 8109636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8109638:	687b      	ldr	r3, [r7, #4]
 810963a:	2200      	movs	r2, #0
 810963c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810963e:	687b      	ldr	r3, [r7, #4]
 8109640:	2220      	movs	r2, #32
 8109642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8109646:	687b      	ldr	r3, [r7, #4]
 8109648:	2200      	movs	r2, #0
 810964a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810964c:	687b      	ldr	r3, [r7, #4]
 810964e:	2200      	movs	r2, #0
 8109650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8109654:	2300      	movs	r3, #0
}
 8109656:	4618      	mov	r0, r3
 8109658:	3708      	adds	r7, #8
 810965a:	46bd      	mov	sp, r7
 810965c:	bd80      	pop	{r7, pc}

0810965e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 810965e:	b580      	push	{r7, lr}
 8109660:	b082      	sub	sp, #8
 8109662:	af00      	add	r7, sp, #0
 8109664:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8109666:	687b      	ldr	r3, [r7, #4]
 8109668:	2b00      	cmp	r3, #0
 810966a:	d101      	bne.n	8109670 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 810966c:	2301      	movs	r3, #1
 810966e:	e021      	b.n	81096b4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8109670:	687b      	ldr	r3, [r7, #4]
 8109672:	2224      	movs	r2, #36	@ 0x24
 8109674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	681b      	ldr	r3, [r3, #0]
 810967c:	681a      	ldr	r2, [r3, #0]
 810967e:	687b      	ldr	r3, [r7, #4]
 8109680:	681b      	ldr	r3, [r3, #0]
 8109682:	f022 0201 	bic.w	r2, r2, #1
 8109686:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8109688:	6878      	ldr	r0, [r7, #4]
 810968a:	f7f7 f9df 	bl	8100a4c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810968e:	687b      	ldr	r3, [r7, #4]
 8109690:	2200      	movs	r2, #0
 8109692:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8109694:	687b      	ldr	r3, [r7, #4]
 8109696:	2200      	movs	r2, #0
 8109698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810969c:	687b      	ldr	r3, [r7, #4]
 810969e:	2200      	movs	r2, #0
 81096a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81096a2:	687b      	ldr	r3, [r7, #4]
 81096a4:	2200      	movs	r2, #0
 81096a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 81096aa:	687b      	ldr	r3, [r7, #4]
 81096ac:	2200      	movs	r2, #0
 81096ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 81096b2:	2300      	movs	r3, #0
}
 81096b4:	4618      	mov	r0, r3
 81096b6:	3708      	adds	r7, #8
 81096b8:	46bd      	mov	sp, r7
 81096ba:	bd80      	pop	{r7, pc}

081096bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81096bc:	b580      	push	{r7, lr}
 81096be:	b088      	sub	sp, #32
 81096c0:	af02      	add	r7, sp, #8
 81096c2:	60f8      	str	r0, [r7, #12]
 81096c4:	4608      	mov	r0, r1
 81096c6:	4611      	mov	r1, r2
 81096c8:	461a      	mov	r2, r3
 81096ca:	4603      	mov	r3, r0
 81096cc:	817b      	strh	r3, [r7, #10]
 81096ce:	460b      	mov	r3, r1
 81096d0:	813b      	strh	r3, [r7, #8]
 81096d2:	4613      	mov	r3, r2
 81096d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81096d6:	68fb      	ldr	r3, [r7, #12]
 81096d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81096dc:	b2db      	uxtb	r3, r3
 81096de:	2b20      	cmp	r3, #32
 81096e0:	f040 80fd 	bne.w	81098de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81096e4:	6a3b      	ldr	r3, [r7, #32]
 81096e6:	2b00      	cmp	r3, #0
 81096e8:	d002      	beq.n	81096f0 <HAL_I2C_Mem_Read+0x34>
 81096ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81096ec:	2b00      	cmp	r3, #0
 81096ee:	d105      	bne.n	81096fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81096f0:	68fb      	ldr	r3, [r7, #12]
 81096f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81096f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 81096f8:	2301      	movs	r3, #1
 81096fa:	e0f1      	b.n	81098e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81096fc:	68fb      	ldr	r3, [r7, #12]
 81096fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109702:	2b01      	cmp	r3, #1
 8109704:	d101      	bne.n	810970a <HAL_I2C_Mem_Read+0x4e>
 8109706:	2302      	movs	r3, #2
 8109708:	e0ea      	b.n	81098e0 <HAL_I2C_Mem_Read+0x224>
 810970a:	68fb      	ldr	r3, [r7, #12]
 810970c:	2201      	movs	r2, #1
 810970e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8109712:	f7fd fd59 	bl	81071c8 <HAL_GetTick>
 8109716:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8109718:	697b      	ldr	r3, [r7, #20]
 810971a:	9300      	str	r3, [sp, #0]
 810971c:	2319      	movs	r3, #25
 810971e:	2201      	movs	r2, #1
 8109720:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8109724:	68f8      	ldr	r0, [r7, #12]
 8109726:	f000 f967 	bl	81099f8 <I2C_WaitOnFlagUntilTimeout>
 810972a:	4603      	mov	r3, r0
 810972c:	2b00      	cmp	r3, #0
 810972e:	d001      	beq.n	8109734 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8109730:	2301      	movs	r3, #1
 8109732:	e0d5      	b.n	81098e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8109734:	68fb      	ldr	r3, [r7, #12]
 8109736:	2222      	movs	r2, #34	@ 0x22
 8109738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810973c:	68fb      	ldr	r3, [r7, #12]
 810973e:	2240      	movs	r2, #64	@ 0x40
 8109740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8109744:	68fb      	ldr	r3, [r7, #12]
 8109746:	2200      	movs	r2, #0
 8109748:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810974a:	68fb      	ldr	r3, [r7, #12]
 810974c:	6a3a      	ldr	r2, [r7, #32]
 810974e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8109750:	68fb      	ldr	r3, [r7, #12]
 8109752:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8109754:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8109756:	68fb      	ldr	r3, [r7, #12]
 8109758:	2200      	movs	r2, #0
 810975a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810975c:	88f8      	ldrh	r0, [r7, #6]
 810975e:	893a      	ldrh	r2, [r7, #8]
 8109760:	8979      	ldrh	r1, [r7, #10]
 8109762:	697b      	ldr	r3, [r7, #20]
 8109764:	9301      	str	r3, [sp, #4]
 8109766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109768:	9300      	str	r3, [sp, #0]
 810976a:	4603      	mov	r3, r0
 810976c:	68f8      	ldr	r0, [r7, #12]
 810976e:	f000 f8cb 	bl	8109908 <I2C_RequestMemoryRead>
 8109772:	4603      	mov	r3, r0
 8109774:	2b00      	cmp	r3, #0
 8109776:	d005      	beq.n	8109784 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8109778:	68fb      	ldr	r3, [r7, #12]
 810977a:	2200      	movs	r2, #0
 810977c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8109780:	2301      	movs	r3, #1
 8109782:	e0ad      	b.n	81098e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8109784:	68fb      	ldr	r3, [r7, #12]
 8109786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109788:	b29b      	uxth	r3, r3
 810978a:	2bff      	cmp	r3, #255	@ 0xff
 810978c:	d90e      	bls.n	81097ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810978e:	68fb      	ldr	r3, [r7, #12]
 8109790:	22ff      	movs	r2, #255	@ 0xff
 8109792:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8109794:	68fb      	ldr	r3, [r7, #12]
 8109796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109798:	b2da      	uxtb	r2, r3
 810979a:	8979      	ldrh	r1, [r7, #10]
 810979c:	4b52      	ldr	r3, [pc, #328]	@ (81098e8 <HAL_I2C_Mem_Read+0x22c>)
 810979e:	9300      	str	r3, [sp, #0]
 81097a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81097a4:	68f8      	ldr	r0, [r7, #12]
 81097a6:	f000 faeb 	bl	8109d80 <I2C_TransferConfig>
 81097aa:	e00f      	b.n	81097cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81097ac:	68fb      	ldr	r3, [r7, #12]
 81097ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81097b0:	b29a      	uxth	r2, r3
 81097b2:	68fb      	ldr	r3, [r7, #12]
 81097b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81097b6:	68fb      	ldr	r3, [r7, #12]
 81097b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81097ba:	b2da      	uxtb	r2, r3
 81097bc:	8979      	ldrh	r1, [r7, #10]
 81097be:	4b4a      	ldr	r3, [pc, #296]	@ (81098e8 <HAL_I2C_Mem_Read+0x22c>)
 81097c0:	9300      	str	r3, [sp, #0]
 81097c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81097c6:	68f8      	ldr	r0, [r7, #12]
 81097c8:	f000 fada 	bl	8109d80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81097cc:	697b      	ldr	r3, [r7, #20]
 81097ce:	9300      	str	r3, [sp, #0]
 81097d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81097d2:	2200      	movs	r2, #0
 81097d4:	2104      	movs	r1, #4
 81097d6:	68f8      	ldr	r0, [r7, #12]
 81097d8:	f000 f90e 	bl	81099f8 <I2C_WaitOnFlagUntilTimeout>
 81097dc:	4603      	mov	r3, r0
 81097de:	2b00      	cmp	r3, #0
 81097e0:	d001      	beq.n	81097e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81097e2:	2301      	movs	r3, #1
 81097e4:	e07c      	b.n	81098e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81097e6:	68fb      	ldr	r3, [r7, #12]
 81097e8:	681b      	ldr	r3, [r3, #0]
 81097ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81097ec:	68fb      	ldr	r3, [r7, #12]
 81097ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81097f0:	b2d2      	uxtb	r2, r2
 81097f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81097f4:	68fb      	ldr	r3, [r7, #12]
 81097f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81097f8:	1c5a      	adds	r2, r3, #1
 81097fa:	68fb      	ldr	r3, [r7, #12]
 81097fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 81097fe:	68fb      	ldr	r3, [r7, #12]
 8109800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109802:	3b01      	subs	r3, #1
 8109804:	b29a      	uxth	r2, r3
 8109806:	68fb      	ldr	r3, [r7, #12]
 8109808:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 810980a:	68fb      	ldr	r3, [r7, #12]
 810980c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810980e:	b29b      	uxth	r3, r3
 8109810:	3b01      	subs	r3, #1
 8109812:	b29a      	uxth	r2, r3
 8109814:	68fb      	ldr	r3, [r7, #12]
 8109816:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8109818:	68fb      	ldr	r3, [r7, #12]
 810981a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810981c:	b29b      	uxth	r3, r3
 810981e:	2b00      	cmp	r3, #0
 8109820:	d034      	beq.n	810988c <HAL_I2C_Mem_Read+0x1d0>
 8109822:	68fb      	ldr	r3, [r7, #12]
 8109824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109826:	2b00      	cmp	r3, #0
 8109828:	d130      	bne.n	810988c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810982a:	697b      	ldr	r3, [r7, #20]
 810982c:	9300      	str	r3, [sp, #0]
 810982e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109830:	2200      	movs	r2, #0
 8109832:	2180      	movs	r1, #128	@ 0x80
 8109834:	68f8      	ldr	r0, [r7, #12]
 8109836:	f000 f8df 	bl	81099f8 <I2C_WaitOnFlagUntilTimeout>
 810983a:	4603      	mov	r3, r0
 810983c:	2b00      	cmp	r3, #0
 810983e:	d001      	beq.n	8109844 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8109840:	2301      	movs	r3, #1
 8109842:	e04d      	b.n	81098e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8109844:	68fb      	ldr	r3, [r7, #12]
 8109846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109848:	b29b      	uxth	r3, r3
 810984a:	2bff      	cmp	r3, #255	@ 0xff
 810984c:	d90e      	bls.n	810986c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810984e:	68fb      	ldr	r3, [r7, #12]
 8109850:	22ff      	movs	r2, #255	@ 0xff
 8109852:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8109854:	68fb      	ldr	r3, [r7, #12]
 8109856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109858:	b2da      	uxtb	r2, r3
 810985a:	8979      	ldrh	r1, [r7, #10]
 810985c:	2300      	movs	r3, #0
 810985e:	9300      	str	r3, [sp, #0]
 8109860:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8109864:	68f8      	ldr	r0, [r7, #12]
 8109866:	f000 fa8b 	bl	8109d80 <I2C_TransferConfig>
 810986a:	e00f      	b.n	810988c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810986c:	68fb      	ldr	r3, [r7, #12]
 810986e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109870:	b29a      	uxth	r2, r3
 8109872:	68fb      	ldr	r3, [r7, #12]
 8109874:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8109876:	68fb      	ldr	r3, [r7, #12]
 8109878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810987a:	b2da      	uxtb	r2, r3
 810987c:	8979      	ldrh	r1, [r7, #10]
 810987e:	2300      	movs	r3, #0
 8109880:	9300      	str	r3, [sp, #0]
 8109882:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8109886:	68f8      	ldr	r0, [r7, #12]
 8109888:	f000 fa7a 	bl	8109d80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 810988c:	68fb      	ldr	r3, [r7, #12]
 810988e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109890:	b29b      	uxth	r3, r3
 8109892:	2b00      	cmp	r3, #0
 8109894:	d19a      	bne.n	81097cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8109896:	697a      	ldr	r2, [r7, #20]
 8109898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810989a:	68f8      	ldr	r0, [r7, #12]
 810989c:	f000 f94c 	bl	8109b38 <I2C_WaitOnSTOPFlagUntilTimeout>
 81098a0:	4603      	mov	r3, r0
 81098a2:	2b00      	cmp	r3, #0
 81098a4:	d001      	beq.n	81098aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81098a6:	2301      	movs	r3, #1
 81098a8:	e01a      	b.n	81098e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81098aa:	68fb      	ldr	r3, [r7, #12]
 81098ac:	681b      	ldr	r3, [r3, #0]
 81098ae:	2220      	movs	r2, #32
 81098b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81098b2:	68fb      	ldr	r3, [r7, #12]
 81098b4:	681b      	ldr	r3, [r3, #0]
 81098b6:	6859      	ldr	r1, [r3, #4]
 81098b8:	68fb      	ldr	r3, [r7, #12]
 81098ba:	681a      	ldr	r2, [r3, #0]
 81098bc:	4b0b      	ldr	r3, [pc, #44]	@ (81098ec <HAL_I2C_Mem_Read+0x230>)
 81098be:	400b      	ands	r3, r1
 81098c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81098c2:	68fb      	ldr	r3, [r7, #12]
 81098c4:	2220      	movs	r2, #32
 81098c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81098ca:	68fb      	ldr	r3, [r7, #12]
 81098cc:	2200      	movs	r2, #0
 81098ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81098d2:	68fb      	ldr	r3, [r7, #12]
 81098d4:	2200      	movs	r2, #0
 81098d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81098da:	2300      	movs	r3, #0
 81098dc:	e000      	b.n	81098e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81098de:	2302      	movs	r3, #2
  }
}
 81098e0:	4618      	mov	r0, r3
 81098e2:	3718      	adds	r7, #24
 81098e4:	46bd      	mov	sp, r7
 81098e6:	bd80      	pop	{r7, pc}
 81098e8:	80002400 	.word	0x80002400
 81098ec:	fe00e800 	.word	0xfe00e800

081098f0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 81098f0:	b480      	push	{r7}
 81098f2:	b083      	sub	sp, #12
 81098f4:	af00      	add	r7, sp, #0
 81098f6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 81098f8:	687b      	ldr	r3, [r7, #4]
 81098fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 81098fc:	4618      	mov	r0, r3
 81098fe:	370c      	adds	r7, #12
 8109900:	46bd      	mov	sp, r7
 8109902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109906:	4770      	bx	lr

08109908 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8109908:	b580      	push	{r7, lr}
 810990a:	b086      	sub	sp, #24
 810990c:	af02      	add	r7, sp, #8
 810990e:	60f8      	str	r0, [r7, #12]
 8109910:	4608      	mov	r0, r1
 8109912:	4611      	mov	r1, r2
 8109914:	461a      	mov	r2, r3
 8109916:	4603      	mov	r3, r0
 8109918:	817b      	strh	r3, [r7, #10]
 810991a:	460b      	mov	r3, r1
 810991c:	813b      	strh	r3, [r7, #8]
 810991e:	4613      	mov	r3, r2
 8109920:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8109922:	88fb      	ldrh	r3, [r7, #6]
 8109924:	b2da      	uxtb	r2, r3
 8109926:	8979      	ldrh	r1, [r7, #10]
 8109928:	4b20      	ldr	r3, [pc, #128]	@ (81099ac <I2C_RequestMemoryRead+0xa4>)
 810992a:	9300      	str	r3, [sp, #0]
 810992c:	2300      	movs	r3, #0
 810992e:	68f8      	ldr	r0, [r7, #12]
 8109930:	f000 fa26 	bl	8109d80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8109934:	69fa      	ldr	r2, [r7, #28]
 8109936:	69b9      	ldr	r1, [r7, #24]
 8109938:	68f8      	ldr	r0, [r7, #12]
 810993a:	f000 f8b6 	bl	8109aaa <I2C_WaitOnTXISFlagUntilTimeout>
 810993e:	4603      	mov	r3, r0
 8109940:	2b00      	cmp	r3, #0
 8109942:	d001      	beq.n	8109948 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8109944:	2301      	movs	r3, #1
 8109946:	e02c      	b.n	81099a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8109948:	88fb      	ldrh	r3, [r7, #6]
 810994a:	2b01      	cmp	r3, #1
 810994c:	d105      	bne.n	810995a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810994e:	893b      	ldrh	r3, [r7, #8]
 8109950:	b2da      	uxtb	r2, r3
 8109952:	68fb      	ldr	r3, [r7, #12]
 8109954:	681b      	ldr	r3, [r3, #0]
 8109956:	629a      	str	r2, [r3, #40]	@ 0x28
 8109958:	e015      	b.n	8109986 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810995a:	893b      	ldrh	r3, [r7, #8]
 810995c:	0a1b      	lsrs	r3, r3, #8
 810995e:	b29b      	uxth	r3, r3
 8109960:	b2da      	uxtb	r2, r3
 8109962:	68fb      	ldr	r3, [r7, #12]
 8109964:	681b      	ldr	r3, [r3, #0]
 8109966:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8109968:	69fa      	ldr	r2, [r7, #28]
 810996a:	69b9      	ldr	r1, [r7, #24]
 810996c:	68f8      	ldr	r0, [r7, #12]
 810996e:	f000 f89c 	bl	8109aaa <I2C_WaitOnTXISFlagUntilTimeout>
 8109972:	4603      	mov	r3, r0
 8109974:	2b00      	cmp	r3, #0
 8109976:	d001      	beq.n	810997c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8109978:	2301      	movs	r3, #1
 810997a:	e012      	b.n	81099a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810997c:	893b      	ldrh	r3, [r7, #8]
 810997e:	b2da      	uxtb	r2, r3
 8109980:	68fb      	ldr	r3, [r7, #12]
 8109982:	681b      	ldr	r3, [r3, #0]
 8109984:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8109986:	69fb      	ldr	r3, [r7, #28]
 8109988:	9300      	str	r3, [sp, #0]
 810998a:	69bb      	ldr	r3, [r7, #24]
 810998c:	2200      	movs	r2, #0
 810998e:	2140      	movs	r1, #64	@ 0x40
 8109990:	68f8      	ldr	r0, [r7, #12]
 8109992:	f000 f831 	bl	81099f8 <I2C_WaitOnFlagUntilTimeout>
 8109996:	4603      	mov	r3, r0
 8109998:	2b00      	cmp	r3, #0
 810999a:	d001      	beq.n	81099a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810999c:	2301      	movs	r3, #1
 810999e:	e000      	b.n	81099a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81099a0:	2300      	movs	r3, #0
}
 81099a2:	4618      	mov	r0, r3
 81099a4:	3710      	adds	r7, #16
 81099a6:	46bd      	mov	sp, r7
 81099a8:	bd80      	pop	{r7, pc}
 81099aa:	bf00      	nop
 81099ac:	80002000 	.word	0x80002000

081099b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81099b0:	b480      	push	{r7}
 81099b2:	b083      	sub	sp, #12
 81099b4:	af00      	add	r7, sp, #0
 81099b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81099b8:	687b      	ldr	r3, [r7, #4]
 81099ba:	681b      	ldr	r3, [r3, #0]
 81099bc:	699b      	ldr	r3, [r3, #24]
 81099be:	f003 0302 	and.w	r3, r3, #2
 81099c2:	2b02      	cmp	r3, #2
 81099c4:	d103      	bne.n	81099ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81099c6:	687b      	ldr	r3, [r7, #4]
 81099c8:	681b      	ldr	r3, [r3, #0]
 81099ca:	2200      	movs	r2, #0
 81099cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81099ce:	687b      	ldr	r3, [r7, #4]
 81099d0:	681b      	ldr	r3, [r3, #0]
 81099d2:	699b      	ldr	r3, [r3, #24]
 81099d4:	f003 0301 	and.w	r3, r3, #1
 81099d8:	2b01      	cmp	r3, #1
 81099da:	d007      	beq.n	81099ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81099dc:	687b      	ldr	r3, [r7, #4]
 81099de:	681b      	ldr	r3, [r3, #0]
 81099e0:	699a      	ldr	r2, [r3, #24]
 81099e2:	687b      	ldr	r3, [r7, #4]
 81099e4:	681b      	ldr	r3, [r3, #0]
 81099e6:	f042 0201 	orr.w	r2, r2, #1
 81099ea:	619a      	str	r2, [r3, #24]
  }
}
 81099ec:	bf00      	nop
 81099ee:	370c      	adds	r7, #12
 81099f0:	46bd      	mov	sp, r7
 81099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099f6:	4770      	bx	lr

081099f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81099f8:	b580      	push	{r7, lr}
 81099fa:	b084      	sub	sp, #16
 81099fc:	af00      	add	r7, sp, #0
 81099fe:	60f8      	str	r0, [r7, #12]
 8109a00:	60b9      	str	r1, [r7, #8]
 8109a02:	603b      	str	r3, [r7, #0]
 8109a04:	4613      	mov	r3, r2
 8109a06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8109a08:	e03b      	b.n	8109a82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8109a0a:	69ba      	ldr	r2, [r7, #24]
 8109a0c:	6839      	ldr	r1, [r7, #0]
 8109a0e:	68f8      	ldr	r0, [r7, #12]
 8109a10:	f000 f8d6 	bl	8109bc0 <I2C_IsErrorOccurred>
 8109a14:	4603      	mov	r3, r0
 8109a16:	2b00      	cmp	r3, #0
 8109a18:	d001      	beq.n	8109a1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8109a1a:	2301      	movs	r3, #1
 8109a1c:	e041      	b.n	8109aa2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109a1e:	683b      	ldr	r3, [r7, #0]
 8109a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109a24:	d02d      	beq.n	8109a82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109a26:	f7fd fbcf 	bl	81071c8 <HAL_GetTick>
 8109a2a:	4602      	mov	r2, r0
 8109a2c:	69bb      	ldr	r3, [r7, #24]
 8109a2e:	1ad3      	subs	r3, r2, r3
 8109a30:	683a      	ldr	r2, [r7, #0]
 8109a32:	429a      	cmp	r2, r3
 8109a34:	d302      	bcc.n	8109a3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8109a36:	683b      	ldr	r3, [r7, #0]
 8109a38:	2b00      	cmp	r3, #0
 8109a3a:	d122      	bne.n	8109a82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8109a3c:	68fb      	ldr	r3, [r7, #12]
 8109a3e:	681b      	ldr	r3, [r3, #0]
 8109a40:	699a      	ldr	r2, [r3, #24]
 8109a42:	68bb      	ldr	r3, [r7, #8]
 8109a44:	4013      	ands	r3, r2
 8109a46:	68ba      	ldr	r2, [r7, #8]
 8109a48:	429a      	cmp	r2, r3
 8109a4a:	bf0c      	ite	eq
 8109a4c:	2301      	moveq	r3, #1
 8109a4e:	2300      	movne	r3, #0
 8109a50:	b2db      	uxtb	r3, r3
 8109a52:	461a      	mov	r2, r3
 8109a54:	79fb      	ldrb	r3, [r7, #7]
 8109a56:	429a      	cmp	r2, r3
 8109a58:	d113      	bne.n	8109a82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109a5a:	68fb      	ldr	r3, [r7, #12]
 8109a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109a5e:	f043 0220 	orr.w	r2, r3, #32
 8109a62:	68fb      	ldr	r3, [r7, #12]
 8109a64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8109a66:	68fb      	ldr	r3, [r7, #12]
 8109a68:	2220      	movs	r2, #32
 8109a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8109a6e:	68fb      	ldr	r3, [r7, #12]
 8109a70:	2200      	movs	r2, #0
 8109a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8109a76:	68fb      	ldr	r3, [r7, #12]
 8109a78:	2200      	movs	r2, #0
 8109a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8109a7e:	2301      	movs	r3, #1
 8109a80:	e00f      	b.n	8109aa2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8109a82:	68fb      	ldr	r3, [r7, #12]
 8109a84:	681b      	ldr	r3, [r3, #0]
 8109a86:	699a      	ldr	r2, [r3, #24]
 8109a88:	68bb      	ldr	r3, [r7, #8]
 8109a8a:	4013      	ands	r3, r2
 8109a8c:	68ba      	ldr	r2, [r7, #8]
 8109a8e:	429a      	cmp	r2, r3
 8109a90:	bf0c      	ite	eq
 8109a92:	2301      	moveq	r3, #1
 8109a94:	2300      	movne	r3, #0
 8109a96:	b2db      	uxtb	r3, r3
 8109a98:	461a      	mov	r2, r3
 8109a9a:	79fb      	ldrb	r3, [r7, #7]
 8109a9c:	429a      	cmp	r2, r3
 8109a9e:	d0b4      	beq.n	8109a0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109aa0:	2300      	movs	r3, #0
}
 8109aa2:	4618      	mov	r0, r3
 8109aa4:	3710      	adds	r7, #16
 8109aa6:	46bd      	mov	sp, r7
 8109aa8:	bd80      	pop	{r7, pc}

08109aaa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8109aaa:	b580      	push	{r7, lr}
 8109aac:	b084      	sub	sp, #16
 8109aae:	af00      	add	r7, sp, #0
 8109ab0:	60f8      	str	r0, [r7, #12]
 8109ab2:	60b9      	str	r1, [r7, #8]
 8109ab4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8109ab6:	e033      	b.n	8109b20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8109ab8:	687a      	ldr	r2, [r7, #4]
 8109aba:	68b9      	ldr	r1, [r7, #8]
 8109abc:	68f8      	ldr	r0, [r7, #12]
 8109abe:	f000 f87f 	bl	8109bc0 <I2C_IsErrorOccurred>
 8109ac2:	4603      	mov	r3, r0
 8109ac4:	2b00      	cmp	r3, #0
 8109ac6:	d001      	beq.n	8109acc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8109ac8:	2301      	movs	r3, #1
 8109aca:	e031      	b.n	8109b30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109acc:	68bb      	ldr	r3, [r7, #8]
 8109ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109ad2:	d025      	beq.n	8109b20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109ad4:	f7fd fb78 	bl	81071c8 <HAL_GetTick>
 8109ad8:	4602      	mov	r2, r0
 8109ada:	687b      	ldr	r3, [r7, #4]
 8109adc:	1ad3      	subs	r3, r2, r3
 8109ade:	68ba      	ldr	r2, [r7, #8]
 8109ae0:	429a      	cmp	r2, r3
 8109ae2:	d302      	bcc.n	8109aea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8109ae4:	68bb      	ldr	r3, [r7, #8]
 8109ae6:	2b00      	cmp	r3, #0
 8109ae8:	d11a      	bne.n	8109b20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8109aea:	68fb      	ldr	r3, [r7, #12]
 8109aec:	681b      	ldr	r3, [r3, #0]
 8109aee:	699b      	ldr	r3, [r3, #24]
 8109af0:	f003 0302 	and.w	r3, r3, #2
 8109af4:	2b02      	cmp	r3, #2
 8109af6:	d013      	beq.n	8109b20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109af8:	68fb      	ldr	r3, [r7, #12]
 8109afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109afc:	f043 0220 	orr.w	r2, r3, #32
 8109b00:	68fb      	ldr	r3, [r7, #12]
 8109b02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8109b04:	68fb      	ldr	r3, [r7, #12]
 8109b06:	2220      	movs	r2, #32
 8109b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8109b0c:	68fb      	ldr	r3, [r7, #12]
 8109b0e:	2200      	movs	r2, #0
 8109b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8109b14:	68fb      	ldr	r3, [r7, #12]
 8109b16:	2200      	movs	r2, #0
 8109b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8109b1c:	2301      	movs	r3, #1
 8109b1e:	e007      	b.n	8109b30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8109b20:	68fb      	ldr	r3, [r7, #12]
 8109b22:	681b      	ldr	r3, [r3, #0]
 8109b24:	699b      	ldr	r3, [r3, #24]
 8109b26:	f003 0302 	and.w	r3, r3, #2
 8109b2a:	2b02      	cmp	r3, #2
 8109b2c:	d1c4      	bne.n	8109ab8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8109b2e:	2300      	movs	r3, #0
}
 8109b30:	4618      	mov	r0, r3
 8109b32:	3710      	adds	r7, #16
 8109b34:	46bd      	mov	sp, r7
 8109b36:	bd80      	pop	{r7, pc}

08109b38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8109b38:	b580      	push	{r7, lr}
 8109b3a:	b084      	sub	sp, #16
 8109b3c:	af00      	add	r7, sp, #0
 8109b3e:	60f8      	str	r0, [r7, #12]
 8109b40:	60b9      	str	r1, [r7, #8]
 8109b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109b44:	e02f      	b.n	8109ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8109b46:	687a      	ldr	r2, [r7, #4]
 8109b48:	68b9      	ldr	r1, [r7, #8]
 8109b4a:	68f8      	ldr	r0, [r7, #12]
 8109b4c:	f000 f838 	bl	8109bc0 <I2C_IsErrorOccurred>
 8109b50:	4603      	mov	r3, r0
 8109b52:	2b00      	cmp	r3, #0
 8109b54:	d001      	beq.n	8109b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8109b56:	2301      	movs	r3, #1
 8109b58:	e02d      	b.n	8109bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109b5a:	f7fd fb35 	bl	81071c8 <HAL_GetTick>
 8109b5e:	4602      	mov	r2, r0
 8109b60:	687b      	ldr	r3, [r7, #4]
 8109b62:	1ad3      	subs	r3, r2, r3
 8109b64:	68ba      	ldr	r2, [r7, #8]
 8109b66:	429a      	cmp	r2, r3
 8109b68:	d302      	bcc.n	8109b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8109b6a:	68bb      	ldr	r3, [r7, #8]
 8109b6c:	2b00      	cmp	r3, #0
 8109b6e:	d11a      	bne.n	8109ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8109b70:	68fb      	ldr	r3, [r7, #12]
 8109b72:	681b      	ldr	r3, [r3, #0]
 8109b74:	699b      	ldr	r3, [r3, #24]
 8109b76:	f003 0320 	and.w	r3, r3, #32
 8109b7a:	2b20      	cmp	r3, #32
 8109b7c:	d013      	beq.n	8109ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109b7e:	68fb      	ldr	r3, [r7, #12]
 8109b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109b82:	f043 0220 	orr.w	r2, r3, #32
 8109b86:	68fb      	ldr	r3, [r7, #12]
 8109b88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8109b8a:	68fb      	ldr	r3, [r7, #12]
 8109b8c:	2220      	movs	r2, #32
 8109b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8109b92:	68fb      	ldr	r3, [r7, #12]
 8109b94:	2200      	movs	r2, #0
 8109b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8109b9a:	68fb      	ldr	r3, [r7, #12]
 8109b9c:	2200      	movs	r2, #0
 8109b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8109ba2:	2301      	movs	r3, #1
 8109ba4:	e007      	b.n	8109bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109ba6:	68fb      	ldr	r3, [r7, #12]
 8109ba8:	681b      	ldr	r3, [r3, #0]
 8109baa:	699b      	ldr	r3, [r3, #24]
 8109bac:	f003 0320 	and.w	r3, r3, #32
 8109bb0:	2b20      	cmp	r3, #32
 8109bb2:	d1c8      	bne.n	8109b46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8109bb4:	2300      	movs	r3, #0
}
 8109bb6:	4618      	mov	r0, r3
 8109bb8:	3710      	adds	r7, #16
 8109bba:	46bd      	mov	sp, r7
 8109bbc:	bd80      	pop	{r7, pc}
	...

08109bc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8109bc0:	b580      	push	{r7, lr}
 8109bc2:	b08a      	sub	sp, #40	@ 0x28
 8109bc4:	af00      	add	r7, sp, #0
 8109bc6:	60f8      	str	r0, [r7, #12]
 8109bc8:	60b9      	str	r1, [r7, #8]
 8109bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109bcc:	2300      	movs	r3, #0
 8109bce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8109bd2:	68fb      	ldr	r3, [r7, #12]
 8109bd4:	681b      	ldr	r3, [r3, #0]
 8109bd6:	699b      	ldr	r3, [r3, #24]
 8109bd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8109bda:	2300      	movs	r3, #0
 8109bdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8109bde:	687b      	ldr	r3, [r7, #4]
 8109be0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8109be2:	69bb      	ldr	r3, [r7, #24]
 8109be4:	f003 0310 	and.w	r3, r3, #16
 8109be8:	2b00      	cmp	r3, #0
 8109bea:	d068      	beq.n	8109cbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8109bec:	68fb      	ldr	r3, [r7, #12]
 8109bee:	681b      	ldr	r3, [r3, #0]
 8109bf0:	2210      	movs	r2, #16
 8109bf2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8109bf4:	e049      	b.n	8109c8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8109bf6:	68bb      	ldr	r3, [r7, #8]
 8109bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109bfc:	d045      	beq.n	8109c8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8109bfe:	f7fd fae3 	bl	81071c8 <HAL_GetTick>
 8109c02:	4602      	mov	r2, r0
 8109c04:	69fb      	ldr	r3, [r7, #28]
 8109c06:	1ad3      	subs	r3, r2, r3
 8109c08:	68ba      	ldr	r2, [r7, #8]
 8109c0a:	429a      	cmp	r2, r3
 8109c0c:	d302      	bcc.n	8109c14 <I2C_IsErrorOccurred+0x54>
 8109c0e:	68bb      	ldr	r3, [r7, #8]
 8109c10:	2b00      	cmp	r3, #0
 8109c12:	d13a      	bne.n	8109c8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8109c14:	68fb      	ldr	r3, [r7, #12]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	685b      	ldr	r3, [r3, #4]
 8109c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8109c1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8109c20:	68fb      	ldr	r3, [r7, #12]
 8109c22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8109c26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8109c28:	68fb      	ldr	r3, [r7, #12]
 8109c2a:	681b      	ldr	r3, [r3, #0]
 8109c2c:	699b      	ldr	r3, [r3, #24]
 8109c2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8109c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8109c36:	d121      	bne.n	8109c7c <I2C_IsErrorOccurred+0xbc>
 8109c38:	697b      	ldr	r3, [r7, #20]
 8109c3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109c3e:	d01d      	beq.n	8109c7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8109c40:	7cfb      	ldrb	r3, [r7, #19]
 8109c42:	2b20      	cmp	r3, #32
 8109c44:	d01a      	beq.n	8109c7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8109c46:	68fb      	ldr	r3, [r7, #12]
 8109c48:	681b      	ldr	r3, [r3, #0]
 8109c4a:	685a      	ldr	r2, [r3, #4]
 8109c4c:	68fb      	ldr	r3, [r7, #12]
 8109c4e:	681b      	ldr	r3, [r3, #0]
 8109c50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8109c54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8109c56:	f7fd fab7 	bl	81071c8 <HAL_GetTick>
 8109c5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109c5c:	e00e      	b.n	8109c7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8109c5e:	f7fd fab3 	bl	81071c8 <HAL_GetTick>
 8109c62:	4602      	mov	r2, r0
 8109c64:	69fb      	ldr	r3, [r7, #28]
 8109c66:	1ad3      	subs	r3, r2, r3
 8109c68:	2b19      	cmp	r3, #25
 8109c6a:	d907      	bls.n	8109c7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8109c6c:	6a3b      	ldr	r3, [r7, #32]
 8109c6e:	f043 0320 	orr.w	r3, r3, #32
 8109c72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8109c74:	2301      	movs	r3, #1
 8109c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8109c7a:	e006      	b.n	8109c8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109c7c:	68fb      	ldr	r3, [r7, #12]
 8109c7e:	681b      	ldr	r3, [r3, #0]
 8109c80:	699b      	ldr	r3, [r3, #24]
 8109c82:	f003 0320 	and.w	r3, r3, #32
 8109c86:	2b20      	cmp	r3, #32
 8109c88:	d1e9      	bne.n	8109c5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8109c8a:	68fb      	ldr	r3, [r7, #12]
 8109c8c:	681b      	ldr	r3, [r3, #0]
 8109c8e:	699b      	ldr	r3, [r3, #24]
 8109c90:	f003 0320 	and.w	r3, r3, #32
 8109c94:	2b20      	cmp	r3, #32
 8109c96:	d003      	beq.n	8109ca0 <I2C_IsErrorOccurred+0xe0>
 8109c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109c9c:	2b00      	cmp	r3, #0
 8109c9e:	d0aa      	beq.n	8109bf6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8109ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109ca4:	2b00      	cmp	r3, #0
 8109ca6:	d103      	bne.n	8109cb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8109ca8:	68fb      	ldr	r3, [r7, #12]
 8109caa:	681b      	ldr	r3, [r3, #0]
 8109cac:	2220      	movs	r2, #32
 8109cae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8109cb0:	6a3b      	ldr	r3, [r7, #32]
 8109cb2:	f043 0304 	orr.w	r3, r3, #4
 8109cb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8109cb8:	2301      	movs	r3, #1
 8109cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8109cbe:	68fb      	ldr	r3, [r7, #12]
 8109cc0:	681b      	ldr	r3, [r3, #0]
 8109cc2:	699b      	ldr	r3, [r3, #24]
 8109cc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8109cc6:	69bb      	ldr	r3, [r7, #24]
 8109cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109ccc:	2b00      	cmp	r3, #0
 8109cce:	d00b      	beq.n	8109ce8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8109cd0:	6a3b      	ldr	r3, [r7, #32]
 8109cd2:	f043 0301 	orr.w	r3, r3, #1
 8109cd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8109cd8:	68fb      	ldr	r3, [r7, #12]
 8109cda:	681b      	ldr	r3, [r3, #0]
 8109cdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8109ce0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109ce2:	2301      	movs	r3, #1
 8109ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8109ce8:	69bb      	ldr	r3, [r7, #24]
 8109cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8109cee:	2b00      	cmp	r3, #0
 8109cf0:	d00b      	beq.n	8109d0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8109cf2:	6a3b      	ldr	r3, [r7, #32]
 8109cf4:	f043 0308 	orr.w	r3, r3, #8
 8109cf8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8109cfa:	68fb      	ldr	r3, [r7, #12]
 8109cfc:	681b      	ldr	r3, [r3, #0]
 8109cfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8109d02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109d04:	2301      	movs	r3, #1
 8109d06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8109d0a:	69bb      	ldr	r3, [r7, #24]
 8109d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8109d10:	2b00      	cmp	r3, #0
 8109d12:	d00b      	beq.n	8109d2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8109d14:	6a3b      	ldr	r3, [r7, #32]
 8109d16:	f043 0302 	orr.w	r3, r3, #2
 8109d1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8109d1c:	68fb      	ldr	r3, [r7, #12]
 8109d1e:	681b      	ldr	r3, [r3, #0]
 8109d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8109d24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109d26:	2301      	movs	r3, #1
 8109d28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8109d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109d30:	2b00      	cmp	r3, #0
 8109d32:	d01c      	beq.n	8109d6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8109d34:	68f8      	ldr	r0, [r7, #12]
 8109d36:	f7ff fe3b 	bl	81099b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8109d3a:	68fb      	ldr	r3, [r7, #12]
 8109d3c:	681b      	ldr	r3, [r3, #0]
 8109d3e:	6859      	ldr	r1, [r3, #4]
 8109d40:	68fb      	ldr	r3, [r7, #12]
 8109d42:	681a      	ldr	r2, [r3, #0]
 8109d44:	4b0d      	ldr	r3, [pc, #52]	@ (8109d7c <I2C_IsErrorOccurred+0x1bc>)
 8109d46:	400b      	ands	r3, r1
 8109d48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8109d4a:	68fb      	ldr	r3, [r7, #12]
 8109d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8109d4e:	6a3b      	ldr	r3, [r7, #32]
 8109d50:	431a      	orrs	r2, r3
 8109d52:	68fb      	ldr	r3, [r7, #12]
 8109d54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8109d56:	68fb      	ldr	r3, [r7, #12]
 8109d58:	2220      	movs	r2, #32
 8109d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8109d5e:	68fb      	ldr	r3, [r7, #12]
 8109d60:	2200      	movs	r2, #0
 8109d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109d66:	68fb      	ldr	r3, [r7, #12]
 8109d68:	2200      	movs	r2, #0
 8109d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8109d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8109d72:	4618      	mov	r0, r3
 8109d74:	3728      	adds	r7, #40	@ 0x28
 8109d76:	46bd      	mov	sp, r7
 8109d78:	bd80      	pop	{r7, pc}
 8109d7a:	bf00      	nop
 8109d7c:	fe00e800 	.word	0xfe00e800

08109d80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8109d80:	b480      	push	{r7}
 8109d82:	b087      	sub	sp, #28
 8109d84:	af00      	add	r7, sp, #0
 8109d86:	60f8      	str	r0, [r7, #12]
 8109d88:	607b      	str	r3, [r7, #4]
 8109d8a:	460b      	mov	r3, r1
 8109d8c:	817b      	strh	r3, [r7, #10]
 8109d8e:	4613      	mov	r3, r2
 8109d90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109d92:	897b      	ldrh	r3, [r7, #10]
 8109d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8109d98:	7a7b      	ldrb	r3, [r7, #9]
 8109d9a:	041b      	lsls	r3, r3, #16
 8109d9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109da0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8109da2:	687b      	ldr	r3, [r7, #4]
 8109da4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109da6:	6a3b      	ldr	r3, [r7, #32]
 8109da8:	4313      	orrs	r3, r2
 8109daa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8109dae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8109db0:	68fb      	ldr	r3, [r7, #12]
 8109db2:	681b      	ldr	r3, [r3, #0]
 8109db4:	685a      	ldr	r2, [r3, #4]
 8109db6:	6a3b      	ldr	r3, [r7, #32]
 8109db8:	0d5b      	lsrs	r3, r3, #21
 8109dba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8109dbe:	4b08      	ldr	r3, [pc, #32]	@ (8109de0 <I2C_TransferConfig+0x60>)
 8109dc0:	430b      	orrs	r3, r1
 8109dc2:	43db      	mvns	r3, r3
 8109dc4:	ea02 0103 	and.w	r1, r2, r3
 8109dc8:	68fb      	ldr	r3, [r7, #12]
 8109dca:	681b      	ldr	r3, [r3, #0]
 8109dcc:	697a      	ldr	r2, [r7, #20]
 8109dce:	430a      	orrs	r2, r1
 8109dd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8109dd2:	bf00      	nop
 8109dd4:	371c      	adds	r7, #28
 8109dd6:	46bd      	mov	sp, r7
 8109dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ddc:	4770      	bx	lr
 8109dde:	bf00      	nop
 8109de0:	03ff63ff 	.word	0x03ff63ff

08109de4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8109de4:	b480      	push	{r7}
 8109de6:	b083      	sub	sp, #12
 8109de8:	af00      	add	r7, sp, #0
 8109dea:	6078      	str	r0, [r7, #4]
 8109dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109dee:	687b      	ldr	r3, [r7, #4]
 8109df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109df4:	b2db      	uxtb	r3, r3
 8109df6:	2b20      	cmp	r3, #32
 8109df8:	d138      	bne.n	8109e6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109dfa:	687b      	ldr	r3, [r7, #4]
 8109dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109e00:	2b01      	cmp	r3, #1
 8109e02:	d101      	bne.n	8109e08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8109e04:	2302      	movs	r3, #2
 8109e06:	e032      	b.n	8109e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8109e08:	687b      	ldr	r3, [r7, #4]
 8109e0a:	2201      	movs	r2, #1
 8109e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8109e10:	687b      	ldr	r3, [r7, #4]
 8109e12:	2224      	movs	r2, #36	@ 0x24
 8109e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8109e18:	687b      	ldr	r3, [r7, #4]
 8109e1a:	681b      	ldr	r3, [r3, #0]
 8109e1c:	681a      	ldr	r2, [r3, #0]
 8109e1e:	687b      	ldr	r3, [r7, #4]
 8109e20:	681b      	ldr	r3, [r3, #0]
 8109e22:	f022 0201 	bic.w	r2, r2, #1
 8109e26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8109e28:	687b      	ldr	r3, [r7, #4]
 8109e2a:	681b      	ldr	r3, [r3, #0]
 8109e2c:	681a      	ldr	r2, [r3, #0]
 8109e2e:	687b      	ldr	r3, [r7, #4]
 8109e30:	681b      	ldr	r3, [r3, #0]
 8109e32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8109e36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8109e38:	687b      	ldr	r3, [r7, #4]
 8109e3a:	681b      	ldr	r3, [r3, #0]
 8109e3c:	6819      	ldr	r1, [r3, #0]
 8109e3e:	687b      	ldr	r3, [r7, #4]
 8109e40:	681b      	ldr	r3, [r3, #0]
 8109e42:	683a      	ldr	r2, [r7, #0]
 8109e44:	430a      	orrs	r2, r1
 8109e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8109e48:	687b      	ldr	r3, [r7, #4]
 8109e4a:	681b      	ldr	r3, [r3, #0]
 8109e4c:	681a      	ldr	r2, [r3, #0]
 8109e4e:	687b      	ldr	r3, [r7, #4]
 8109e50:	681b      	ldr	r3, [r3, #0]
 8109e52:	f042 0201 	orr.w	r2, r2, #1
 8109e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8109e58:	687b      	ldr	r3, [r7, #4]
 8109e5a:	2220      	movs	r2, #32
 8109e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109e60:	687b      	ldr	r3, [r7, #4]
 8109e62:	2200      	movs	r2, #0
 8109e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109e68:	2300      	movs	r3, #0
 8109e6a:	e000      	b.n	8109e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8109e6c:	2302      	movs	r3, #2
  }
}
 8109e6e:	4618      	mov	r0, r3
 8109e70:	370c      	adds	r7, #12
 8109e72:	46bd      	mov	sp, r7
 8109e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e78:	4770      	bx	lr

08109e7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8109e7a:	b480      	push	{r7}
 8109e7c:	b085      	sub	sp, #20
 8109e7e:	af00      	add	r7, sp, #0
 8109e80:	6078      	str	r0, [r7, #4]
 8109e82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109e84:	687b      	ldr	r3, [r7, #4]
 8109e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109e8a:	b2db      	uxtb	r3, r3
 8109e8c:	2b20      	cmp	r3, #32
 8109e8e:	d139      	bne.n	8109f04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109e90:	687b      	ldr	r3, [r7, #4]
 8109e92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109e96:	2b01      	cmp	r3, #1
 8109e98:	d101      	bne.n	8109e9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8109e9a:	2302      	movs	r3, #2
 8109e9c:	e033      	b.n	8109f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8109e9e:	687b      	ldr	r3, [r7, #4]
 8109ea0:	2201      	movs	r2, #1
 8109ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8109ea6:	687b      	ldr	r3, [r7, #4]
 8109ea8:	2224      	movs	r2, #36	@ 0x24
 8109eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8109eae:	687b      	ldr	r3, [r7, #4]
 8109eb0:	681b      	ldr	r3, [r3, #0]
 8109eb2:	681a      	ldr	r2, [r3, #0]
 8109eb4:	687b      	ldr	r3, [r7, #4]
 8109eb6:	681b      	ldr	r3, [r3, #0]
 8109eb8:	f022 0201 	bic.w	r2, r2, #1
 8109ebc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8109ebe:	687b      	ldr	r3, [r7, #4]
 8109ec0:	681b      	ldr	r3, [r3, #0]
 8109ec2:	681b      	ldr	r3, [r3, #0]
 8109ec4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8109ec6:	68fb      	ldr	r3, [r7, #12]
 8109ec8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8109ecc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8109ece:	683b      	ldr	r3, [r7, #0]
 8109ed0:	021b      	lsls	r3, r3, #8
 8109ed2:	68fa      	ldr	r2, [r7, #12]
 8109ed4:	4313      	orrs	r3, r2
 8109ed6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8109ed8:	687b      	ldr	r3, [r7, #4]
 8109eda:	681b      	ldr	r3, [r3, #0]
 8109edc:	68fa      	ldr	r2, [r7, #12]
 8109ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8109ee0:	687b      	ldr	r3, [r7, #4]
 8109ee2:	681b      	ldr	r3, [r3, #0]
 8109ee4:	681a      	ldr	r2, [r3, #0]
 8109ee6:	687b      	ldr	r3, [r7, #4]
 8109ee8:	681b      	ldr	r3, [r3, #0]
 8109eea:	f042 0201 	orr.w	r2, r2, #1
 8109eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8109ef0:	687b      	ldr	r3, [r7, #4]
 8109ef2:	2220      	movs	r2, #32
 8109ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109ef8:	687b      	ldr	r3, [r7, #4]
 8109efa:	2200      	movs	r2, #0
 8109efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109f00:	2300      	movs	r3, #0
 8109f02:	e000      	b.n	8109f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8109f04:	2302      	movs	r3, #2
  }
}
 8109f06:	4618      	mov	r0, r3
 8109f08:	3714      	adds	r7, #20
 8109f0a:	46bd      	mov	sp, r7
 8109f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f10:	4770      	bx	lr
	...

08109f14 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8109f14:	b580      	push	{r7, lr}
 8109f16:	b084      	sub	sp, #16
 8109f18:	af00      	add	r7, sp, #0
 8109f1a:	60f8      	str	r0, [r7, #12]
 8109f1c:	460b      	mov	r3, r1
 8109f1e:	607a      	str	r2, [r7, #4]
 8109f20:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8109f22:	4b37      	ldr	r3, [pc, #220]	@ (810a000 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109f24:	681b      	ldr	r3, [r3, #0]
 8109f26:	f023 0201 	bic.w	r2, r3, #1
 8109f2a:	4935      	ldr	r1, [pc, #212]	@ (810a000 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109f2c:	68fb      	ldr	r3, [r7, #12]
 8109f2e:	4313      	orrs	r3, r2
 8109f30:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8109f32:	687b      	ldr	r3, [r7, #4]
 8109f34:	2b00      	cmp	r3, #0
 8109f36:	d123      	bne.n	8109f80 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8109f38:	f7fd fa46 	bl	81073c8 <HAL_GetCurrentCPUID>
 8109f3c:	4603      	mov	r3, r0
 8109f3e:	2b03      	cmp	r3, #3
 8109f40:	d158      	bne.n	8109ff4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8109f42:	4b2f      	ldr	r3, [pc, #188]	@ (810a000 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109f44:	691b      	ldr	r3, [r3, #16]
 8109f46:	4a2e      	ldr	r2, [pc, #184]	@ (810a000 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109f48:	f023 0301 	bic.w	r3, r3, #1
 8109f4c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109f4e:	4b2d      	ldr	r3, [pc, #180]	@ (810a004 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109f50:	691b      	ldr	r3, [r3, #16]
 8109f52:	4a2c      	ldr	r2, [pc, #176]	@ (810a004 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109f54:	f043 0304 	orr.w	r3, r3, #4
 8109f58:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109f5a:	f3bf 8f4f 	dsb	sy
}
 8109f5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109f60:	f3bf 8f6f 	isb	sy
}
 8109f64:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109f66:	7afb      	ldrb	r3, [r7, #11]
 8109f68:	2b01      	cmp	r3, #1
 8109f6a:	d101      	bne.n	8109f70 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109f6c:	bf30      	wfi
 8109f6e:	e000      	b.n	8109f72 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109f70:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109f72:	4b24      	ldr	r3, [pc, #144]	@ (810a004 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109f74:	691b      	ldr	r3, [r3, #16]
 8109f76:	4a23      	ldr	r2, [pc, #140]	@ (810a004 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109f78:	f023 0304 	bic.w	r3, r3, #4
 8109f7c:	6113      	str	r3, [r2, #16]
 8109f7e:	e03c      	b.n	8109ffa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8109f80:	687b      	ldr	r3, [r7, #4]
 8109f82:	2b01      	cmp	r3, #1
 8109f84:	d123      	bne.n	8109fce <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8109f86:	f7fd fa1f 	bl	81073c8 <HAL_GetCurrentCPUID>
 8109f8a:	4603      	mov	r3, r0
 8109f8c:	2b01      	cmp	r3, #1
 8109f8e:	d133      	bne.n	8109ff8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8109f90:	4b1b      	ldr	r3, [pc, #108]	@ (810a000 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109f92:	695b      	ldr	r3, [r3, #20]
 8109f94:	4a1a      	ldr	r2, [pc, #104]	@ (810a000 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109f96:	f023 0302 	bic.w	r3, r3, #2
 8109f9a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109f9c:	4b19      	ldr	r3, [pc, #100]	@ (810a004 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109f9e:	691b      	ldr	r3, [r3, #16]
 8109fa0:	4a18      	ldr	r2, [pc, #96]	@ (810a004 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109fa2:	f043 0304 	orr.w	r3, r3, #4
 8109fa6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109fa8:	f3bf 8f4f 	dsb	sy
}
 8109fac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109fae:	f3bf 8f6f 	isb	sy
}
 8109fb2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109fb4:	7afb      	ldrb	r3, [r7, #11]
 8109fb6:	2b01      	cmp	r3, #1
 8109fb8:	d101      	bne.n	8109fbe <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109fba:	bf30      	wfi
 8109fbc:	e000      	b.n	8109fc0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109fbe:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109fc0:	4b10      	ldr	r3, [pc, #64]	@ (810a004 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109fc2:	691b      	ldr	r3, [r3, #16]
 8109fc4:	4a0f      	ldr	r2, [pc, #60]	@ (810a004 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109fc6:	f023 0304 	bic.w	r3, r3, #4
 8109fca:	6113      	str	r3, [r2, #16]
 8109fcc:	e015      	b.n	8109ffa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109fce:	f7fd f9fb 	bl	81073c8 <HAL_GetCurrentCPUID>
 8109fd2:	4603      	mov	r3, r0
 8109fd4:	2b03      	cmp	r3, #3
 8109fd6:	d106      	bne.n	8109fe6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8109fd8:	4b09      	ldr	r3, [pc, #36]	@ (810a000 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109fda:	691b      	ldr	r3, [r3, #16]
 8109fdc:	4a08      	ldr	r2, [pc, #32]	@ (810a000 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109fde:	f023 0304 	bic.w	r3, r3, #4
 8109fe2:	6113      	str	r3, [r2, #16]
 8109fe4:	e009      	b.n	8109ffa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8109fe6:	4b06      	ldr	r3, [pc, #24]	@ (810a000 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109fe8:	695b      	ldr	r3, [r3, #20]
 8109fea:	4a05      	ldr	r2, [pc, #20]	@ (810a000 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109fec:	f023 0304 	bic.w	r3, r3, #4
 8109ff0:	6153      	str	r3, [r2, #20]
 8109ff2:	e002      	b.n	8109ffa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109ff4:	bf00      	nop
 8109ff6:	e000      	b.n	8109ffa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109ff8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8109ffa:	3710      	adds	r7, #16
 8109ffc:	46bd      	mov	sp, r7
 8109ffe:	bd80      	pop	{r7, pc}
 810a000:	58024800 	.word	0x58024800
 810a004:	e000ed00 	.word	0xe000ed00

0810a008 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810a008:	b580      	push	{r7, lr}
 810a00a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810a00c:	f7fd f9dc 	bl	81073c8 <HAL_GetCurrentCPUID>
 810a010:	4603      	mov	r3, r0
 810a012:	2b03      	cmp	r3, #3
 810a014:	d101      	bne.n	810a01a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810a016:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810a018:	e001      	b.n	810a01e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810a01a:	bf40      	sev
    __WFE ();
 810a01c:	bf20      	wfe
}
 810a01e:	bf00      	nop
 810a020:	bd80      	pop	{r7, pc}
	...

0810a024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810a024:	b480      	push	{r7}
 810a026:	b089      	sub	sp, #36	@ 0x24
 810a028:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810a02a:	4bb3      	ldr	r3, [pc, #716]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a02c:	691b      	ldr	r3, [r3, #16]
 810a02e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810a032:	2b18      	cmp	r3, #24
 810a034:	f200 8155 	bhi.w	810a2e2 <HAL_RCC_GetSysClockFreq+0x2be>
 810a038:	a201      	add	r2, pc, #4	@ (adr r2, 810a040 <HAL_RCC_GetSysClockFreq+0x1c>)
 810a03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a03e:	bf00      	nop
 810a040:	0810a0a5 	.word	0x0810a0a5
 810a044:	0810a2e3 	.word	0x0810a2e3
 810a048:	0810a2e3 	.word	0x0810a2e3
 810a04c:	0810a2e3 	.word	0x0810a2e3
 810a050:	0810a2e3 	.word	0x0810a2e3
 810a054:	0810a2e3 	.word	0x0810a2e3
 810a058:	0810a2e3 	.word	0x0810a2e3
 810a05c:	0810a2e3 	.word	0x0810a2e3
 810a060:	0810a0cb 	.word	0x0810a0cb
 810a064:	0810a2e3 	.word	0x0810a2e3
 810a068:	0810a2e3 	.word	0x0810a2e3
 810a06c:	0810a2e3 	.word	0x0810a2e3
 810a070:	0810a2e3 	.word	0x0810a2e3
 810a074:	0810a2e3 	.word	0x0810a2e3
 810a078:	0810a2e3 	.word	0x0810a2e3
 810a07c:	0810a2e3 	.word	0x0810a2e3
 810a080:	0810a0d1 	.word	0x0810a0d1
 810a084:	0810a2e3 	.word	0x0810a2e3
 810a088:	0810a2e3 	.word	0x0810a2e3
 810a08c:	0810a2e3 	.word	0x0810a2e3
 810a090:	0810a2e3 	.word	0x0810a2e3
 810a094:	0810a2e3 	.word	0x0810a2e3
 810a098:	0810a2e3 	.word	0x0810a2e3
 810a09c:	0810a2e3 	.word	0x0810a2e3
 810a0a0:	0810a0d7 	.word	0x0810a0d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a0a4:	4b94      	ldr	r3, [pc, #592]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0a6:	681b      	ldr	r3, [r3, #0]
 810a0a8:	f003 0320 	and.w	r3, r3, #32
 810a0ac:	2b00      	cmp	r3, #0
 810a0ae:	d009      	beq.n	810a0c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a0b0:	4b91      	ldr	r3, [pc, #580]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0b2:	681b      	ldr	r3, [r3, #0]
 810a0b4:	08db      	lsrs	r3, r3, #3
 810a0b6:	f003 0303 	and.w	r3, r3, #3
 810a0ba:	4a90      	ldr	r2, [pc, #576]	@ (810a2fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 810a0bc:	fa22 f303 	lsr.w	r3, r2, r3
 810a0c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810a0c2:	e111      	b.n	810a2e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810a0c4:	4b8d      	ldr	r3, [pc, #564]	@ (810a2fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 810a0c6:	61bb      	str	r3, [r7, #24]
      break;
 810a0c8:	e10e      	b.n	810a2e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810a0ca:	4b8d      	ldr	r3, [pc, #564]	@ (810a300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810a0cc:	61bb      	str	r3, [r7, #24]
      break;
 810a0ce:	e10b      	b.n	810a2e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810a0d0:	4b8c      	ldr	r3, [pc, #560]	@ (810a304 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810a0d2:	61bb      	str	r3, [r7, #24]
      break;
 810a0d4:	e108      	b.n	810a2e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a0d6:	4b88      	ldr	r3, [pc, #544]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a0da:	f003 0303 	and.w	r3, r3, #3
 810a0de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810a0e0:	4b85      	ldr	r3, [pc, #532]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a0e4:	091b      	lsrs	r3, r3, #4
 810a0e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810a0ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810a0ec:	4b82      	ldr	r3, [pc, #520]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a0f0:	f003 0301 	and.w	r3, r3, #1
 810a0f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810a0f6:	4b80      	ldr	r3, [pc, #512]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a0fa:	08db      	lsrs	r3, r3, #3
 810a0fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a100:	68fa      	ldr	r2, [r7, #12]
 810a102:	fb02 f303 	mul.w	r3, r2, r3
 810a106:	ee07 3a90 	vmov	s15, r3
 810a10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a10e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810a112:	693b      	ldr	r3, [r7, #16]
 810a114:	2b00      	cmp	r3, #0
 810a116:	f000 80e1 	beq.w	810a2dc <HAL_RCC_GetSysClockFreq+0x2b8>
 810a11a:	697b      	ldr	r3, [r7, #20]
 810a11c:	2b02      	cmp	r3, #2
 810a11e:	f000 8083 	beq.w	810a228 <HAL_RCC_GetSysClockFreq+0x204>
 810a122:	697b      	ldr	r3, [r7, #20]
 810a124:	2b02      	cmp	r3, #2
 810a126:	f200 80a1 	bhi.w	810a26c <HAL_RCC_GetSysClockFreq+0x248>
 810a12a:	697b      	ldr	r3, [r7, #20]
 810a12c:	2b00      	cmp	r3, #0
 810a12e:	d003      	beq.n	810a138 <HAL_RCC_GetSysClockFreq+0x114>
 810a130:	697b      	ldr	r3, [r7, #20]
 810a132:	2b01      	cmp	r3, #1
 810a134:	d056      	beq.n	810a1e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 810a136:	e099      	b.n	810a26c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a138:	4b6f      	ldr	r3, [pc, #444]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a13a:	681b      	ldr	r3, [r3, #0]
 810a13c:	f003 0320 	and.w	r3, r3, #32
 810a140:	2b00      	cmp	r3, #0
 810a142:	d02d      	beq.n	810a1a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a144:	4b6c      	ldr	r3, [pc, #432]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a146:	681b      	ldr	r3, [r3, #0]
 810a148:	08db      	lsrs	r3, r3, #3
 810a14a:	f003 0303 	and.w	r3, r3, #3
 810a14e:	4a6b      	ldr	r2, [pc, #428]	@ (810a2fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 810a150:	fa22 f303 	lsr.w	r3, r2, r3
 810a154:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a156:	687b      	ldr	r3, [r7, #4]
 810a158:	ee07 3a90 	vmov	s15, r3
 810a15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a160:	693b      	ldr	r3, [r7, #16]
 810a162:	ee07 3a90 	vmov	s15, r3
 810a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a16e:	4b62      	ldr	r3, [pc, #392]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a176:	ee07 3a90 	vmov	s15, r3
 810a17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a17e:	ed97 6a02 	vldr	s12, [r7, #8]
 810a182:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810a308 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a18e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a196:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a19a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810a19e:	e087      	b.n	810a2b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a1a0:	693b      	ldr	r3, [r7, #16]
 810a1a2:	ee07 3a90 	vmov	s15, r3
 810a1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a1aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810a30c <HAL_RCC_GetSysClockFreq+0x2e8>
 810a1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a1b2:	4b51      	ldr	r3, [pc, #324]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a1b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a1ba:	ee07 3a90 	vmov	s15, r3
 810a1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a1c2:	ed97 6a02 	vldr	s12, [r7, #8]
 810a1c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810a308 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a1d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a1de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a1e2:	e065      	b.n	810a2b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a1e4:	693b      	ldr	r3, [r7, #16]
 810a1e6:	ee07 3a90 	vmov	s15, r3
 810a1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a1ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810a310 <HAL_RCC_GetSysClockFreq+0x2ec>
 810a1f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a1f6:	4b40      	ldr	r3, [pc, #256]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a1fe:	ee07 3a90 	vmov	s15, r3
 810a202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a206:	ed97 6a02 	vldr	s12, [r7, #8]
 810a20a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810a308 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a20e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a226:	e043      	b.n	810a2b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a228:	693b      	ldr	r3, [r7, #16]
 810a22a:	ee07 3a90 	vmov	s15, r3
 810a22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a232:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810a314 <HAL_RCC_GetSysClockFreq+0x2f0>
 810a236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a23a:	4b2f      	ldr	r3, [pc, #188]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a23c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a242:	ee07 3a90 	vmov	s15, r3
 810a246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a24a:	ed97 6a02 	vldr	s12, [r7, #8]
 810a24e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810a308 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a25a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a262:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a26a:	e021      	b.n	810a2b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a26c:	693b      	ldr	r3, [r7, #16]
 810a26e:	ee07 3a90 	vmov	s15, r3
 810a272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a276:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810a310 <HAL_RCC_GetSysClockFreq+0x2ec>
 810a27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a27e:	4b1e      	ldr	r3, [pc, #120]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a286:	ee07 3a90 	vmov	s15, r3
 810a28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a28e:	ed97 6a02 	vldr	s12, [r7, #8]
 810a292:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810a308 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a29e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a2aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a2ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810a2b0:	4b11      	ldr	r3, [pc, #68]	@ (810a2f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a2b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a2b4:	0a5b      	lsrs	r3, r3, #9
 810a2b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a2ba:	3301      	adds	r3, #1
 810a2bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810a2be:	683b      	ldr	r3, [r7, #0]
 810a2c0:	ee07 3a90 	vmov	s15, r3
 810a2c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810a2c8:	edd7 6a07 	vldr	s13, [r7, #28]
 810a2cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a2d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a2d4:	ee17 3a90 	vmov	r3, s15
 810a2d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810a2da:	e005      	b.n	810a2e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810a2dc:	2300      	movs	r3, #0
 810a2de:	61bb      	str	r3, [r7, #24]
      break;
 810a2e0:	e002      	b.n	810a2e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810a2e2:	4b07      	ldr	r3, [pc, #28]	@ (810a300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810a2e4:	61bb      	str	r3, [r7, #24]
      break;
 810a2e6:	bf00      	nop
  }

  return sysclockfreq;
 810a2e8:	69bb      	ldr	r3, [r7, #24]
}
 810a2ea:	4618      	mov	r0, r3
 810a2ec:	3724      	adds	r7, #36	@ 0x24
 810a2ee:	46bd      	mov	sp, r7
 810a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a2f4:	4770      	bx	lr
 810a2f6:	bf00      	nop
 810a2f8:	58024400 	.word	0x58024400
 810a2fc:	03d09000 	.word	0x03d09000
 810a300:	003d0900 	.word	0x003d0900
 810a304:	017d7840 	.word	0x017d7840
 810a308:	46000000 	.word	0x46000000
 810a30c:	4c742400 	.word	0x4c742400
 810a310:	4a742400 	.word	0x4a742400
 810a314:	4bbebc20 	.word	0x4bbebc20

0810a318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810a318:	b580      	push	{r7, lr}
 810a31a:	b082      	sub	sp, #8
 810a31c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810a31e:	f7ff fe81 	bl	810a024 <HAL_RCC_GetSysClockFreq>
 810a322:	4602      	mov	r2, r0
 810a324:	4b11      	ldr	r3, [pc, #68]	@ (810a36c <HAL_RCC_GetHCLKFreq+0x54>)
 810a326:	699b      	ldr	r3, [r3, #24]
 810a328:	0a1b      	lsrs	r3, r3, #8
 810a32a:	f003 030f 	and.w	r3, r3, #15
 810a32e:	4910      	ldr	r1, [pc, #64]	@ (810a370 <HAL_RCC_GetHCLKFreq+0x58>)
 810a330:	5ccb      	ldrb	r3, [r1, r3]
 810a332:	f003 031f 	and.w	r3, r3, #31
 810a336:	fa22 f303 	lsr.w	r3, r2, r3
 810a33a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810a33c:	4b0b      	ldr	r3, [pc, #44]	@ (810a36c <HAL_RCC_GetHCLKFreq+0x54>)
 810a33e:	699b      	ldr	r3, [r3, #24]
 810a340:	f003 030f 	and.w	r3, r3, #15
 810a344:	4a0a      	ldr	r2, [pc, #40]	@ (810a370 <HAL_RCC_GetHCLKFreq+0x58>)
 810a346:	5cd3      	ldrb	r3, [r2, r3]
 810a348:	f003 031f 	and.w	r3, r3, #31
 810a34c:	687a      	ldr	r2, [r7, #4]
 810a34e:	fa22 f303 	lsr.w	r3, r2, r3
 810a352:	4a08      	ldr	r2, [pc, #32]	@ (810a374 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a354:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810a356:	4b07      	ldr	r3, [pc, #28]	@ (810a374 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a358:	681b      	ldr	r3, [r3, #0]
 810a35a:	4a07      	ldr	r2, [pc, #28]	@ (810a378 <HAL_RCC_GetHCLKFreq+0x60>)
 810a35c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810a35e:	4b05      	ldr	r3, [pc, #20]	@ (810a374 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a360:	681b      	ldr	r3, [r3, #0]
}
 810a362:	4618      	mov	r0, r3
 810a364:	3708      	adds	r7, #8
 810a366:	46bd      	mov	sp, r7
 810a368:	bd80      	pop	{r7, pc}
 810a36a:	bf00      	nop
 810a36c:	58024400 	.word	0x58024400
 810a370:	0811fc00 	.word	0x0811fc00
 810a374:	10000018 	.word	0x10000018
 810a378:	10000014 	.word	0x10000014

0810a37c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810a37c:	b580      	push	{r7, lr}
 810a37e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810a380:	f7ff ffca 	bl	810a318 <HAL_RCC_GetHCLKFreq>
 810a384:	4602      	mov	r2, r0
 810a386:	4b06      	ldr	r3, [pc, #24]	@ (810a3a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 810a388:	69db      	ldr	r3, [r3, #28]
 810a38a:	091b      	lsrs	r3, r3, #4
 810a38c:	f003 0307 	and.w	r3, r3, #7
 810a390:	4904      	ldr	r1, [pc, #16]	@ (810a3a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 810a392:	5ccb      	ldrb	r3, [r1, r3]
 810a394:	f003 031f 	and.w	r3, r3, #31
 810a398:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810a39c:	4618      	mov	r0, r3
 810a39e:	bd80      	pop	{r7, pc}
 810a3a0:	58024400 	.word	0x58024400
 810a3a4:	0811fc00 	.word	0x0811fc00

0810a3a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810a3a8:	b480      	push	{r7}
 810a3aa:	b083      	sub	sp, #12
 810a3ac:	af00      	add	r7, sp, #0
 810a3ae:	6078      	str	r0, [r7, #4]
 810a3b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810a3b2:	687b      	ldr	r3, [r7, #4]
 810a3b4:	223f      	movs	r2, #63	@ 0x3f
 810a3b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810a3b8:	4b1a      	ldr	r3, [pc, #104]	@ (810a424 <HAL_RCC_GetClockConfig+0x7c>)
 810a3ba:	691b      	ldr	r3, [r3, #16]
 810a3bc:	f003 0207 	and.w	r2, r3, #7
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810a3c4:	4b17      	ldr	r3, [pc, #92]	@ (810a424 <HAL_RCC_GetClockConfig+0x7c>)
 810a3c6:	699b      	ldr	r3, [r3, #24]
 810a3c8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 810a3cc:	687b      	ldr	r3, [r7, #4]
 810a3ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810a3d0:	4b14      	ldr	r3, [pc, #80]	@ (810a424 <HAL_RCC_GetClockConfig+0x7c>)
 810a3d2:	699b      	ldr	r3, [r3, #24]
 810a3d4:	f003 020f 	and.w	r2, r3, #15
 810a3d8:	687b      	ldr	r3, [r7, #4]
 810a3da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810a3dc:	4b11      	ldr	r3, [pc, #68]	@ (810a424 <HAL_RCC_GetClockConfig+0x7c>)
 810a3de:	699b      	ldr	r3, [r3, #24]
 810a3e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810a3e4:	687b      	ldr	r3, [r7, #4]
 810a3e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810a3e8:	4b0e      	ldr	r3, [pc, #56]	@ (810a424 <HAL_RCC_GetClockConfig+0x7c>)
 810a3ea:	69db      	ldr	r3, [r3, #28]
 810a3ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810a3f0:	687b      	ldr	r3, [r7, #4]
 810a3f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810a3f4:	4b0b      	ldr	r3, [pc, #44]	@ (810a424 <HAL_RCC_GetClockConfig+0x7c>)
 810a3f6:	69db      	ldr	r3, [r3, #28]
 810a3f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810a3fc:	687b      	ldr	r3, [r7, #4]
 810a3fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810a400:	4b08      	ldr	r3, [pc, #32]	@ (810a424 <HAL_RCC_GetClockConfig+0x7c>)
 810a402:	6a1b      	ldr	r3, [r3, #32]
 810a404:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810a408:	687b      	ldr	r3, [r7, #4]
 810a40a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810a40c:	4b06      	ldr	r3, [pc, #24]	@ (810a428 <HAL_RCC_GetClockConfig+0x80>)
 810a40e:	681b      	ldr	r3, [r3, #0]
 810a410:	f003 020f 	and.w	r2, r3, #15
 810a414:	683b      	ldr	r3, [r7, #0]
 810a416:	601a      	str	r2, [r3, #0]
}
 810a418:	bf00      	nop
 810a41a:	370c      	adds	r7, #12
 810a41c:	46bd      	mov	sp, r7
 810a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a422:	4770      	bx	lr
 810a424:	58024400 	.word	0x58024400
 810a428:	52002000 	.word	0x52002000

0810a42c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810a42c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810a430:	b0cc      	sub	sp, #304	@ 0x130
 810a432:	af00      	add	r7, sp, #0
 810a434:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810a438:	2300      	movs	r3, #0
 810a43a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810a43e:	2300      	movs	r3, #0
 810a440:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810a444:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a44c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810a450:	2500      	movs	r5, #0
 810a452:	ea54 0305 	orrs.w	r3, r4, r5
 810a456:	d049      	beq.n	810a4ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810a458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a45c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a45e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a462:	d02f      	beq.n	810a4c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 810a464:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a468:	d828      	bhi.n	810a4bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 810a46a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a46e:	d01a      	beq.n	810a4a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810a470:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a474:	d822      	bhi.n	810a4bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 810a476:	2b00      	cmp	r3, #0
 810a478:	d003      	beq.n	810a482 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810a47a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a47e:	d007      	beq.n	810a490 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810a480:	e01c      	b.n	810a4bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a482:	4bb8      	ldr	r3, [pc, #736]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a486:	4ab7      	ldr	r2, [pc, #732]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a48c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a48e:	e01a      	b.n	810a4c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a494:	3308      	adds	r3, #8
 810a496:	2102      	movs	r1, #2
 810a498:	4618      	mov	r0, r3
 810a49a:	f001 fa11 	bl	810b8c0 <RCCEx_PLL2_Config>
 810a49e:	4603      	mov	r3, r0
 810a4a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a4a4:	e00f      	b.n	810a4c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a4a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a4aa:	3328      	adds	r3, #40	@ 0x28
 810a4ac:	2102      	movs	r1, #2
 810a4ae:	4618      	mov	r0, r3
 810a4b0:	f001 fab8 	bl	810ba24 <RCCEx_PLL3_Config>
 810a4b4:	4603      	mov	r3, r0
 810a4b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a4ba:	e004      	b.n	810a4c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a4bc:	2301      	movs	r3, #1
 810a4be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a4c2:	e000      	b.n	810a4c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810a4c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a4c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a4ca:	2b00      	cmp	r3, #0
 810a4cc:	d10a      	bne.n	810a4e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810a4ce:	4ba5      	ldr	r3, [pc, #660]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a4d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a4d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810a4d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a4da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a4dc:	4aa1      	ldr	r2, [pc, #644]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a4de:	430b      	orrs	r3, r1
 810a4e0:	6513      	str	r3, [r2, #80]	@ 0x50
 810a4e2:	e003      	b.n	810a4ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a4e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a4e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810a4ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810a4f8:	f04f 0900 	mov.w	r9, #0
 810a4fc:	ea58 0309 	orrs.w	r3, r8, r9
 810a500:	d047      	beq.n	810a592 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810a502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a508:	2b04      	cmp	r3, #4
 810a50a:	d82a      	bhi.n	810a562 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810a50c:	a201      	add	r2, pc, #4	@ (adr r2, 810a514 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810a50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a512:	bf00      	nop
 810a514:	0810a529 	.word	0x0810a529
 810a518:	0810a537 	.word	0x0810a537
 810a51c:	0810a54d 	.word	0x0810a54d
 810a520:	0810a56b 	.word	0x0810a56b
 810a524:	0810a56b 	.word	0x0810a56b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a528:	4b8e      	ldr	r3, [pc, #568]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a52c:	4a8d      	ldr	r2, [pc, #564]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a52e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a532:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a534:	e01a      	b.n	810a56c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a53a:	3308      	adds	r3, #8
 810a53c:	2100      	movs	r1, #0
 810a53e:	4618      	mov	r0, r3
 810a540:	f001 f9be 	bl	810b8c0 <RCCEx_PLL2_Config>
 810a544:	4603      	mov	r3, r0
 810a546:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a54a:	e00f      	b.n	810a56c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a54c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a550:	3328      	adds	r3, #40	@ 0x28
 810a552:	2100      	movs	r1, #0
 810a554:	4618      	mov	r0, r3
 810a556:	f001 fa65 	bl	810ba24 <RCCEx_PLL3_Config>
 810a55a:	4603      	mov	r3, r0
 810a55c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a560:	e004      	b.n	810a56c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a562:	2301      	movs	r3, #1
 810a564:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a568:	e000      	b.n	810a56c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810a56a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a56c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a570:	2b00      	cmp	r3, #0
 810a572:	d10a      	bne.n	810a58a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810a574:	4b7b      	ldr	r3, [pc, #492]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a578:	f023 0107 	bic.w	r1, r3, #7
 810a57c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a582:	4a78      	ldr	r2, [pc, #480]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a584:	430b      	orrs	r3, r1
 810a586:	6513      	str	r3, [r2, #80]	@ 0x50
 810a588:	e003      	b.n	810a592 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a58a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a58e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810a592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a59a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810a59e:	f04f 0b00 	mov.w	fp, #0
 810a5a2:	ea5a 030b 	orrs.w	r3, sl, fp
 810a5a6:	d04c      	beq.n	810a642 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810a5a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a5ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810a5ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a5b2:	d030      	beq.n	810a616 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810a5b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a5b8:	d829      	bhi.n	810a60e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a5ba:	2bc0      	cmp	r3, #192	@ 0xc0
 810a5bc:	d02d      	beq.n	810a61a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810a5be:	2bc0      	cmp	r3, #192	@ 0xc0
 810a5c0:	d825      	bhi.n	810a60e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a5c2:	2b80      	cmp	r3, #128	@ 0x80
 810a5c4:	d018      	beq.n	810a5f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810a5c6:	2b80      	cmp	r3, #128	@ 0x80
 810a5c8:	d821      	bhi.n	810a60e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a5ca:	2b00      	cmp	r3, #0
 810a5cc:	d002      	beq.n	810a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810a5ce:	2b40      	cmp	r3, #64	@ 0x40
 810a5d0:	d007      	beq.n	810a5e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810a5d2:	e01c      	b.n	810a60e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a5d4:	4b63      	ldr	r3, [pc, #396]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a5d8:	4a62      	ldr	r2, [pc, #392]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a5da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a5de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a5e0:	e01c      	b.n	810a61c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a5e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a5e6:	3308      	adds	r3, #8
 810a5e8:	2100      	movs	r1, #0
 810a5ea:	4618      	mov	r0, r3
 810a5ec:	f001 f968 	bl	810b8c0 <RCCEx_PLL2_Config>
 810a5f0:	4603      	mov	r3, r0
 810a5f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a5f6:	e011      	b.n	810a61c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a5f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a5fc:	3328      	adds	r3, #40	@ 0x28
 810a5fe:	2100      	movs	r1, #0
 810a600:	4618      	mov	r0, r3
 810a602:	f001 fa0f 	bl	810ba24 <RCCEx_PLL3_Config>
 810a606:	4603      	mov	r3, r0
 810a608:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a60c:	e006      	b.n	810a61c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a60e:	2301      	movs	r3, #1
 810a610:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a614:	e002      	b.n	810a61c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810a616:	bf00      	nop
 810a618:	e000      	b.n	810a61c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810a61a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a61c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a620:	2b00      	cmp	r3, #0
 810a622:	d10a      	bne.n	810a63a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810a624:	4b4f      	ldr	r3, [pc, #316]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a628:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810a62c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810a632:	4a4c      	ldr	r2, [pc, #304]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a634:	430b      	orrs	r3, r1
 810a636:	6513      	str	r3, [r2, #80]	@ 0x50
 810a638:	e003      	b.n	810a642 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a63a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a63e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810a642:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a64a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810a64e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 810a652:	2300      	movs	r3, #0
 810a654:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 810a658:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810a65c:	460b      	mov	r3, r1
 810a65e:	4313      	orrs	r3, r2
 810a660:	d053      	beq.n	810a70a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810a662:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a666:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810a66a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810a66e:	d035      	beq.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810a670:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810a674:	d82e      	bhi.n	810a6d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a676:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810a67a:	d031      	beq.n	810a6e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810a67c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810a680:	d828      	bhi.n	810a6d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a682:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a686:	d01a      	beq.n	810a6be <HAL_RCCEx_PeriphCLKConfig+0x292>
 810a688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a68c:	d822      	bhi.n	810a6d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a68e:	2b00      	cmp	r3, #0
 810a690:	d003      	beq.n	810a69a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810a692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a696:	d007      	beq.n	810a6a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810a698:	e01c      	b.n	810a6d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a69a:	4b32      	ldr	r3, [pc, #200]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a69e:	4a31      	ldr	r2, [pc, #196]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a6a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a6a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a6a6:	e01c      	b.n	810a6e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a6a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a6ac:	3308      	adds	r3, #8
 810a6ae:	2100      	movs	r1, #0
 810a6b0:	4618      	mov	r0, r3
 810a6b2:	f001 f905 	bl	810b8c0 <RCCEx_PLL2_Config>
 810a6b6:	4603      	mov	r3, r0
 810a6b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a6bc:	e011      	b.n	810a6e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a6be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a6c2:	3328      	adds	r3, #40	@ 0x28
 810a6c4:	2100      	movs	r1, #0
 810a6c6:	4618      	mov	r0, r3
 810a6c8:	f001 f9ac 	bl	810ba24 <RCCEx_PLL3_Config>
 810a6cc:	4603      	mov	r3, r0
 810a6ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a6d2:	e006      	b.n	810a6e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a6d4:	2301      	movs	r3, #1
 810a6d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a6da:	e002      	b.n	810a6e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a6dc:	bf00      	nop
 810a6de:	e000      	b.n	810a6e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a6e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a6e6:	2b00      	cmp	r3, #0
 810a6e8:	d10b      	bne.n	810a702 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810a6ea:	4b1e      	ldr	r3, [pc, #120]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a6ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810a6f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a6f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810a6fa:	4a1a      	ldr	r2, [pc, #104]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a6fc:	430b      	orrs	r3, r1
 810a6fe:	6593      	str	r3, [r2, #88]	@ 0x58
 810a700:	e003      	b.n	810a70a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a702:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a706:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810a70a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a712:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810a716:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810a71a:	2300      	movs	r3, #0
 810a71c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810a720:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810a724:	460b      	mov	r3, r1
 810a726:	4313      	orrs	r3, r2
 810a728:	d056      	beq.n	810a7d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810a72a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a72e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810a732:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a736:	d038      	beq.n	810a7aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810a738:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a73c:	d831      	bhi.n	810a7a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a73e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810a742:	d034      	beq.n	810a7ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 810a744:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810a748:	d82b      	bhi.n	810a7a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a74a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a74e:	d01d      	beq.n	810a78c <HAL_RCCEx_PeriphCLKConfig+0x360>
 810a750:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a754:	d825      	bhi.n	810a7a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a756:	2b00      	cmp	r3, #0
 810a758:	d006      	beq.n	810a768 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810a75a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810a75e:	d00a      	beq.n	810a776 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810a760:	e01f      	b.n	810a7a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a762:	bf00      	nop
 810a764:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a768:	4ba2      	ldr	r3, [pc, #648]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a76a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a76c:	4aa1      	ldr	r2, [pc, #644]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a76e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a774:	e01c      	b.n	810a7b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a776:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a77a:	3308      	adds	r3, #8
 810a77c:	2100      	movs	r1, #0
 810a77e:	4618      	mov	r0, r3
 810a780:	f001 f89e 	bl	810b8c0 <RCCEx_PLL2_Config>
 810a784:	4603      	mov	r3, r0
 810a786:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a78a:	e011      	b.n	810a7b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a78c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a790:	3328      	adds	r3, #40	@ 0x28
 810a792:	2100      	movs	r1, #0
 810a794:	4618      	mov	r0, r3
 810a796:	f001 f945 	bl	810ba24 <RCCEx_PLL3_Config>
 810a79a:	4603      	mov	r3, r0
 810a79c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a7a0:	e006      	b.n	810a7b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a7a2:	2301      	movs	r3, #1
 810a7a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a7a8:	e002      	b.n	810a7b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a7aa:	bf00      	nop
 810a7ac:	e000      	b.n	810a7b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a7ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a7b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a7b4:	2b00      	cmp	r3, #0
 810a7b6:	d10b      	bne.n	810a7d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810a7b8:	4b8e      	ldr	r3, [pc, #568]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a7ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a7bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810a7c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a7c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810a7c8:	4a8a      	ldr	r2, [pc, #552]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a7ca:	430b      	orrs	r3, r1
 810a7cc:	6593      	str	r3, [r2, #88]	@ 0x58
 810a7ce:	e003      	b.n	810a7d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a7d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a7d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810a7d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a7e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810a7e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810a7e8:	2300      	movs	r3, #0
 810a7ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810a7ee:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810a7f2:	460b      	mov	r3, r1
 810a7f4:	4313      	orrs	r3, r2
 810a7f6:	d03a      	beq.n	810a86e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810a7f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a7fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a7fe:	2b30      	cmp	r3, #48	@ 0x30
 810a800:	d01f      	beq.n	810a842 <HAL_RCCEx_PeriphCLKConfig+0x416>
 810a802:	2b30      	cmp	r3, #48	@ 0x30
 810a804:	d819      	bhi.n	810a83a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a806:	2b20      	cmp	r3, #32
 810a808:	d00c      	beq.n	810a824 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810a80a:	2b20      	cmp	r3, #32
 810a80c:	d815      	bhi.n	810a83a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a80e:	2b00      	cmp	r3, #0
 810a810:	d019      	beq.n	810a846 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810a812:	2b10      	cmp	r3, #16
 810a814:	d111      	bne.n	810a83a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a816:	4b77      	ldr	r3, [pc, #476]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a81a:	4a76      	ldr	r2, [pc, #472]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a81c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a822:	e011      	b.n	810a848 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a828:	3308      	adds	r3, #8
 810a82a:	2102      	movs	r1, #2
 810a82c:	4618      	mov	r0, r3
 810a82e:	f001 f847 	bl	810b8c0 <RCCEx_PLL2_Config>
 810a832:	4603      	mov	r3, r0
 810a834:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a838:	e006      	b.n	810a848 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810a83a:	2301      	movs	r3, #1
 810a83c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a840:	e002      	b.n	810a848 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a842:	bf00      	nop
 810a844:	e000      	b.n	810a848 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a846:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a848:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a84c:	2b00      	cmp	r3, #0
 810a84e:	d10a      	bne.n	810a866 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810a850:	4b68      	ldr	r3, [pc, #416]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a854:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 810a858:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a85c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a85e:	4a65      	ldr	r2, [pc, #404]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a860:	430b      	orrs	r3, r1
 810a862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810a864:	e003      	b.n	810a86e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a866:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a86a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810a86e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a876:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810a87a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810a87e:	2300      	movs	r3, #0
 810a880:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810a884:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810a888:	460b      	mov	r3, r1
 810a88a:	4313      	orrs	r3, r2
 810a88c:	d051      	beq.n	810a932 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810a88e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a894:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a898:	d035      	beq.n	810a906 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810a89a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a89e:	d82e      	bhi.n	810a8fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a8a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810a8a4:	d031      	beq.n	810a90a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810a8a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810a8aa:	d828      	bhi.n	810a8fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a8ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a8b0:	d01a      	beq.n	810a8e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810a8b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a8b6:	d822      	bhi.n	810a8fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a8b8:	2b00      	cmp	r3, #0
 810a8ba:	d003      	beq.n	810a8c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810a8bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a8c0:	d007      	beq.n	810a8d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810a8c2:	e01c      	b.n	810a8fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a8c4:	4b4b      	ldr	r3, [pc, #300]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a8c8:	4a4a      	ldr	r2, [pc, #296]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a8ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a8ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a8d0:	e01c      	b.n	810a90c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a8d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a8d6:	3308      	adds	r3, #8
 810a8d8:	2100      	movs	r1, #0
 810a8da:	4618      	mov	r0, r3
 810a8dc:	f000 fff0 	bl	810b8c0 <RCCEx_PLL2_Config>
 810a8e0:	4603      	mov	r3, r0
 810a8e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a8e6:	e011      	b.n	810a90c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a8e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a8ec:	3328      	adds	r3, #40	@ 0x28
 810a8ee:	2100      	movs	r1, #0
 810a8f0:	4618      	mov	r0, r3
 810a8f2:	f001 f897 	bl	810ba24 <RCCEx_PLL3_Config>
 810a8f6:	4603      	mov	r3, r0
 810a8f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a8fc:	e006      	b.n	810a90c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a8fe:	2301      	movs	r3, #1
 810a900:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a904:	e002      	b.n	810a90c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a906:	bf00      	nop
 810a908:	e000      	b.n	810a90c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a90a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a90c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a910:	2b00      	cmp	r3, #0
 810a912:	d10a      	bne.n	810a92a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810a914:	4b37      	ldr	r3, [pc, #220]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a918:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810a91c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a922:	4a34      	ldr	r2, [pc, #208]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a924:	430b      	orrs	r3, r1
 810a926:	6513      	str	r3, [r2, #80]	@ 0x50
 810a928:	e003      	b.n	810a932 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a92a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a92e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810a932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a93a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810a93e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810a942:	2300      	movs	r3, #0
 810a944:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810a948:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810a94c:	460b      	mov	r3, r1
 810a94e:	4313      	orrs	r3, r2
 810a950:	d056      	beq.n	810aa00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810a952:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a956:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a958:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810a95c:	d033      	beq.n	810a9c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810a95e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810a962:	d82c      	bhi.n	810a9be <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a964:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810a968:	d02f      	beq.n	810a9ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810a96a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810a96e:	d826      	bhi.n	810a9be <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a970:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810a974:	d02b      	beq.n	810a9ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810a976:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810a97a:	d820      	bhi.n	810a9be <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a97c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a980:	d012      	beq.n	810a9a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810a982:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a986:	d81a      	bhi.n	810a9be <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a988:	2b00      	cmp	r3, #0
 810a98a:	d022      	beq.n	810a9d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810a98c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a990:	d115      	bne.n	810a9be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a992:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a996:	3308      	adds	r3, #8
 810a998:	2101      	movs	r1, #1
 810a99a:	4618      	mov	r0, r3
 810a99c:	f000 ff90 	bl	810b8c0 <RCCEx_PLL2_Config>
 810a9a0:	4603      	mov	r3, r0
 810a9a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a9a6:	e015      	b.n	810a9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a9a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a9ac:	3328      	adds	r3, #40	@ 0x28
 810a9ae:	2101      	movs	r1, #1
 810a9b0:	4618      	mov	r0, r3
 810a9b2:	f001 f837 	bl	810ba24 <RCCEx_PLL3_Config>
 810a9b6:	4603      	mov	r3, r0
 810a9b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a9bc:	e00a      	b.n	810a9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a9be:	2301      	movs	r3, #1
 810a9c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a9c4:	e006      	b.n	810a9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a9c6:	bf00      	nop
 810a9c8:	e004      	b.n	810a9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a9ca:	bf00      	nop
 810a9cc:	e002      	b.n	810a9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a9ce:	bf00      	nop
 810a9d0:	e000      	b.n	810a9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a9d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a9d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a9d8:	2b00      	cmp	r3, #0
 810a9da:	d10d      	bne.n	810a9f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810a9dc:	4b05      	ldr	r3, [pc, #20]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a9de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a9e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810a9e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a9e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a9ea:	4a02      	ldr	r2, [pc, #8]	@ (810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a9ec:	430b      	orrs	r3, r1
 810a9ee:	6513      	str	r3, [r2, #80]	@ 0x50
 810a9f0:	e006      	b.n	810aa00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810a9f2:	bf00      	nop
 810a9f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a9f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a9fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810aa00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa08:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810aa0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810aa10:	2300      	movs	r3, #0
 810aa12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810aa16:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810aa1a:	460b      	mov	r3, r1
 810aa1c:	4313      	orrs	r3, r2
 810aa1e:	d055      	beq.n	810aacc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810aa20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810aa28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810aa2c:	d033      	beq.n	810aa96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810aa2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810aa32:	d82c      	bhi.n	810aa8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 810aa34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aa38:	d02f      	beq.n	810aa9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810aa3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aa3e:	d826      	bhi.n	810aa8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 810aa40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810aa44:	d02b      	beq.n	810aa9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 810aa46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810aa4a:	d820      	bhi.n	810aa8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 810aa4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810aa50:	d012      	beq.n	810aa78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810aa52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810aa56:	d81a      	bhi.n	810aa8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 810aa58:	2b00      	cmp	r3, #0
 810aa5a:	d022      	beq.n	810aaa2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810aa5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810aa60:	d115      	bne.n	810aa8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810aa62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa66:	3308      	adds	r3, #8
 810aa68:	2101      	movs	r1, #1
 810aa6a:	4618      	mov	r0, r3
 810aa6c:	f000 ff28 	bl	810b8c0 <RCCEx_PLL2_Config>
 810aa70:	4603      	mov	r3, r0
 810aa72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810aa76:	e015      	b.n	810aaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810aa78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa7c:	3328      	adds	r3, #40	@ 0x28
 810aa7e:	2101      	movs	r1, #1
 810aa80:	4618      	mov	r0, r3
 810aa82:	f000 ffcf 	bl	810ba24 <RCCEx_PLL3_Config>
 810aa86:	4603      	mov	r3, r0
 810aa88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810aa8c:	e00a      	b.n	810aaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810aa8e:	2301      	movs	r3, #1
 810aa90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810aa94:	e006      	b.n	810aaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810aa96:	bf00      	nop
 810aa98:	e004      	b.n	810aaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810aa9a:	bf00      	nop
 810aa9c:	e002      	b.n	810aaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810aa9e:	bf00      	nop
 810aaa0:	e000      	b.n	810aaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810aaa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 810aaa4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aaa8:	2b00      	cmp	r3, #0
 810aaaa:	d10b      	bne.n	810aac4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810aaac:	4bb7      	ldr	r3, [pc, #732]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aaae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810aab0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810aab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aab8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810aabc:	4ab3      	ldr	r2, [pc, #716]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aabe:	430b      	orrs	r3, r1
 810aac0:	6593      	str	r3, [r2, #88]	@ 0x58
 810aac2:	e003      	b.n	810aacc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aac4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aac8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810aacc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aad4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 810aad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810aadc:	2300      	movs	r3, #0
 810aade:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810aae2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810aae6:	460b      	mov	r3, r1
 810aae8:	4313      	orrs	r3, r2
 810aaea:	d02a      	beq.n	810ab42 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810aaec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aaf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810aaf2:	2b00      	cmp	r3, #0
 810aaf4:	d011      	beq.n	810ab1a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810aaf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810aafa:	d10a      	bne.n	810ab12 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810aafc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab00:	3308      	adds	r3, #8
 810ab02:	2101      	movs	r1, #1
 810ab04:	4618      	mov	r0, r3
 810ab06:	f000 fedb 	bl	810b8c0 <RCCEx_PLL2_Config>
 810ab0a:	4603      	mov	r3, r0
 810ab0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 810ab10:	e004      	b.n	810ab1c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ab12:	2301      	movs	r3, #1
 810ab14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ab18:	e000      	b.n	810ab1c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 810ab1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ab1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ab20:	2b00      	cmp	r3, #0
 810ab22:	d10a      	bne.n	810ab3a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810ab24:	4b99      	ldr	r3, [pc, #612]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ab26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ab28:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810ab2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ab32:	4a96      	ldr	r2, [pc, #600]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ab34:	430b      	orrs	r3, r1
 810ab36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810ab38:	e003      	b.n	810ab42 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ab3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ab3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810ab42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ab4a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810ab4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810ab52:	2300      	movs	r3, #0
 810ab54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810ab58:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810ab5c:	460b      	mov	r3, r1
 810ab5e:	4313      	orrs	r3, r2
 810ab60:	d037      	beq.n	810abd2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810ab62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810ab68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ab6c:	d00e      	beq.n	810ab8c <HAL_RCCEx_PeriphCLKConfig+0x760>
 810ab6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ab72:	d816      	bhi.n	810aba2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 810ab74:	2b00      	cmp	r3, #0
 810ab76:	d018      	beq.n	810abaa <HAL_RCCEx_PeriphCLKConfig+0x77e>
 810ab78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810ab7c:	d111      	bne.n	810aba2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810ab7e:	4b83      	ldr	r3, [pc, #524]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ab80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ab82:	4a82      	ldr	r2, [pc, #520]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ab84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810ab88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810ab8a:	e00f      	b.n	810abac <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ab8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab90:	3308      	adds	r3, #8
 810ab92:	2101      	movs	r1, #1
 810ab94:	4618      	mov	r0, r3
 810ab96:	f000 fe93 	bl	810b8c0 <RCCEx_PLL2_Config>
 810ab9a:	4603      	mov	r3, r0
 810ab9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810aba0:	e004      	b.n	810abac <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810aba2:	2301      	movs	r3, #1
 810aba4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810aba8:	e000      	b.n	810abac <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810abaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 810abac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810abb0:	2b00      	cmp	r3, #0
 810abb2:	d10a      	bne.n	810abca <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810abb4:	4b75      	ldr	r3, [pc, #468]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810abb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810abb8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810abbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810abc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810abc2:	4a72      	ldr	r2, [pc, #456]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810abc4:	430b      	orrs	r3, r1
 810abc6:	6513      	str	r3, [r2, #80]	@ 0x50
 810abc8:	e003      	b.n	810abd2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810abca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810abce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810abd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810abda:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810abde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810abe2:	2300      	movs	r3, #0
 810abe4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810abe8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810abec:	460b      	mov	r3, r1
 810abee:	4313      	orrs	r3, r2
 810abf0:	d03a      	beq.n	810ac68 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810abf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810abf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810abf8:	2b03      	cmp	r3, #3
 810abfa:	d81d      	bhi.n	810ac38 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 810abfc:	a201      	add	r2, pc, #4	@ (adr r2, 810ac04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 810abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ac02:	bf00      	nop
 810ac04:	0810ac41 	.word	0x0810ac41
 810ac08:	0810ac15 	.word	0x0810ac15
 810ac0c:	0810ac23 	.word	0x0810ac23
 810ac10:	0810ac41 	.word	0x0810ac41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810ac14:	4b5d      	ldr	r3, [pc, #372]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ac16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ac18:	4a5c      	ldr	r2, [pc, #368]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ac1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810ac1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810ac20:	e00f      	b.n	810ac42 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810ac22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac26:	3308      	adds	r3, #8
 810ac28:	2102      	movs	r1, #2
 810ac2a:	4618      	mov	r0, r3
 810ac2c:	f000 fe48 	bl	810b8c0 <RCCEx_PLL2_Config>
 810ac30:	4603      	mov	r3, r0
 810ac32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810ac36:	e004      	b.n	810ac42 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810ac38:	2301      	movs	r3, #1
 810ac3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ac3e:	e000      	b.n	810ac42 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 810ac40:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ac42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ac46:	2b00      	cmp	r3, #0
 810ac48:	d10a      	bne.n	810ac60 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810ac4a:	4b50      	ldr	r3, [pc, #320]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ac4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ac4e:	f023 0103 	bic.w	r1, r3, #3
 810ac52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810ac58:	4a4c      	ldr	r2, [pc, #304]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ac5a:	430b      	orrs	r3, r1
 810ac5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810ac5e:	e003      	b.n	810ac68 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ac60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ac64:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810ac68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ac70:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810ac74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810ac78:	2300      	movs	r3, #0
 810ac7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810ac7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810ac82:	460b      	mov	r3, r1
 810ac84:	4313      	orrs	r3, r2
 810ac86:	f000 80a0 	beq.w	810adca <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810ac8a:	4b41      	ldr	r3, [pc, #260]	@ (810ad90 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810ac8c:	681b      	ldr	r3, [r3, #0]
 810ac8e:	4a40      	ldr	r2, [pc, #256]	@ (810ad90 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810ac90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810ac94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810ac96:	f7fc fa97 	bl	81071c8 <HAL_GetTick>
 810ac9a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810ac9e:	e00b      	b.n	810acb8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810aca0:	f7fc fa92 	bl	81071c8 <HAL_GetTick>
 810aca4:	4602      	mov	r2, r0
 810aca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810acaa:	1ad3      	subs	r3, r2, r3
 810acac:	2b64      	cmp	r3, #100	@ 0x64
 810acae:	d903      	bls.n	810acb8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 810acb0:	2303      	movs	r3, #3
 810acb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810acb6:	e005      	b.n	810acc4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810acb8:	4b35      	ldr	r3, [pc, #212]	@ (810ad90 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810acba:	681b      	ldr	r3, [r3, #0]
 810acbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810acc0:	2b00      	cmp	r3, #0
 810acc2:	d0ed      	beq.n	810aca0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 810acc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810acc8:	2b00      	cmp	r3, #0
 810acca:	d17a      	bne.n	810adc2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810accc:	4b2f      	ldr	r3, [pc, #188]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810acce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810acd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810acd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810acd8:	4053      	eors	r3, r2
 810acda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810acde:	2b00      	cmp	r3, #0
 810ace0:	d015      	beq.n	810ad0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810ace2:	4b2a      	ldr	r3, [pc, #168]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ace4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ace6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810acea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810acee:	4b27      	ldr	r3, [pc, #156]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810acf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810acf2:	4a26      	ldr	r2, [pc, #152]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810acf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810acf8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810acfa:	4b24      	ldr	r3, [pc, #144]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810acfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810acfe:	4a23      	ldr	r2, [pc, #140]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810ad04:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810ad06:	4a21      	ldr	r2, [pc, #132]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad08:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 810ad0c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810ad0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810ad16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ad1a:	d118      	bne.n	810ad4e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810ad1c:	f7fc fa54 	bl	81071c8 <HAL_GetTick>
 810ad20:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810ad24:	e00d      	b.n	810ad42 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810ad26:	f7fc fa4f 	bl	81071c8 <HAL_GetTick>
 810ad2a:	4602      	mov	r2, r0
 810ad2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810ad30:	1ad2      	subs	r2, r2, r3
 810ad32:	f241 3388 	movw	r3, #5000	@ 0x1388
 810ad36:	429a      	cmp	r2, r3
 810ad38:	d903      	bls.n	810ad42 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 810ad3a:	2303      	movs	r3, #3
 810ad3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 810ad40:	e005      	b.n	810ad4e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810ad42:	4b12      	ldr	r3, [pc, #72]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ad46:	f003 0302 	and.w	r3, r3, #2
 810ad4a:	2b00      	cmp	r3, #0
 810ad4c:	d0eb      	beq.n	810ad26 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810ad4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ad52:	2b00      	cmp	r3, #0
 810ad54:	d130      	bne.n	810adb8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810ad56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810ad5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810ad62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810ad66:	d115      	bne.n	810ad94 <HAL_RCCEx_PeriphCLKConfig+0x968>
 810ad68:	4b08      	ldr	r3, [pc, #32]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad6a:	691b      	ldr	r3, [r3, #16]
 810ad6c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810ad70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810ad78:	091b      	lsrs	r3, r3, #4
 810ad7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810ad7e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810ad82:	4a02      	ldr	r2, [pc, #8]	@ (810ad8c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad84:	430b      	orrs	r3, r1
 810ad86:	6113      	str	r3, [r2, #16]
 810ad88:	e00a      	b.n	810ada0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810ad8a:	bf00      	nop
 810ad8c:	58024400 	.word	0x58024400
 810ad90:	58024800 	.word	0x58024800
 810ad94:	4bd4      	ldr	r3, [pc, #848]	@ (810b0e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ad96:	691b      	ldr	r3, [r3, #16]
 810ad98:	4ad3      	ldr	r2, [pc, #844]	@ (810b0e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ad9a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810ad9e:	6113      	str	r3, [r2, #16]
 810ada0:	4bd1      	ldr	r3, [pc, #836]	@ (810b0e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ada2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810ada4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ada8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810adac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810adb0:	4acd      	ldr	r2, [pc, #820]	@ (810b0e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810adb2:	430b      	orrs	r3, r1
 810adb4:	6713      	str	r3, [r2, #112]	@ 0x70
 810adb6:	e008      	b.n	810adca <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810adb8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810adbc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 810adc0:	e003      	b.n	810adca <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810adc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810adc6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810adca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810add2:	f002 0301 	and.w	r3, r2, #1
 810add6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810adda:	2300      	movs	r3, #0
 810addc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810ade0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810ade4:	460b      	mov	r3, r1
 810ade6:	4313      	orrs	r3, r2
 810ade8:	f000 808b 	beq.w	810af02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810adec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810adf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810adf4:	2b28      	cmp	r3, #40	@ 0x28
 810adf6:	d86b      	bhi.n	810aed0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810adf8:	a201      	add	r2, pc, #4	@ (adr r2, 810ae00 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810adfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810adfe:	bf00      	nop
 810ae00:	0810aed9 	.word	0x0810aed9
 810ae04:	0810aed1 	.word	0x0810aed1
 810ae08:	0810aed1 	.word	0x0810aed1
 810ae0c:	0810aed1 	.word	0x0810aed1
 810ae10:	0810aed1 	.word	0x0810aed1
 810ae14:	0810aed1 	.word	0x0810aed1
 810ae18:	0810aed1 	.word	0x0810aed1
 810ae1c:	0810aed1 	.word	0x0810aed1
 810ae20:	0810aea5 	.word	0x0810aea5
 810ae24:	0810aed1 	.word	0x0810aed1
 810ae28:	0810aed1 	.word	0x0810aed1
 810ae2c:	0810aed1 	.word	0x0810aed1
 810ae30:	0810aed1 	.word	0x0810aed1
 810ae34:	0810aed1 	.word	0x0810aed1
 810ae38:	0810aed1 	.word	0x0810aed1
 810ae3c:	0810aed1 	.word	0x0810aed1
 810ae40:	0810aebb 	.word	0x0810aebb
 810ae44:	0810aed1 	.word	0x0810aed1
 810ae48:	0810aed1 	.word	0x0810aed1
 810ae4c:	0810aed1 	.word	0x0810aed1
 810ae50:	0810aed1 	.word	0x0810aed1
 810ae54:	0810aed1 	.word	0x0810aed1
 810ae58:	0810aed1 	.word	0x0810aed1
 810ae5c:	0810aed1 	.word	0x0810aed1
 810ae60:	0810aed9 	.word	0x0810aed9
 810ae64:	0810aed1 	.word	0x0810aed1
 810ae68:	0810aed1 	.word	0x0810aed1
 810ae6c:	0810aed1 	.word	0x0810aed1
 810ae70:	0810aed1 	.word	0x0810aed1
 810ae74:	0810aed1 	.word	0x0810aed1
 810ae78:	0810aed1 	.word	0x0810aed1
 810ae7c:	0810aed1 	.word	0x0810aed1
 810ae80:	0810aed9 	.word	0x0810aed9
 810ae84:	0810aed1 	.word	0x0810aed1
 810ae88:	0810aed1 	.word	0x0810aed1
 810ae8c:	0810aed1 	.word	0x0810aed1
 810ae90:	0810aed1 	.word	0x0810aed1
 810ae94:	0810aed1 	.word	0x0810aed1
 810ae98:	0810aed1 	.word	0x0810aed1
 810ae9c:	0810aed1 	.word	0x0810aed1
 810aea0:	0810aed9 	.word	0x0810aed9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810aea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aea8:	3308      	adds	r3, #8
 810aeaa:	2101      	movs	r1, #1
 810aeac:	4618      	mov	r0, r3
 810aeae:	f000 fd07 	bl	810b8c0 <RCCEx_PLL2_Config>
 810aeb2:	4603      	mov	r3, r0
 810aeb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810aeb8:	e00f      	b.n	810aeda <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810aeba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aebe:	3328      	adds	r3, #40	@ 0x28
 810aec0:	2101      	movs	r1, #1
 810aec2:	4618      	mov	r0, r3
 810aec4:	f000 fdae 	bl	810ba24 <RCCEx_PLL3_Config>
 810aec8:	4603      	mov	r3, r0
 810aeca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810aece:	e004      	b.n	810aeda <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810aed0:	2301      	movs	r3, #1
 810aed2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810aed6:	e000      	b.n	810aeda <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810aed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 810aeda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aede:	2b00      	cmp	r3, #0
 810aee0:	d10b      	bne.n	810aefa <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810aee2:	4b81      	ldr	r3, [pc, #516]	@ (810b0e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810aee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aee6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810aeea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aeee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810aef2:	4a7d      	ldr	r2, [pc, #500]	@ (810b0e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810aef4:	430b      	orrs	r3, r1
 810aef6:	6553      	str	r3, [r2, #84]	@ 0x54
 810aef8:	e003      	b.n	810af02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aefa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aefe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810af02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af0a:	f002 0302 	and.w	r3, r2, #2
 810af0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810af12:	2300      	movs	r3, #0
 810af14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810af18:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810af1c:	460b      	mov	r3, r1
 810af1e:	4313      	orrs	r3, r2
 810af20:	d042      	beq.n	810afa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810af22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810af28:	2b05      	cmp	r3, #5
 810af2a:	d825      	bhi.n	810af78 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 810af2c:	a201      	add	r2, pc, #4	@ (adr r2, 810af34 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 810af2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810af32:	bf00      	nop
 810af34:	0810af81 	.word	0x0810af81
 810af38:	0810af4d 	.word	0x0810af4d
 810af3c:	0810af63 	.word	0x0810af63
 810af40:	0810af81 	.word	0x0810af81
 810af44:	0810af81 	.word	0x0810af81
 810af48:	0810af81 	.word	0x0810af81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810af4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af50:	3308      	adds	r3, #8
 810af52:	2101      	movs	r1, #1
 810af54:	4618      	mov	r0, r3
 810af56:	f000 fcb3 	bl	810b8c0 <RCCEx_PLL2_Config>
 810af5a:	4603      	mov	r3, r0
 810af5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810af60:	e00f      	b.n	810af82 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810af62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af66:	3328      	adds	r3, #40	@ 0x28
 810af68:	2101      	movs	r1, #1
 810af6a:	4618      	mov	r0, r3
 810af6c:	f000 fd5a 	bl	810ba24 <RCCEx_PLL3_Config>
 810af70:	4603      	mov	r3, r0
 810af72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810af76:	e004      	b.n	810af82 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810af78:	2301      	movs	r3, #1
 810af7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810af7e:	e000      	b.n	810af82 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 810af80:	bf00      	nop
    }

    if (ret == HAL_OK)
 810af82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810af86:	2b00      	cmp	r3, #0
 810af88:	d10a      	bne.n	810afa0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810af8a:	4b57      	ldr	r3, [pc, #348]	@ (810b0e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810af8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810af8e:	f023 0107 	bic.w	r1, r3, #7
 810af92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810af98:	4a53      	ldr	r2, [pc, #332]	@ (810b0e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810af9a:	430b      	orrs	r3, r1
 810af9c:	6553      	str	r3, [r2, #84]	@ 0x54
 810af9e:	e003      	b.n	810afa8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810afa0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810afa4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810afa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afb0:	f002 0304 	and.w	r3, r2, #4
 810afb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810afb8:	2300      	movs	r3, #0
 810afba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810afbe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810afc2:	460b      	mov	r3, r1
 810afc4:	4313      	orrs	r3, r2
 810afc6:	d044      	beq.n	810b052 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810afc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810afcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810afd0:	2b05      	cmp	r3, #5
 810afd2:	d825      	bhi.n	810b020 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 810afd4:	a201      	add	r2, pc, #4	@ (adr r2, 810afdc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810afd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810afda:	bf00      	nop
 810afdc:	0810b029 	.word	0x0810b029
 810afe0:	0810aff5 	.word	0x0810aff5
 810afe4:	0810b00b 	.word	0x0810b00b
 810afe8:	0810b029 	.word	0x0810b029
 810afec:	0810b029 	.word	0x0810b029
 810aff0:	0810b029 	.word	0x0810b029
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810aff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aff8:	3308      	adds	r3, #8
 810affa:	2101      	movs	r1, #1
 810affc:	4618      	mov	r0, r3
 810affe:	f000 fc5f 	bl	810b8c0 <RCCEx_PLL2_Config>
 810b002:	4603      	mov	r3, r0
 810b004:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810b008:	e00f      	b.n	810b02a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b00a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b00e:	3328      	adds	r3, #40	@ 0x28
 810b010:	2101      	movs	r1, #1
 810b012:	4618      	mov	r0, r3
 810b014:	f000 fd06 	bl	810ba24 <RCCEx_PLL3_Config>
 810b018:	4603      	mov	r3, r0
 810b01a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810b01e:	e004      	b.n	810b02a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b020:	2301      	movs	r3, #1
 810b022:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b026:	e000      	b.n	810b02a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 810b028:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b02a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b02e:	2b00      	cmp	r3, #0
 810b030:	d10b      	bne.n	810b04a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810b032:	4b2d      	ldr	r3, [pc, #180]	@ (810b0e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810b034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b036:	f023 0107 	bic.w	r1, r3, #7
 810b03a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b03e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810b042:	4a29      	ldr	r2, [pc, #164]	@ (810b0e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810b044:	430b      	orrs	r3, r1
 810b046:	6593      	str	r3, [r2, #88]	@ 0x58
 810b048:	e003      	b.n	810b052 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b04a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b04e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810b052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b05a:	f002 0320 	and.w	r3, r2, #32
 810b05e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810b062:	2300      	movs	r3, #0
 810b064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810b068:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810b06c:	460b      	mov	r3, r1
 810b06e:	4313      	orrs	r3, r2
 810b070:	d057      	beq.n	810b122 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810b072:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810b07a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810b07e:	d035      	beq.n	810b0ec <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 810b080:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810b084:	d82c      	bhi.n	810b0e0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810b086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b08a:	d031      	beq.n	810b0f0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 810b08c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b090:	d826      	bhi.n	810b0e0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810b092:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810b096:	d02d      	beq.n	810b0f4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 810b098:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810b09c:	d820      	bhi.n	810b0e0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810b09e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b0a2:	d012      	beq.n	810b0ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 810b0a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b0a8:	d81a      	bhi.n	810b0e0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810b0aa:	2b00      	cmp	r3, #0
 810b0ac:	d024      	beq.n	810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 810b0ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b0b2:	d115      	bne.n	810b0e0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b0b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b0b8:	3308      	adds	r3, #8
 810b0ba:	2100      	movs	r1, #0
 810b0bc:	4618      	mov	r0, r3
 810b0be:	f000 fbff 	bl	810b8c0 <RCCEx_PLL2_Config>
 810b0c2:	4603      	mov	r3, r0
 810b0c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810b0c8:	e017      	b.n	810b0fa <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b0ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b0ce:	3328      	adds	r3, #40	@ 0x28
 810b0d0:	2102      	movs	r1, #2
 810b0d2:	4618      	mov	r0, r3
 810b0d4:	f000 fca6 	bl	810ba24 <RCCEx_PLL3_Config>
 810b0d8:	4603      	mov	r3, r0
 810b0da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810b0de:	e00c      	b.n	810b0fa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b0e0:	2301      	movs	r3, #1
 810b0e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b0e6:	e008      	b.n	810b0fa <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810b0e8:	58024400 	.word	0x58024400
        break;
 810b0ec:	bf00      	nop
 810b0ee:	e004      	b.n	810b0fa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810b0f0:	bf00      	nop
 810b0f2:	e002      	b.n	810b0fa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810b0f4:	bf00      	nop
 810b0f6:	e000      	b.n	810b0fa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810b0f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b0fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b0fe:	2b00      	cmp	r3, #0
 810b100:	d10b      	bne.n	810b11a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810b102:	4bc2      	ldr	r3, [pc, #776]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b106:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810b10a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b10e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810b112:	4abe      	ldr	r2, [pc, #760]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b114:	430b      	orrs	r3, r1
 810b116:	6553      	str	r3, [r2, #84]	@ 0x54
 810b118:	e003      	b.n	810b122 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b11a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b11e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810b122:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b12a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810b12e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810b132:	2300      	movs	r3, #0
 810b134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810b138:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810b13c:	460b      	mov	r3, r1
 810b13e:	4313      	orrs	r3, r2
 810b140:	d055      	beq.n	810b1ee <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810b142:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b146:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810b14a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810b14e:	d033      	beq.n	810b1b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 810b150:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810b154:	d82c      	bhi.n	810b1b0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810b156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b15a:	d02f      	beq.n	810b1bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 810b15c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b160:	d826      	bhi.n	810b1b0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810b162:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810b166:	d02b      	beq.n	810b1c0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 810b168:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810b16c:	d820      	bhi.n	810b1b0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810b16e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810b172:	d012      	beq.n	810b19a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 810b174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810b178:	d81a      	bhi.n	810b1b0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810b17a:	2b00      	cmp	r3, #0
 810b17c:	d022      	beq.n	810b1c4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 810b17e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810b182:	d115      	bne.n	810b1b0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b188:	3308      	adds	r3, #8
 810b18a:	2100      	movs	r1, #0
 810b18c:	4618      	mov	r0, r3
 810b18e:	f000 fb97 	bl	810b8c0 <RCCEx_PLL2_Config>
 810b192:	4603      	mov	r3, r0
 810b194:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810b198:	e015      	b.n	810b1c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b19a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b19e:	3328      	adds	r3, #40	@ 0x28
 810b1a0:	2102      	movs	r1, #2
 810b1a2:	4618      	mov	r0, r3
 810b1a4:	f000 fc3e 	bl	810ba24 <RCCEx_PLL3_Config>
 810b1a8:	4603      	mov	r3, r0
 810b1aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810b1ae:	e00a      	b.n	810b1c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b1b0:	2301      	movs	r3, #1
 810b1b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b1b6:	e006      	b.n	810b1c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810b1b8:	bf00      	nop
 810b1ba:	e004      	b.n	810b1c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810b1bc:	bf00      	nop
 810b1be:	e002      	b.n	810b1c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810b1c0:	bf00      	nop
 810b1c2:	e000      	b.n	810b1c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810b1c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b1c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b1ca:	2b00      	cmp	r3, #0
 810b1cc:	d10b      	bne.n	810b1e6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810b1ce:	4b8f      	ldr	r3, [pc, #572]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b1d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810b1d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b1da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810b1de:	4a8b      	ldr	r2, [pc, #556]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b1e0:	430b      	orrs	r3, r1
 810b1e2:	6593      	str	r3, [r2, #88]	@ 0x58
 810b1e4:	e003      	b.n	810b1ee <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b1e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b1ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810b1ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b1f6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810b1fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810b1fe:	2300      	movs	r3, #0
 810b200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810b204:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810b208:	460b      	mov	r3, r1
 810b20a:	4313      	orrs	r3, r2
 810b20c:	d055      	beq.n	810b2ba <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810b20e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810b216:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810b21a:	d033      	beq.n	810b284 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 810b21c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810b220:	d82c      	bhi.n	810b27c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810b222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b226:	d02f      	beq.n	810b288 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 810b228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b22c:	d826      	bhi.n	810b27c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810b22e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810b232:	d02b      	beq.n	810b28c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 810b234:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810b238:	d820      	bhi.n	810b27c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810b23a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810b23e:	d012      	beq.n	810b266 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 810b240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810b244:	d81a      	bhi.n	810b27c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810b246:	2b00      	cmp	r3, #0
 810b248:	d022      	beq.n	810b290 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 810b24a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b24e:	d115      	bne.n	810b27c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b250:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b254:	3308      	adds	r3, #8
 810b256:	2100      	movs	r1, #0
 810b258:	4618      	mov	r0, r3
 810b25a:	f000 fb31 	bl	810b8c0 <RCCEx_PLL2_Config>
 810b25e:	4603      	mov	r3, r0
 810b260:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810b264:	e015      	b.n	810b292 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b26a:	3328      	adds	r3, #40	@ 0x28
 810b26c:	2102      	movs	r1, #2
 810b26e:	4618      	mov	r0, r3
 810b270:	f000 fbd8 	bl	810ba24 <RCCEx_PLL3_Config>
 810b274:	4603      	mov	r3, r0
 810b276:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810b27a:	e00a      	b.n	810b292 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b27c:	2301      	movs	r3, #1
 810b27e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b282:	e006      	b.n	810b292 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b284:	bf00      	nop
 810b286:	e004      	b.n	810b292 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b288:	bf00      	nop
 810b28a:	e002      	b.n	810b292 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b28c:	bf00      	nop
 810b28e:	e000      	b.n	810b292 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b290:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b292:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b296:	2b00      	cmp	r3, #0
 810b298:	d10b      	bne.n	810b2b2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810b29a:	4b5c      	ldr	r3, [pc, #368]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b29e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810b2a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b2a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810b2aa:	4a58      	ldr	r2, [pc, #352]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b2ac:	430b      	orrs	r3, r1
 810b2ae:	6593      	str	r3, [r2, #88]	@ 0x58
 810b2b0:	e003      	b.n	810b2ba <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b2b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b2b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810b2ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b2c2:	f002 0308 	and.w	r3, r2, #8
 810b2c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810b2ca:	2300      	movs	r3, #0
 810b2cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810b2d0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810b2d4:	460b      	mov	r3, r1
 810b2d6:	4313      	orrs	r3, r2
 810b2d8:	d01e      	beq.n	810b318 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810b2da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b2e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b2e6:	d10c      	bne.n	810b302 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b2e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b2ec:	3328      	adds	r3, #40	@ 0x28
 810b2ee:	2102      	movs	r1, #2
 810b2f0:	4618      	mov	r0, r3
 810b2f2:	f000 fb97 	bl	810ba24 <RCCEx_PLL3_Config>
 810b2f6:	4603      	mov	r3, r0
 810b2f8:	2b00      	cmp	r3, #0
 810b2fa:	d002      	beq.n	810b302 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 810b2fc:	2301      	movs	r3, #1
 810b2fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810b302:	4b42      	ldr	r3, [pc, #264]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b306:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810b30a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b30e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b312:	4a3e      	ldr	r2, [pc, #248]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b314:	430b      	orrs	r3, r1
 810b316:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810b318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b320:	f002 0310 	and.w	r3, r2, #16
 810b324:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810b328:	2300      	movs	r3, #0
 810b32a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810b32e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810b332:	460b      	mov	r3, r1
 810b334:	4313      	orrs	r3, r2
 810b336:	d01e      	beq.n	810b376 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810b338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b33c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810b340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b344:	d10c      	bne.n	810b360 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b34a:	3328      	adds	r3, #40	@ 0x28
 810b34c:	2102      	movs	r1, #2
 810b34e:	4618      	mov	r0, r3
 810b350:	f000 fb68 	bl	810ba24 <RCCEx_PLL3_Config>
 810b354:	4603      	mov	r3, r0
 810b356:	2b00      	cmp	r3, #0
 810b358:	d002      	beq.n	810b360 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810b35a:	2301      	movs	r3, #1
 810b35c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810b360:	4b2a      	ldr	r3, [pc, #168]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b364:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810b368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b36c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810b370:	4a26      	ldr	r2, [pc, #152]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b372:	430b      	orrs	r3, r1
 810b374:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810b376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b37e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810b382:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b386:	2300      	movs	r3, #0
 810b388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b38c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810b390:	460b      	mov	r3, r1
 810b392:	4313      	orrs	r3, r2
 810b394:	d040      	beq.n	810b418 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810b396:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b39a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810b39e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b3a2:	d022      	beq.n	810b3ea <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 810b3a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b3a8:	d81b      	bhi.n	810b3e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810b3aa:	2b00      	cmp	r3, #0
 810b3ac:	d003      	beq.n	810b3b6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 810b3ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b3b2:	d00b      	beq.n	810b3cc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 810b3b4:	e015      	b.n	810b3e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b3b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b3ba:	3308      	adds	r3, #8
 810b3bc:	2100      	movs	r1, #0
 810b3be:	4618      	mov	r0, r3
 810b3c0:	f000 fa7e 	bl	810b8c0 <RCCEx_PLL2_Config>
 810b3c4:	4603      	mov	r3, r0
 810b3c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810b3ca:	e00f      	b.n	810b3ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b3cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b3d0:	3328      	adds	r3, #40	@ 0x28
 810b3d2:	2102      	movs	r1, #2
 810b3d4:	4618      	mov	r0, r3
 810b3d6:	f000 fb25 	bl	810ba24 <RCCEx_PLL3_Config>
 810b3da:	4603      	mov	r3, r0
 810b3dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810b3e0:	e004      	b.n	810b3ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b3e2:	2301      	movs	r3, #1
 810b3e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b3e8:	e000      	b.n	810b3ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810b3ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b3ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b3f0:	2b00      	cmp	r3, #0
 810b3f2:	d10d      	bne.n	810b410 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810b3f4:	4b05      	ldr	r3, [pc, #20]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b3f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b3f8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810b3fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b400:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810b404:	4a01      	ldr	r2, [pc, #4]	@ (810b40c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b406:	430b      	orrs	r3, r1
 810b408:	6593      	str	r3, [r2, #88]	@ 0x58
 810b40a:	e005      	b.n	810b418 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 810b40c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b410:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b414:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810b418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b420:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810b424:	67bb      	str	r3, [r7, #120]	@ 0x78
 810b426:	2300      	movs	r3, #0
 810b428:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810b42a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810b42e:	460b      	mov	r3, r1
 810b430:	4313      	orrs	r3, r2
 810b432:	d03b      	beq.n	810b4ac <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810b434:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b43c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810b440:	d01f      	beq.n	810b482 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810b442:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810b446:	d818      	bhi.n	810b47a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 810b448:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b44c:	d003      	beq.n	810b456 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810b44e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810b452:	d007      	beq.n	810b464 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 810b454:	e011      	b.n	810b47a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b456:	4b64      	ldr	r3, [pc, #400]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b45a:	4a63      	ldr	r2, [pc, #396]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b45c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b460:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810b462:	e00f      	b.n	810b484 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b464:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b468:	3328      	adds	r3, #40	@ 0x28
 810b46a:	2101      	movs	r1, #1
 810b46c:	4618      	mov	r0, r3
 810b46e:	f000 fad9 	bl	810ba24 <RCCEx_PLL3_Config>
 810b472:	4603      	mov	r3, r0
 810b474:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 810b478:	e004      	b.n	810b484 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b47a:	2301      	movs	r3, #1
 810b47c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b480:	e000      	b.n	810b484 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810b482:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b484:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b488:	2b00      	cmp	r3, #0
 810b48a:	d10b      	bne.n	810b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810b48c:	4b56      	ldr	r3, [pc, #344]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b48e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b490:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810b494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b49c:	4a52      	ldr	r2, [pc, #328]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b49e:	430b      	orrs	r3, r1
 810b4a0:	6553      	str	r3, [r2, #84]	@ 0x54
 810b4a2:	e003      	b.n	810b4ac <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b4a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b4a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810b4ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b4b4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810b4b8:	673b      	str	r3, [r7, #112]	@ 0x70
 810b4ba:	2300      	movs	r3, #0
 810b4bc:	677b      	str	r3, [r7, #116]	@ 0x74
 810b4be:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810b4c2:	460b      	mov	r3, r1
 810b4c4:	4313      	orrs	r3, r2
 810b4c6:	d031      	beq.n	810b52c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810b4c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b4cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b4ce:	2b00      	cmp	r3, #0
 810b4d0:	d003      	beq.n	810b4da <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810b4d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b4d6:	d007      	beq.n	810b4e8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 810b4d8:	e011      	b.n	810b4fe <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b4da:	4b43      	ldr	r3, [pc, #268]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b4de:	4a42      	ldr	r2, [pc, #264]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b4e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b4e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810b4e6:	e00e      	b.n	810b506 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b4e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b4ec:	3308      	adds	r3, #8
 810b4ee:	2102      	movs	r1, #2
 810b4f0:	4618      	mov	r0, r3
 810b4f2:	f000 f9e5 	bl	810b8c0 <RCCEx_PLL2_Config>
 810b4f6:	4603      	mov	r3, r0
 810b4f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810b4fc:	e003      	b.n	810b506 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810b4fe:	2301      	movs	r3, #1
 810b500:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b504:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b506:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b50a:	2b00      	cmp	r3, #0
 810b50c:	d10a      	bne.n	810b524 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810b50e:	4b36      	ldr	r3, [pc, #216]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b512:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810b516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b51a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b51c:	4a32      	ldr	r2, [pc, #200]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b51e:	430b      	orrs	r3, r1
 810b520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810b522:	e003      	b.n	810b52c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b524:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b528:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810b52c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b534:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810b538:	66bb      	str	r3, [r7, #104]	@ 0x68
 810b53a:	2300      	movs	r3, #0
 810b53c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810b53e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810b542:	460b      	mov	r3, r1
 810b544:	4313      	orrs	r3, r2
 810b546:	d00c      	beq.n	810b562 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b54c:	3328      	adds	r3, #40	@ 0x28
 810b54e:	2102      	movs	r1, #2
 810b550:	4618      	mov	r0, r3
 810b552:	f000 fa67 	bl	810ba24 <RCCEx_PLL3_Config>
 810b556:	4603      	mov	r3, r0
 810b558:	2b00      	cmp	r3, #0
 810b55a:	d002      	beq.n	810b562 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810b55c:	2301      	movs	r3, #1
 810b55e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810b562:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b56a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810b56e:	663b      	str	r3, [r7, #96]	@ 0x60
 810b570:	2300      	movs	r3, #0
 810b572:	667b      	str	r3, [r7, #100]	@ 0x64
 810b574:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810b578:	460b      	mov	r3, r1
 810b57a:	4313      	orrs	r3, r2
 810b57c:	d03a      	beq.n	810b5f4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810b57e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b58a:	d018      	beq.n	810b5be <HAL_RCCEx_PeriphCLKConfig+0x1192>
 810b58c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b590:	d811      	bhi.n	810b5b6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810b592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810b596:	d014      	beq.n	810b5c2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 810b598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810b59c:	d80b      	bhi.n	810b5b6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810b59e:	2b00      	cmp	r3, #0
 810b5a0:	d011      	beq.n	810b5c6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810b5a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b5a6:	d106      	bne.n	810b5b6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b5a8:	4b0f      	ldr	r3, [pc, #60]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b5ac:	4a0e      	ldr	r2, [pc, #56]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b5ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b5b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810b5b4:	e008      	b.n	810b5c8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b5b6:	2301      	movs	r3, #1
 810b5b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b5bc:	e004      	b.n	810b5c8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810b5be:	bf00      	nop
 810b5c0:	e002      	b.n	810b5c8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810b5c2:	bf00      	nop
 810b5c4:	e000      	b.n	810b5c8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810b5c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b5c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b5cc:	2b00      	cmp	r3, #0
 810b5ce:	d10d      	bne.n	810b5ec <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810b5d0:	4b05      	ldr	r3, [pc, #20]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b5d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b5d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810b5d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b5dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b5e0:	4a01      	ldr	r2, [pc, #4]	@ (810b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b5e2:	430b      	orrs	r3, r1
 810b5e4:	6553      	str	r3, [r2, #84]	@ 0x54
 810b5e6:	e005      	b.n	810b5f4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 810b5e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b5ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b5f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810b5f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b5fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810b600:	65bb      	str	r3, [r7, #88]	@ 0x58
 810b602:	2300      	movs	r3, #0
 810b604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810b606:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810b60a:	460b      	mov	r3, r1
 810b60c:	4313      	orrs	r3, r2
 810b60e:	d009      	beq.n	810b624 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810b610:	4baa      	ldr	r3, [pc, #680]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b614:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810b618:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b61c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810b61e:	4aa7      	ldr	r2, [pc, #668]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b620:	430b      	orrs	r3, r1
 810b622:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810b624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b62c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810b630:	653b      	str	r3, [r7, #80]	@ 0x50
 810b632:	2300      	movs	r3, #0
 810b634:	657b      	str	r3, [r7, #84]	@ 0x54
 810b636:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810b63a:	460b      	mov	r3, r1
 810b63c:	4313      	orrs	r3, r2
 810b63e:	d00a      	beq.n	810b656 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810b640:	4b9e      	ldr	r3, [pc, #632]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b642:	691b      	ldr	r3, [r3, #16]
 810b644:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810b648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b64c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810b650:	4a9a      	ldr	r2, [pc, #616]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b652:	430b      	orrs	r3, r1
 810b654:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810b656:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b65e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810b662:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b664:	2300      	movs	r3, #0
 810b666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b668:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810b66c:	460b      	mov	r3, r1
 810b66e:	4313      	orrs	r3, r2
 810b670:	d009      	beq.n	810b686 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810b672:	4b92      	ldr	r3, [pc, #584]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b676:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810b67a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b67e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810b680:	4a8e      	ldr	r2, [pc, #568]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b682:	430b      	orrs	r3, r1
 810b684:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810b686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b68e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810b692:	643b      	str	r3, [r7, #64]	@ 0x40
 810b694:	2300      	movs	r3, #0
 810b696:	647b      	str	r3, [r7, #68]	@ 0x44
 810b698:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810b69c:	460b      	mov	r3, r1
 810b69e:	4313      	orrs	r3, r2
 810b6a0:	d00e      	beq.n	810b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810b6a2:	4b86      	ldr	r3, [pc, #536]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6a4:	691b      	ldr	r3, [r3, #16]
 810b6a6:	4a85      	ldr	r2, [pc, #532]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810b6ac:	6113      	str	r3, [r2, #16]
 810b6ae:	4b83      	ldr	r3, [pc, #524]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6b0:	6919      	ldr	r1, [r3, #16]
 810b6b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810b6ba:	4a80      	ldr	r2, [pc, #512]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6bc:	430b      	orrs	r3, r1
 810b6be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810b6c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b6c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810b6cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 810b6ce:	2300      	movs	r3, #0
 810b6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b6d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810b6d6:	460b      	mov	r3, r1
 810b6d8:	4313      	orrs	r3, r2
 810b6da:	d009      	beq.n	810b6f0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810b6dc:	4b77      	ldr	r3, [pc, #476]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b6e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810b6e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b6ea:	4a74      	ldr	r2, [pc, #464]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6ec:	430b      	orrs	r3, r1
 810b6ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810b6f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b6f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810b6fc:	633b      	str	r3, [r7, #48]	@ 0x30
 810b6fe:	2300      	movs	r3, #0
 810b700:	637b      	str	r3, [r7, #52]	@ 0x34
 810b702:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810b706:	460b      	mov	r3, r1
 810b708:	4313      	orrs	r3, r2
 810b70a:	d00a      	beq.n	810b722 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810b70c:	4b6b      	ldr	r3, [pc, #428]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b70e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b710:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810b714:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b71c:	4a67      	ldr	r2, [pc, #412]	@ (810b8bc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b71e:	430b      	orrs	r3, r1
 810b720:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810b722:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b72a:	2100      	movs	r1, #0
 810b72c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810b72e:	f003 0301 	and.w	r3, r3, #1
 810b732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810b734:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810b738:	460b      	mov	r3, r1
 810b73a:	4313      	orrs	r3, r2
 810b73c:	d011      	beq.n	810b762 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b73e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b742:	3308      	adds	r3, #8
 810b744:	2100      	movs	r1, #0
 810b746:	4618      	mov	r0, r3
 810b748:	f000 f8ba 	bl	810b8c0 <RCCEx_PLL2_Config>
 810b74c:	4603      	mov	r3, r0
 810b74e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b752:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b756:	2b00      	cmp	r3, #0
 810b758:	d003      	beq.n	810b762 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b75a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b75e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810b762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b76a:	2100      	movs	r1, #0
 810b76c:	6239      	str	r1, [r7, #32]
 810b76e:	f003 0302 	and.w	r3, r3, #2
 810b772:	627b      	str	r3, [r7, #36]	@ 0x24
 810b774:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810b778:	460b      	mov	r3, r1
 810b77a:	4313      	orrs	r3, r2
 810b77c:	d011      	beq.n	810b7a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810b77e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b782:	3308      	adds	r3, #8
 810b784:	2101      	movs	r1, #1
 810b786:	4618      	mov	r0, r3
 810b788:	f000 f89a 	bl	810b8c0 <RCCEx_PLL2_Config>
 810b78c:	4603      	mov	r3, r0
 810b78e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b792:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b796:	2b00      	cmp	r3, #0
 810b798:	d003      	beq.n	810b7a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b79a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b79e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810b7a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b7aa:	2100      	movs	r1, #0
 810b7ac:	61b9      	str	r1, [r7, #24]
 810b7ae:	f003 0304 	and.w	r3, r3, #4
 810b7b2:	61fb      	str	r3, [r7, #28]
 810b7b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810b7b8:	460b      	mov	r3, r1
 810b7ba:	4313      	orrs	r3, r2
 810b7bc:	d011      	beq.n	810b7e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b7be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b7c2:	3308      	adds	r3, #8
 810b7c4:	2102      	movs	r1, #2
 810b7c6:	4618      	mov	r0, r3
 810b7c8:	f000 f87a 	bl	810b8c0 <RCCEx_PLL2_Config>
 810b7cc:	4603      	mov	r3, r0
 810b7ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b7d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b7d6:	2b00      	cmp	r3, #0
 810b7d8:	d003      	beq.n	810b7e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b7da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b7de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810b7e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b7ea:	2100      	movs	r1, #0
 810b7ec:	6139      	str	r1, [r7, #16]
 810b7ee:	f003 0308 	and.w	r3, r3, #8
 810b7f2:	617b      	str	r3, [r7, #20]
 810b7f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810b7f8:	460b      	mov	r3, r1
 810b7fa:	4313      	orrs	r3, r2
 810b7fc:	d011      	beq.n	810b822 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810b7fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b802:	3328      	adds	r3, #40	@ 0x28
 810b804:	2100      	movs	r1, #0
 810b806:	4618      	mov	r0, r3
 810b808:	f000 f90c 	bl	810ba24 <RCCEx_PLL3_Config>
 810b80c:	4603      	mov	r3, r0
 810b80e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810b812:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b816:	2b00      	cmp	r3, #0
 810b818:	d003      	beq.n	810b822 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b81a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b81e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810b822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b82a:	2100      	movs	r1, #0
 810b82c:	60b9      	str	r1, [r7, #8]
 810b82e:	f003 0310 	and.w	r3, r3, #16
 810b832:	60fb      	str	r3, [r7, #12]
 810b834:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810b838:	460b      	mov	r3, r1
 810b83a:	4313      	orrs	r3, r2
 810b83c:	d011      	beq.n	810b862 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b83e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b842:	3328      	adds	r3, #40	@ 0x28
 810b844:	2101      	movs	r1, #1
 810b846:	4618      	mov	r0, r3
 810b848:	f000 f8ec 	bl	810ba24 <RCCEx_PLL3_Config>
 810b84c:	4603      	mov	r3, r0
 810b84e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b852:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b856:	2b00      	cmp	r3, #0
 810b858:	d003      	beq.n	810b862 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b85a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b85e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810b862:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b86a:	2100      	movs	r1, #0
 810b86c:	6039      	str	r1, [r7, #0]
 810b86e:	f003 0320 	and.w	r3, r3, #32
 810b872:	607b      	str	r3, [r7, #4]
 810b874:	e9d7 1200 	ldrd	r1, r2, [r7]
 810b878:	460b      	mov	r3, r1
 810b87a:	4313      	orrs	r3, r2
 810b87c:	d011      	beq.n	810b8a2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b87e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b882:	3328      	adds	r3, #40	@ 0x28
 810b884:	2102      	movs	r1, #2
 810b886:	4618      	mov	r0, r3
 810b888:	f000 f8cc 	bl	810ba24 <RCCEx_PLL3_Config>
 810b88c:	4603      	mov	r3, r0
 810b88e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b892:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b896:	2b00      	cmp	r3, #0
 810b898:	d003      	beq.n	810b8a2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b89a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b89e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 810b8a2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 810b8a6:	2b00      	cmp	r3, #0
 810b8a8:	d101      	bne.n	810b8ae <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810b8aa:	2300      	movs	r3, #0
 810b8ac:	e000      	b.n	810b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 810b8ae:	2301      	movs	r3, #1
}
 810b8b0:	4618      	mov	r0, r3
 810b8b2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 810b8b6:	46bd      	mov	sp, r7
 810b8b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b8bc:	58024400 	.word	0x58024400

0810b8c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810b8c0:	b580      	push	{r7, lr}
 810b8c2:	b084      	sub	sp, #16
 810b8c4:	af00      	add	r7, sp, #0
 810b8c6:	6078      	str	r0, [r7, #4]
 810b8c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810b8ca:	2300      	movs	r3, #0
 810b8cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810b8ce:	4b54      	ldr	r3, [pc, #336]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b8d2:	f003 0303 	and.w	r3, r3, #3
 810b8d6:	2b03      	cmp	r3, #3
 810b8d8:	d101      	bne.n	810b8de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810b8da:	2301      	movs	r3, #1
 810b8dc:	e09b      	b.n	810ba16 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810b8de:	4b50      	ldr	r3, [pc, #320]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b8e0:	681b      	ldr	r3, [r3, #0]
 810b8e2:	4a4f      	ldr	r2, [pc, #316]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b8e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810b8e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810b8ea:	f7fb fc6d 	bl	81071c8 <HAL_GetTick>
 810b8ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810b8f0:	e008      	b.n	810b904 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810b8f2:	f7fb fc69 	bl	81071c8 <HAL_GetTick>
 810b8f6:	4602      	mov	r2, r0
 810b8f8:	68bb      	ldr	r3, [r7, #8]
 810b8fa:	1ad3      	subs	r3, r2, r3
 810b8fc:	2b02      	cmp	r3, #2
 810b8fe:	d901      	bls.n	810b904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810b900:	2303      	movs	r3, #3
 810b902:	e088      	b.n	810ba16 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810b904:	4b46      	ldr	r3, [pc, #280]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b906:	681b      	ldr	r3, [r3, #0]
 810b908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b90c:	2b00      	cmp	r3, #0
 810b90e:	d1f0      	bne.n	810b8f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810b910:	4b43      	ldr	r3, [pc, #268]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b914:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810b918:	687b      	ldr	r3, [r7, #4]
 810b91a:	681b      	ldr	r3, [r3, #0]
 810b91c:	031b      	lsls	r3, r3, #12
 810b91e:	4940      	ldr	r1, [pc, #256]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b920:	4313      	orrs	r3, r2
 810b922:	628b      	str	r3, [r1, #40]	@ 0x28
 810b924:	687b      	ldr	r3, [r7, #4]
 810b926:	685b      	ldr	r3, [r3, #4]
 810b928:	3b01      	subs	r3, #1
 810b92a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810b92e:	687b      	ldr	r3, [r7, #4]
 810b930:	689b      	ldr	r3, [r3, #8]
 810b932:	3b01      	subs	r3, #1
 810b934:	025b      	lsls	r3, r3, #9
 810b936:	b29b      	uxth	r3, r3
 810b938:	431a      	orrs	r2, r3
 810b93a:	687b      	ldr	r3, [r7, #4]
 810b93c:	68db      	ldr	r3, [r3, #12]
 810b93e:	3b01      	subs	r3, #1
 810b940:	041b      	lsls	r3, r3, #16
 810b942:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810b946:	431a      	orrs	r2, r3
 810b948:	687b      	ldr	r3, [r7, #4]
 810b94a:	691b      	ldr	r3, [r3, #16]
 810b94c:	3b01      	subs	r3, #1
 810b94e:	061b      	lsls	r3, r3, #24
 810b950:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810b954:	4932      	ldr	r1, [pc, #200]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b956:	4313      	orrs	r3, r2
 810b958:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810b95a:	4b31      	ldr	r3, [pc, #196]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b95e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810b962:	687b      	ldr	r3, [r7, #4]
 810b964:	695b      	ldr	r3, [r3, #20]
 810b966:	492e      	ldr	r1, [pc, #184]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b968:	4313      	orrs	r3, r2
 810b96a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810b96c:	4b2c      	ldr	r3, [pc, #176]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b970:	f023 0220 	bic.w	r2, r3, #32
 810b974:	687b      	ldr	r3, [r7, #4]
 810b976:	699b      	ldr	r3, [r3, #24]
 810b978:	4929      	ldr	r1, [pc, #164]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b97a:	4313      	orrs	r3, r2
 810b97c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810b97e:	4b28      	ldr	r3, [pc, #160]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b982:	4a27      	ldr	r2, [pc, #156]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b984:	f023 0310 	bic.w	r3, r3, #16
 810b988:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810b98a:	4b25      	ldr	r3, [pc, #148]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b98c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810b98e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810b992:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810b996:	687a      	ldr	r2, [r7, #4]
 810b998:	69d2      	ldr	r2, [r2, #28]
 810b99a:	00d2      	lsls	r2, r2, #3
 810b99c:	4920      	ldr	r1, [pc, #128]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b99e:	4313      	orrs	r3, r2
 810b9a0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810b9a2:	4b1f      	ldr	r3, [pc, #124]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b9a6:	4a1e      	ldr	r2, [pc, #120]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b9a8:	f043 0310 	orr.w	r3, r3, #16
 810b9ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810b9ae:	683b      	ldr	r3, [r7, #0]
 810b9b0:	2b00      	cmp	r3, #0
 810b9b2:	d106      	bne.n	810b9c2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810b9b4:	4b1a      	ldr	r3, [pc, #104]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b9b8:	4a19      	ldr	r2, [pc, #100]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b9ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810b9be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810b9c0:	e00f      	b.n	810b9e2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810b9c2:	683b      	ldr	r3, [r7, #0]
 810b9c4:	2b01      	cmp	r3, #1
 810b9c6:	d106      	bne.n	810b9d6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810b9c8:	4b15      	ldr	r3, [pc, #84]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b9cc:	4a14      	ldr	r2, [pc, #80]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b9ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810b9d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810b9d4:	e005      	b.n	810b9e2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810b9d6:	4b12      	ldr	r3, [pc, #72]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b9da:	4a11      	ldr	r2, [pc, #68]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b9dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810b9e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810b9e2:	4b0f      	ldr	r3, [pc, #60]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b9e4:	681b      	ldr	r3, [r3, #0]
 810b9e6:	4a0e      	ldr	r2, [pc, #56]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810b9e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810b9ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810b9ee:	f7fb fbeb 	bl	81071c8 <HAL_GetTick>
 810b9f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810b9f4:	e008      	b.n	810ba08 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810b9f6:	f7fb fbe7 	bl	81071c8 <HAL_GetTick>
 810b9fa:	4602      	mov	r2, r0
 810b9fc:	68bb      	ldr	r3, [r7, #8]
 810b9fe:	1ad3      	subs	r3, r2, r3
 810ba00:	2b02      	cmp	r3, #2
 810ba02:	d901      	bls.n	810ba08 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810ba04:	2303      	movs	r3, #3
 810ba06:	e006      	b.n	810ba16 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810ba08:	4b05      	ldr	r3, [pc, #20]	@ (810ba20 <RCCEx_PLL2_Config+0x160>)
 810ba0a:	681b      	ldr	r3, [r3, #0]
 810ba0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810ba10:	2b00      	cmp	r3, #0
 810ba12:	d0f0      	beq.n	810b9f6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810ba14:	7bfb      	ldrb	r3, [r7, #15]
}
 810ba16:	4618      	mov	r0, r3
 810ba18:	3710      	adds	r7, #16
 810ba1a:	46bd      	mov	sp, r7
 810ba1c:	bd80      	pop	{r7, pc}
 810ba1e:	bf00      	nop
 810ba20:	58024400 	.word	0x58024400

0810ba24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810ba24:	b580      	push	{r7, lr}
 810ba26:	b084      	sub	sp, #16
 810ba28:	af00      	add	r7, sp, #0
 810ba2a:	6078      	str	r0, [r7, #4]
 810ba2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810ba2e:	2300      	movs	r3, #0
 810ba30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810ba32:	4b54      	ldr	r3, [pc, #336]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810ba34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ba36:	f003 0303 	and.w	r3, r3, #3
 810ba3a:	2b03      	cmp	r3, #3
 810ba3c:	d101      	bne.n	810ba42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810ba3e:	2301      	movs	r3, #1
 810ba40:	e09b      	b.n	810bb7a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810ba42:	4b50      	ldr	r3, [pc, #320]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810ba44:	681b      	ldr	r3, [r3, #0]
 810ba46:	4a4f      	ldr	r2, [pc, #316]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810ba48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810ba4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810ba4e:	f7fb fbbb 	bl	81071c8 <HAL_GetTick>
 810ba52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810ba54:	e008      	b.n	810ba68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810ba56:	f7fb fbb7 	bl	81071c8 <HAL_GetTick>
 810ba5a:	4602      	mov	r2, r0
 810ba5c:	68bb      	ldr	r3, [r7, #8]
 810ba5e:	1ad3      	subs	r3, r2, r3
 810ba60:	2b02      	cmp	r3, #2
 810ba62:	d901      	bls.n	810ba68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810ba64:	2303      	movs	r3, #3
 810ba66:	e088      	b.n	810bb7a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810ba68:	4b46      	ldr	r3, [pc, #280]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810ba6a:	681b      	ldr	r3, [r3, #0]
 810ba6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810ba70:	2b00      	cmp	r3, #0
 810ba72:	d1f0      	bne.n	810ba56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810ba74:	4b43      	ldr	r3, [pc, #268]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810ba76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ba78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810ba7c:	687b      	ldr	r3, [r7, #4]
 810ba7e:	681b      	ldr	r3, [r3, #0]
 810ba80:	051b      	lsls	r3, r3, #20
 810ba82:	4940      	ldr	r1, [pc, #256]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810ba84:	4313      	orrs	r3, r2
 810ba86:	628b      	str	r3, [r1, #40]	@ 0x28
 810ba88:	687b      	ldr	r3, [r7, #4]
 810ba8a:	685b      	ldr	r3, [r3, #4]
 810ba8c:	3b01      	subs	r3, #1
 810ba8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810ba92:	687b      	ldr	r3, [r7, #4]
 810ba94:	689b      	ldr	r3, [r3, #8]
 810ba96:	3b01      	subs	r3, #1
 810ba98:	025b      	lsls	r3, r3, #9
 810ba9a:	b29b      	uxth	r3, r3
 810ba9c:	431a      	orrs	r2, r3
 810ba9e:	687b      	ldr	r3, [r7, #4]
 810baa0:	68db      	ldr	r3, [r3, #12]
 810baa2:	3b01      	subs	r3, #1
 810baa4:	041b      	lsls	r3, r3, #16
 810baa6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810baaa:	431a      	orrs	r2, r3
 810baac:	687b      	ldr	r3, [r7, #4]
 810baae:	691b      	ldr	r3, [r3, #16]
 810bab0:	3b01      	subs	r3, #1
 810bab2:	061b      	lsls	r3, r3, #24
 810bab4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810bab8:	4932      	ldr	r1, [pc, #200]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810baba:	4313      	orrs	r3, r2
 810babc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810babe:	4b31      	ldr	r3, [pc, #196]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bac2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810bac6:	687b      	ldr	r3, [r7, #4]
 810bac8:	695b      	ldr	r3, [r3, #20]
 810baca:	492e      	ldr	r1, [pc, #184]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bacc:	4313      	orrs	r3, r2
 810bace:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810bad0:	4b2c      	ldr	r3, [pc, #176]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bad4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810bad8:	687b      	ldr	r3, [r7, #4]
 810bada:	699b      	ldr	r3, [r3, #24]
 810badc:	4929      	ldr	r1, [pc, #164]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bade:	4313      	orrs	r3, r2
 810bae0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810bae2:	4b28      	ldr	r3, [pc, #160]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bae6:	4a27      	ldr	r2, [pc, #156]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810baec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810baee:	4b25      	ldr	r3, [pc, #148]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810baf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810baf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810baf6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810bafa:	687a      	ldr	r2, [r7, #4]
 810bafc:	69d2      	ldr	r2, [r2, #28]
 810bafe:	00d2      	lsls	r2, r2, #3
 810bb00:	4920      	ldr	r1, [pc, #128]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb02:	4313      	orrs	r3, r2
 810bb04:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810bb06:	4b1f      	ldr	r3, [pc, #124]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb0a:	4a1e      	ldr	r2, [pc, #120]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810bb10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810bb12:	683b      	ldr	r3, [r7, #0]
 810bb14:	2b00      	cmp	r3, #0
 810bb16:	d106      	bne.n	810bb26 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810bb18:	4b1a      	ldr	r3, [pc, #104]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb1c:	4a19      	ldr	r2, [pc, #100]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810bb22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810bb24:	e00f      	b.n	810bb46 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810bb26:	683b      	ldr	r3, [r7, #0]
 810bb28:	2b01      	cmp	r3, #1
 810bb2a:	d106      	bne.n	810bb3a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810bb2c:	4b15      	ldr	r3, [pc, #84]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb30:	4a14      	ldr	r2, [pc, #80]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810bb36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810bb38:	e005      	b.n	810bb46 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810bb3a:	4b12      	ldr	r3, [pc, #72]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb3e:	4a11      	ldr	r2, [pc, #68]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810bb44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810bb46:	4b0f      	ldr	r3, [pc, #60]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb48:	681b      	ldr	r3, [r3, #0]
 810bb4a:	4a0e      	ldr	r2, [pc, #56]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810bb50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bb52:	f7fb fb39 	bl	81071c8 <HAL_GetTick>
 810bb56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bb58:	e008      	b.n	810bb6c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810bb5a:	f7fb fb35 	bl	81071c8 <HAL_GetTick>
 810bb5e:	4602      	mov	r2, r0
 810bb60:	68bb      	ldr	r3, [r7, #8]
 810bb62:	1ad3      	subs	r3, r2, r3
 810bb64:	2b02      	cmp	r3, #2
 810bb66:	d901      	bls.n	810bb6c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810bb68:	2303      	movs	r3, #3
 810bb6a:	e006      	b.n	810bb7a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bb6c:	4b05      	ldr	r3, [pc, #20]	@ (810bb84 <RCCEx_PLL3_Config+0x160>)
 810bb6e:	681b      	ldr	r3, [r3, #0]
 810bb70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bb74:	2b00      	cmp	r3, #0
 810bb76:	d0f0      	beq.n	810bb5a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810bb78:	7bfb      	ldrb	r3, [r7, #15]
}
 810bb7a:	4618      	mov	r0, r3
 810bb7c:	3710      	adds	r7, #16
 810bb7e:	46bd      	mov	sp, r7
 810bb80:	bd80      	pop	{r7, pc}
 810bb82:	bf00      	nop
 810bb84:	58024400 	.word	0x58024400

0810bb88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810bb88:	b580      	push	{r7, lr}
 810bb8a:	b082      	sub	sp, #8
 810bb8c:	af00      	add	r7, sp, #0
 810bb8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810bb90:	687b      	ldr	r3, [r7, #4]
 810bb92:	2b00      	cmp	r3, #0
 810bb94:	d101      	bne.n	810bb9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810bb96:	2301      	movs	r3, #1
 810bb98:	e049      	b.n	810bc2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810bb9a:	687b      	ldr	r3, [r7, #4]
 810bb9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810bba0:	b2db      	uxtb	r3, r3
 810bba2:	2b00      	cmp	r3, #0
 810bba4:	d106      	bne.n	810bbb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810bba6:	687b      	ldr	r3, [r7, #4]
 810bba8:	2200      	movs	r2, #0
 810bbaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810bbae:	6878      	ldr	r0, [r7, #4]
 810bbb0:	f000 f841 	bl	810bc36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810bbb4:	687b      	ldr	r3, [r7, #4]
 810bbb6:	2202      	movs	r2, #2
 810bbb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810bbbc:	687b      	ldr	r3, [r7, #4]
 810bbbe:	681a      	ldr	r2, [r3, #0]
 810bbc0:	687b      	ldr	r3, [r7, #4]
 810bbc2:	3304      	adds	r3, #4
 810bbc4:	4619      	mov	r1, r3
 810bbc6:	4610      	mov	r0, r2
 810bbc8:	f000 f9e8 	bl	810bf9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810bbcc:	687b      	ldr	r3, [r7, #4]
 810bbce:	2201      	movs	r2, #1
 810bbd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810bbd4:	687b      	ldr	r3, [r7, #4]
 810bbd6:	2201      	movs	r2, #1
 810bbd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810bbdc:	687b      	ldr	r3, [r7, #4]
 810bbde:	2201      	movs	r2, #1
 810bbe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810bbe4:	687b      	ldr	r3, [r7, #4]
 810bbe6:	2201      	movs	r2, #1
 810bbe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810bbec:	687b      	ldr	r3, [r7, #4]
 810bbee:	2201      	movs	r2, #1
 810bbf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810bbf4:	687b      	ldr	r3, [r7, #4]
 810bbf6:	2201      	movs	r2, #1
 810bbf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810bbfc:	687b      	ldr	r3, [r7, #4]
 810bbfe:	2201      	movs	r2, #1
 810bc00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810bc04:	687b      	ldr	r3, [r7, #4]
 810bc06:	2201      	movs	r2, #1
 810bc08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810bc0c:	687b      	ldr	r3, [r7, #4]
 810bc0e:	2201      	movs	r2, #1
 810bc10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810bc14:	687b      	ldr	r3, [r7, #4]
 810bc16:	2201      	movs	r2, #1
 810bc18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810bc1c:	687b      	ldr	r3, [r7, #4]
 810bc1e:	2201      	movs	r2, #1
 810bc20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810bc24:	687b      	ldr	r3, [r7, #4]
 810bc26:	2201      	movs	r2, #1
 810bc28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810bc2c:	2300      	movs	r3, #0
}
 810bc2e:	4618      	mov	r0, r3
 810bc30:	3708      	adds	r7, #8
 810bc32:	46bd      	mov	sp, r7
 810bc34:	bd80      	pop	{r7, pc}

0810bc36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810bc36:	b480      	push	{r7}
 810bc38:	b083      	sub	sp, #12
 810bc3a:	af00      	add	r7, sp, #0
 810bc3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810bc3e:	bf00      	nop
 810bc40:	370c      	adds	r7, #12
 810bc42:	46bd      	mov	sp, r7
 810bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc48:	4770      	bx	lr
	...

0810bc4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810bc4c:	b480      	push	{r7}
 810bc4e:	b085      	sub	sp, #20
 810bc50:	af00      	add	r7, sp, #0
 810bc52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810bc54:	687b      	ldr	r3, [r7, #4]
 810bc56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810bc5a:	b2db      	uxtb	r3, r3
 810bc5c:	2b01      	cmp	r3, #1
 810bc5e:	d001      	beq.n	810bc64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810bc60:	2301      	movs	r3, #1
 810bc62:	e054      	b.n	810bd0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810bc64:	687b      	ldr	r3, [r7, #4]
 810bc66:	2202      	movs	r2, #2
 810bc68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810bc6c:	687b      	ldr	r3, [r7, #4]
 810bc6e:	681b      	ldr	r3, [r3, #0]
 810bc70:	68da      	ldr	r2, [r3, #12]
 810bc72:	687b      	ldr	r3, [r7, #4]
 810bc74:	681b      	ldr	r3, [r3, #0]
 810bc76:	f042 0201 	orr.w	r2, r2, #1
 810bc7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810bc7c:	687b      	ldr	r3, [r7, #4]
 810bc7e:	681b      	ldr	r3, [r3, #0]
 810bc80:	4a26      	ldr	r2, [pc, #152]	@ (810bd1c <HAL_TIM_Base_Start_IT+0xd0>)
 810bc82:	4293      	cmp	r3, r2
 810bc84:	d022      	beq.n	810bccc <HAL_TIM_Base_Start_IT+0x80>
 810bc86:	687b      	ldr	r3, [r7, #4]
 810bc88:	681b      	ldr	r3, [r3, #0]
 810bc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bc8e:	d01d      	beq.n	810bccc <HAL_TIM_Base_Start_IT+0x80>
 810bc90:	687b      	ldr	r3, [r7, #4]
 810bc92:	681b      	ldr	r3, [r3, #0]
 810bc94:	4a22      	ldr	r2, [pc, #136]	@ (810bd20 <HAL_TIM_Base_Start_IT+0xd4>)
 810bc96:	4293      	cmp	r3, r2
 810bc98:	d018      	beq.n	810bccc <HAL_TIM_Base_Start_IT+0x80>
 810bc9a:	687b      	ldr	r3, [r7, #4]
 810bc9c:	681b      	ldr	r3, [r3, #0]
 810bc9e:	4a21      	ldr	r2, [pc, #132]	@ (810bd24 <HAL_TIM_Base_Start_IT+0xd8>)
 810bca0:	4293      	cmp	r3, r2
 810bca2:	d013      	beq.n	810bccc <HAL_TIM_Base_Start_IT+0x80>
 810bca4:	687b      	ldr	r3, [r7, #4]
 810bca6:	681b      	ldr	r3, [r3, #0]
 810bca8:	4a1f      	ldr	r2, [pc, #124]	@ (810bd28 <HAL_TIM_Base_Start_IT+0xdc>)
 810bcaa:	4293      	cmp	r3, r2
 810bcac:	d00e      	beq.n	810bccc <HAL_TIM_Base_Start_IT+0x80>
 810bcae:	687b      	ldr	r3, [r7, #4]
 810bcb0:	681b      	ldr	r3, [r3, #0]
 810bcb2:	4a1e      	ldr	r2, [pc, #120]	@ (810bd2c <HAL_TIM_Base_Start_IT+0xe0>)
 810bcb4:	4293      	cmp	r3, r2
 810bcb6:	d009      	beq.n	810bccc <HAL_TIM_Base_Start_IT+0x80>
 810bcb8:	687b      	ldr	r3, [r7, #4]
 810bcba:	681b      	ldr	r3, [r3, #0]
 810bcbc:	4a1c      	ldr	r2, [pc, #112]	@ (810bd30 <HAL_TIM_Base_Start_IT+0xe4>)
 810bcbe:	4293      	cmp	r3, r2
 810bcc0:	d004      	beq.n	810bccc <HAL_TIM_Base_Start_IT+0x80>
 810bcc2:	687b      	ldr	r3, [r7, #4]
 810bcc4:	681b      	ldr	r3, [r3, #0]
 810bcc6:	4a1b      	ldr	r2, [pc, #108]	@ (810bd34 <HAL_TIM_Base_Start_IT+0xe8>)
 810bcc8:	4293      	cmp	r3, r2
 810bcca:	d115      	bne.n	810bcf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810bccc:	687b      	ldr	r3, [r7, #4]
 810bcce:	681b      	ldr	r3, [r3, #0]
 810bcd0:	689a      	ldr	r2, [r3, #8]
 810bcd2:	4b19      	ldr	r3, [pc, #100]	@ (810bd38 <HAL_TIM_Base_Start_IT+0xec>)
 810bcd4:	4013      	ands	r3, r2
 810bcd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810bcd8:	68fb      	ldr	r3, [r7, #12]
 810bcda:	2b06      	cmp	r3, #6
 810bcdc:	d015      	beq.n	810bd0a <HAL_TIM_Base_Start_IT+0xbe>
 810bcde:	68fb      	ldr	r3, [r7, #12]
 810bce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bce4:	d011      	beq.n	810bd0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810bce6:	687b      	ldr	r3, [r7, #4]
 810bce8:	681b      	ldr	r3, [r3, #0]
 810bcea:	681a      	ldr	r2, [r3, #0]
 810bcec:	687b      	ldr	r3, [r7, #4]
 810bcee:	681b      	ldr	r3, [r3, #0]
 810bcf0:	f042 0201 	orr.w	r2, r2, #1
 810bcf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810bcf6:	e008      	b.n	810bd0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810bcf8:	687b      	ldr	r3, [r7, #4]
 810bcfa:	681b      	ldr	r3, [r3, #0]
 810bcfc:	681a      	ldr	r2, [r3, #0]
 810bcfe:	687b      	ldr	r3, [r7, #4]
 810bd00:	681b      	ldr	r3, [r3, #0]
 810bd02:	f042 0201 	orr.w	r2, r2, #1
 810bd06:	601a      	str	r2, [r3, #0]
 810bd08:	e000      	b.n	810bd0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810bd0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810bd0c:	2300      	movs	r3, #0
}
 810bd0e:	4618      	mov	r0, r3
 810bd10:	3714      	adds	r7, #20
 810bd12:	46bd      	mov	sp, r7
 810bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd18:	4770      	bx	lr
 810bd1a:	bf00      	nop
 810bd1c:	40010000 	.word	0x40010000
 810bd20:	40000400 	.word	0x40000400
 810bd24:	40000800 	.word	0x40000800
 810bd28:	40000c00 	.word	0x40000c00
 810bd2c:	40010400 	.word	0x40010400
 810bd30:	40001800 	.word	0x40001800
 810bd34:	40014000 	.word	0x40014000
 810bd38:	00010007 	.word	0x00010007

0810bd3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810bd3c:	b580      	push	{r7, lr}
 810bd3e:	b084      	sub	sp, #16
 810bd40:	af00      	add	r7, sp, #0
 810bd42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810bd44:	687b      	ldr	r3, [r7, #4]
 810bd46:	681b      	ldr	r3, [r3, #0]
 810bd48:	68db      	ldr	r3, [r3, #12]
 810bd4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810bd4c:	687b      	ldr	r3, [r7, #4]
 810bd4e:	681b      	ldr	r3, [r3, #0]
 810bd50:	691b      	ldr	r3, [r3, #16]
 810bd52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810bd54:	68bb      	ldr	r3, [r7, #8]
 810bd56:	f003 0302 	and.w	r3, r3, #2
 810bd5a:	2b00      	cmp	r3, #0
 810bd5c:	d020      	beq.n	810bda0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810bd5e:	68fb      	ldr	r3, [r7, #12]
 810bd60:	f003 0302 	and.w	r3, r3, #2
 810bd64:	2b00      	cmp	r3, #0
 810bd66:	d01b      	beq.n	810bda0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810bd68:	687b      	ldr	r3, [r7, #4]
 810bd6a:	681b      	ldr	r3, [r3, #0]
 810bd6c:	f06f 0202 	mvn.w	r2, #2
 810bd70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810bd72:	687b      	ldr	r3, [r7, #4]
 810bd74:	2201      	movs	r2, #1
 810bd76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810bd78:	687b      	ldr	r3, [r7, #4]
 810bd7a:	681b      	ldr	r3, [r3, #0]
 810bd7c:	699b      	ldr	r3, [r3, #24]
 810bd7e:	f003 0303 	and.w	r3, r3, #3
 810bd82:	2b00      	cmp	r3, #0
 810bd84:	d003      	beq.n	810bd8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810bd86:	6878      	ldr	r0, [r7, #4]
 810bd88:	f000 f8e9 	bl	810bf5e <HAL_TIM_IC_CaptureCallback>
 810bd8c:	e005      	b.n	810bd9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810bd8e:	6878      	ldr	r0, [r7, #4]
 810bd90:	f000 f8db 	bl	810bf4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810bd94:	6878      	ldr	r0, [r7, #4]
 810bd96:	f000 f8ec 	bl	810bf72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810bd9a:	687b      	ldr	r3, [r7, #4]
 810bd9c:	2200      	movs	r2, #0
 810bd9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810bda0:	68bb      	ldr	r3, [r7, #8]
 810bda2:	f003 0304 	and.w	r3, r3, #4
 810bda6:	2b00      	cmp	r3, #0
 810bda8:	d020      	beq.n	810bdec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810bdaa:	68fb      	ldr	r3, [r7, #12]
 810bdac:	f003 0304 	and.w	r3, r3, #4
 810bdb0:	2b00      	cmp	r3, #0
 810bdb2:	d01b      	beq.n	810bdec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810bdb4:	687b      	ldr	r3, [r7, #4]
 810bdb6:	681b      	ldr	r3, [r3, #0]
 810bdb8:	f06f 0204 	mvn.w	r2, #4
 810bdbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810bdbe:	687b      	ldr	r3, [r7, #4]
 810bdc0:	2202      	movs	r2, #2
 810bdc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810bdc4:	687b      	ldr	r3, [r7, #4]
 810bdc6:	681b      	ldr	r3, [r3, #0]
 810bdc8:	699b      	ldr	r3, [r3, #24]
 810bdca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810bdce:	2b00      	cmp	r3, #0
 810bdd0:	d003      	beq.n	810bdda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810bdd2:	6878      	ldr	r0, [r7, #4]
 810bdd4:	f000 f8c3 	bl	810bf5e <HAL_TIM_IC_CaptureCallback>
 810bdd8:	e005      	b.n	810bde6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810bdda:	6878      	ldr	r0, [r7, #4]
 810bddc:	f000 f8b5 	bl	810bf4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810bde0:	6878      	ldr	r0, [r7, #4]
 810bde2:	f000 f8c6 	bl	810bf72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810bde6:	687b      	ldr	r3, [r7, #4]
 810bde8:	2200      	movs	r2, #0
 810bdea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810bdec:	68bb      	ldr	r3, [r7, #8]
 810bdee:	f003 0308 	and.w	r3, r3, #8
 810bdf2:	2b00      	cmp	r3, #0
 810bdf4:	d020      	beq.n	810be38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810bdf6:	68fb      	ldr	r3, [r7, #12]
 810bdf8:	f003 0308 	and.w	r3, r3, #8
 810bdfc:	2b00      	cmp	r3, #0
 810bdfe:	d01b      	beq.n	810be38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810be00:	687b      	ldr	r3, [r7, #4]
 810be02:	681b      	ldr	r3, [r3, #0]
 810be04:	f06f 0208 	mvn.w	r2, #8
 810be08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810be0a:	687b      	ldr	r3, [r7, #4]
 810be0c:	2204      	movs	r2, #4
 810be0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810be10:	687b      	ldr	r3, [r7, #4]
 810be12:	681b      	ldr	r3, [r3, #0]
 810be14:	69db      	ldr	r3, [r3, #28]
 810be16:	f003 0303 	and.w	r3, r3, #3
 810be1a:	2b00      	cmp	r3, #0
 810be1c:	d003      	beq.n	810be26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810be1e:	6878      	ldr	r0, [r7, #4]
 810be20:	f000 f89d 	bl	810bf5e <HAL_TIM_IC_CaptureCallback>
 810be24:	e005      	b.n	810be32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810be26:	6878      	ldr	r0, [r7, #4]
 810be28:	f000 f88f 	bl	810bf4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810be2c:	6878      	ldr	r0, [r7, #4]
 810be2e:	f000 f8a0 	bl	810bf72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810be32:	687b      	ldr	r3, [r7, #4]
 810be34:	2200      	movs	r2, #0
 810be36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810be38:	68bb      	ldr	r3, [r7, #8]
 810be3a:	f003 0310 	and.w	r3, r3, #16
 810be3e:	2b00      	cmp	r3, #0
 810be40:	d020      	beq.n	810be84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810be42:	68fb      	ldr	r3, [r7, #12]
 810be44:	f003 0310 	and.w	r3, r3, #16
 810be48:	2b00      	cmp	r3, #0
 810be4a:	d01b      	beq.n	810be84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810be4c:	687b      	ldr	r3, [r7, #4]
 810be4e:	681b      	ldr	r3, [r3, #0]
 810be50:	f06f 0210 	mvn.w	r2, #16
 810be54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810be56:	687b      	ldr	r3, [r7, #4]
 810be58:	2208      	movs	r2, #8
 810be5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810be5c:	687b      	ldr	r3, [r7, #4]
 810be5e:	681b      	ldr	r3, [r3, #0]
 810be60:	69db      	ldr	r3, [r3, #28]
 810be62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810be66:	2b00      	cmp	r3, #0
 810be68:	d003      	beq.n	810be72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810be6a:	6878      	ldr	r0, [r7, #4]
 810be6c:	f000 f877 	bl	810bf5e <HAL_TIM_IC_CaptureCallback>
 810be70:	e005      	b.n	810be7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810be72:	6878      	ldr	r0, [r7, #4]
 810be74:	f000 f869 	bl	810bf4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810be78:	6878      	ldr	r0, [r7, #4]
 810be7a:	f000 f87a 	bl	810bf72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810be7e:	687b      	ldr	r3, [r7, #4]
 810be80:	2200      	movs	r2, #0
 810be82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810be84:	68bb      	ldr	r3, [r7, #8]
 810be86:	f003 0301 	and.w	r3, r3, #1
 810be8a:	2b00      	cmp	r3, #0
 810be8c:	d00c      	beq.n	810bea8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810be8e:	68fb      	ldr	r3, [r7, #12]
 810be90:	f003 0301 	and.w	r3, r3, #1
 810be94:	2b00      	cmp	r3, #0
 810be96:	d007      	beq.n	810bea8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810be98:	687b      	ldr	r3, [r7, #4]
 810be9a:	681b      	ldr	r3, [r3, #0]
 810be9c:	f06f 0201 	mvn.w	r2, #1
 810bea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810bea2:	6878      	ldr	r0, [r7, #4]
 810bea4:	f7f4 fce8 	bl	8100878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810bea8:	68bb      	ldr	r3, [r7, #8]
 810beaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810beae:	2b00      	cmp	r3, #0
 810beb0:	d104      	bne.n	810bebc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810beb2:	68bb      	ldr	r3, [r7, #8]
 810beb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810beb8:	2b00      	cmp	r3, #0
 810beba:	d00c      	beq.n	810bed6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810bebc:	68fb      	ldr	r3, [r7, #12]
 810bebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bec2:	2b00      	cmp	r3, #0
 810bec4:	d007      	beq.n	810bed6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810bec6:	687b      	ldr	r3, [r7, #4]
 810bec8:	681b      	ldr	r3, [r3, #0]
 810beca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810bece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810bed0:	6878      	ldr	r0, [r7, #4]
 810bed2:	f000 f913 	bl	810c0fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810bed6:	68bb      	ldr	r3, [r7, #8]
 810bed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bedc:	2b00      	cmp	r3, #0
 810bede:	d00c      	beq.n	810befa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810bee0:	68fb      	ldr	r3, [r7, #12]
 810bee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bee6:	2b00      	cmp	r3, #0
 810bee8:	d007      	beq.n	810befa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810beea:	687b      	ldr	r3, [r7, #4]
 810beec:	681b      	ldr	r3, [r3, #0]
 810beee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810bef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810bef4:	6878      	ldr	r0, [r7, #4]
 810bef6:	f000 f90b 	bl	810c110 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810befa:	68bb      	ldr	r3, [r7, #8]
 810befc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810bf00:	2b00      	cmp	r3, #0
 810bf02:	d00c      	beq.n	810bf1e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810bf04:	68fb      	ldr	r3, [r7, #12]
 810bf06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810bf0a:	2b00      	cmp	r3, #0
 810bf0c:	d007      	beq.n	810bf1e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810bf0e:	687b      	ldr	r3, [r7, #4]
 810bf10:	681b      	ldr	r3, [r3, #0]
 810bf12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810bf16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810bf18:	6878      	ldr	r0, [r7, #4]
 810bf1a:	f000 f834 	bl	810bf86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810bf1e:	68bb      	ldr	r3, [r7, #8]
 810bf20:	f003 0320 	and.w	r3, r3, #32
 810bf24:	2b00      	cmp	r3, #0
 810bf26:	d00c      	beq.n	810bf42 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810bf28:	68fb      	ldr	r3, [r7, #12]
 810bf2a:	f003 0320 	and.w	r3, r3, #32
 810bf2e:	2b00      	cmp	r3, #0
 810bf30:	d007      	beq.n	810bf42 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810bf32:	687b      	ldr	r3, [r7, #4]
 810bf34:	681b      	ldr	r3, [r3, #0]
 810bf36:	f06f 0220 	mvn.w	r2, #32
 810bf3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810bf3c:	6878      	ldr	r0, [r7, #4]
 810bf3e:	f000 f8d3 	bl	810c0e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810bf42:	bf00      	nop
 810bf44:	3710      	adds	r7, #16
 810bf46:	46bd      	mov	sp, r7
 810bf48:	bd80      	pop	{r7, pc}

0810bf4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810bf4a:	b480      	push	{r7}
 810bf4c:	b083      	sub	sp, #12
 810bf4e:	af00      	add	r7, sp, #0
 810bf50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810bf52:	bf00      	nop
 810bf54:	370c      	adds	r7, #12
 810bf56:	46bd      	mov	sp, r7
 810bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf5c:	4770      	bx	lr

0810bf5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810bf5e:	b480      	push	{r7}
 810bf60:	b083      	sub	sp, #12
 810bf62:	af00      	add	r7, sp, #0
 810bf64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810bf66:	bf00      	nop
 810bf68:	370c      	adds	r7, #12
 810bf6a:	46bd      	mov	sp, r7
 810bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf70:	4770      	bx	lr

0810bf72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810bf72:	b480      	push	{r7}
 810bf74:	b083      	sub	sp, #12
 810bf76:	af00      	add	r7, sp, #0
 810bf78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810bf7a:	bf00      	nop
 810bf7c:	370c      	adds	r7, #12
 810bf7e:	46bd      	mov	sp, r7
 810bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf84:	4770      	bx	lr

0810bf86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810bf86:	b480      	push	{r7}
 810bf88:	b083      	sub	sp, #12
 810bf8a:	af00      	add	r7, sp, #0
 810bf8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810bf8e:	bf00      	nop
 810bf90:	370c      	adds	r7, #12
 810bf92:	46bd      	mov	sp, r7
 810bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf98:	4770      	bx	lr
	...

0810bf9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810bf9c:	b480      	push	{r7}
 810bf9e:	b085      	sub	sp, #20
 810bfa0:	af00      	add	r7, sp, #0
 810bfa2:	6078      	str	r0, [r7, #4]
 810bfa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810bfa6:	687b      	ldr	r3, [r7, #4]
 810bfa8:	681b      	ldr	r3, [r3, #0]
 810bfaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810bfac:	687b      	ldr	r3, [r7, #4]
 810bfae:	4a46      	ldr	r2, [pc, #280]	@ (810c0c8 <TIM_Base_SetConfig+0x12c>)
 810bfb0:	4293      	cmp	r3, r2
 810bfb2:	d013      	beq.n	810bfdc <TIM_Base_SetConfig+0x40>
 810bfb4:	687b      	ldr	r3, [r7, #4]
 810bfb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bfba:	d00f      	beq.n	810bfdc <TIM_Base_SetConfig+0x40>
 810bfbc:	687b      	ldr	r3, [r7, #4]
 810bfbe:	4a43      	ldr	r2, [pc, #268]	@ (810c0cc <TIM_Base_SetConfig+0x130>)
 810bfc0:	4293      	cmp	r3, r2
 810bfc2:	d00b      	beq.n	810bfdc <TIM_Base_SetConfig+0x40>
 810bfc4:	687b      	ldr	r3, [r7, #4]
 810bfc6:	4a42      	ldr	r2, [pc, #264]	@ (810c0d0 <TIM_Base_SetConfig+0x134>)
 810bfc8:	4293      	cmp	r3, r2
 810bfca:	d007      	beq.n	810bfdc <TIM_Base_SetConfig+0x40>
 810bfcc:	687b      	ldr	r3, [r7, #4]
 810bfce:	4a41      	ldr	r2, [pc, #260]	@ (810c0d4 <TIM_Base_SetConfig+0x138>)
 810bfd0:	4293      	cmp	r3, r2
 810bfd2:	d003      	beq.n	810bfdc <TIM_Base_SetConfig+0x40>
 810bfd4:	687b      	ldr	r3, [r7, #4]
 810bfd6:	4a40      	ldr	r2, [pc, #256]	@ (810c0d8 <TIM_Base_SetConfig+0x13c>)
 810bfd8:	4293      	cmp	r3, r2
 810bfda:	d108      	bne.n	810bfee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810bfdc:	68fb      	ldr	r3, [r7, #12]
 810bfde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bfe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810bfe4:	683b      	ldr	r3, [r7, #0]
 810bfe6:	685b      	ldr	r3, [r3, #4]
 810bfe8:	68fa      	ldr	r2, [r7, #12]
 810bfea:	4313      	orrs	r3, r2
 810bfec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810bfee:	687b      	ldr	r3, [r7, #4]
 810bff0:	4a35      	ldr	r2, [pc, #212]	@ (810c0c8 <TIM_Base_SetConfig+0x12c>)
 810bff2:	4293      	cmp	r3, r2
 810bff4:	d01f      	beq.n	810c036 <TIM_Base_SetConfig+0x9a>
 810bff6:	687b      	ldr	r3, [r7, #4]
 810bff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bffc:	d01b      	beq.n	810c036 <TIM_Base_SetConfig+0x9a>
 810bffe:	687b      	ldr	r3, [r7, #4]
 810c000:	4a32      	ldr	r2, [pc, #200]	@ (810c0cc <TIM_Base_SetConfig+0x130>)
 810c002:	4293      	cmp	r3, r2
 810c004:	d017      	beq.n	810c036 <TIM_Base_SetConfig+0x9a>
 810c006:	687b      	ldr	r3, [r7, #4]
 810c008:	4a31      	ldr	r2, [pc, #196]	@ (810c0d0 <TIM_Base_SetConfig+0x134>)
 810c00a:	4293      	cmp	r3, r2
 810c00c:	d013      	beq.n	810c036 <TIM_Base_SetConfig+0x9a>
 810c00e:	687b      	ldr	r3, [r7, #4]
 810c010:	4a30      	ldr	r2, [pc, #192]	@ (810c0d4 <TIM_Base_SetConfig+0x138>)
 810c012:	4293      	cmp	r3, r2
 810c014:	d00f      	beq.n	810c036 <TIM_Base_SetConfig+0x9a>
 810c016:	687b      	ldr	r3, [r7, #4]
 810c018:	4a2f      	ldr	r2, [pc, #188]	@ (810c0d8 <TIM_Base_SetConfig+0x13c>)
 810c01a:	4293      	cmp	r3, r2
 810c01c:	d00b      	beq.n	810c036 <TIM_Base_SetConfig+0x9a>
 810c01e:	687b      	ldr	r3, [r7, #4]
 810c020:	4a2e      	ldr	r2, [pc, #184]	@ (810c0dc <TIM_Base_SetConfig+0x140>)
 810c022:	4293      	cmp	r3, r2
 810c024:	d007      	beq.n	810c036 <TIM_Base_SetConfig+0x9a>
 810c026:	687b      	ldr	r3, [r7, #4]
 810c028:	4a2d      	ldr	r2, [pc, #180]	@ (810c0e0 <TIM_Base_SetConfig+0x144>)
 810c02a:	4293      	cmp	r3, r2
 810c02c:	d003      	beq.n	810c036 <TIM_Base_SetConfig+0x9a>
 810c02e:	687b      	ldr	r3, [r7, #4]
 810c030:	4a2c      	ldr	r2, [pc, #176]	@ (810c0e4 <TIM_Base_SetConfig+0x148>)
 810c032:	4293      	cmp	r3, r2
 810c034:	d108      	bne.n	810c048 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810c036:	68fb      	ldr	r3, [r7, #12]
 810c038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810c03c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810c03e:	683b      	ldr	r3, [r7, #0]
 810c040:	68db      	ldr	r3, [r3, #12]
 810c042:	68fa      	ldr	r2, [r7, #12]
 810c044:	4313      	orrs	r3, r2
 810c046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810c048:	68fb      	ldr	r3, [r7, #12]
 810c04a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810c04e:	683b      	ldr	r3, [r7, #0]
 810c050:	695b      	ldr	r3, [r3, #20]
 810c052:	4313      	orrs	r3, r2
 810c054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810c056:	687b      	ldr	r3, [r7, #4]
 810c058:	68fa      	ldr	r2, [r7, #12]
 810c05a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810c05c:	683b      	ldr	r3, [r7, #0]
 810c05e:	689a      	ldr	r2, [r3, #8]
 810c060:	687b      	ldr	r3, [r7, #4]
 810c062:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810c064:	683b      	ldr	r3, [r7, #0]
 810c066:	681a      	ldr	r2, [r3, #0]
 810c068:	687b      	ldr	r3, [r7, #4]
 810c06a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810c06c:	687b      	ldr	r3, [r7, #4]
 810c06e:	4a16      	ldr	r2, [pc, #88]	@ (810c0c8 <TIM_Base_SetConfig+0x12c>)
 810c070:	4293      	cmp	r3, r2
 810c072:	d00f      	beq.n	810c094 <TIM_Base_SetConfig+0xf8>
 810c074:	687b      	ldr	r3, [r7, #4]
 810c076:	4a18      	ldr	r2, [pc, #96]	@ (810c0d8 <TIM_Base_SetConfig+0x13c>)
 810c078:	4293      	cmp	r3, r2
 810c07a:	d00b      	beq.n	810c094 <TIM_Base_SetConfig+0xf8>
 810c07c:	687b      	ldr	r3, [r7, #4]
 810c07e:	4a17      	ldr	r2, [pc, #92]	@ (810c0dc <TIM_Base_SetConfig+0x140>)
 810c080:	4293      	cmp	r3, r2
 810c082:	d007      	beq.n	810c094 <TIM_Base_SetConfig+0xf8>
 810c084:	687b      	ldr	r3, [r7, #4]
 810c086:	4a16      	ldr	r2, [pc, #88]	@ (810c0e0 <TIM_Base_SetConfig+0x144>)
 810c088:	4293      	cmp	r3, r2
 810c08a:	d003      	beq.n	810c094 <TIM_Base_SetConfig+0xf8>
 810c08c:	687b      	ldr	r3, [r7, #4]
 810c08e:	4a15      	ldr	r2, [pc, #84]	@ (810c0e4 <TIM_Base_SetConfig+0x148>)
 810c090:	4293      	cmp	r3, r2
 810c092:	d103      	bne.n	810c09c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810c094:	683b      	ldr	r3, [r7, #0]
 810c096:	691a      	ldr	r2, [r3, #16]
 810c098:	687b      	ldr	r3, [r7, #4]
 810c09a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810c09c:	687b      	ldr	r3, [r7, #4]
 810c09e:	2201      	movs	r2, #1
 810c0a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810c0a2:	687b      	ldr	r3, [r7, #4]
 810c0a4:	691b      	ldr	r3, [r3, #16]
 810c0a6:	f003 0301 	and.w	r3, r3, #1
 810c0aa:	2b01      	cmp	r3, #1
 810c0ac:	d105      	bne.n	810c0ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810c0ae:	687b      	ldr	r3, [r7, #4]
 810c0b0:	691b      	ldr	r3, [r3, #16]
 810c0b2:	f023 0201 	bic.w	r2, r3, #1
 810c0b6:	687b      	ldr	r3, [r7, #4]
 810c0b8:	611a      	str	r2, [r3, #16]
  }
}
 810c0ba:	bf00      	nop
 810c0bc:	3714      	adds	r7, #20
 810c0be:	46bd      	mov	sp, r7
 810c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0c4:	4770      	bx	lr
 810c0c6:	bf00      	nop
 810c0c8:	40010000 	.word	0x40010000
 810c0cc:	40000400 	.word	0x40000400
 810c0d0:	40000800 	.word	0x40000800
 810c0d4:	40000c00 	.word	0x40000c00
 810c0d8:	40010400 	.word	0x40010400
 810c0dc:	40014000 	.word	0x40014000
 810c0e0:	40014400 	.word	0x40014400
 810c0e4:	40014800 	.word	0x40014800

0810c0e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810c0e8:	b480      	push	{r7}
 810c0ea:	b083      	sub	sp, #12
 810c0ec:	af00      	add	r7, sp, #0
 810c0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810c0f0:	bf00      	nop
 810c0f2:	370c      	adds	r7, #12
 810c0f4:	46bd      	mov	sp, r7
 810c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0fa:	4770      	bx	lr

0810c0fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810c0fc:	b480      	push	{r7}
 810c0fe:	b083      	sub	sp, #12
 810c100:	af00      	add	r7, sp, #0
 810c102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810c104:	bf00      	nop
 810c106:	370c      	adds	r7, #12
 810c108:	46bd      	mov	sp, r7
 810c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c10e:	4770      	bx	lr

0810c110 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810c110:	b480      	push	{r7}
 810c112:	b083      	sub	sp, #12
 810c114:	af00      	add	r7, sp, #0
 810c116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810c118:	bf00      	nop
 810c11a:	370c      	adds	r7, #12
 810c11c:	46bd      	mov	sp, r7
 810c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c122:	4770      	bx	lr

0810c124 <__NVIC_SetPriority>:
{
 810c124:	b480      	push	{r7}
 810c126:	b083      	sub	sp, #12
 810c128:	af00      	add	r7, sp, #0
 810c12a:	4603      	mov	r3, r0
 810c12c:	6039      	str	r1, [r7, #0]
 810c12e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810c130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810c134:	2b00      	cmp	r3, #0
 810c136:	db0a      	blt.n	810c14e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810c138:	683b      	ldr	r3, [r7, #0]
 810c13a:	b2da      	uxtb	r2, r3
 810c13c:	490c      	ldr	r1, [pc, #48]	@ (810c170 <__NVIC_SetPriority+0x4c>)
 810c13e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810c142:	0112      	lsls	r2, r2, #4
 810c144:	b2d2      	uxtb	r2, r2
 810c146:	440b      	add	r3, r1
 810c148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810c14c:	e00a      	b.n	810c164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810c14e:	683b      	ldr	r3, [r7, #0]
 810c150:	b2da      	uxtb	r2, r3
 810c152:	4908      	ldr	r1, [pc, #32]	@ (810c174 <__NVIC_SetPriority+0x50>)
 810c154:	88fb      	ldrh	r3, [r7, #6]
 810c156:	f003 030f 	and.w	r3, r3, #15
 810c15a:	3b04      	subs	r3, #4
 810c15c:	0112      	lsls	r2, r2, #4
 810c15e:	b2d2      	uxtb	r2, r2
 810c160:	440b      	add	r3, r1
 810c162:	761a      	strb	r2, [r3, #24]
}
 810c164:	bf00      	nop
 810c166:	370c      	adds	r7, #12
 810c168:	46bd      	mov	sp, r7
 810c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c16e:	4770      	bx	lr
 810c170:	e000e100 	.word	0xe000e100
 810c174:	e000ed00 	.word	0xe000ed00

0810c178 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810c178:	b580      	push	{r7, lr}
 810c17a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810c17c:	4b05      	ldr	r3, [pc, #20]	@ (810c194 <SysTick_Handler+0x1c>)
 810c17e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810c180:	f003 fd5c 	bl	810fc3c <xTaskGetSchedulerState>
 810c184:	4603      	mov	r3, r0
 810c186:	2b01      	cmp	r3, #1
 810c188:	d001      	beq.n	810c18e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810c18a:	f001 f915 	bl	810d3b8 <xPortSysTickHandler>
  }
}
 810c18e:	bf00      	nop
 810c190:	bd80      	pop	{r7, pc}
 810c192:	bf00      	nop
 810c194:	e000e010 	.word	0xe000e010

0810c198 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810c198:	b580      	push	{r7, lr}
 810c19a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810c19c:	2100      	movs	r1, #0
 810c19e:	f06f 0004 	mvn.w	r0, #4
 810c1a2:	f7ff ffbf 	bl	810c124 <__NVIC_SetPriority>
#endif
}
 810c1a6:	bf00      	nop
 810c1a8:	bd80      	pop	{r7, pc}
	...

0810c1ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810c1ac:	b480      	push	{r7}
 810c1ae:	b083      	sub	sp, #12
 810c1b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c1b2:	f3ef 8305 	mrs	r3, IPSR
 810c1b6:	603b      	str	r3, [r7, #0]
  return(result);
 810c1b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810c1ba:	2b00      	cmp	r3, #0
 810c1bc:	d003      	beq.n	810c1c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810c1be:	f06f 0305 	mvn.w	r3, #5
 810c1c2:	607b      	str	r3, [r7, #4]
 810c1c4:	e00c      	b.n	810c1e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810c1c6:	4b0a      	ldr	r3, [pc, #40]	@ (810c1f0 <osKernelInitialize+0x44>)
 810c1c8:	681b      	ldr	r3, [r3, #0]
 810c1ca:	2b00      	cmp	r3, #0
 810c1cc:	d105      	bne.n	810c1da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810c1ce:	4b08      	ldr	r3, [pc, #32]	@ (810c1f0 <osKernelInitialize+0x44>)
 810c1d0:	2201      	movs	r2, #1
 810c1d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810c1d4:	2300      	movs	r3, #0
 810c1d6:	607b      	str	r3, [r7, #4]
 810c1d8:	e002      	b.n	810c1e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810c1da:	f04f 33ff 	mov.w	r3, #4294967295
 810c1de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810c1e0:	687b      	ldr	r3, [r7, #4]
}
 810c1e2:	4618      	mov	r0, r3
 810c1e4:	370c      	adds	r7, #12
 810c1e6:	46bd      	mov	sp, r7
 810c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1ec:	4770      	bx	lr
 810c1ee:	bf00      	nop
 810c1f0:	10000368 	.word	0x10000368

0810c1f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810c1f4:	b580      	push	{r7, lr}
 810c1f6:	b082      	sub	sp, #8
 810c1f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c1fa:	f3ef 8305 	mrs	r3, IPSR
 810c1fe:	603b      	str	r3, [r7, #0]
  return(result);
 810c200:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810c202:	2b00      	cmp	r3, #0
 810c204:	d003      	beq.n	810c20e <osKernelStart+0x1a>
    stat = osErrorISR;
 810c206:	f06f 0305 	mvn.w	r3, #5
 810c20a:	607b      	str	r3, [r7, #4]
 810c20c:	e010      	b.n	810c230 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810c20e:	4b0b      	ldr	r3, [pc, #44]	@ (810c23c <osKernelStart+0x48>)
 810c210:	681b      	ldr	r3, [r3, #0]
 810c212:	2b01      	cmp	r3, #1
 810c214:	d109      	bne.n	810c22a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810c216:	f7ff ffbf 	bl	810c198 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810c21a:	4b08      	ldr	r3, [pc, #32]	@ (810c23c <osKernelStart+0x48>)
 810c21c:	2202      	movs	r2, #2
 810c21e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810c220:	f003 f85e 	bl	810f2e0 <vTaskStartScheduler>
      stat = osOK;
 810c224:	2300      	movs	r3, #0
 810c226:	607b      	str	r3, [r7, #4]
 810c228:	e002      	b.n	810c230 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810c22a:	f04f 33ff 	mov.w	r3, #4294967295
 810c22e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810c230:	687b      	ldr	r3, [r7, #4]
}
 810c232:	4618      	mov	r0, r3
 810c234:	3708      	adds	r7, #8
 810c236:	46bd      	mov	sp, r7
 810c238:	bd80      	pop	{r7, pc}
 810c23a:	bf00      	nop
 810c23c:	10000368 	.word	0x10000368

0810c240 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 810c240:	b580      	push	{r7, lr}
 810c242:	b082      	sub	sp, #8
 810c244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c246:	f3ef 8305 	mrs	r3, IPSR
 810c24a:	603b      	str	r3, [r7, #0]
  return(result);
 810c24c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 810c24e:	2b00      	cmp	r3, #0
 810c250:	d003      	beq.n	810c25a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 810c252:	f003 f971 	bl	810f538 <xTaskGetTickCountFromISR>
 810c256:	6078      	str	r0, [r7, #4]
 810c258:	e002      	b.n	810c260 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 810c25a:	f003 f95d 	bl	810f518 <xTaskGetTickCount>
 810c25e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 810c260:	687b      	ldr	r3, [r7, #4]
}
 810c262:	4618      	mov	r0, r3
 810c264:	3708      	adds	r7, #8
 810c266:	46bd      	mov	sp, r7
 810c268:	bd80      	pop	{r7, pc}

0810c26a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810c26a:	b580      	push	{r7, lr}
 810c26c:	b08e      	sub	sp, #56	@ 0x38
 810c26e:	af04      	add	r7, sp, #16
 810c270:	60f8      	str	r0, [r7, #12]
 810c272:	60b9      	str	r1, [r7, #8]
 810c274:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810c276:	2300      	movs	r3, #0
 810c278:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c27a:	f3ef 8305 	mrs	r3, IPSR
 810c27e:	617b      	str	r3, [r7, #20]
  return(result);
 810c280:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810c282:	2b00      	cmp	r3, #0
 810c284:	d17e      	bne.n	810c384 <osThreadNew+0x11a>
 810c286:	68fb      	ldr	r3, [r7, #12]
 810c288:	2b00      	cmp	r3, #0
 810c28a:	d07b      	beq.n	810c384 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810c28c:	2380      	movs	r3, #128	@ 0x80
 810c28e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810c290:	2318      	movs	r3, #24
 810c292:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810c294:	2300      	movs	r3, #0
 810c296:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810c298:	f04f 33ff 	mov.w	r3, #4294967295
 810c29c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810c29e:	687b      	ldr	r3, [r7, #4]
 810c2a0:	2b00      	cmp	r3, #0
 810c2a2:	d045      	beq.n	810c330 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810c2a4:	687b      	ldr	r3, [r7, #4]
 810c2a6:	681b      	ldr	r3, [r3, #0]
 810c2a8:	2b00      	cmp	r3, #0
 810c2aa:	d002      	beq.n	810c2b2 <osThreadNew+0x48>
        name = attr->name;
 810c2ac:	687b      	ldr	r3, [r7, #4]
 810c2ae:	681b      	ldr	r3, [r3, #0]
 810c2b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810c2b2:	687b      	ldr	r3, [r7, #4]
 810c2b4:	699b      	ldr	r3, [r3, #24]
 810c2b6:	2b00      	cmp	r3, #0
 810c2b8:	d002      	beq.n	810c2c0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810c2ba:	687b      	ldr	r3, [r7, #4]
 810c2bc:	699b      	ldr	r3, [r3, #24]
 810c2be:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810c2c0:	69fb      	ldr	r3, [r7, #28]
 810c2c2:	2b00      	cmp	r3, #0
 810c2c4:	d008      	beq.n	810c2d8 <osThreadNew+0x6e>
 810c2c6:	69fb      	ldr	r3, [r7, #28]
 810c2c8:	2b38      	cmp	r3, #56	@ 0x38
 810c2ca:	d805      	bhi.n	810c2d8 <osThreadNew+0x6e>
 810c2cc:	687b      	ldr	r3, [r7, #4]
 810c2ce:	685b      	ldr	r3, [r3, #4]
 810c2d0:	f003 0301 	and.w	r3, r3, #1
 810c2d4:	2b00      	cmp	r3, #0
 810c2d6:	d001      	beq.n	810c2dc <osThreadNew+0x72>
        return (NULL);
 810c2d8:	2300      	movs	r3, #0
 810c2da:	e054      	b.n	810c386 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810c2dc:	687b      	ldr	r3, [r7, #4]
 810c2de:	695b      	ldr	r3, [r3, #20]
 810c2e0:	2b00      	cmp	r3, #0
 810c2e2:	d003      	beq.n	810c2ec <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810c2e4:	687b      	ldr	r3, [r7, #4]
 810c2e6:	695b      	ldr	r3, [r3, #20]
 810c2e8:	089b      	lsrs	r3, r3, #2
 810c2ea:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810c2ec:	687b      	ldr	r3, [r7, #4]
 810c2ee:	689b      	ldr	r3, [r3, #8]
 810c2f0:	2b00      	cmp	r3, #0
 810c2f2:	d00e      	beq.n	810c312 <osThreadNew+0xa8>
 810c2f4:	687b      	ldr	r3, [r7, #4]
 810c2f6:	68db      	ldr	r3, [r3, #12]
 810c2f8:	2ba7      	cmp	r3, #167	@ 0xa7
 810c2fa:	d90a      	bls.n	810c312 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810c2fc:	687b      	ldr	r3, [r7, #4]
 810c2fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810c300:	2b00      	cmp	r3, #0
 810c302:	d006      	beq.n	810c312 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810c304:	687b      	ldr	r3, [r7, #4]
 810c306:	695b      	ldr	r3, [r3, #20]
 810c308:	2b00      	cmp	r3, #0
 810c30a:	d002      	beq.n	810c312 <osThreadNew+0xa8>
        mem = 1;
 810c30c:	2301      	movs	r3, #1
 810c30e:	61bb      	str	r3, [r7, #24]
 810c310:	e010      	b.n	810c334 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810c312:	687b      	ldr	r3, [r7, #4]
 810c314:	689b      	ldr	r3, [r3, #8]
 810c316:	2b00      	cmp	r3, #0
 810c318:	d10c      	bne.n	810c334 <osThreadNew+0xca>
 810c31a:	687b      	ldr	r3, [r7, #4]
 810c31c:	68db      	ldr	r3, [r3, #12]
 810c31e:	2b00      	cmp	r3, #0
 810c320:	d108      	bne.n	810c334 <osThreadNew+0xca>
 810c322:	687b      	ldr	r3, [r7, #4]
 810c324:	691b      	ldr	r3, [r3, #16]
 810c326:	2b00      	cmp	r3, #0
 810c328:	d104      	bne.n	810c334 <osThreadNew+0xca>
          mem = 0;
 810c32a:	2300      	movs	r3, #0
 810c32c:	61bb      	str	r3, [r7, #24]
 810c32e:	e001      	b.n	810c334 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810c330:	2300      	movs	r3, #0
 810c332:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810c334:	69bb      	ldr	r3, [r7, #24]
 810c336:	2b01      	cmp	r3, #1
 810c338:	d110      	bne.n	810c35c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810c33a:	687b      	ldr	r3, [r7, #4]
 810c33c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810c33e:	687a      	ldr	r2, [r7, #4]
 810c340:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810c342:	9202      	str	r2, [sp, #8]
 810c344:	9301      	str	r3, [sp, #4]
 810c346:	69fb      	ldr	r3, [r7, #28]
 810c348:	9300      	str	r3, [sp, #0]
 810c34a:	68bb      	ldr	r3, [r7, #8]
 810c34c:	6a3a      	ldr	r2, [r7, #32]
 810c34e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810c350:	68f8      	ldr	r0, [r7, #12]
 810c352:	f002 fdd1 	bl	810eef8 <xTaskCreateStatic>
 810c356:	4603      	mov	r3, r0
 810c358:	613b      	str	r3, [r7, #16]
 810c35a:	e013      	b.n	810c384 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810c35c:	69bb      	ldr	r3, [r7, #24]
 810c35e:	2b00      	cmp	r3, #0
 810c360:	d110      	bne.n	810c384 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810c362:	6a3b      	ldr	r3, [r7, #32]
 810c364:	b29a      	uxth	r2, r3
 810c366:	f107 0310 	add.w	r3, r7, #16
 810c36a:	9301      	str	r3, [sp, #4]
 810c36c:	69fb      	ldr	r3, [r7, #28]
 810c36e:	9300      	str	r3, [sp, #0]
 810c370:	68bb      	ldr	r3, [r7, #8]
 810c372:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810c374:	68f8      	ldr	r0, [r7, #12]
 810c376:	f002 fe1f 	bl	810efb8 <xTaskCreate>
 810c37a:	4603      	mov	r3, r0
 810c37c:	2b01      	cmp	r3, #1
 810c37e:	d001      	beq.n	810c384 <osThreadNew+0x11a>
            hTask = NULL;
 810c380:	2300      	movs	r3, #0
 810c382:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810c384:	693b      	ldr	r3, [r7, #16]
}
 810c386:	4618      	mov	r0, r3
 810c388:	3728      	adds	r7, #40	@ 0x28
 810c38a:	46bd      	mov	sp, r7
 810c38c:	bd80      	pop	{r7, pc}

0810c38e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810c38e:	b580      	push	{r7, lr}
 810c390:	b084      	sub	sp, #16
 810c392:	af00      	add	r7, sp, #0
 810c394:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c396:	f3ef 8305 	mrs	r3, IPSR
 810c39a:	60bb      	str	r3, [r7, #8]
  return(result);
 810c39c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810c39e:	2b00      	cmp	r3, #0
 810c3a0:	d003      	beq.n	810c3aa <osDelay+0x1c>
    stat = osErrorISR;
 810c3a2:	f06f 0305 	mvn.w	r3, #5
 810c3a6:	60fb      	str	r3, [r7, #12]
 810c3a8:	e007      	b.n	810c3ba <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810c3aa:	2300      	movs	r3, #0
 810c3ac:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810c3ae:	687b      	ldr	r3, [r7, #4]
 810c3b0:	2b00      	cmp	r3, #0
 810c3b2:	d002      	beq.n	810c3ba <osDelay+0x2c>
      vTaskDelay(ticks);
 810c3b4:	6878      	ldr	r0, [r7, #4]
 810c3b6:	f002 ff5d 	bl	810f274 <vTaskDelay>
    }
  }

  return (stat);
 810c3ba:	68fb      	ldr	r3, [r7, #12]
}
 810c3bc:	4618      	mov	r0, r3
 810c3be:	3710      	adds	r7, #16
 810c3c0:	46bd      	mov	sp, r7
 810c3c2:	bd80      	pop	{r7, pc}

0810c3c4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 810c3c4:	b580      	push	{r7, lr}
 810c3c6:	b088      	sub	sp, #32
 810c3c8:	af00      	add	r7, sp, #0
 810c3ca:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 810c3cc:	2300      	movs	r3, #0
 810c3ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c3d0:	f3ef 8305 	mrs	r3, IPSR
 810c3d4:	60bb      	str	r3, [r7, #8]
  return(result);
 810c3d6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 810c3d8:	2b00      	cmp	r3, #0
 810c3da:	d174      	bne.n	810c4c6 <osMutexNew+0x102>
    if (attr != NULL) {
 810c3dc:	687b      	ldr	r3, [r7, #4]
 810c3de:	2b00      	cmp	r3, #0
 810c3e0:	d003      	beq.n	810c3ea <osMutexNew+0x26>
      type = attr->attr_bits;
 810c3e2:	687b      	ldr	r3, [r7, #4]
 810c3e4:	685b      	ldr	r3, [r3, #4]
 810c3e6:	61bb      	str	r3, [r7, #24]
 810c3e8:	e001      	b.n	810c3ee <osMutexNew+0x2a>
    } else {
      type = 0U;
 810c3ea:	2300      	movs	r3, #0
 810c3ec:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 810c3ee:	69bb      	ldr	r3, [r7, #24]
 810c3f0:	f003 0301 	and.w	r3, r3, #1
 810c3f4:	2b00      	cmp	r3, #0
 810c3f6:	d002      	beq.n	810c3fe <osMutexNew+0x3a>
      rmtx = 1U;
 810c3f8:	2301      	movs	r3, #1
 810c3fa:	617b      	str	r3, [r7, #20]
 810c3fc:	e001      	b.n	810c402 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 810c3fe:	2300      	movs	r3, #0
 810c400:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 810c402:	69bb      	ldr	r3, [r7, #24]
 810c404:	f003 0308 	and.w	r3, r3, #8
 810c408:	2b00      	cmp	r3, #0
 810c40a:	d15c      	bne.n	810c4c6 <osMutexNew+0x102>
      mem = -1;
 810c40c:	f04f 33ff 	mov.w	r3, #4294967295
 810c410:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 810c412:	687b      	ldr	r3, [r7, #4]
 810c414:	2b00      	cmp	r3, #0
 810c416:	d015      	beq.n	810c444 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810c418:	687b      	ldr	r3, [r7, #4]
 810c41a:	689b      	ldr	r3, [r3, #8]
 810c41c:	2b00      	cmp	r3, #0
 810c41e:	d006      	beq.n	810c42e <osMutexNew+0x6a>
 810c420:	687b      	ldr	r3, [r7, #4]
 810c422:	68db      	ldr	r3, [r3, #12]
 810c424:	2b4f      	cmp	r3, #79	@ 0x4f
 810c426:	d902      	bls.n	810c42e <osMutexNew+0x6a>
          mem = 1;
 810c428:	2301      	movs	r3, #1
 810c42a:	613b      	str	r3, [r7, #16]
 810c42c:	e00c      	b.n	810c448 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810c42e:	687b      	ldr	r3, [r7, #4]
 810c430:	689b      	ldr	r3, [r3, #8]
 810c432:	2b00      	cmp	r3, #0
 810c434:	d108      	bne.n	810c448 <osMutexNew+0x84>
 810c436:	687b      	ldr	r3, [r7, #4]
 810c438:	68db      	ldr	r3, [r3, #12]
 810c43a:	2b00      	cmp	r3, #0
 810c43c:	d104      	bne.n	810c448 <osMutexNew+0x84>
            mem = 0;
 810c43e:	2300      	movs	r3, #0
 810c440:	613b      	str	r3, [r7, #16]
 810c442:	e001      	b.n	810c448 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 810c444:	2300      	movs	r3, #0
 810c446:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 810c448:	693b      	ldr	r3, [r7, #16]
 810c44a:	2b01      	cmp	r3, #1
 810c44c:	d112      	bne.n	810c474 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 810c44e:	697b      	ldr	r3, [r7, #20]
 810c450:	2b00      	cmp	r3, #0
 810c452:	d007      	beq.n	810c464 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 810c454:	687b      	ldr	r3, [r7, #4]
 810c456:	689b      	ldr	r3, [r3, #8]
 810c458:	4619      	mov	r1, r3
 810c45a:	2004      	movs	r0, #4
 810c45c:	f001 f9b5 	bl	810d7ca <xQueueCreateMutexStatic>
 810c460:	61f8      	str	r0, [r7, #28]
 810c462:	e016      	b.n	810c492 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 810c464:	687b      	ldr	r3, [r7, #4]
 810c466:	689b      	ldr	r3, [r3, #8]
 810c468:	4619      	mov	r1, r3
 810c46a:	2001      	movs	r0, #1
 810c46c:	f001 f9ad 	bl	810d7ca <xQueueCreateMutexStatic>
 810c470:	61f8      	str	r0, [r7, #28]
 810c472:	e00e      	b.n	810c492 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 810c474:	693b      	ldr	r3, [r7, #16]
 810c476:	2b00      	cmp	r3, #0
 810c478:	d10b      	bne.n	810c492 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 810c47a:	697b      	ldr	r3, [r7, #20]
 810c47c:	2b00      	cmp	r3, #0
 810c47e:	d004      	beq.n	810c48a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 810c480:	2004      	movs	r0, #4
 810c482:	f001 f98a 	bl	810d79a <xQueueCreateMutex>
 810c486:	61f8      	str	r0, [r7, #28]
 810c488:	e003      	b.n	810c492 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 810c48a:	2001      	movs	r0, #1
 810c48c:	f001 f985 	bl	810d79a <xQueueCreateMutex>
 810c490:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 810c492:	69fb      	ldr	r3, [r7, #28]
 810c494:	2b00      	cmp	r3, #0
 810c496:	d00c      	beq.n	810c4b2 <osMutexNew+0xee>
        if (attr != NULL) {
 810c498:	687b      	ldr	r3, [r7, #4]
 810c49a:	2b00      	cmp	r3, #0
 810c49c:	d003      	beq.n	810c4a6 <osMutexNew+0xe2>
          name = attr->name;
 810c49e:	687b      	ldr	r3, [r7, #4]
 810c4a0:	681b      	ldr	r3, [r3, #0]
 810c4a2:	60fb      	str	r3, [r7, #12]
 810c4a4:	e001      	b.n	810c4aa <osMutexNew+0xe6>
        } else {
          name = NULL;
 810c4a6:	2300      	movs	r3, #0
 810c4a8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 810c4aa:	68f9      	ldr	r1, [r7, #12]
 810c4ac:	69f8      	ldr	r0, [r7, #28]
 810c4ae:	f002 f871 	bl	810e594 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 810c4b2:	69fb      	ldr	r3, [r7, #28]
 810c4b4:	2b00      	cmp	r3, #0
 810c4b6:	d006      	beq.n	810c4c6 <osMutexNew+0x102>
 810c4b8:	697b      	ldr	r3, [r7, #20]
 810c4ba:	2b00      	cmp	r3, #0
 810c4bc:	d003      	beq.n	810c4c6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 810c4be:	69fb      	ldr	r3, [r7, #28]
 810c4c0:	f043 0301 	orr.w	r3, r3, #1
 810c4c4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 810c4c6:	69fb      	ldr	r3, [r7, #28]
}
 810c4c8:	4618      	mov	r0, r3
 810c4ca:	3720      	adds	r7, #32
 810c4cc:	46bd      	mov	sp, r7
 810c4ce:	bd80      	pop	{r7, pc}

0810c4d0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 810c4d0:	b580      	push	{r7, lr}
 810c4d2:	b086      	sub	sp, #24
 810c4d4:	af00      	add	r7, sp, #0
 810c4d6:	6078      	str	r0, [r7, #4]
 810c4d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810c4da:	687b      	ldr	r3, [r7, #4]
 810c4dc:	f023 0301 	bic.w	r3, r3, #1
 810c4e0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810c4e2:	687b      	ldr	r3, [r7, #4]
 810c4e4:	f003 0301 	and.w	r3, r3, #1
 810c4e8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810c4ea:	2300      	movs	r3, #0
 810c4ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c4ee:	f3ef 8305 	mrs	r3, IPSR
 810c4f2:	60bb      	str	r3, [r7, #8]
  return(result);
 810c4f4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810c4f6:	2b00      	cmp	r3, #0
 810c4f8:	d003      	beq.n	810c502 <osMutexAcquire+0x32>
    stat = osErrorISR;
 810c4fa:	f06f 0305 	mvn.w	r3, #5
 810c4fe:	617b      	str	r3, [r7, #20]
 810c500:	e02c      	b.n	810c55c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 810c502:	693b      	ldr	r3, [r7, #16]
 810c504:	2b00      	cmp	r3, #0
 810c506:	d103      	bne.n	810c510 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 810c508:	f06f 0303 	mvn.w	r3, #3
 810c50c:	617b      	str	r3, [r7, #20]
 810c50e:	e025      	b.n	810c55c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 810c510:	68fb      	ldr	r3, [r7, #12]
 810c512:	2b00      	cmp	r3, #0
 810c514:	d011      	beq.n	810c53a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 810c516:	6839      	ldr	r1, [r7, #0]
 810c518:	6938      	ldr	r0, [r7, #16]
 810c51a:	f001 f9a6 	bl	810d86a <xQueueTakeMutexRecursive>
 810c51e:	4603      	mov	r3, r0
 810c520:	2b01      	cmp	r3, #1
 810c522:	d01b      	beq.n	810c55c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810c524:	683b      	ldr	r3, [r7, #0]
 810c526:	2b00      	cmp	r3, #0
 810c528:	d003      	beq.n	810c532 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 810c52a:	f06f 0301 	mvn.w	r3, #1
 810c52e:	617b      	str	r3, [r7, #20]
 810c530:	e014      	b.n	810c55c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810c532:	f06f 0302 	mvn.w	r3, #2
 810c536:	617b      	str	r3, [r7, #20]
 810c538:	e010      	b.n	810c55c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 810c53a:	6839      	ldr	r1, [r7, #0]
 810c53c:	6938      	ldr	r0, [r7, #16]
 810c53e:	f001 fd4b 	bl	810dfd8 <xQueueSemaphoreTake>
 810c542:	4603      	mov	r3, r0
 810c544:	2b01      	cmp	r3, #1
 810c546:	d009      	beq.n	810c55c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810c548:	683b      	ldr	r3, [r7, #0]
 810c54a:	2b00      	cmp	r3, #0
 810c54c:	d003      	beq.n	810c556 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 810c54e:	f06f 0301 	mvn.w	r3, #1
 810c552:	617b      	str	r3, [r7, #20]
 810c554:	e002      	b.n	810c55c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810c556:	f06f 0302 	mvn.w	r3, #2
 810c55a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 810c55c:	697b      	ldr	r3, [r7, #20]
}
 810c55e:	4618      	mov	r0, r3
 810c560:	3718      	adds	r7, #24
 810c562:	46bd      	mov	sp, r7
 810c564:	bd80      	pop	{r7, pc}

0810c566 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 810c566:	b580      	push	{r7, lr}
 810c568:	b086      	sub	sp, #24
 810c56a:	af00      	add	r7, sp, #0
 810c56c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810c56e:	687b      	ldr	r3, [r7, #4]
 810c570:	f023 0301 	bic.w	r3, r3, #1
 810c574:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810c576:	687b      	ldr	r3, [r7, #4]
 810c578:	f003 0301 	and.w	r3, r3, #1
 810c57c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810c57e:	2300      	movs	r3, #0
 810c580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c582:	f3ef 8305 	mrs	r3, IPSR
 810c586:	60bb      	str	r3, [r7, #8]
  return(result);
 810c588:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810c58a:	2b00      	cmp	r3, #0
 810c58c:	d003      	beq.n	810c596 <osMutexRelease+0x30>
    stat = osErrorISR;
 810c58e:	f06f 0305 	mvn.w	r3, #5
 810c592:	617b      	str	r3, [r7, #20]
 810c594:	e01f      	b.n	810c5d6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 810c596:	693b      	ldr	r3, [r7, #16]
 810c598:	2b00      	cmp	r3, #0
 810c59a:	d103      	bne.n	810c5a4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 810c59c:	f06f 0303 	mvn.w	r3, #3
 810c5a0:	617b      	str	r3, [r7, #20]
 810c5a2:	e018      	b.n	810c5d6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 810c5a4:	68fb      	ldr	r3, [r7, #12]
 810c5a6:	2b00      	cmp	r3, #0
 810c5a8:	d009      	beq.n	810c5be <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 810c5aa:	6938      	ldr	r0, [r7, #16]
 810c5ac:	f001 f928 	bl	810d800 <xQueueGiveMutexRecursive>
 810c5b0:	4603      	mov	r3, r0
 810c5b2:	2b01      	cmp	r3, #1
 810c5b4:	d00f      	beq.n	810c5d6 <osMutexRelease+0x70>
        stat = osErrorResource;
 810c5b6:	f06f 0302 	mvn.w	r3, #2
 810c5ba:	617b      	str	r3, [r7, #20]
 810c5bc:	e00b      	b.n	810c5d6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 810c5be:	2300      	movs	r3, #0
 810c5c0:	2200      	movs	r2, #0
 810c5c2:	2100      	movs	r1, #0
 810c5c4:	6938      	ldr	r0, [r7, #16]
 810c5c6:	f001 f9f5 	bl	810d9b4 <xQueueGenericSend>
 810c5ca:	4603      	mov	r3, r0
 810c5cc:	2b01      	cmp	r3, #1
 810c5ce:	d002      	beq.n	810c5d6 <osMutexRelease+0x70>
        stat = osErrorResource;
 810c5d0:	f06f 0302 	mvn.w	r3, #2
 810c5d4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810c5d6:	697b      	ldr	r3, [r7, #20]
}
 810c5d8:	4618      	mov	r0, r3
 810c5da:	3718      	adds	r7, #24
 810c5dc:	46bd      	mov	sp, r7
 810c5de:	bd80      	pop	{r7, pc}

0810c5e0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 810c5e0:	b580      	push	{r7, lr}
 810c5e2:	b08a      	sub	sp, #40	@ 0x28
 810c5e4:	af02      	add	r7, sp, #8
 810c5e6:	60f8      	str	r0, [r7, #12]
 810c5e8:	60b9      	str	r1, [r7, #8]
 810c5ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 810c5ec:	2300      	movs	r3, #0
 810c5ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c5f0:	f3ef 8305 	mrs	r3, IPSR
 810c5f4:	613b      	str	r3, [r7, #16]
  return(result);
 810c5f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 810c5f8:	2b00      	cmp	r3, #0
 810c5fa:	d175      	bne.n	810c6e8 <osSemaphoreNew+0x108>
 810c5fc:	68fb      	ldr	r3, [r7, #12]
 810c5fe:	2b00      	cmp	r3, #0
 810c600:	d072      	beq.n	810c6e8 <osSemaphoreNew+0x108>
 810c602:	68ba      	ldr	r2, [r7, #8]
 810c604:	68fb      	ldr	r3, [r7, #12]
 810c606:	429a      	cmp	r2, r3
 810c608:	d86e      	bhi.n	810c6e8 <osSemaphoreNew+0x108>
    mem = -1;
 810c60a:	f04f 33ff 	mov.w	r3, #4294967295
 810c60e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810c610:	687b      	ldr	r3, [r7, #4]
 810c612:	2b00      	cmp	r3, #0
 810c614:	d015      	beq.n	810c642 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810c616:	687b      	ldr	r3, [r7, #4]
 810c618:	689b      	ldr	r3, [r3, #8]
 810c61a:	2b00      	cmp	r3, #0
 810c61c:	d006      	beq.n	810c62c <osSemaphoreNew+0x4c>
 810c61e:	687b      	ldr	r3, [r7, #4]
 810c620:	68db      	ldr	r3, [r3, #12]
 810c622:	2b4f      	cmp	r3, #79	@ 0x4f
 810c624:	d902      	bls.n	810c62c <osSemaphoreNew+0x4c>
        mem = 1;
 810c626:	2301      	movs	r3, #1
 810c628:	61bb      	str	r3, [r7, #24]
 810c62a:	e00c      	b.n	810c646 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810c62c:	687b      	ldr	r3, [r7, #4]
 810c62e:	689b      	ldr	r3, [r3, #8]
 810c630:	2b00      	cmp	r3, #0
 810c632:	d108      	bne.n	810c646 <osSemaphoreNew+0x66>
 810c634:	687b      	ldr	r3, [r7, #4]
 810c636:	68db      	ldr	r3, [r3, #12]
 810c638:	2b00      	cmp	r3, #0
 810c63a:	d104      	bne.n	810c646 <osSemaphoreNew+0x66>
          mem = 0;
 810c63c:	2300      	movs	r3, #0
 810c63e:	61bb      	str	r3, [r7, #24]
 810c640:	e001      	b.n	810c646 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 810c642:	2300      	movs	r3, #0
 810c644:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 810c646:	69bb      	ldr	r3, [r7, #24]
 810c648:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c64c:	d04c      	beq.n	810c6e8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 810c64e:	68fb      	ldr	r3, [r7, #12]
 810c650:	2b01      	cmp	r3, #1
 810c652:	d128      	bne.n	810c6a6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 810c654:	69bb      	ldr	r3, [r7, #24]
 810c656:	2b01      	cmp	r3, #1
 810c658:	d10a      	bne.n	810c670 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 810c65a:	687b      	ldr	r3, [r7, #4]
 810c65c:	689b      	ldr	r3, [r3, #8]
 810c65e:	2203      	movs	r2, #3
 810c660:	9200      	str	r2, [sp, #0]
 810c662:	2200      	movs	r2, #0
 810c664:	2100      	movs	r1, #0
 810c666:	2001      	movs	r0, #1
 810c668:	f000 ffa2 	bl	810d5b0 <xQueueGenericCreateStatic>
 810c66c:	61f8      	str	r0, [r7, #28]
 810c66e:	e005      	b.n	810c67c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 810c670:	2203      	movs	r2, #3
 810c672:	2100      	movs	r1, #0
 810c674:	2001      	movs	r0, #1
 810c676:	f001 f818 	bl	810d6aa <xQueueGenericCreate>
 810c67a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 810c67c:	69fb      	ldr	r3, [r7, #28]
 810c67e:	2b00      	cmp	r3, #0
 810c680:	d022      	beq.n	810c6c8 <osSemaphoreNew+0xe8>
 810c682:	68bb      	ldr	r3, [r7, #8]
 810c684:	2b00      	cmp	r3, #0
 810c686:	d01f      	beq.n	810c6c8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810c688:	2300      	movs	r3, #0
 810c68a:	2200      	movs	r2, #0
 810c68c:	2100      	movs	r1, #0
 810c68e:	69f8      	ldr	r0, [r7, #28]
 810c690:	f001 f990 	bl	810d9b4 <xQueueGenericSend>
 810c694:	4603      	mov	r3, r0
 810c696:	2b01      	cmp	r3, #1
 810c698:	d016      	beq.n	810c6c8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 810c69a:	69f8      	ldr	r0, [r7, #28]
 810c69c:	f001 fe2e 	bl	810e2fc <vQueueDelete>
            hSemaphore = NULL;
 810c6a0:	2300      	movs	r3, #0
 810c6a2:	61fb      	str	r3, [r7, #28]
 810c6a4:	e010      	b.n	810c6c8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810c6a6:	69bb      	ldr	r3, [r7, #24]
 810c6a8:	2b01      	cmp	r3, #1
 810c6aa:	d108      	bne.n	810c6be <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 810c6ac:	687b      	ldr	r3, [r7, #4]
 810c6ae:	689b      	ldr	r3, [r3, #8]
 810c6b0:	461a      	mov	r2, r3
 810c6b2:	68b9      	ldr	r1, [r7, #8]
 810c6b4:	68f8      	ldr	r0, [r7, #12]
 810c6b6:	f001 f90f 	bl	810d8d8 <xQueueCreateCountingSemaphoreStatic>
 810c6ba:	61f8      	str	r0, [r7, #28]
 810c6bc:	e004      	b.n	810c6c8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 810c6be:	68b9      	ldr	r1, [r7, #8]
 810c6c0:	68f8      	ldr	r0, [r7, #12]
 810c6c2:	f001 f942 	bl	810d94a <xQueueCreateCountingSemaphore>
 810c6c6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 810c6c8:	69fb      	ldr	r3, [r7, #28]
 810c6ca:	2b00      	cmp	r3, #0
 810c6cc:	d00c      	beq.n	810c6e8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 810c6ce:	687b      	ldr	r3, [r7, #4]
 810c6d0:	2b00      	cmp	r3, #0
 810c6d2:	d003      	beq.n	810c6dc <osSemaphoreNew+0xfc>
          name = attr->name;
 810c6d4:	687b      	ldr	r3, [r7, #4]
 810c6d6:	681b      	ldr	r3, [r3, #0]
 810c6d8:	617b      	str	r3, [r7, #20]
 810c6da:	e001      	b.n	810c6e0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 810c6dc:	2300      	movs	r3, #0
 810c6de:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 810c6e0:	6979      	ldr	r1, [r7, #20]
 810c6e2:	69f8      	ldr	r0, [r7, #28]
 810c6e4:	f001 ff56 	bl	810e594 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 810c6e8:	69fb      	ldr	r3, [r7, #28]
}
 810c6ea:	4618      	mov	r0, r3
 810c6ec:	3720      	adds	r7, #32
 810c6ee:	46bd      	mov	sp, r7
 810c6f0:	bd80      	pop	{r7, pc}
	...

0810c6f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 810c6f4:	b580      	push	{r7, lr}
 810c6f6:	b086      	sub	sp, #24
 810c6f8:	af00      	add	r7, sp, #0
 810c6fa:	6078      	str	r0, [r7, #4]
 810c6fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810c6fe:	687b      	ldr	r3, [r7, #4]
 810c700:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810c702:	2300      	movs	r3, #0
 810c704:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810c706:	693b      	ldr	r3, [r7, #16]
 810c708:	2b00      	cmp	r3, #0
 810c70a:	d103      	bne.n	810c714 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 810c70c:	f06f 0303 	mvn.w	r3, #3
 810c710:	617b      	str	r3, [r7, #20]
 810c712:	e039      	b.n	810c788 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c714:	f3ef 8305 	mrs	r3, IPSR
 810c718:	60fb      	str	r3, [r7, #12]
  return(result);
 810c71a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810c71c:	2b00      	cmp	r3, #0
 810c71e:	d022      	beq.n	810c766 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 810c720:	683b      	ldr	r3, [r7, #0]
 810c722:	2b00      	cmp	r3, #0
 810c724:	d003      	beq.n	810c72e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 810c726:	f06f 0303 	mvn.w	r3, #3
 810c72a:	617b      	str	r3, [r7, #20]
 810c72c:	e02c      	b.n	810c788 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 810c72e:	2300      	movs	r3, #0
 810c730:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 810c732:	f107 0308 	add.w	r3, r7, #8
 810c736:	461a      	mov	r2, r3
 810c738:	2100      	movs	r1, #0
 810c73a:	6938      	ldr	r0, [r7, #16]
 810c73c:	f001 fd5c 	bl	810e1f8 <xQueueReceiveFromISR>
 810c740:	4603      	mov	r3, r0
 810c742:	2b01      	cmp	r3, #1
 810c744:	d003      	beq.n	810c74e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 810c746:	f06f 0302 	mvn.w	r3, #2
 810c74a:	617b      	str	r3, [r7, #20]
 810c74c:	e01c      	b.n	810c788 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 810c74e:	68bb      	ldr	r3, [r7, #8]
 810c750:	2b00      	cmp	r3, #0
 810c752:	d019      	beq.n	810c788 <osSemaphoreAcquire+0x94>
 810c754:	4b0f      	ldr	r3, [pc, #60]	@ (810c794 <osSemaphoreAcquire+0xa0>)
 810c756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c75a:	601a      	str	r2, [r3, #0]
 810c75c:	f3bf 8f4f 	dsb	sy
 810c760:	f3bf 8f6f 	isb	sy
 810c764:	e010      	b.n	810c788 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 810c766:	6839      	ldr	r1, [r7, #0]
 810c768:	6938      	ldr	r0, [r7, #16]
 810c76a:	f001 fc35 	bl	810dfd8 <xQueueSemaphoreTake>
 810c76e:	4603      	mov	r3, r0
 810c770:	2b01      	cmp	r3, #1
 810c772:	d009      	beq.n	810c788 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 810c774:	683b      	ldr	r3, [r7, #0]
 810c776:	2b00      	cmp	r3, #0
 810c778:	d003      	beq.n	810c782 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 810c77a:	f06f 0301 	mvn.w	r3, #1
 810c77e:	617b      	str	r3, [r7, #20]
 810c780:	e002      	b.n	810c788 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 810c782:	f06f 0302 	mvn.w	r3, #2
 810c786:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810c788:	697b      	ldr	r3, [r7, #20]
}
 810c78a:	4618      	mov	r0, r3
 810c78c:	3718      	adds	r7, #24
 810c78e:	46bd      	mov	sp, r7
 810c790:	bd80      	pop	{r7, pc}
 810c792:	bf00      	nop
 810c794:	e000ed04 	.word	0xe000ed04

0810c798 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 810c798:	b580      	push	{r7, lr}
 810c79a:	b086      	sub	sp, #24
 810c79c:	af00      	add	r7, sp, #0
 810c79e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810c7a0:	687b      	ldr	r3, [r7, #4]
 810c7a2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810c7a4:	2300      	movs	r3, #0
 810c7a6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810c7a8:	693b      	ldr	r3, [r7, #16]
 810c7aa:	2b00      	cmp	r3, #0
 810c7ac:	d103      	bne.n	810c7b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 810c7ae:	f06f 0303 	mvn.w	r3, #3
 810c7b2:	617b      	str	r3, [r7, #20]
 810c7b4:	e02c      	b.n	810c810 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c7b6:	f3ef 8305 	mrs	r3, IPSR
 810c7ba:	60fb      	str	r3, [r7, #12]
  return(result);
 810c7bc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810c7be:	2b00      	cmp	r3, #0
 810c7c0:	d01a      	beq.n	810c7f8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 810c7c2:	2300      	movs	r3, #0
 810c7c4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 810c7c6:	f107 0308 	add.w	r3, r7, #8
 810c7ca:	4619      	mov	r1, r3
 810c7cc:	6938      	ldr	r0, [r7, #16]
 810c7ce:	f001 fa91 	bl	810dcf4 <xQueueGiveFromISR>
 810c7d2:	4603      	mov	r3, r0
 810c7d4:	2b01      	cmp	r3, #1
 810c7d6:	d003      	beq.n	810c7e0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 810c7d8:	f06f 0302 	mvn.w	r3, #2
 810c7dc:	617b      	str	r3, [r7, #20]
 810c7de:	e017      	b.n	810c810 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 810c7e0:	68bb      	ldr	r3, [r7, #8]
 810c7e2:	2b00      	cmp	r3, #0
 810c7e4:	d014      	beq.n	810c810 <osSemaphoreRelease+0x78>
 810c7e6:	4b0d      	ldr	r3, [pc, #52]	@ (810c81c <osSemaphoreRelease+0x84>)
 810c7e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c7ec:	601a      	str	r2, [r3, #0]
 810c7ee:	f3bf 8f4f 	dsb	sy
 810c7f2:	f3bf 8f6f 	isb	sy
 810c7f6:	e00b      	b.n	810c810 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810c7f8:	2300      	movs	r3, #0
 810c7fa:	2200      	movs	r2, #0
 810c7fc:	2100      	movs	r1, #0
 810c7fe:	6938      	ldr	r0, [r7, #16]
 810c800:	f001 f8d8 	bl	810d9b4 <xQueueGenericSend>
 810c804:	4603      	mov	r3, r0
 810c806:	2b01      	cmp	r3, #1
 810c808:	d002      	beq.n	810c810 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 810c80a:	f06f 0302 	mvn.w	r3, #2
 810c80e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 810c810:	697b      	ldr	r3, [r7, #20]
}
 810c812:	4618      	mov	r0, r3
 810c814:	3718      	adds	r7, #24
 810c816:	46bd      	mov	sp, r7
 810c818:	bd80      	pop	{r7, pc}
 810c81a:	bf00      	nop
 810c81c:	e000ed04 	.word	0xe000ed04

0810c820 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 810c820:	b580      	push	{r7, lr}
 810c822:	b08a      	sub	sp, #40	@ 0x28
 810c824:	af02      	add	r7, sp, #8
 810c826:	60f8      	str	r0, [r7, #12]
 810c828:	60b9      	str	r1, [r7, #8]
 810c82a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 810c82c:	2300      	movs	r3, #0
 810c82e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c830:	f3ef 8305 	mrs	r3, IPSR
 810c834:	613b      	str	r3, [r7, #16]
  return(result);
 810c836:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 810c838:	2b00      	cmp	r3, #0
 810c83a:	d15f      	bne.n	810c8fc <osMessageQueueNew+0xdc>
 810c83c:	68fb      	ldr	r3, [r7, #12]
 810c83e:	2b00      	cmp	r3, #0
 810c840:	d05c      	beq.n	810c8fc <osMessageQueueNew+0xdc>
 810c842:	68bb      	ldr	r3, [r7, #8]
 810c844:	2b00      	cmp	r3, #0
 810c846:	d059      	beq.n	810c8fc <osMessageQueueNew+0xdc>
    mem = -1;
 810c848:	f04f 33ff 	mov.w	r3, #4294967295
 810c84c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810c84e:	687b      	ldr	r3, [r7, #4]
 810c850:	2b00      	cmp	r3, #0
 810c852:	d029      	beq.n	810c8a8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810c854:	687b      	ldr	r3, [r7, #4]
 810c856:	689b      	ldr	r3, [r3, #8]
 810c858:	2b00      	cmp	r3, #0
 810c85a:	d012      	beq.n	810c882 <osMessageQueueNew+0x62>
 810c85c:	687b      	ldr	r3, [r7, #4]
 810c85e:	68db      	ldr	r3, [r3, #12]
 810c860:	2b4f      	cmp	r3, #79	@ 0x4f
 810c862:	d90e      	bls.n	810c882 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810c864:	687b      	ldr	r3, [r7, #4]
 810c866:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810c868:	2b00      	cmp	r3, #0
 810c86a:	d00a      	beq.n	810c882 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810c86c:	687b      	ldr	r3, [r7, #4]
 810c86e:	695a      	ldr	r2, [r3, #20]
 810c870:	68fb      	ldr	r3, [r7, #12]
 810c872:	68b9      	ldr	r1, [r7, #8]
 810c874:	fb01 f303 	mul.w	r3, r1, r3
 810c878:	429a      	cmp	r2, r3
 810c87a:	d302      	bcc.n	810c882 <osMessageQueueNew+0x62>
        mem = 1;
 810c87c:	2301      	movs	r3, #1
 810c87e:	61bb      	str	r3, [r7, #24]
 810c880:	e014      	b.n	810c8ac <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810c882:	687b      	ldr	r3, [r7, #4]
 810c884:	689b      	ldr	r3, [r3, #8]
 810c886:	2b00      	cmp	r3, #0
 810c888:	d110      	bne.n	810c8ac <osMessageQueueNew+0x8c>
 810c88a:	687b      	ldr	r3, [r7, #4]
 810c88c:	68db      	ldr	r3, [r3, #12]
 810c88e:	2b00      	cmp	r3, #0
 810c890:	d10c      	bne.n	810c8ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810c892:	687b      	ldr	r3, [r7, #4]
 810c894:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810c896:	2b00      	cmp	r3, #0
 810c898:	d108      	bne.n	810c8ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810c89a:	687b      	ldr	r3, [r7, #4]
 810c89c:	695b      	ldr	r3, [r3, #20]
 810c89e:	2b00      	cmp	r3, #0
 810c8a0:	d104      	bne.n	810c8ac <osMessageQueueNew+0x8c>
          mem = 0;
 810c8a2:	2300      	movs	r3, #0
 810c8a4:	61bb      	str	r3, [r7, #24]
 810c8a6:	e001      	b.n	810c8ac <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 810c8a8:	2300      	movs	r3, #0
 810c8aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810c8ac:	69bb      	ldr	r3, [r7, #24]
 810c8ae:	2b01      	cmp	r3, #1
 810c8b0:	d10b      	bne.n	810c8ca <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 810c8b2:	687b      	ldr	r3, [r7, #4]
 810c8b4:	691a      	ldr	r2, [r3, #16]
 810c8b6:	687b      	ldr	r3, [r7, #4]
 810c8b8:	689b      	ldr	r3, [r3, #8]
 810c8ba:	2100      	movs	r1, #0
 810c8bc:	9100      	str	r1, [sp, #0]
 810c8be:	68b9      	ldr	r1, [r7, #8]
 810c8c0:	68f8      	ldr	r0, [r7, #12]
 810c8c2:	f000 fe75 	bl	810d5b0 <xQueueGenericCreateStatic>
 810c8c6:	61f8      	str	r0, [r7, #28]
 810c8c8:	e008      	b.n	810c8dc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 810c8ca:	69bb      	ldr	r3, [r7, #24]
 810c8cc:	2b00      	cmp	r3, #0
 810c8ce:	d105      	bne.n	810c8dc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 810c8d0:	2200      	movs	r2, #0
 810c8d2:	68b9      	ldr	r1, [r7, #8]
 810c8d4:	68f8      	ldr	r0, [r7, #12]
 810c8d6:	f000 fee8 	bl	810d6aa <xQueueGenericCreate>
 810c8da:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 810c8dc:	69fb      	ldr	r3, [r7, #28]
 810c8de:	2b00      	cmp	r3, #0
 810c8e0:	d00c      	beq.n	810c8fc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 810c8e2:	687b      	ldr	r3, [r7, #4]
 810c8e4:	2b00      	cmp	r3, #0
 810c8e6:	d003      	beq.n	810c8f0 <osMessageQueueNew+0xd0>
        name = attr->name;
 810c8e8:	687b      	ldr	r3, [r7, #4]
 810c8ea:	681b      	ldr	r3, [r3, #0]
 810c8ec:	617b      	str	r3, [r7, #20]
 810c8ee:	e001      	b.n	810c8f4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 810c8f0:	2300      	movs	r3, #0
 810c8f2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 810c8f4:	6979      	ldr	r1, [r7, #20]
 810c8f6:	69f8      	ldr	r0, [r7, #28]
 810c8f8:	f001 fe4c 	bl	810e594 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 810c8fc:	69fb      	ldr	r3, [r7, #28]
}
 810c8fe:	4618      	mov	r0, r3
 810c900:	3720      	adds	r7, #32
 810c902:	46bd      	mov	sp, r7
 810c904:	bd80      	pop	{r7, pc}
	...

0810c908 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 810c908:	b580      	push	{r7, lr}
 810c90a:	b088      	sub	sp, #32
 810c90c:	af00      	add	r7, sp, #0
 810c90e:	60f8      	str	r0, [r7, #12]
 810c910:	60b9      	str	r1, [r7, #8]
 810c912:	603b      	str	r3, [r7, #0]
 810c914:	4613      	mov	r3, r2
 810c916:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810c918:	68fb      	ldr	r3, [r7, #12]
 810c91a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 810c91c:	2300      	movs	r3, #0
 810c91e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c920:	f3ef 8305 	mrs	r3, IPSR
 810c924:	617b      	str	r3, [r7, #20]
  return(result);
 810c926:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810c928:	2b00      	cmp	r3, #0
 810c92a:	d028      	beq.n	810c97e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 810c92c:	69bb      	ldr	r3, [r7, #24]
 810c92e:	2b00      	cmp	r3, #0
 810c930:	d005      	beq.n	810c93e <osMessageQueuePut+0x36>
 810c932:	68bb      	ldr	r3, [r7, #8]
 810c934:	2b00      	cmp	r3, #0
 810c936:	d002      	beq.n	810c93e <osMessageQueuePut+0x36>
 810c938:	683b      	ldr	r3, [r7, #0]
 810c93a:	2b00      	cmp	r3, #0
 810c93c:	d003      	beq.n	810c946 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 810c93e:	f06f 0303 	mvn.w	r3, #3
 810c942:	61fb      	str	r3, [r7, #28]
 810c944:	e038      	b.n	810c9b8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 810c946:	2300      	movs	r3, #0
 810c948:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 810c94a:	f107 0210 	add.w	r2, r7, #16
 810c94e:	2300      	movs	r3, #0
 810c950:	68b9      	ldr	r1, [r7, #8]
 810c952:	69b8      	ldr	r0, [r7, #24]
 810c954:	f001 f930 	bl	810dbb8 <xQueueGenericSendFromISR>
 810c958:	4603      	mov	r3, r0
 810c95a:	2b01      	cmp	r3, #1
 810c95c:	d003      	beq.n	810c966 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 810c95e:	f06f 0302 	mvn.w	r3, #2
 810c962:	61fb      	str	r3, [r7, #28]
 810c964:	e028      	b.n	810c9b8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 810c966:	693b      	ldr	r3, [r7, #16]
 810c968:	2b00      	cmp	r3, #0
 810c96a:	d025      	beq.n	810c9b8 <osMessageQueuePut+0xb0>
 810c96c:	4b15      	ldr	r3, [pc, #84]	@ (810c9c4 <osMessageQueuePut+0xbc>)
 810c96e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c972:	601a      	str	r2, [r3, #0]
 810c974:	f3bf 8f4f 	dsb	sy
 810c978:	f3bf 8f6f 	isb	sy
 810c97c:	e01c      	b.n	810c9b8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 810c97e:	69bb      	ldr	r3, [r7, #24]
 810c980:	2b00      	cmp	r3, #0
 810c982:	d002      	beq.n	810c98a <osMessageQueuePut+0x82>
 810c984:	68bb      	ldr	r3, [r7, #8]
 810c986:	2b00      	cmp	r3, #0
 810c988:	d103      	bne.n	810c992 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 810c98a:	f06f 0303 	mvn.w	r3, #3
 810c98e:	61fb      	str	r3, [r7, #28]
 810c990:	e012      	b.n	810c9b8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 810c992:	2300      	movs	r3, #0
 810c994:	683a      	ldr	r2, [r7, #0]
 810c996:	68b9      	ldr	r1, [r7, #8]
 810c998:	69b8      	ldr	r0, [r7, #24]
 810c99a:	f001 f80b 	bl	810d9b4 <xQueueGenericSend>
 810c99e:	4603      	mov	r3, r0
 810c9a0:	2b01      	cmp	r3, #1
 810c9a2:	d009      	beq.n	810c9b8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 810c9a4:	683b      	ldr	r3, [r7, #0]
 810c9a6:	2b00      	cmp	r3, #0
 810c9a8:	d003      	beq.n	810c9b2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 810c9aa:	f06f 0301 	mvn.w	r3, #1
 810c9ae:	61fb      	str	r3, [r7, #28]
 810c9b0:	e002      	b.n	810c9b8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 810c9b2:	f06f 0302 	mvn.w	r3, #2
 810c9b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 810c9b8:	69fb      	ldr	r3, [r7, #28]
}
 810c9ba:	4618      	mov	r0, r3
 810c9bc:	3720      	adds	r7, #32
 810c9be:	46bd      	mov	sp, r7
 810c9c0:	bd80      	pop	{r7, pc}
 810c9c2:	bf00      	nop
 810c9c4:	e000ed04 	.word	0xe000ed04

0810c9c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 810c9c8:	b580      	push	{r7, lr}
 810c9ca:	b088      	sub	sp, #32
 810c9cc:	af00      	add	r7, sp, #0
 810c9ce:	60f8      	str	r0, [r7, #12]
 810c9d0:	60b9      	str	r1, [r7, #8]
 810c9d2:	607a      	str	r2, [r7, #4]
 810c9d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810c9d6:	68fb      	ldr	r3, [r7, #12]
 810c9d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 810c9da:	2300      	movs	r3, #0
 810c9dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c9de:	f3ef 8305 	mrs	r3, IPSR
 810c9e2:	617b      	str	r3, [r7, #20]
  return(result);
 810c9e4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810c9e6:	2b00      	cmp	r3, #0
 810c9e8:	d028      	beq.n	810ca3c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 810c9ea:	69bb      	ldr	r3, [r7, #24]
 810c9ec:	2b00      	cmp	r3, #0
 810c9ee:	d005      	beq.n	810c9fc <osMessageQueueGet+0x34>
 810c9f0:	68bb      	ldr	r3, [r7, #8]
 810c9f2:	2b00      	cmp	r3, #0
 810c9f4:	d002      	beq.n	810c9fc <osMessageQueueGet+0x34>
 810c9f6:	683b      	ldr	r3, [r7, #0]
 810c9f8:	2b00      	cmp	r3, #0
 810c9fa:	d003      	beq.n	810ca04 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 810c9fc:	f06f 0303 	mvn.w	r3, #3
 810ca00:	61fb      	str	r3, [r7, #28]
 810ca02:	e037      	b.n	810ca74 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 810ca04:	2300      	movs	r3, #0
 810ca06:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 810ca08:	f107 0310 	add.w	r3, r7, #16
 810ca0c:	461a      	mov	r2, r3
 810ca0e:	68b9      	ldr	r1, [r7, #8]
 810ca10:	69b8      	ldr	r0, [r7, #24]
 810ca12:	f001 fbf1 	bl	810e1f8 <xQueueReceiveFromISR>
 810ca16:	4603      	mov	r3, r0
 810ca18:	2b01      	cmp	r3, #1
 810ca1a:	d003      	beq.n	810ca24 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 810ca1c:	f06f 0302 	mvn.w	r3, #2
 810ca20:	61fb      	str	r3, [r7, #28]
 810ca22:	e027      	b.n	810ca74 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 810ca24:	693b      	ldr	r3, [r7, #16]
 810ca26:	2b00      	cmp	r3, #0
 810ca28:	d024      	beq.n	810ca74 <osMessageQueueGet+0xac>
 810ca2a:	4b15      	ldr	r3, [pc, #84]	@ (810ca80 <osMessageQueueGet+0xb8>)
 810ca2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ca30:	601a      	str	r2, [r3, #0]
 810ca32:	f3bf 8f4f 	dsb	sy
 810ca36:	f3bf 8f6f 	isb	sy
 810ca3a:	e01b      	b.n	810ca74 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 810ca3c:	69bb      	ldr	r3, [r7, #24]
 810ca3e:	2b00      	cmp	r3, #0
 810ca40:	d002      	beq.n	810ca48 <osMessageQueueGet+0x80>
 810ca42:	68bb      	ldr	r3, [r7, #8]
 810ca44:	2b00      	cmp	r3, #0
 810ca46:	d103      	bne.n	810ca50 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 810ca48:	f06f 0303 	mvn.w	r3, #3
 810ca4c:	61fb      	str	r3, [r7, #28]
 810ca4e:	e011      	b.n	810ca74 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 810ca50:	683a      	ldr	r2, [r7, #0]
 810ca52:	68b9      	ldr	r1, [r7, #8]
 810ca54:	69b8      	ldr	r0, [r7, #24]
 810ca56:	f001 f9dd 	bl	810de14 <xQueueReceive>
 810ca5a:	4603      	mov	r3, r0
 810ca5c:	2b01      	cmp	r3, #1
 810ca5e:	d009      	beq.n	810ca74 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 810ca60:	683b      	ldr	r3, [r7, #0]
 810ca62:	2b00      	cmp	r3, #0
 810ca64:	d003      	beq.n	810ca6e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 810ca66:	f06f 0301 	mvn.w	r3, #1
 810ca6a:	61fb      	str	r3, [r7, #28]
 810ca6c:	e002      	b.n	810ca74 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 810ca6e:	f06f 0302 	mvn.w	r3, #2
 810ca72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 810ca74:	69fb      	ldr	r3, [r7, #28]
}
 810ca76:	4618      	mov	r0, r3
 810ca78:	3720      	adds	r7, #32
 810ca7a:	46bd      	mov	sp, r7
 810ca7c:	bd80      	pop	{r7, pc}
 810ca7e:	bf00      	nop
 810ca80:	e000ed04 	.word	0xe000ed04

0810ca84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810ca84:	b480      	push	{r7}
 810ca86:	b085      	sub	sp, #20
 810ca88:	af00      	add	r7, sp, #0
 810ca8a:	60f8      	str	r0, [r7, #12]
 810ca8c:	60b9      	str	r1, [r7, #8]
 810ca8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810ca90:	68fb      	ldr	r3, [r7, #12]
 810ca92:	4a07      	ldr	r2, [pc, #28]	@ (810cab0 <vApplicationGetIdleTaskMemory+0x2c>)
 810ca94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810ca96:	68bb      	ldr	r3, [r7, #8]
 810ca98:	4a06      	ldr	r2, [pc, #24]	@ (810cab4 <vApplicationGetIdleTaskMemory+0x30>)
 810ca9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810ca9c:	687b      	ldr	r3, [r7, #4]
 810ca9e:	2280      	movs	r2, #128	@ 0x80
 810caa0:	601a      	str	r2, [r3, #0]
}
 810caa2:	bf00      	nop
 810caa4:	3714      	adds	r7, #20
 810caa6:	46bd      	mov	sp, r7
 810caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810caac:	4770      	bx	lr
 810caae:	bf00      	nop
 810cab0:	1000036c 	.word	0x1000036c
 810cab4:	10000414 	.word	0x10000414

0810cab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810cab8:	b480      	push	{r7}
 810caba:	b085      	sub	sp, #20
 810cabc:	af00      	add	r7, sp, #0
 810cabe:	60f8      	str	r0, [r7, #12]
 810cac0:	60b9      	str	r1, [r7, #8]
 810cac2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810cac4:	68fb      	ldr	r3, [r7, #12]
 810cac6:	4a07      	ldr	r2, [pc, #28]	@ (810cae4 <vApplicationGetTimerTaskMemory+0x2c>)
 810cac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810caca:	68bb      	ldr	r3, [r7, #8]
 810cacc:	4a06      	ldr	r2, [pc, #24]	@ (810cae8 <vApplicationGetTimerTaskMemory+0x30>)
 810cace:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810cad0:	687b      	ldr	r3, [r7, #4]
 810cad2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810cad6:	601a      	str	r2, [r3, #0]
}
 810cad8:	bf00      	nop
 810cada:	3714      	adds	r7, #20
 810cadc:	46bd      	mov	sp, r7
 810cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cae2:	4770      	bx	lr
 810cae4:	10000614 	.word	0x10000614
 810cae8:	100006bc 	.word	0x100006bc

0810caec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810caec:	b580      	push	{r7, lr}
 810caee:	b08a      	sub	sp, #40	@ 0x28
 810caf0:	af00      	add	r7, sp, #0
 810caf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810caf4:	2300      	movs	r3, #0
 810caf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810caf8:	f002 fc62 	bl	810f3c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810cafc:	4b5c      	ldr	r3, [pc, #368]	@ (810cc70 <pvPortMalloc+0x184>)
 810cafe:	681b      	ldr	r3, [r3, #0]
 810cb00:	2b00      	cmp	r3, #0
 810cb02:	d101      	bne.n	810cb08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810cb04:	f000 f924 	bl	810cd50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810cb08:	4b5a      	ldr	r3, [pc, #360]	@ (810cc74 <pvPortMalloc+0x188>)
 810cb0a:	681a      	ldr	r2, [r3, #0]
 810cb0c:	687b      	ldr	r3, [r7, #4]
 810cb0e:	4013      	ands	r3, r2
 810cb10:	2b00      	cmp	r3, #0
 810cb12:	f040 8095 	bne.w	810cc40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810cb16:	687b      	ldr	r3, [r7, #4]
 810cb18:	2b00      	cmp	r3, #0
 810cb1a:	d01e      	beq.n	810cb5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810cb1c:	2208      	movs	r2, #8
 810cb1e:	687b      	ldr	r3, [r7, #4]
 810cb20:	4413      	add	r3, r2
 810cb22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810cb24:	687b      	ldr	r3, [r7, #4]
 810cb26:	f003 0307 	and.w	r3, r3, #7
 810cb2a:	2b00      	cmp	r3, #0
 810cb2c:	d015      	beq.n	810cb5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810cb2e:	687b      	ldr	r3, [r7, #4]
 810cb30:	f023 0307 	bic.w	r3, r3, #7
 810cb34:	3308      	adds	r3, #8
 810cb36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810cb38:	687b      	ldr	r3, [r7, #4]
 810cb3a:	f003 0307 	and.w	r3, r3, #7
 810cb3e:	2b00      	cmp	r3, #0
 810cb40:	d00b      	beq.n	810cb5a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810cb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cb46:	f383 8811 	msr	BASEPRI, r3
 810cb4a:	f3bf 8f6f 	isb	sy
 810cb4e:	f3bf 8f4f 	dsb	sy
 810cb52:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810cb54:	bf00      	nop
 810cb56:	bf00      	nop
 810cb58:	e7fd      	b.n	810cb56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810cb5a:	687b      	ldr	r3, [r7, #4]
 810cb5c:	2b00      	cmp	r3, #0
 810cb5e:	d06f      	beq.n	810cc40 <pvPortMalloc+0x154>
 810cb60:	4b45      	ldr	r3, [pc, #276]	@ (810cc78 <pvPortMalloc+0x18c>)
 810cb62:	681b      	ldr	r3, [r3, #0]
 810cb64:	687a      	ldr	r2, [r7, #4]
 810cb66:	429a      	cmp	r2, r3
 810cb68:	d86a      	bhi.n	810cc40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810cb6a:	4b44      	ldr	r3, [pc, #272]	@ (810cc7c <pvPortMalloc+0x190>)
 810cb6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810cb6e:	4b43      	ldr	r3, [pc, #268]	@ (810cc7c <pvPortMalloc+0x190>)
 810cb70:	681b      	ldr	r3, [r3, #0]
 810cb72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810cb74:	e004      	b.n	810cb80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810cb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cb78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cb7c:	681b      	ldr	r3, [r3, #0]
 810cb7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cb82:	685b      	ldr	r3, [r3, #4]
 810cb84:	687a      	ldr	r2, [r7, #4]
 810cb86:	429a      	cmp	r2, r3
 810cb88:	d903      	bls.n	810cb92 <pvPortMalloc+0xa6>
 810cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cb8c:	681b      	ldr	r3, [r3, #0]
 810cb8e:	2b00      	cmp	r3, #0
 810cb90:	d1f1      	bne.n	810cb76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810cb92:	4b37      	ldr	r3, [pc, #220]	@ (810cc70 <pvPortMalloc+0x184>)
 810cb94:	681b      	ldr	r3, [r3, #0]
 810cb96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810cb98:	429a      	cmp	r2, r3
 810cb9a:	d051      	beq.n	810cc40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810cb9c:	6a3b      	ldr	r3, [r7, #32]
 810cb9e:	681b      	ldr	r3, [r3, #0]
 810cba0:	2208      	movs	r2, #8
 810cba2:	4413      	add	r3, r2
 810cba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810cba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cba8:	681a      	ldr	r2, [r3, #0]
 810cbaa:	6a3b      	ldr	r3, [r7, #32]
 810cbac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810cbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cbb0:	685a      	ldr	r2, [r3, #4]
 810cbb2:	687b      	ldr	r3, [r7, #4]
 810cbb4:	1ad2      	subs	r2, r2, r3
 810cbb6:	2308      	movs	r3, #8
 810cbb8:	005b      	lsls	r3, r3, #1
 810cbba:	429a      	cmp	r2, r3
 810cbbc:	d920      	bls.n	810cc00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810cbbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810cbc0:	687b      	ldr	r3, [r7, #4]
 810cbc2:	4413      	add	r3, r2
 810cbc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810cbc6:	69bb      	ldr	r3, [r7, #24]
 810cbc8:	f003 0307 	and.w	r3, r3, #7
 810cbcc:	2b00      	cmp	r3, #0
 810cbce:	d00b      	beq.n	810cbe8 <pvPortMalloc+0xfc>
	__asm volatile
 810cbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cbd4:	f383 8811 	msr	BASEPRI, r3
 810cbd8:	f3bf 8f6f 	isb	sy
 810cbdc:	f3bf 8f4f 	dsb	sy
 810cbe0:	613b      	str	r3, [r7, #16]
}
 810cbe2:	bf00      	nop
 810cbe4:	bf00      	nop
 810cbe6:	e7fd      	b.n	810cbe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810cbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cbea:	685a      	ldr	r2, [r3, #4]
 810cbec:	687b      	ldr	r3, [r7, #4]
 810cbee:	1ad2      	subs	r2, r2, r3
 810cbf0:	69bb      	ldr	r3, [r7, #24]
 810cbf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810cbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cbf6:	687a      	ldr	r2, [r7, #4]
 810cbf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810cbfa:	69b8      	ldr	r0, [r7, #24]
 810cbfc:	f000 f90a 	bl	810ce14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810cc00:	4b1d      	ldr	r3, [pc, #116]	@ (810cc78 <pvPortMalloc+0x18c>)
 810cc02:	681a      	ldr	r2, [r3, #0]
 810cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc06:	685b      	ldr	r3, [r3, #4]
 810cc08:	1ad3      	subs	r3, r2, r3
 810cc0a:	4a1b      	ldr	r2, [pc, #108]	@ (810cc78 <pvPortMalloc+0x18c>)
 810cc0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810cc0e:	4b1a      	ldr	r3, [pc, #104]	@ (810cc78 <pvPortMalloc+0x18c>)
 810cc10:	681a      	ldr	r2, [r3, #0]
 810cc12:	4b1b      	ldr	r3, [pc, #108]	@ (810cc80 <pvPortMalloc+0x194>)
 810cc14:	681b      	ldr	r3, [r3, #0]
 810cc16:	429a      	cmp	r2, r3
 810cc18:	d203      	bcs.n	810cc22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810cc1a:	4b17      	ldr	r3, [pc, #92]	@ (810cc78 <pvPortMalloc+0x18c>)
 810cc1c:	681b      	ldr	r3, [r3, #0]
 810cc1e:	4a18      	ldr	r2, [pc, #96]	@ (810cc80 <pvPortMalloc+0x194>)
 810cc20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810cc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc24:	685a      	ldr	r2, [r3, #4]
 810cc26:	4b13      	ldr	r3, [pc, #76]	@ (810cc74 <pvPortMalloc+0x188>)
 810cc28:	681b      	ldr	r3, [r3, #0]
 810cc2a:	431a      	orrs	r2, r3
 810cc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810cc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc32:	2200      	movs	r2, #0
 810cc34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810cc36:	4b13      	ldr	r3, [pc, #76]	@ (810cc84 <pvPortMalloc+0x198>)
 810cc38:	681b      	ldr	r3, [r3, #0]
 810cc3a:	3301      	adds	r3, #1
 810cc3c:	4a11      	ldr	r2, [pc, #68]	@ (810cc84 <pvPortMalloc+0x198>)
 810cc3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810cc40:	f002 fbcc 	bl	810f3dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810cc44:	69fb      	ldr	r3, [r7, #28]
 810cc46:	f003 0307 	and.w	r3, r3, #7
 810cc4a:	2b00      	cmp	r3, #0
 810cc4c:	d00b      	beq.n	810cc66 <pvPortMalloc+0x17a>
	__asm volatile
 810cc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cc52:	f383 8811 	msr	BASEPRI, r3
 810cc56:	f3bf 8f6f 	isb	sy
 810cc5a:	f3bf 8f4f 	dsb	sy
 810cc5e:	60fb      	str	r3, [r7, #12]
}
 810cc60:	bf00      	nop
 810cc62:	bf00      	nop
 810cc64:	e7fd      	b.n	810cc62 <pvPortMalloc+0x176>
	return pvReturn;
 810cc66:	69fb      	ldr	r3, [r7, #28]
}
 810cc68:	4618      	mov	r0, r3
 810cc6a:	3728      	adds	r7, #40	@ 0x28
 810cc6c:	46bd      	mov	sp, r7
 810cc6e:	bd80      	pop	{r7, pc}
 810cc70:	1000aac4 	.word	0x1000aac4
 810cc74:	1000aad8 	.word	0x1000aad8
 810cc78:	1000aac8 	.word	0x1000aac8
 810cc7c:	1000aabc 	.word	0x1000aabc
 810cc80:	1000aacc 	.word	0x1000aacc
 810cc84:	1000aad0 	.word	0x1000aad0

0810cc88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810cc88:	b580      	push	{r7, lr}
 810cc8a:	b086      	sub	sp, #24
 810cc8c:	af00      	add	r7, sp, #0
 810cc8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810cc90:	687b      	ldr	r3, [r7, #4]
 810cc92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810cc94:	687b      	ldr	r3, [r7, #4]
 810cc96:	2b00      	cmp	r3, #0
 810cc98:	d04f      	beq.n	810cd3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810cc9a:	2308      	movs	r3, #8
 810cc9c:	425b      	negs	r3, r3
 810cc9e:	697a      	ldr	r2, [r7, #20]
 810cca0:	4413      	add	r3, r2
 810cca2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810cca4:	697b      	ldr	r3, [r7, #20]
 810cca6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810cca8:	693b      	ldr	r3, [r7, #16]
 810ccaa:	685a      	ldr	r2, [r3, #4]
 810ccac:	4b25      	ldr	r3, [pc, #148]	@ (810cd44 <vPortFree+0xbc>)
 810ccae:	681b      	ldr	r3, [r3, #0]
 810ccb0:	4013      	ands	r3, r2
 810ccb2:	2b00      	cmp	r3, #0
 810ccb4:	d10b      	bne.n	810ccce <vPortFree+0x46>
	__asm volatile
 810ccb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ccba:	f383 8811 	msr	BASEPRI, r3
 810ccbe:	f3bf 8f6f 	isb	sy
 810ccc2:	f3bf 8f4f 	dsb	sy
 810ccc6:	60fb      	str	r3, [r7, #12]
}
 810ccc8:	bf00      	nop
 810ccca:	bf00      	nop
 810cccc:	e7fd      	b.n	810ccca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810ccce:	693b      	ldr	r3, [r7, #16]
 810ccd0:	681b      	ldr	r3, [r3, #0]
 810ccd2:	2b00      	cmp	r3, #0
 810ccd4:	d00b      	beq.n	810ccee <vPortFree+0x66>
	__asm volatile
 810ccd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ccda:	f383 8811 	msr	BASEPRI, r3
 810ccde:	f3bf 8f6f 	isb	sy
 810cce2:	f3bf 8f4f 	dsb	sy
 810cce6:	60bb      	str	r3, [r7, #8]
}
 810cce8:	bf00      	nop
 810ccea:	bf00      	nop
 810ccec:	e7fd      	b.n	810ccea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810ccee:	693b      	ldr	r3, [r7, #16]
 810ccf0:	685a      	ldr	r2, [r3, #4]
 810ccf2:	4b14      	ldr	r3, [pc, #80]	@ (810cd44 <vPortFree+0xbc>)
 810ccf4:	681b      	ldr	r3, [r3, #0]
 810ccf6:	4013      	ands	r3, r2
 810ccf8:	2b00      	cmp	r3, #0
 810ccfa:	d01e      	beq.n	810cd3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810ccfc:	693b      	ldr	r3, [r7, #16]
 810ccfe:	681b      	ldr	r3, [r3, #0]
 810cd00:	2b00      	cmp	r3, #0
 810cd02:	d11a      	bne.n	810cd3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810cd04:	693b      	ldr	r3, [r7, #16]
 810cd06:	685a      	ldr	r2, [r3, #4]
 810cd08:	4b0e      	ldr	r3, [pc, #56]	@ (810cd44 <vPortFree+0xbc>)
 810cd0a:	681b      	ldr	r3, [r3, #0]
 810cd0c:	43db      	mvns	r3, r3
 810cd0e:	401a      	ands	r2, r3
 810cd10:	693b      	ldr	r3, [r7, #16]
 810cd12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810cd14:	f002 fb54 	bl	810f3c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810cd18:	693b      	ldr	r3, [r7, #16]
 810cd1a:	685a      	ldr	r2, [r3, #4]
 810cd1c:	4b0a      	ldr	r3, [pc, #40]	@ (810cd48 <vPortFree+0xc0>)
 810cd1e:	681b      	ldr	r3, [r3, #0]
 810cd20:	4413      	add	r3, r2
 810cd22:	4a09      	ldr	r2, [pc, #36]	@ (810cd48 <vPortFree+0xc0>)
 810cd24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810cd26:	6938      	ldr	r0, [r7, #16]
 810cd28:	f000 f874 	bl	810ce14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810cd2c:	4b07      	ldr	r3, [pc, #28]	@ (810cd4c <vPortFree+0xc4>)
 810cd2e:	681b      	ldr	r3, [r3, #0]
 810cd30:	3301      	adds	r3, #1
 810cd32:	4a06      	ldr	r2, [pc, #24]	@ (810cd4c <vPortFree+0xc4>)
 810cd34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810cd36:	f002 fb51 	bl	810f3dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810cd3a:	bf00      	nop
 810cd3c:	3718      	adds	r7, #24
 810cd3e:	46bd      	mov	sp, r7
 810cd40:	bd80      	pop	{r7, pc}
 810cd42:	bf00      	nop
 810cd44:	1000aad8 	.word	0x1000aad8
 810cd48:	1000aac8 	.word	0x1000aac8
 810cd4c:	1000aad4 	.word	0x1000aad4

0810cd50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810cd50:	b480      	push	{r7}
 810cd52:	b085      	sub	sp, #20
 810cd54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810cd56:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 810cd5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810cd5c:	4b27      	ldr	r3, [pc, #156]	@ (810cdfc <prvHeapInit+0xac>)
 810cd5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810cd60:	68fb      	ldr	r3, [r7, #12]
 810cd62:	f003 0307 	and.w	r3, r3, #7
 810cd66:	2b00      	cmp	r3, #0
 810cd68:	d00c      	beq.n	810cd84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810cd6a:	68fb      	ldr	r3, [r7, #12]
 810cd6c:	3307      	adds	r3, #7
 810cd6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810cd70:	68fb      	ldr	r3, [r7, #12]
 810cd72:	f023 0307 	bic.w	r3, r3, #7
 810cd76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810cd78:	68ba      	ldr	r2, [r7, #8]
 810cd7a:	68fb      	ldr	r3, [r7, #12]
 810cd7c:	1ad3      	subs	r3, r2, r3
 810cd7e:	4a1f      	ldr	r2, [pc, #124]	@ (810cdfc <prvHeapInit+0xac>)
 810cd80:	4413      	add	r3, r2
 810cd82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810cd84:	68fb      	ldr	r3, [r7, #12]
 810cd86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810cd88:	4a1d      	ldr	r2, [pc, #116]	@ (810ce00 <prvHeapInit+0xb0>)
 810cd8a:	687b      	ldr	r3, [r7, #4]
 810cd8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810cd8e:	4b1c      	ldr	r3, [pc, #112]	@ (810ce00 <prvHeapInit+0xb0>)
 810cd90:	2200      	movs	r2, #0
 810cd92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810cd94:	687b      	ldr	r3, [r7, #4]
 810cd96:	68ba      	ldr	r2, [r7, #8]
 810cd98:	4413      	add	r3, r2
 810cd9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810cd9c:	2208      	movs	r2, #8
 810cd9e:	68fb      	ldr	r3, [r7, #12]
 810cda0:	1a9b      	subs	r3, r3, r2
 810cda2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810cda4:	68fb      	ldr	r3, [r7, #12]
 810cda6:	f023 0307 	bic.w	r3, r3, #7
 810cdaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810cdac:	68fb      	ldr	r3, [r7, #12]
 810cdae:	4a15      	ldr	r2, [pc, #84]	@ (810ce04 <prvHeapInit+0xb4>)
 810cdb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810cdb2:	4b14      	ldr	r3, [pc, #80]	@ (810ce04 <prvHeapInit+0xb4>)
 810cdb4:	681b      	ldr	r3, [r3, #0]
 810cdb6:	2200      	movs	r2, #0
 810cdb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810cdba:	4b12      	ldr	r3, [pc, #72]	@ (810ce04 <prvHeapInit+0xb4>)
 810cdbc:	681b      	ldr	r3, [r3, #0]
 810cdbe:	2200      	movs	r2, #0
 810cdc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810cdc2:	687b      	ldr	r3, [r7, #4]
 810cdc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810cdc6:	683b      	ldr	r3, [r7, #0]
 810cdc8:	68fa      	ldr	r2, [r7, #12]
 810cdca:	1ad2      	subs	r2, r2, r3
 810cdcc:	683b      	ldr	r3, [r7, #0]
 810cdce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810cdd0:	4b0c      	ldr	r3, [pc, #48]	@ (810ce04 <prvHeapInit+0xb4>)
 810cdd2:	681a      	ldr	r2, [r3, #0]
 810cdd4:	683b      	ldr	r3, [r7, #0]
 810cdd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810cdd8:	683b      	ldr	r3, [r7, #0]
 810cdda:	685b      	ldr	r3, [r3, #4]
 810cddc:	4a0a      	ldr	r2, [pc, #40]	@ (810ce08 <prvHeapInit+0xb8>)
 810cdde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810cde0:	683b      	ldr	r3, [r7, #0]
 810cde2:	685b      	ldr	r3, [r3, #4]
 810cde4:	4a09      	ldr	r2, [pc, #36]	@ (810ce0c <prvHeapInit+0xbc>)
 810cde6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810cde8:	4b09      	ldr	r3, [pc, #36]	@ (810ce10 <prvHeapInit+0xc0>)
 810cdea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810cdee:	601a      	str	r2, [r3, #0]
}
 810cdf0:	bf00      	nop
 810cdf2:	3714      	adds	r7, #20
 810cdf4:	46bd      	mov	sp, r7
 810cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cdfa:	4770      	bx	lr
 810cdfc:	10000abc 	.word	0x10000abc
 810ce00:	1000aabc 	.word	0x1000aabc
 810ce04:	1000aac4 	.word	0x1000aac4
 810ce08:	1000aacc 	.word	0x1000aacc
 810ce0c:	1000aac8 	.word	0x1000aac8
 810ce10:	1000aad8 	.word	0x1000aad8

0810ce14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810ce14:	b480      	push	{r7}
 810ce16:	b085      	sub	sp, #20
 810ce18:	af00      	add	r7, sp, #0
 810ce1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810ce1c:	4b28      	ldr	r3, [pc, #160]	@ (810cec0 <prvInsertBlockIntoFreeList+0xac>)
 810ce1e:	60fb      	str	r3, [r7, #12]
 810ce20:	e002      	b.n	810ce28 <prvInsertBlockIntoFreeList+0x14>
 810ce22:	68fb      	ldr	r3, [r7, #12]
 810ce24:	681b      	ldr	r3, [r3, #0]
 810ce26:	60fb      	str	r3, [r7, #12]
 810ce28:	68fb      	ldr	r3, [r7, #12]
 810ce2a:	681b      	ldr	r3, [r3, #0]
 810ce2c:	687a      	ldr	r2, [r7, #4]
 810ce2e:	429a      	cmp	r2, r3
 810ce30:	d8f7      	bhi.n	810ce22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810ce32:	68fb      	ldr	r3, [r7, #12]
 810ce34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810ce36:	68fb      	ldr	r3, [r7, #12]
 810ce38:	685b      	ldr	r3, [r3, #4]
 810ce3a:	68ba      	ldr	r2, [r7, #8]
 810ce3c:	4413      	add	r3, r2
 810ce3e:	687a      	ldr	r2, [r7, #4]
 810ce40:	429a      	cmp	r2, r3
 810ce42:	d108      	bne.n	810ce56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810ce44:	68fb      	ldr	r3, [r7, #12]
 810ce46:	685a      	ldr	r2, [r3, #4]
 810ce48:	687b      	ldr	r3, [r7, #4]
 810ce4a:	685b      	ldr	r3, [r3, #4]
 810ce4c:	441a      	add	r2, r3
 810ce4e:	68fb      	ldr	r3, [r7, #12]
 810ce50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810ce52:	68fb      	ldr	r3, [r7, #12]
 810ce54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810ce56:	687b      	ldr	r3, [r7, #4]
 810ce58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810ce5a:	687b      	ldr	r3, [r7, #4]
 810ce5c:	685b      	ldr	r3, [r3, #4]
 810ce5e:	68ba      	ldr	r2, [r7, #8]
 810ce60:	441a      	add	r2, r3
 810ce62:	68fb      	ldr	r3, [r7, #12]
 810ce64:	681b      	ldr	r3, [r3, #0]
 810ce66:	429a      	cmp	r2, r3
 810ce68:	d118      	bne.n	810ce9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810ce6a:	68fb      	ldr	r3, [r7, #12]
 810ce6c:	681a      	ldr	r2, [r3, #0]
 810ce6e:	4b15      	ldr	r3, [pc, #84]	@ (810cec4 <prvInsertBlockIntoFreeList+0xb0>)
 810ce70:	681b      	ldr	r3, [r3, #0]
 810ce72:	429a      	cmp	r2, r3
 810ce74:	d00d      	beq.n	810ce92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810ce76:	687b      	ldr	r3, [r7, #4]
 810ce78:	685a      	ldr	r2, [r3, #4]
 810ce7a:	68fb      	ldr	r3, [r7, #12]
 810ce7c:	681b      	ldr	r3, [r3, #0]
 810ce7e:	685b      	ldr	r3, [r3, #4]
 810ce80:	441a      	add	r2, r3
 810ce82:	687b      	ldr	r3, [r7, #4]
 810ce84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810ce86:	68fb      	ldr	r3, [r7, #12]
 810ce88:	681b      	ldr	r3, [r3, #0]
 810ce8a:	681a      	ldr	r2, [r3, #0]
 810ce8c:	687b      	ldr	r3, [r7, #4]
 810ce8e:	601a      	str	r2, [r3, #0]
 810ce90:	e008      	b.n	810cea4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810ce92:	4b0c      	ldr	r3, [pc, #48]	@ (810cec4 <prvInsertBlockIntoFreeList+0xb0>)
 810ce94:	681a      	ldr	r2, [r3, #0]
 810ce96:	687b      	ldr	r3, [r7, #4]
 810ce98:	601a      	str	r2, [r3, #0]
 810ce9a:	e003      	b.n	810cea4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810ce9c:	68fb      	ldr	r3, [r7, #12]
 810ce9e:	681a      	ldr	r2, [r3, #0]
 810cea0:	687b      	ldr	r3, [r7, #4]
 810cea2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810cea4:	68fa      	ldr	r2, [r7, #12]
 810cea6:	687b      	ldr	r3, [r7, #4]
 810cea8:	429a      	cmp	r2, r3
 810ceaa:	d002      	beq.n	810ceb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810ceac:	68fb      	ldr	r3, [r7, #12]
 810ceae:	687a      	ldr	r2, [r7, #4]
 810ceb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810ceb2:	bf00      	nop
 810ceb4:	3714      	adds	r7, #20
 810ceb6:	46bd      	mov	sp, r7
 810ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cebc:	4770      	bx	lr
 810cebe:	bf00      	nop
 810cec0:	1000aabc 	.word	0x1000aabc
 810cec4:	1000aac4 	.word	0x1000aac4

0810cec8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810cec8:	b480      	push	{r7}
 810ceca:	b083      	sub	sp, #12
 810cecc:	af00      	add	r7, sp, #0
 810cece:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810ced0:	687b      	ldr	r3, [r7, #4]
 810ced2:	f103 0208 	add.w	r2, r3, #8
 810ced6:	687b      	ldr	r3, [r7, #4]
 810ced8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810ceda:	687b      	ldr	r3, [r7, #4]
 810cedc:	f04f 32ff 	mov.w	r2, #4294967295
 810cee0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810cee2:	687b      	ldr	r3, [r7, #4]
 810cee4:	f103 0208 	add.w	r2, r3, #8
 810cee8:	687b      	ldr	r3, [r7, #4]
 810ceea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810ceec:	687b      	ldr	r3, [r7, #4]
 810ceee:	f103 0208 	add.w	r2, r3, #8
 810cef2:	687b      	ldr	r3, [r7, #4]
 810cef4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810cef6:	687b      	ldr	r3, [r7, #4]
 810cef8:	2200      	movs	r2, #0
 810cefa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810cefc:	bf00      	nop
 810cefe:	370c      	adds	r7, #12
 810cf00:	46bd      	mov	sp, r7
 810cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf06:	4770      	bx	lr

0810cf08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810cf08:	b480      	push	{r7}
 810cf0a:	b083      	sub	sp, #12
 810cf0c:	af00      	add	r7, sp, #0
 810cf0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810cf10:	687b      	ldr	r3, [r7, #4]
 810cf12:	2200      	movs	r2, #0
 810cf14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810cf16:	bf00      	nop
 810cf18:	370c      	adds	r7, #12
 810cf1a:	46bd      	mov	sp, r7
 810cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf20:	4770      	bx	lr

0810cf22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810cf22:	b480      	push	{r7}
 810cf24:	b085      	sub	sp, #20
 810cf26:	af00      	add	r7, sp, #0
 810cf28:	6078      	str	r0, [r7, #4]
 810cf2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810cf2c:	687b      	ldr	r3, [r7, #4]
 810cf2e:	685b      	ldr	r3, [r3, #4]
 810cf30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810cf32:	683b      	ldr	r3, [r7, #0]
 810cf34:	68fa      	ldr	r2, [r7, #12]
 810cf36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810cf38:	68fb      	ldr	r3, [r7, #12]
 810cf3a:	689a      	ldr	r2, [r3, #8]
 810cf3c:	683b      	ldr	r3, [r7, #0]
 810cf3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810cf40:	68fb      	ldr	r3, [r7, #12]
 810cf42:	689b      	ldr	r3, [r3, #8]
 810cf44:	683a      	ldr	r2, [r7, #0]
 810cf46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810cf48:	68fb      	ldr	r3, [r7, #12]
 810cf4a:	683a      	ldr	r2, [r7, #0]
 810cf4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810cf4e:	683b      	ldr	r3, [r7, #0]
 810cf50:	687a      	ldr	r2, [r7, #4]
 810cf52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810cf54:	687b      	ldr	r3, [r7, #4]
 810cf56:	681b      	ldr	r3, [r3, #0]
 810cf58:	1c5a      	adds	r2, r3, #1
 810cf5a:	687b      	ldr	r3, [r7, #4]
 810cf5c:	601a      	str	r2, [r3, #0]
}
 810cf5e:	bf00      	nop
 810cf60:	3714      	adds	r7, #20
 810cf62:	46bd      	mov	sp, r7
 810cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf68:	4770      	bx	lr

0810cf6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810cf6a:	b480      	push	{r7}
 810cf6c:	b085      	sub	sp, #20
 810cf6e:	af00      	add	r7, sp, #0
 810cf70:	6078      	str	r0, [r7, #4]
 810cf72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810cf74:	683b      	ldr	r3, [r7, #0]
 810cf76:	681b      	ldr	r3, [r3, #0]
 810cf78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810cf7a:	68bb      	ldr	r3, [r7, #8]
 810cf7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cf80:	d103      	bne.n	810cf8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810cf82:	687b      	ldr	r3, [r7, #4]
 810cf84:	691b      	ldr	r3, [r3, #16]
 810cf86:	60fb      	str	r3, [r7, #12]
 810cf88:	e00c      	b.n	810cfa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810cf8a:	687b      	ldr	r3, [r7, #4]
 810cf8c:	3308      	adds	r3, #8
 810cf8e:	60fb      	str	r3, [r7, #12]
 810cf90:	e002      	b.n	810cf98 <vListInsert+0x2e>
 810cf92:	68fb      	ldr	r3, [r7, #12]
 810cf94:	685b      	ldr	r3, [r3, #4]
 810cf96:	60fb      	str	r3, [r7, #12]
 810cf98:	68fb      	ldr	r3, [r7, #12]
 810cf9a:	685b      	ldr	r3, [r3, #4]
 810cf9c:	681b      	ldr	r3, [r3, #0]
 810cf9e:	68ba      	ldr	r2, [r7, #8]
 810cfa0:	429a      	cmp	r2, r3
 810cfa2:	d2f6      	bcs.n	810cf92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810cfa4:	68fb      	ldr	r3, [r7, #12]
 810cfa6:	685a      	ldr	r2, [r3, #4]
 810cfa8:	683b      	ldr	r3, [r7, #0]
 810cfaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810cfac:	683b      	ldr	r3, [r7, #0]
 810cfae:	685b      	ldr	r3, [r3, #4]
 810cfb0:	683a      	ldr	r2, [r7, #0]
 810cfb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810cfb4:	683b      	ldr	r3, [r7, #0]
 810cfb6:	68fa      	ldr	r2, [r7, #12]
 810cfb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810cfba:	68fb      	ldr	r3, [r7, #12]
 810cfbc:	683a      	ldr	r2, [r7, #0]
 810cfbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810cfc0:	683b      	ldr	r3, [r7, #0]
 810cfc2:	687a      	ldr	r2, [r7, #4]
 810cfc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810cfc6:	687b      	ldr	r3, [r7, #4]
 810cfc8:	681b      	ldr	r3, [r3, #0]
 810cfca:	1c5a      	adds	r2, r3, #1
 810cfcc:	687b      	ldr	r3, [r7, #4]
 810cfce:	601a      	str	r2, [r3, #0]
}
 810cfd0:	bf00      	nop
 810cfd2:	3714      	adds	r7, #20
 810cfd4:	46bd      	mov	sp, r7
 810cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfda:	4770      	bx	lr

0810cfdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810cfdc:	b480      	push	{r7}
 810cfde:	b085      	sub	sp, #20
 810cfe0:	af00      	add	r7, sp, #0
 810cfe2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810cfe4:	687b      	ldr	r3, [r7, #4]
 810cfe6:	691b      	ldr	r3, [r3, #16]
 810cfe8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810cfea:	687b      	ldr	r3, [r7, #4]
 810cfec:	685b      	ldr	r3, [r3, #4]
 810cfee:	687a      	ldr	r2, [r7, #4]
 810cff0:	6892      	ldr	r2, [r2, #8]
 810cff2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810cff4:	687b      	ldr	r3, [r7, #4]
 810cff6:	689b      	ldr	r3, [r3, #8]
 810cff8:	687a      	ldr	r2, [r7, #4]
 810cffa:	6852      	ldr	r2, [r2, #4]
 810cffc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810cffe:	68fb      	ldr	r3, [r7, #12]
 810d000:	685b      	ldr	r3, [r3, #4]
 810d002:	687a      	ldr	r2, [r7, #4]
 810d004:	429a      	cmp	r2, r3
 810d006:	d103      	bne.n	810d010 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810d008:	687b      	ldr	r3, [r7, #4]
 810d00a:	689a      	ldr	r2, [r3, #8]
 810d00c:	68fb      	ldr	r3, [r7, #12]
 810d00e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810d010:	687b      	ldr	r3, [r7, #4]
 810d012:	2200      	movs	r2, #0
 810d014:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810d016:	68fb      	ldr	r3, [r7, #12]
 810d018:	681b      	ldr	r3, [r3, #0]
 810d01a:	1e5a      	subs	r2, r3, #1
 810d01c:	68fb      	ldr	r3, [r7, #12]
 810d01e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810d020:	68fb      	ldr	r3, [r7, #12]
 810d022:	681b      	ldr	r3, [r3, #0]
}
 810d024:	4618      	mov	r0, r3
 810d026:	3714      	adds	r7, #20
 810d028:	46bd      	mov	sp, r7
 810d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d02e:	4770      	bx	lr

0810d030 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810d030:	b480      	push	{r7}
 810d032:	b085      	sub	sp, #20
 810d034:	af00      	add	r7, sp, #0
 810d036:	60f8      	str	r0, [r7, #12]
 810d038:	60b9      	str	r1, [r7, #8]
 810d03a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810d03c:	68fb      	ldr	r3, [r7, #12]
 810d03e:	3b04      	subs	r3, #4
 810d040:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810d042:	68fb      	ldr	r3, [r7, #12]
 810d044:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810d048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810d04a:	68fb      	ldr	r3, [r7, #12]
 810d04c:	3b04      	subs	r3, #4
 810d04e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810d050:	68bb      	ldr	r3, [r7, #8]
 810d052:	f023 0201 	bic.w	r2, r3, #1
 810d056:	68fb      	ldr	r3, [r7, #12]
 810d058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810d05a:	68fb      	ldr	r3, [r7, #12]
 810d05c:	3b04      	subs	r3, #4
 810d05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810d060:	4a0c      	ldr	r2, [pc, #48]	@ (810d094 <pxPortInitialiseStack+0x64>)
 810d062:	68fb      	ldr	r3, [r7, #12]
 810d064:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810d066:	68fb      	ldr	r3, [r7, #12]
 810d068:	3b14      	subs	r3, #20
 810d06a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810d06c:	687a      	ldr	r2, [r7, #4]
 810d06e:	68fb      	ldr	r3, [r7, #12]
 810d070:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810d072:	68fb      	ldr	r3, [r7, #12]
 810d074:	3b04      	subs	r3, #4
 810d076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810d078:	68fb      	ldr	r3, [r7, #12]
 810d07a:	f06f 0202 	mvn.w	r2, #2
 810d07e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810d080:	68fb      	ldr	r3, [r7, #12]
 810d082:	3b20      	subs	r3, #32
 810d084:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810d086:	68fb      	ldr	r3, [r7, #12]
}
 810d088:	4618      	mov	r0, r3
 810d08a:	3714      	adds	r7, #20
 810d08c:	46bd      	mov	sp, r7
 810d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d092:	4770      	bx	lr
 810d094:	0810d099 	.word	0x0810d099

0810d098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810d098:	b480      	push	{r7}
 810d09a:	b085      	sub	sp, #20
 810d09c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810d09e:	2300      	movs	r3, #0
 810d0a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810d0a2:	4b13      	ldr	r3, [pc, #76]	@ (810d0f0 <prvTaskExitError+0x58>)
 810d0a4:	681b      	ldr	r3, [r3, #0]
 810d0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d0aa:	d00b      	beq.n	810d0c4 <prvTaskExitError+0x2c>
	__asm volatile
 810d0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d0b0:	f383 8811 	msr	BASEPRI, r3
 810d0b4:	f3bf 8f6f 	isb	sy
 810d0b8:	f3bf 8f4f 	dsb	sy
 810d0bc:	60fb      	str	r3, [r7, #12]
}
 810d0be:	bf00      	nop
 810d0c0:	bf00      	nop
 810d0c2:	e7fd      	b.n	810d0c0 <prvTaskExitError+0x28>
	__asm volatile
 810d0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d0c8:	f383 8811 	msr	BASEPRI, r3
 810d0cc:	f3bf 8f6f 	isb	sy
 810d0d0:	f3bf 8f4f 	dsb	sy
 810d0d4:	60bb      	str	r3, [r7, #8]
}
 810d0d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810d0d8:	bf00      	nop
 810d0da:	687b      	ldr	r3, [r7, #4]
 810d0dc:	2b00      	cmp	r3, #0
 810d0de:	d0fc      	beq.n	810d0da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810d0e0:	bf00      	nop
 810d0e2:	bf00      	nop
 810d0e4:	3714      	adds	r7, #20
 810d0e6:	46bd      	mov	sp, r7
 810d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0ec:	4770      	bx	lr
 810d0ee:	bf00      	nop
 810d0f0:	10000024 	.word	0x10000024
	...

0810d100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810d100:	4b07      	ldr	r3, [pc, #28]	@ (810d120 <pxCurrentTCBConst2>)
 810d102:	6819      	ldr	r1, [r3, #0]
 810d104:	6808      	ldr	r0, [r1, #0]
 810d106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d10a:	f380 8809 	msr	PSP, r0
 810d10e:	f3bf 8f6f 	isb	sy
 810d112:	f04f 0000 	mov.w	r0, #0
 810d116:	f380 8811 	msr	BASEPRI, r0
 810d11a:	4770      	bx	lr
 810d11c:	f3af 8000 	nop.w

0810d120 <pxCurrentTCBConst2>:
 810d120:	1000ab24 	.word	0x1000ab24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810d124:	bf00      	nop
 810d126:	bf00      	nop

0810d128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810d128:	4808      	ldr	r0, [pc, #32]	@ (810d14c <prvPortStartFirstTask+0x24>)
 810d12a:	6800      	ldr	r0, [r0, #0]
 810d12c:	6800      	ldr	r0, [r0, #0]
 810d12e:	f380 8808 	msr	MSP, r0
 810d132:	f04f 0000 	mov.w	r0, #0
 810d136:	f380 8814 	msr	CONTROL, r0
 810d13a:	b662      	cpsie	i
 810d13c:	b661      	cpsie	f
 810d13e:	f3bf 8f4f 	dsb	sy
 810d142:	f3bf 8f6f 	isb	sy
 810d146:	df00      	svc	0
 810d148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810d14a:	bf00      	nop
 810d14c:	e000ed08 	.word	0xe000ed08

0810d150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810d150:	b580      	push	{r7, lr}
 810d152:	b086      	sub	sp, #24
 810d154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810d156:	4b47      	ldr	r3, [pc, #284]	@ (810d274 <xPortStartScheduler+0x124>)
 810d158:	681b      	ldr	r3, [r3, #0]
 810d15a:	4a47      	ldr	r2, [pc, #284]	@ (810d278 <xPortStartScheduler+0x128>)
 810d15c:	4293      	cmp	r3, r2
 810d15e:	d10b      	bne.n	810d178 <xPortStartScheduler+0x28>
	__asm volatile
 810d160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d164:	f383 8811 	msr	BASEPRI, r3
 810d168:	f3bf 8f6f 	isb	sy
 810d16c:	f3bf 8f4f 	dsb	sy
 810d170:	613b      	str	r3, [r7, #16]
}
 810d172:	bf00      	nop
 810d174:	bf00      	nop
 810d176:	e7fd      	b.n	810d174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810d178:	4b3e      	ldr	r3, [pc, #248]	@ (810d274 <xPortStartScheduler+0x124>)
 810d17a:	681b      	ldr	r3, [r3, #0]
 810d17c:	4a3f      	ldr	r2, [pc, #252]	@ (810d27c <xPortStartScheduler+0x12c>)
 810d17e:	4293      	cmp	r3, r2
 810d180:	d10b      	bne.n	810d19a <xPortStartScheduler+0x4a>
	__asm volatile
 810d182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d186:	f383 8811 	msr	BASEPRI, r3
 810d18a:	f3bf 8f6f 	isb	sy
 810d18e:	f3bf 8f4f 	dsb	sy
 810d192:	60fb      	str	r3, [r7, #12]
}
 810d194:	bf00      	nop
 810d196:	bf00      	nop
 810d198:	e7fd      	b.n	810d196 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810d19a:	4b39      	ldr	r3, [pc, #228]	@ (810d280 <xPortStartScheduler+0x130>)
 810d19c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810d19e:	697b      	ldr	r3, [r7, #20]
 810d1a0:	781b      	ldrb	r3, [r3, #0]
 810d1a2:	b2db      	uxtb	r3, r3
 810d1a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810d1a6:	697b      	ldr	r3, [r7, #20]
 810d1a8:	22ff      	movs	r2, #255	@ 0xff
 810d1aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810d1ac:	697b      	ldr	r3, [r7, #20]
 810d1ae:	781b      	ldrb	r3, [r3, #0]
 810d1b0:	b2db      	uxtb	r3, r3
 810d1b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810d1b4:	78fb      	ldrb	r3, [r7, #3]
 810d1b6:	b2db      	uxtb	r3, r3
 810d1b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810d1bc:	b2da      	uxtb	r2, r3
 810d1be:	4b31      	ldr	r3, [pc, #196]	@ (810d284 <xPortStartScheduler+0x134>)
 810d1c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810d1c2:	4b31      	ldr	r3, [pc, #196]	@ (810d288 <xPortStartScheduler+0x138>)
 810d1c4:	2207      	movs	r2, #7
 810d1c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810d1c8:	e009      	b.n	810d1de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810d1ca:	4b2f      	ldr	r3, [pc, #188]	@ (810d288 <xPortStartScheduler+0x138>)
 810d1cc:	681b      	ldr	r3, [r3, #0]
 810d1ce:	3b01      	subs	r3, #1
 810d1d0:	4a2d      	ldr	r2, [pc, #180]	@ (810d288 <xPortStartScheduler+0x138>)
 810d1d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810d1d4:	78fb      	ldrb	r3, [r7, #3]
 810d1d6:	b2db      	uxtb	r3, r3
 810d1d8:	005b      	lsls	r3, r3, #1
 810d1da:	b2db      	uxtb	r3, r3
 810d1dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810d1de:	78fb      	ldrb	r3, [r7, #3]
 810d1e0:	b2db      	uxtb	r3, r3
 810d1e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d1e6:	2b80      	cmp	r3, #128	@ 0x80
 810d1e8:	d0ef      	beq.n	810d1ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810d1ea:	4b27      	ldr	r3, [pc, #156]	@ (810d288 <xPortStartScheduler+0x138>)
 810d1ec:	681b      	ldr	r3, [r3, #0]
 810d1ee:	f1c3 0307 	rsb	r3, r3, #7
 810d1f2:	2b04      	cmp	r3, #4
 810d1f4:	d00b      	beq.n	810d20e <xPortStartScheduler+0xbe>
	__asm volatile
 810d1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d1fa:	f383 8811 	msr	BASEPRI, r3
 810d1fe:	f3bf 8f6f 	isb	sy
 810d202:	f3bf 8f4f 	dsb	sy
 810d206:	60bb      	str	r3, [r7, #8]
}
 810d208:	bf00      	nop
 810d20a:	bf00      	nop
 810d20c:	e7fd      	b.n	810d20a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810d20e:	4b1e      	ldr	r3, [pc, #120]	@ (810d288 <xPortStartScheduler+0x138>)
 810d210:	681b      	ldr	r3, [r3, #0]
 810d212:	021b      	lsls	r3, r3, #8
 810d214:	4a1c      	ldr	r2, [pc, #112]	@ (810d288 <xPortStartScheduler+0x138>)
 810d216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810d218:	4b1b      	ldr	r3, [pc, #108]	@ (810d288 <xPortStartScheduler+0x138>)
 810d21a:	681b      	ldr	r3, [r3, #0]
 810d21c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810d220:	4a19      	ldr	r2, [pc, #100]	@ (810d288 <xPortStartScheduler+0x138>)
 810d222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810d224:	687b      	ldr	r3, [r7, #4]
 810d226:	b2da      	uxtb	r2, r3
 810d228:	697b      	ldr	r3, [r7, #20]
 810d22a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810d22c:	4b17      	ldr	r3, [pc, #92]	@ (810d28c <xPortStartScheduler+0x13c>)
 810d22e:	681b      	ldr	r3, [r3, #0]
 810d230:	4a16      	ldr	r2, [pc, #88]	@ (810d28c <xPortStartScheduler+0x13c>)
 810d232:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810d236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810d238:	4b14      	ldr	r3, [pc, #80]	@ (810d28c <xPortStartScheduler+0x13c>)
 810d23a:	681b      	ldr	r3, [r3, #0]
 810d23c:	4a13      	ldr	r2, [pc, #76]	@ (810d28c <xPortStartScheduler+0x13c>)
 810d23e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810d242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810d244:	f000 f8da 	bl	810d3fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810d248:	4b11      	ldr	r3, [pc, #68]	@ (810d290 <xPortStartScheduler+0x140>)
 810d24a:	2200      	movs	r2, #0
 810d24c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810d24e:	f000 f8f9 	bl	810d444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810d252:	4b10      	ldr	r3, [pc, #64]	@ (810d294 <xPortStartScheduler+0x144>)
 810d254:	681b      	ldr	r3, [r3, #0]
 810d256:	4a0f      	ldr	r2, [pc, #60]	@ (810d294 <xPortStartScheduler+0x144>)
 810d258:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810d25c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810d25e:	f7ff ff63 	bl	810d128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810d262:	f002 fa35 	bl	810f6d0 <vTaskSwitchContext>
	prvTaskExitError();
 810d266:	f7ff ff17 	bl	810d098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810d26a:	2300      	movs	r3, #0
}
 810d26c:	4618      	mov	r0, r3
 810d26e:	3718      	adds	r7, #24
 810d270:	46bd      	mov	sp, r7
 810d272:	bd80      	pop	{r7, pc}
 810d274:	e000ed00 	.word	0xe000ed00
 810d278:	410fc271 	.word	0x410fc271
 810d27c:	410fc270 	.word	0x410fc270
 810d280:	e000e400 	.word	0xe000e400
 810d284:	1000aadc 	.word	0x1000aadc
 810d288:	1000aae0 	.word	0x1000aae0
 810d28c:	e000ed20 	.word	0xe000ed20
 810d290:	10000024 	.word	0x10000024
 810d294:	e000ef34 	.word	0xe000ef34

0810d298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810d298:	b480      	push	{r7}
 810d29a:	b083      	sub	sp, #12
 810d29c:	af00      	add	r7, sp, #0
	__asm volatile
 810d29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d2a2:	f383 8811 	msr	BASEPRI, r3
 810d2a6:	f3bf 8f6f 	isb	sy
 810d2aa:	f3bf 8f4f 	dsb	sy
 810d2ae:	607b      	str	r3, [r7, #4]
}
 810d2b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810d2b2:	4b10      	ldr	r3, [pc, #64]	@ (810d2f4 <vPortEnterCritical+0x5c>)
 810d2b4:	681b      	ldr	r3, [r3, #0]
 810d2b6:	3301      	adds	r3, #1
 810d2b8:	4a0e      	ldr	r2, [pc, #56]	@ (810d2f4 <vPortEnterCritical+0x5c>)
 810d2ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810d2bc:	4b0d      	ldr	r3, [pc, #52]	@ (810d2f4 <vPortEnterCritical+0x5c>)
 810d2be:	681b      	ldr	r3, [r3, #0]
 810d2c0:	2b01      	cmp	r3, #1
 810d2c2:	d110      	bne.n	810d2e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810d2c4:	4b0c      	ldr	r3, [pc, #48]	@ (810d2f8 <vPortEnterCritical+0x60>)
 810d2c6:	681b      	ldr	r3, [r3, #0]
 810d2c8:	b2db      	uxtb	r3, r3
 810d2ca:	2b00      	cmp	r3, #0
 810d2cc:	d00b      	beq.n	810d2e6 <vPortEnterCritical+0x4e>
	__asm volatile
 810d2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d2d2:	f383 8811 	msr	BASEPRI, r3
 810d2d6:	f3bf 8f6f 	isb	sy
 810d2da:	f3bf 8f4f 	dsb	sy
 810d2de:	603b      	str	r3, [r7, #0]
}
 810d2e0:	bf00      	nop
 810d2e2:	bf00      	nop
 810d2e4:	e7fd      	b.n	810d2e2 <vPortEnterCritical+0x4a>
	}
}
 810d2e6:	bf00      	nop
 810d2e8:	370c      	adds	r7, #12
 810d2ea:	46bd      	mov	sp, r7
 810d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d2f0:	4770      	bx	lr
 810d2f2:	bf00      	nop
 810d2f4:	10000024 	.word	0x10000024
 810d2f8:	e000ed04 	.word	0xe000ed04

0810d2fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810d2fc:	b480      	push	{r7}
 810d2fe:	b083      	sub	sp, #12
 810d300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810d302:	4b12      	ldr	r3, [pc, #72]	@ (810d34c <vPortExitCritical+0x50>)
 810d304:	681b      	ldr	r3, [r3, #0]
 810d306:	2b00      	cmp	r3, #0
 810d308:	d10b      	bne.n	810d322 <vPortExitCritical+0x26>
	__asm volatile
 810d30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d30e:	f383 8811 	msr	BASEPRI, r3
 810d312:	f3bf 8f6f 	isb	sy
 810d316:	f3bf 8f4f 	dsb	sy
 810d31a:	607b      	str	r3, [r7, #4]
}
 810d31c:	bf00      	nop
 810d31e:	bf00      	nop
 810d320:	e7fd      	b.n	810d31e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810d322:	4b0a      	ldr	r3, [pc, #40]	@ (810d34c <vPortExitCritical+0x50>)
 810d324:	681b      	ldr	r3, [r3, #0]
 810d326:	3b01      	subs	r3, #1
 810d328:	4a08      	ldr	r2, [pc, #32]	@ (810d34c <vPortExitCritical+0x50>)
 810d32a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810d32c:	4b07      	ldr	r3, [pc, #28]	@ (810d34c <vPortExitCritical+0x50>)
 810d32e:	681b      	ldr	r3, [r3, #0]
 810d330:	2b00      	cmp	r3, #0
 810d332:	d105      	bne.n	810d340 <vPortExitCritical+0x44>
 810d334:	2300      	movs	r3, #0
 810d336:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810d338:	683b      	ldr	r3, [r7, #0]
 810d33a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810d33e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810d340:	bf00      	nop
 810d342:	370c      	adds	r7, #12
 810d344:	46bd      	mov	sp, r7
 810d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d34a:	4770      	bx	lr
 810d34c:	10000024 	.word	0x10000024

0810d350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810d350:	f3ef 8009 	mrs	r0, PSP
 810d354:	f3bf 8f6f 	isb	sy
 810d358:	4b15      	ldr	r3, [pc, #84]	@ (810d3b0 <pxCurrentTCBConst>)
 810d35a:	681a      	ldr	r2, [r3, #0]
 810d35c:	f01e 0f10 	tst.w	lr, #16
 810d360:	bf08      	it	eq
 810d362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810d366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d36a:	6010      	str	r0, [r2, #0]
 810d36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810d370:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810d374:	f380 8811 	msr	BASEPRI, r0
 810d378:	f3bf 8f4f 	dsb	sy
 810d37c:	f3bf 8f6f 	isb	sy
 810d380:	f002 f9a6 	bl	810f6d0 <vTaskSwitchContext>
 810d384:	f04f 0000 	mov.w	r0, #0
 810d388:	f380 8811 	msr	BASEPRI, r0
 810d38c:	bc09      	pop	{r0, r3}
 810d38e:	6819      	ldr	r1, [r3, #0]
 810d390:	6808      	ldr	r0, [r1, #0]
 810d392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d396:	f01e 0f10 	tst.w	lr, #16
 810d39a:	bf08      	it	eq
 810d39c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810d3a0:	f380 8809 	msr	PSP, r0
 810d3a4:	f3bf 8f6f 	isb	sy
 810d3a8:	4770      	bx	lr
 810d3aa:	bf00      	nop
 810d3ac:	f3af 8000 	nop.w

0810d3b0 <pxCurrentTCBConst>:
 810d3b0:	1000ab24 	.word	0x1000ab24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810d3b4:	bf00      	nop
 810d3b6:	bf00      	nop

0810d3b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810d3b8:	b580      	push	{r7, lr}
 810d3ba:	b082      	sub	sp, #8
 810d3bc:	af00      	add	r7, sp, #0
	__asm volatile
 810d3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d3c2:	f383 8811 	msr	BASEPRI, r3
 810d3c6:	f3bf 8f6f 	isb	sy
 810d3ca:	f3bf 8f4f 	dsb	sy
 810d3ce:	607b      	str	r3, [r7, #4]
}
 810d3d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810d3d2:	f002 f8c3 	bl	810f55c <xTaskIncrementTick>
 810d3d6:	4603      	mov	r3, r0
 810d3d8:	2b00      	cmp	r3, #0
 810d3da:	d003      	beq.n	810d3e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810d3dc:	4b06      	ldr	r3, [pc, #24]	@ (810d3f8 <xPortSysTickHandler+0x40>)
 810d3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d3e2:	601a      	str	r2, [r3, #0]
 810d3e4:	2300      	movs	r3, #0
 810d3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 810d3e8:	683b      	ldr	r3, [r7, #0]
 810d3ea:	f383 8811 	msr	BASEPRI, r3
}
 810d3ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810d3f0:	bf00      	nop
 810d3f2:	3708      	adds	r7, #8
 810d3f4:	46bd      	mov	sp, r7
 810d3f6:	bd80      	pop	{r7, pc}
 810d3f8:	e000ed04 	.word	0xe000ed04

0810d3fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810d3fc:	b480      	push	{r7}
 810d3fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810d400:	4b0b      	ldr	r3, [pc, #44]	@ (810d430 <vPortSetupTimerInterrupt+0x34>)
 810d402:	2200      	movs	r2, #0
 810d404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810d406:	4b0b      	ldr	r3, [pc, #44]	@ (810d434 <vPortSetupTimerInterrupt+0x38>)
 810d408:	2200      	movs	r2, #0
 810d40a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810d40c:	4b0a      	ldr	r3, [pc, #40]	@ (810d438 <vPortSetupTimerInterrupt+0x3c>)
 810d40e:	681b      	ldr	r3, [r3, #0]
 810d410:	4a0a      	ldr	r2, [pc, #40]	@ (810d43c <vPortSetupTimerInterrupt+0x40>)
 810d412:	fba2 2303 	umull	r2, r3, r2, r3
 810d416:	099b      	lsrs	r3, r3, #6
 810d418:	4a09      	ldr	r2, [pc, #36]	@ (810d440 <vPortSetupTimerInterrupt+0x44>)
 810d41a:	3b01      	subs	r3, #1
 810d41c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810d41e:	4b04      	ldr	r3, [pc, #16]	@ (810d430 <vPortSetupTimerInterrupt+0x34>)
 810d420:	2207      	movs	r2, #7
 810d422:	601a      	str	r2, [r3, #0]
}
 810d424:	bf00      	nop
 810d426:	46bd      	mov	sp, r7
 810d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d42c:	4770      	bx	lr
 810d42e:	bf00      	nop
 810d430:	e000e010 	.word	0xe000e010
 810d434:	e000e018 	.word	0xe000e018
 810d438:	10000018 	.word	0x10000018
 810d43c:	10624dd3 	.word	0x10624dd3
 810d440:	e000e014 	.word	0xe000e014

0810d444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810d444:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810d454 <vPortEnableVFP+0x10>
 810d448:	6801      	ldr	r1, [r0, #0]
 810d44a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810d44e:	6001      	str	r1, [r0, #0]
 810d450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810d452:	bf00      	nop
 810d454:	e000ed88 	.word	0xe000ed88

0810d458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810d458:	b480      	push	{r7}
 810d45a:	b085      	sub	sp, #20
 810d45c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810d45e:	f3ef 8305 	mrs	r3, IPSR
 810d462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810d464:	68fb      	ldr	r3, [r7, #12]
 810d466:	2b0f      	cmp	r3, #15
 810d468:	d915      	bls.n	810d496 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810d46a:	4a18      	ldr	r2, [pc, #96]	@ (810d4cc <vPortValidateInterruptPriority+0x74>)
 810d46c:	68fb      	ldr	r3, [r7, #12]
 810d46e:	4413      	add	r3, r2
 810d470:	781b      	ldrb	r3, [r3, #0]
 810d472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810d474:	4b16      	ldr	r3, [pc, #88]	@ (810d4d0 <vPortValidateInterruptPriority+0x78>)
 810d476:	781b      	ldrb	r3, [r3, #0]
 810d478:	7afa      	ldrb	r2, [r7, #11]
 810d47a:	429a      	cmp	r2, r3
 810d47c:	d20b      	bcs.n	810d496 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810d47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d482:	f383 8811 	msr	BASEPRI, r3
 810d486:	f3bf 8f6f 	isb	sy
 810d48a:	f3bf 8f4f 	dsb	sy
 810d48e:	607b      	str	r3, [r7, #4]
}
 810d490:	bf00      	nop
 810d492:	bf00      	nop
 810d494:	e7fd      	b.n	810d492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810d496:	4b0f      	ldr	r3, [pc, #60]	@ (810d4d4 <vPortValidateInterruptPriority+0x7c>)
 810d498:	681b      	ldr	r3, [r3, #0]
 810d49a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810d49e:	4b0e      	ldr	r3, [pc, #56]	@ (810d4d8 <vPortValidateInterruptPriority+0x80>)
 810d4a0:	681b      	ldr	r3, [r3, #0]
 810d4a2:	429a      	cmp	r2, r3
 810d4a4:	d90b      	bls.n	810d4be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810d4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d4aa:	f383 8811 	msr	BASEPRI, r3
 810d4ae:	f3bf 8f6f 	isb	sy
 810d4b2:	f3bf 8f4f 	dsb	sy
 810d4b6:	603b      	str	r3, [r7, #0]
}
 810d4b8:	bf00      	nop
 810d4ba:	bf00      	nop
 810d4bc:	e7fd      	b.n	810d4ba <vPortValidateInterruptPriority+0x62>
	}
 810d4be:	bf00      	nop
 810d4c0:	3714      	adds	r7, #20
 810d4c2:	46bd      	mov	sp, r7
 810d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4c8:	4770      	bx	lr
 810d4ca:	bf00      	nop
 810d4cc:	e000e3f0 	.word	0xe000e3f0
 810d4d0:	1000aadc 	.word	0x1000aadc
 810d4d4:	e000ed0c 	.word	0xe000ed0c
 810d4d8:	1000aae0 	.word	0x1000aae0

0810d4dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810d4dc:	b580      	push	{r7, lr}
 810d4de:	b084      	sub	sp, #16
 810d4e0:	af00      	add	r7, sp, #0
 810d4e2:	6078      	str	r0, [r7, #4]
 810d4e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810d4e6:	687b      	ldr	r3, [r7, #4]
 810d4e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810d4ea:	68fb      	ldr	r3, [r7, #12]
 810d4ec:	2b00      	cmp	r3, #0
 810d4ee:	d10b      	bne.n	810d508 <xQueueGenericReset+0x2c>
	__asm volatile
 810d4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d4f4:	f383 8811 	msr	BASEPRI, r3
 810d4f8:	f3bf 8f6f 	isb	sy
 810d4fc:	f3bf 8f4f 	dsb	sy
 810d500:	60bb      	str	r3, [r7, #8]
}
 810d502:	bf00      	nop
 810d504:	bf00      	nop
 810d506:	e7fd      	b.n	810d504 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810d508:	f7ff fec6 	bl	810d298 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810d50c:	68fb      	ldr	r3, [r7, #12]
 810d50e:	681a      	ldr	r2, [r3, #0]
 810d510:	68fb      	ldr	r3, [r7, #12]
 810d512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d514:	68f9      	ldr	r1, [r7, #12]
 810d516:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810d518:	fb01 f303 	mul.w	r3, r1, r3
 810d51c:	441a      	add	r2, r3
 810d51e:	68fb      	ldr	r3, [r7, #12]
 810d520:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810d522:	68fb      	ldr	r3, [r7, #12]
 810d524:	2200      	movs	r2, #0
 810d526:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810d528:	68fb      	ldr	r3, [r7, #12]
 810d52a:	681a      	ldr	r2, [r3, #0]
 810d52c:	68fb      	ldr	r3, [r7, #12]
 810d52e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810d530:	68fb      	ldr	r3, [r7, #12]
 810d532:	681a      	ldr	r2, [r3, #0]
 810d534:	68fb      	ldr	r3, [r7, #12]
 810d536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d538:	3b01      	subs	r3, #1
 810d53a:	68f9      	ldr	r1, [r7, #12]
 810d53c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810d53e:	fb01 f303 	mul.w	r3, r1, r3
 810d542:	441a      	add	r2, r3
 810d544:	68fb      	ldr	r3, [r7, #12]
 810d546:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810d548:	68fb      	ldr	r3, [r7, #12]
 810d54a:	22ff      	movs	r2, #255	@ 0xff
 810d54c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810d550:	68fb      	ldr	r3, [r7, #12]
 810d552:	22ff      	movs	r2, #255	@ 0xff
 810d554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810d558:	683b      	ldr	r3, [r7, #0]
 810d55a:	2b00      	cmp	r3, #0
 810d55c:	d114      	bne.n	810d588 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d55e:	68fb      	ldr	r3, [r7, #12]
 810d560:	691b      	ldr	r3, [r3, #16]
 810d562:	2b00      	cmp	r3, #0
 810d564:	d01a      	beq.n	810d59c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d566:	68fb      	ldr	r3, [r7, #12]
 810d568:	3310      	adds	r3, #16
 810d56a:	4618      	mov	r0, r3
 810d56c:	f002 f968 	bl	810f840 <xTaskRemoveFromEventList>
 810d570:	4603      	mov	r3, r0
 810d572:	2b00      	cmp	r3, #0
 810d574:	d012      	beq.n	810d59c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810d576:	4b0d      	ldr	r3, [pc, #52]	@ (810d5ac <xQueueGenericReset+0xd0>)
 810d578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d57c:	601a      	str	r2, [r3, #0]
 810d57e:	f3bf 8f4f 	dsb	sy
 810d582:	f3bf 8f6f 	isb	sy
 810d586:	e009      	b.n	810d59c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810d588:	68fb      	ldr	r3, [r7, #12]
 810d58a:	3310      	adds	r3, #16
 810d58c:	4618      	mov	r0, r3
 810d58e:	f7ff fc9b 	bl	810cec8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810d592:	68fb      	ldr	r3, [r7, #12]
 810d594:	3324      	adds	r3, #36	@ 0x24
 810d596:	4618      	mov	r0, r3
 810d598:	f7ff fc96 	bl	810cec8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810d59c:	f7ff feae 	bl	810d2fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810d5a0:	2301      	movs	r3, #1
}
 810d5a2:	4618      	mov	r0, r3
 810d5a4:	3710      	adds	r7, #16
 810d5a6:	46bd      	mov	sp, r7
 810d5a8:	bd80      	pop	{r7, pc}
 810d5aa:	bf00      	nop
 810d5ac:	e000ed04 	.word	0xe000ed04

0810d5b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810d5b0:	b580      	push	{r7, lr}
 810d5b2:	b08e      	sub	sp, #56	@ 0x38
 810d5b4:	af02      	add	r7, sp, #8
 810d5b6:	60f8      	str	r0, [r7, #12]
 810d5b8:	60b9      	str	r1, [r7, #8]
 810d5ba:	607a      	str	r2, [r7, #4]
 810d5bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810d5be:	68fb      	ldr	r3, [r7, #12]
 810d5c0:	2b00      	cmp	r3, #0
 810d5c2:	d10b      	bne.n	810d5dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810d5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d5c8:	f383 8811 	msr	BASEPRI, r3
 810d5cc:	f3bf 8f6f 	isb	sy
 810d5d0:	f3bf 8f4f 	dsb	sy
 810d5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810d5d6:	bf00      	nop
 810d5d8:	bf00      	nop
 810d5da:	e7fd      	b.n	810d5d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810d5dc:	683b      	ldr	r3, [r7, #0]
 810d5de:	2b00      	cmp	r3, #0
 810d5e0:	d10b      	bne.n	810d5fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810d5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d5e6:	f383 8811 	msr	BASEPRI, r3
 810d5ea:	f3bf 8f6f 	isb	sy
 810d5ee:	f3bf 8f4f 	dsb	sy
 810d5f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810d5f4:	bf00      	nop
 810d5f6:	bf00      	nop
 810d5f8:	e7fd      	b.n	810d5f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810d5fa:	687b      	ldr	r3, [r7, #4]
 810d5fc:	2b00      	cmp	r3, #0
 810d5fe:	d002      	beq.n	810d606 <xQueueGenericCreateStatic+0x56>
 810d600:	68bb      	ldr	r3, [r7, #8]
 810d602:	2b00      	cmp	r3, #0
 810d604:	d001      	beq.n	810d60a <xQueueGenericCreateStatic+0x5a>
 810d606:	2301      	movs	r3, #1
 810d608:	e000      	b.n	810d60c <xQueueGenericCreateStatic+0x5c>
 810d60a:	2300      	movs	r3, #0
 810d60c:	2b00      	cmp	r3, #0
 810d60e:	d10b      	bne.n	810d628 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810d610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d614:	f383 8811 	msr	BASEPRI, r3
 810d618:	f3bf 8f6f 	isb	sy
 810d61c:	f3bf 8f4f 	dsb	sy
 810d620:	623b      	str	r3, [r7, #32]
}
 810d622:	bf00      	nop
 810d624:	bf00      	nop
 810d626:	e7fd      	b.n	810d624 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810d628:	687b      	ldr	r3, [r7, #4]
 810d62a:	2b00      	cmp	r3, #0
 810d62c:	d102      	bne.n	810d634 <xQueueGenericCreateStatic+0x84>
 810d62e:	68bb      	ldr	r3, [r7, #8]
 810d630:	2b00      	cmp	r3, #0
 810d632:	d101      	bne.n	810d638 <xQueueGenericCreateStatic+0x88>
 810d634:	2301      	movs	r3, #1
 810d636:	e000      	b.n	810d63a <xQueueGenericCreateStatic+0x8a>
 810d638:	2300      	movs	r3, #0
 810d63a:	2b00      	cmp	r3, #0
 810d63c:	d10b      	bne.n	810d656 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810d63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d642:	f383 8811 	msr	BASEPRI, r3
 810d646:	f3bf 8f6f 	isb	sy
 810d64a:	f3bf 8f4f 	dsb	sy
 810d64e:	61fb      	str	r3, [r7, #28]
}
 810d650:	bf00      	nop
 810d652:	bf00      	nop
 810d654:	e7fd      	b.n	810d652 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810d656:	2350      	movs	r3, #80	@ 0x50
 810d658:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810d65a:	697b      	ldr	r3, [r7, #20]
 810d65c:	2b50      	cmp	r3, #80	@ 0x50
 810d65e:	d00b      	beq.n	810d678 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810d660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d664:	f383 8811 	msr	BASEPRI, r3
 810d668:	f3bf 8f6f 	isb	sy
 810d66c:	f3bf 8f4f 	dsb	sy
 810d670:	61bb      	str	r3, [r7, #24]
}
 810d672:	bf00      	nop
 810d674:	bf00      	nop
 810d676:	e7fd      	b.n	810d674 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810d678:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810d67a:	683b      	ldr	r3, [r7, #0]
 810d67c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810d67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d680:	2b00      	cmp	r3, #0
 810d682:	d00d      	beq.n	810d6a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810d684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d686:	2201      	movs	r2, #1
 810d688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810d68c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810d690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d692:	9300      	str	r3, [sp, #0]
 810d694:	4613      	mov	r3, r2
 810d696:	687a      	ldr	r2, [r7, #4]
 810d698:	68b9      	ldr	r1, [r7, #8]
 810d69a:	68f8      	ldr	r0, [r7, #12]
 810d69c:	f000 f840 	bl	810d720 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810d6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810d6a2:	4618      	mov	r0, r3
 810d6a4:	3730      	adds	r7, #48	@ 0x30
 810d6a6:	46bd      	mov	sp, r7
 810d6a8:	bd80      	pop	{r7, pc}

0810d6aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810d6aa:	b580      	push	{r7, lr}
 810d6ac:	b08a      	sub	sp, #40	@ 0x28
 810d6ae:	af02      	add	r7, sp, #8
 810d6b0:	60f8      	str	r0, [r7, #12]
 810d6b2:	60b9      	str	r1, [r7, #8]
 810d6b4:	4613      	mov	r3, r2
 810d6b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810d6b8:	68fb      	ldr	r3, [r7, #12]
 810d6ba:	2b00      	cmp	r3, #0
 810d6bc:	d10b      	bne.n	810d6d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 810d6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d6c2:	f383 8811 	msr	BASEPRI, r3
 810d6c6:	f3bf 8f6f 	isb	sy
 810d6ca:	f3bf 8f4f 	dsb	sy
 810d6ce:	613b      	str	r3, [r7, #16]
}
 810d6d0:	bf00      	nop
 810d6d2:	bf00      	nop
 810d6d4:	e7fd      	b.n	810d6d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810d6d6:	68fb      	ldr	r3, [r7, #12]
 810d6d8:	68ba      	ldr	r2, [r7, #8]
 810d6da:	fb02 f303 	mul.w	r3, r2, r3
 810d6de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810d6e0:	69fb      	ldr	r3, [r7, #28]
 810d6e2:	3350      	adds	r3, #80	@ 0x50
 810d6e4:	4618      	mov	r0, r3
 810d6e6:	f7ff fa01 	bl	810caec <pvPortMalloc>
 810d6ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810d6ec:	69bb      	ldr	r3, [r7, #24]
 810d6ee:	2b00      	cmp	r3, #0
 810d6f0:	d011      	beq.n	810d716 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810d6f2:	69bb      	ldr	r3, [r7, #24]
 810d6f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810d6f6:	697b      	ldr	r3, [r7, #20]
 810d6f8:	3350      	adds	r3, #80	@ 0x50
 810d6fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810d6fc:	69bb      	ldr	r3, [r7, #24]
 810d6fe:	2200      	movs	r2, #0
 810d700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810d704:	79fa      	ldrb	r2, [r7, #7]
 810d706:	69bb      	ldr	r3, [r7, #24]
 810d708:	9300      	str	r3, [sp, #0]
 810d70a:	4613      	mov	r3, r2
 810d70c:	697a      	ldr	r2, [r7, #20]
 810d70e:	68b9      	ldr	r1, [r7, #8]
 810d710:	68f8      	ldr	r0, [r7, #12]
 810d712:	f000 f805 	bl	810d720 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810d716:	69bb      	ldr	r3, [r7, #24]
	}
 810d718:	4618      	mov	r0, r3
 810d71a:	3720      	adds	r7, #32
 810d71c:	46bd      	mov	sp, r7
 810d71e:	bd80      	pop	{r7, pc}

0810d720 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810d720:	b580      	push	{r7, lr}
 810d722:	b084      	sub	sp, #16
 810d724:	af00      	add	r7, sp, #0
 810d726:	60f8      	str	r0, [r7, #12]
 810d728:	60b9      	str	r1, [r7, #8]
 810d72a:	607a      	str	r2, [r7, #4]
 810d72c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810d72e:	68bb      	ldr	r3, [r7, #8]
 810d730:	2b00      	cmp	r3, #0
 810d732:	d103      	bne.n	810d73c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810d734:	69bb      	ldr	r3, [r7, #24]
 810d736:	69ba      	ldr	r2, [r7, #24]
 810d738:	601a      	str	r2, [r3, #0]
 810d73a:	e002      	b.n	810d742 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810d73c:	69bb      	ldr	r3, [r7, #24]
 810d73e:	687a      	ldr	r2, [r7, #4]
 810d740:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810d742:	69bb      	ldr	r3, [r7, #24]
 810d744:	68fa      	ldr	r2, [r7, #12]
 810d746:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810d748:	69bb      	ldr	r3, [r7, #24]
 810d74a:	68ba      	ldr	r2, [r7, #8]
 810d74c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810d74e:	2101      	movs	r1, #1
 810d750:	69b8      	ldr	r0, [r7, #24]
 810d752:	f7ff fec3 	bl	810d4dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810d756:	69bb      	ldr	r3, [r7, #24]
 810d758:	78fa      	ldrb	r2, [r7, #3]
 810d75a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810d75e:	bf00      	nop
 810d760:	3710      	adds	r7, #16
 810d762:	46bd      	mov	sp, r7
 810d764:	bd80      	pop	{r7, pc}

0810d766 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 810d766:	b580      	push	{r7, lr}
 810d768:	b082      	sub	sp, #8
 810d76a:	af00      	add	r7, sp, #0
 810d76c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 810d76e:	687b      	ldr	r3, [r7, #4]
 810d770:	2b00      	cmp	r3, #0
 810d772:	d00e      	beq.n	810d792 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 810d774:	687b      	ldr	r3, [r7, #4]
 810d776:	2200      	movs	r2, #0
 810d778:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 810d77a:	687b      	ldr	r3, [r7, #4]
 810d77c:	2200      	movs	r2, #0
 810d77e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 810d780:	687b      	ldr	r3, [r7, #4]
 810d782:	2200      	movs	r2, #0
 810d784:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 810d786:	2300      	movs	r3, #0
 810d788:	2200      	movs	r2, #0
 810d78a:	2100      	movs	r1, #0
 810d78c:	6878      	ldr	r0, [r7, #4]
 810d78e:	f000 f911 	bl	810d9b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 810d792:	bf00      	nop
 810d794:	3708      	adds	r7, #8
 810d796:	46bd      	mov	sp, r7
 810d798:	bd80      	pop	{r7, pc}

0810d79a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 810d79a:	b580      	push	{r7, lr}
 810d79c:	b086      	sub	sp, #24
 810d79e:	af00      	add	r7, sp, #0
 810d7a0:	4603      	mov	r3, r0
 810d7a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810d7a4:	2301      	movs	r3, #1
 810d7a6:	617b      	str	r3, [r7, #20]
 810d7a8:	2300      	movs	r3, #0
 810d7aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 810d7ac:	79fb      	ldrb	r3, [r7, #7]
 810d7ae:	461a      	mov	r2, r3
 810d7b0:	6939      	ldr	r1, [r7, #16]
 810d7b2:	6978      	ldr	r0, [r7, #20]
 810d7b4:	f7ff ff79 	bl	810d6aa <xQueueGenericCreate>
 810d7b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810d7ba:	68f8      	ldr	r0, [r7, #12]
 810d7bc:	f7ff ffd3 	bl	810d766 <prvInitialiseMutex>

		return xNewQueue;
 810d7c0:	68fb      	ldr	r3, [r7, #12]
	}
 810d7c2:	4618      	mov	r0, r3
 810d7c4:	3718      	adds	r7, #24
 810d7c6:	46bd      	mov	sp, r7
 810d7c8:	bd80      	pop	{r7, pc}

0810d7ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 810d7ca:	b580      	push	{r7, lr}
 810d7cc:	b088      	sub	sp, #32
 810d7ce:	af02      	add	r7, sp, #8
 810d7d0:	4603      	mov	r3, r0
 810d7d2:	6039      	str	r1, [r7, #0]
 810d7d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810d7d6:	2301      	movs	r3, #1
 810d7d8:	617b      	str	r3, [r7, #20]
 810d7da:	2300      	movs	r3, #0
 810d7dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 810d7de:	79fb      	ldrb	r3, [r7, #7]
 810d7e0:	9300      	str	r3, [sp, #0]
 810d7e2:	683b      	ldr	r3, [r7, #0]
 810d7e4:	2200      	movs	r2, #0
 810d7e6:	6939      	ldr	r1, [r7, #16]
 810d7e8:	6978      	ldr	r0, [r7, #20]
 810d7ea:	f7ff fee1 	bl	810d5b0 <xQueueGenericCreateStatic>
 810d7ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810d7f0:	68f8      	ldr	r0, [r7, #12]
 810d7f2:	f7ff ffb8 	bl	810d766 <prvInitialiseMutex>

		return xNewQueue;
 810d7f6:	68fb      	ldr	r3, [r7, #12]
	}
 810d7f8:	4618      	mov	r0, r3
 810d7fa:	3718      	adds	r7, #24
 810d7fc:	46bd      	mov	sp, r7
 810d7fe:	bd80      	pop	{r7, pc}

0810d800 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 810d800:	b590      	push	{r4, r7, lr}
 810d802:	b087      	sub	sp, #28
 810d804:	af00      	add	r7, sp, #0
 810d806:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 810d808:	687b      	ldr	r3, [r7, #4]
 810d80a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 810d80c:	693b      	ldr	r3, [r7, #16]
 810d80e:	2b00      	cmp	r3, #0
 810d810:	d10b      	bne.n	810d82a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 810d812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d816:	f383 8811 	msr	BASEPRI, r3
 810d81a:	f3bf 8f6f 	isb	sy
 810d81e:	f3bf 8f4f 	dsb	sy
 810d822:	60fb      	str	r3, [r7, #12]
}
 810d824:	bf00      	nop
 810d826:	bf00      	nop
 810d828:	e7fd      	b.n	810d826 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 810d82a:	693b      	ldr	r3, [r7, #16]
 810d82c:	689c      	ldr	r4, [r3, #8]
 810d82e:	f002 f9f5 	bl	810fc1c <xTaskGetCurrentTaskHandle>
 810d832:	4603      	mov	r3, r0
 810d834:	429c      	cmp	r4, r3
 810d836:	d111      	bne.n	810d85c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 810d838:	693b      	ldr	r3, [r7, #16]
 810d83a:	68db      	ldr	r3, [r3, #12]
 810d83c:	1e5a      	subs	r2, r3, #1
 810d83e:	693b      	ldr	r3, [r7, #16]
 810d840:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 810d842:	693b      	ldr	r3, [r7, #16]
 810d844:	68db      	ldr	r3, [r3, #12]
 810d846:	2b00      	cmp	r3, #0
 810d848:	d105      	bne.n	810d856 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 810d84a:	2300      	movs	r3, #0
 810d84c:	2200      	movs	r2, #0
 810d84e:	2100      	movs	r1, #0
 810d850:	6938      	ldr	r0, [r7, #16]
 810d852:	f000 f8af 	bl	810d9b4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 810d856:	2301      	movs	r3, #1
 810d858:	617b      	str	r3, [r7, #20]
 810d85a:	e001      	b.n	810d860 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 810d85c:	2300      	movs	r3, #0
 810d85e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 810d860:	697b      	ldr	r3, [r7, #20]
	}
 810d862:	4618      	mov	r0, r3
 810d864:	371c      	adds	r7, #28
 810d866:	46bd      	mov	sp, r7
 810d868:	bd90      	pop	{r4, r7, pc}

0810d86a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 810d86a:	b590      	push	{r4, r7, lr}
 810d86c:	b087      	sub	sp, #28
 810d86e:	af00      	add	r7, sp, #0
 810d870:	6078      	str	r0, [r7, #4]
 810d872:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 810d874:	687b      	ldr	r3, [r7, #4]
 810d876:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 810d878:	693b      	ldr	r3, [r7, #16]
 810d87a:	2b00      	cmp	r3, #0
 810d87c:	d10b      	bne.n	810d896 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 810d87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d882:	f383 8811 	msr	BASEPRI, r3
 810d886:	f3bf 8f6f 	isb	sy
 810d88a:	f3bf 8f4f 	dsb	sy
 810d88e:	60fb      	str	r3, [r7, #12]
}
 810d890:	bf00      	nop
 810d892:	bf00      	nop
 810d894:	e7fd      	b.n	810d892 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 810d896:	693b      	ldr	r3, [r7, #16]
 810d898:	689c      	ldr	r4, [r3, #8]
 810d89a:	f002 f9bf 	bl	810fc1c <xTaskGetCurrentTaskHandle>
 810d89e:	4603      	mov	r3, r0
 810d8a0:	429c      	cmp	r4, r3
 810d8a2:	d107      	bne.n	810d8b4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 810d8a4:	693b      	ldr	r3, [r7, #16]
 810d8a6:	68db      	ldr	r3, [r3, #12]
 810d8a8:	1c5a      	adds	r2, r3, #1
 810d8aa:	693b      	ldr	r3, [r7, #16]
 810d8ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 810d8ae:	2301      	movs	r3, #1
 810d8b0:	617b      	str	r3, [r7, #20]
 810d8b2:	e00c      	b.n	810d8ce <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 810d8b4:	6839      	ldr	r1, [r7, #0]
 810d8b6:	6938      	ldr	r0, [r7, #16]
 810d8b8:	f000 fb8e 	bl	810dfd8 <xQueueSemaphoreTake>
 810d8bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 810d8be:	697b      	ldr	r3, [r7, #20]
 810d8c0:	2b00      	cmp	r3, #0
 810d8c2:	d004      	beq.n	810d8ce <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 810d8c4:	693b      	ldr	r3, [r7, #16]
 810d8c6:	68db      	ldr	r3, [r3, #12]
 810d8c8:	1c5a      	adds	r2, r3, #1
 810d8ca:	693b      	ldr	r3, [r7, #16]
 810d8cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 810d8ce:	697b      	ldr	r3, [r7, #20]
	}
 810d8d0:	4618      	mov	r0, r3
 810d8d2:	371c      	adds	r7, #28
 810d8d4:	46bd      	mov	sp, r7
 810d8d6:	bd90      	pop	{r4, r7, pc}

0810d8d8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 810d8d8:	b580      	push	{r7, lr}
 810d8da:	b08a      	sub	sp, #40	@ 0x28
 810d8dc:	af02      	add	r7, sp, #8
 810d8de:	60f8      	str	r0, [r7, #12]
 810d8e0:	60b9      	str	r1, [r7, #8]
 810d8e2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810d8e4:	68fb      	ldr	r3, [r7, #12]
 810d8e6:	2b00      	cmp	r3, #0
 810d8e8:	d10b      	bne.n	810d902 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 810d8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d8ee:	f383 8811 	msr	BASEPRI, r3
 810d8f2:	f3bf 8f6f 	isb	sy
 810d8f6:	f3bf 8f4f 	dsb	sy
 810d8fa:	61bb      	str	r3, [r7, #24]
}
 810d8fc:	bf00      	nop
 810d8fe:	bf00      	nop
 810d900:	e7fd      	b.n	810d8fe <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 810d902:	68ba      	ldr	r2, [r7, #8]
 810d904:	68fb      	ldr	r3, [r7, #12]
 810d906:	429a      	cmp	r2, r3
 810d908:	d90b      	bls.n	810d922 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 810d90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d90e:	f383 8811 	msr	BASEPRI, r3
 810d912:	f3bf 8f6f 	isb	sy
 810d916:	f3bf 8f4f 	dsb	sy
 810d91a:	617b      	str	r3, [r7, #20]
}
 810d91c:	bf00      	nop
 810d91e:	bf00      	nop
 810d920:	e7fd      	b.n	810d91e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810d922:	2302      	movs	r3, #2
 810d924:	9300      	str	r3, [sp, #0]
 810d926:	687b      	ldr	r3, [r7, #4]
 810d928:	2200      	movs	r2, #0
 810d92a:	2100      	movs	r1, #0
 810d92c:	68f8      	ldr	r0, [r7, #12]
 810d92e:	f7ff fe3f 	bl	810d5b0 <xQueueGenericCreateStatic>
 810d932:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 810d934:	69fb      	ldr	r3, [r7, #28]
 810d936:	2b00      	cmp	r3, #0
 810d938:	d002      	beq.n	810d940 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810d93a:	69fb      	ldr	r3, [r7, #28]
 810d93c:	68ba      	ldr	r2, [r7, #8]
 810d93e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810d940:	69fb      	ldr	r3, [r7, #28]
	}
 810d942:	4618      	mov	r0, r3
 810d944:	3720      	adds	r7, #32
 810d946:	46bd      	mov	sp, r7
 810d948:	bd80      	pop	{r7, pc}

0810d94a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 810d94a:	b580      	push	{r7, lr}
 810d94c:	b086      	sub	sp, #24
 810d94e:	af00      	add	r7, sp, #0
 810d950:	6078      	str	r0, [r7, #4]
 810d952:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810d954:	687b      	ldr	r3, [r7, #4]
 810d956:	2b00      	cmp	r3, #0
 810d958:	d10b      	bne.n	810d972 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 810d95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d95e:	f383 8811 	msr	BASEPRI, r3
 810d962:	f3bf 8f6f 	isb	sy
 810d966:	f3bf 8f4f 	dsb	sy
 810d96a:	613b      	str	r3, [r7, #16]
}
 810d96c:	bf00      	nop
 810d96e:	bf00      	nop
 810d970:	e7fd      	b.n	810d96e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 810d972:	683a      	ldr	r2, [r7, #0]
 810d974:	687b      	ldr	r3, [r7, #4]
 810d976:	429a      	cmp	r2, r3
 810d978:	d90b      	bls.n	810d992 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 810d97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d97e:	f383 8811 	msr	BASEPRI, r3
 810d982:	f3bf 8f6f 	isb	sy
 810d986:	f3bf 8f4f 	dsb	sy
 810d98a:	60fb      	str	r3, [r7, #12]
}
 810d98c:	bf00      	nop
 810d98e:	bf00      	nop
 810d990:	e7fd      	b.n	810d98e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810d992:	2202      	movs	r2, #2
 810d994:	2100      	movs	r1, #0
 810d996:	6878      	ldr	r0, [r7, #4]
 810d998:	f7ff fe87 	bl	810d6aa <xQueueGenericCreate>
 810d99c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 810d99e:	697b      	ldr	r3, [r7, #20]
 810d9a0:	2b00      	cmp	r3, #0
 810d9a2:	d002      	beq.n	810d9aa <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810d9a4:	697b      	ldr	r3, [r7, #20]
 810d9a6:	683a      	ldr	r2, [r7, #0]
 810d9a8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810d9aa:	697b      	ldr	r3, [r7, #20]
	}
 810d9ac:	4618      	mov	r0, r3
 810d9ae:	3718      	adds	r7, #24
 810d9b0:	46bd      	mov	sp, r7
 810d9b2:	bd80      	pop	{r7, pc}

0810d9b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810d9b4:	b580      	push	{r7, lr}
 810d9b6:	b08e      	sub	sp, #56	@ 0x38
 810d9b8:	af00      	add	r7, sp, #0
 810d9ba:	60f8      	str	r0, [r7, #12]
 810d9bc:	60b9      	str	r1, [r7, #8]
 810d9be:	607a      	str	r2, [r7, #4]
 810d9c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810d9c2:	2300      	movs	r3, #0
 810d9c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d9c6:	68fb      	ldr	r3, [r7, #12]
 810d9c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810d9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9cc:	2b00      	cmp	r3, #0
 810d9ce:	d10b      	bne.n	810d9e8 <xQueueGenericSend+0x34>
	__asm volatile
 810d9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d9d4:	f383 8811 	msr	BASEPRI, r3
 810d9d8:	f3bf 8f6f 	isb	sy
 810d9dc:	f3bf 8f4f 	dsb	sy
 810d9e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810d9e2:	bf00      	nop
 810d9e4:	bf00      	nop
 810d9e6:	e7fd      	b.n	810d9e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d9e8:	68bb      	ldr	r3, [r7, #8]
 810d9ea:	2b00      	cmp	r3, #0
 810d9ec:	d103      	bne.n	810d9f6 <xQueueGenericSend+0x42>
 810d9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d9f2:	2b00      	cmp	r3, #0
 810d9f4:	d101      	bne.n	810d9fa <xQueueGenericSend+0x46>
 810d9f6:	2301      	movs	r3, #1
 810d9f8:	e000      	b.n	810d9fc <xQueueGenericSend+0x48>
 810d9fa:	2300      	movs	r3, #0
 810d9fc:	2b00      	cmp	r3, #0
 810d9fe:	d10b      	bne.n	810da18 <xQueueGenericSend+0x64>
	__asm volatile
 810da00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da04:	f383 8811 	msr	BASEPRI, r3
 810da08:	f3bf 8f6f 	isb	sy
 810da0c:	f3bf 8f4f 	dsb	sy
 810da10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810da12:	bf00      	nop
 810da14:	bf00      	nop
 810da16:	e7fd      	b.n	810da14 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810da18:	683b      	ldr	r3, [r7, #0]
 810da1a:	2b02      	cmp	r3, #2
 810da1c:	d103      	bne.n	810da26 <xQueueGenericSend+0x72>
 810da1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810da22:	2b01      	cmp	r3, #1
 810da24:	d101      	bne.n	810da2a <xQueueGenericSend+0x76>
 810da26:	2301      	movs	r3, #1
 810da28:	e000      	b.n	810da2c <xQueueGenericSend+0x78>
 810da2a:	2300      	movs	r3, #0
 810da2c:	2b00      	cmp	r3, #0
 810da2e:	d10b      	bne.n	810da48 <xQueueGenericSend+0x94>
	__asm volatile
 810da30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da34:	f383 8811 	msr	BASEPRI, r3
 810da38:	f3bf 8f6f 	isb	sy
 810da3c:	f3bf 8f4f 	dsb	sy
 810da40:	623b      	str	r3, [r7, #32]
}
 810da42:	bf00      	nop
 810da44:	bf00      	nop
 810da46:	e7fd      	b.n	810da44 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810da48:	f002 f8f8 	bl	810fc3c <xTaskGetSchedulerState>
 810da4c:	4603      	mov	r3, r0
 810da4e:	2b00      	cmp	r3, #0
 810da50:	d102      	bne.n	810da58 <xQueueGenericSend+0xa4>
 810da52:	687b      	ldr	r3, [r7, #4]
 810da54:	2b00      	cmp	r3, #0
 810da56:	d101      	bne.n	810da5c <xQueueGenericSend+0xa8>
 810da58:	2301      	movs	r3, #1
 810da5a:	e000      	b.n	810da5e <xQueueGenericSend+0xaa>
 810da5c:	2300      	movs	r3, #0
 810da5e:	2b00      	cmp	r3, #0
 810da60:	d10b      	bne.n	810da7a <xQueueGenericSend+0xc6>
	__asm volatile
 810da62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da66:	f383 8811 	msr	BASEPRI, r3
 810da6a:	f3bf 8f6f 	isb	sy
 810da6e:	f3bf 8f4f 	dsb	sy
 810da72:	61fb      	str	r3, [r7, #28]
}
 810da74:	bf00      	nop
 810da76:	bf00      	nop
 810da78:	e7fd      	b.n	810da76 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810da7a:	f7ff fc0d 	bl	810d298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810da7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810da82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810da86:	429a      	cmp	r2, r3
 810da88:	d302      	bcc.n	810da90 <xQueueGenericSend+0xdc>
 810da8a:	683b      	ldr	r3, [r7, #0]
 810da8c:	2b02      	cmp	r3, #2
 810da8e:	d129      	bne.n	810dae4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810da90:	683a      	ldr	r2, [r7, #0]
 810da92:	68b9      	ldr	r1, [r7, #8]
 810da94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810da96:	f000 fc6d 	bl	810e374 <prvCopyDataToQueue>
 810da9a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810da9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810daa0:	2b00      	cmp	r3, #0
 810daa2:	d010      	beq.n	810dac6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810daa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810daa6:	3324      	adds	r3, #36	@ 0x24
 810daa8:	4618      	mov	r0, r3
 810daaa:	f001 fec9 	bl	810f840 <xTaskRemoveFromEventList>
 810daae:	4603      	mov	r3, r0
 810dab0:	2b00      	cmp	r3, #0
 810dab2:	d013      	beq.n	810dadc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810dab4:	4b3f      	ldr	r3, [pc, #252]	@ (810dbb4 <xQueueGenericSend+0x200>)
 810dab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810daba:	601a      	str	r2, [r3, #0]
 810dabc:	f3bf 8f4f 	dsb	sy
 810dac0:	f3bf 8f6f 	isb	sy
 810dac4:	e00a      	b.n	810dadc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810dac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dac8:	2b00      	cmp	r3, #0
 810daca:	d007      	beq.n	810dadc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810dacc:	4b39      	ldr	r3, [pc, #228]	@ (810dbb4 <xQueueGenericSend+0x200>)
 810dace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dad2:	601a      	str	r2, [r3, #0]
 810dad4:	f3bf 8f4f 	dsb	sy
 810dad8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810dadc:	f7ff fc0e 	bl	810d2fc <vPortExitCritical>
				return pdPASS;
 810dae0:	2301      	movs	r3, #1
 810dae2:	e063      	b.n	810dbac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810dae4:	687b      	ldr	r3, [r7, #4]
 810dae6:	2b00      	cmp	r3, #0
 810dae8:	d103      	bne.n	810daf2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810daea:	f7ff fc07 	bl	810d2fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810daee:	2300      	movs	r3, #0
 810daf0:	e05c      	b.n	810dbac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810daf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810daf4:	2b00      	cmp	r3, #0
 810daf6:	d106      	bne.n	810db06 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810daf8:	f107 0314 	add.w	r3, r7, #20
 810dafc:	4618      	mov	r0, r3
 810dafe:	f001 ff2b 	bl	810f958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810db02:	2301      	movs	r3, #1
 810db04:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810db06:	f7ff fbf9 	bl	810d2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810db0a:	f001 fc59 	bl	810f3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810db0e:	f7ff fbc3 	bl	810d298 <vPortEnterCritical>
 810db12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810db18:	b25b      	sxtb	r3, r3
 810db1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810db1e:	d103      	bne.n	810db28 <xQueueGenericSend+0x174>
 810db20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db22:	2200      	movs	r2, #0
 810db24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810db28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810db2e:	b25b      	sxtb	r3, r3
 810db30:	f1b3 3fff 	cmp.w	r3, #4294967295
 810db34:	d103      	bne.n	810db3e <xQueueGenericSend+0x18a>
 810db36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db38:	2200      	movs	r2, #0
 810db3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810db3e:	f7ff fbdd 	bl	810d2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810db42:	1d3a      	adds	r2, r7, #4
 810db44:	f107 0314 	add.w	r3, r7, #20
 810db48:	4611      	mov	r1, r2
 810db4a:	4618      	mov	r0, r3
 810db4c:	f001 ff1a 	bl	810f984 <xTaskCheckForTimeOut>
 810db50:	4603      	mov	r3, r0
 810db52:	2b00      	cmp	r3, #0
 810db54:	d124      	bne.n	810dba0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810db56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810db58:	f000 fd04 	bl	810e564 <prvIsQueueFull>
 810db5c:	4603      	mov	r3, r0
 810db5e:	2b00      	cmp	r3, #0
 810db60:	d018      	beq.n	810db94 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810db62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db64:	3310      	adds	r3, #16
 810db66:	687a      	ldr	r2, [r7, #4]
 810db68:	4611      	mov	r1, r2
 810db6a:	4618      	mov	r0, r3
 810db6c:	f001 fe16 	bl	810f79c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810db70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810db72:	f000 fc8f 	bl	810e494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810db76:	f001 fc31 	bl	810f3dc <xTaskResumeAll>
 810db7a:	4603      	mov	r3, r0
 810db7c:	2b00      	cmp	r3, #0
 810db7e:	f47f af7c 	bne.w	810da7a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810db82:	4b0c      	ldr	r3, [pc, #48]	@ (810dbb4 <xQueueGenericSend+0x200>)
 810db84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810db88:	601a      	str	r2, [r3, #0]
 810db8a:	f3bf 8f4f 	dsb	sy
 810db8e:	f3bf 8f6f 	isb	sy
 810db92:	e772      	b.n	810da7a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810db94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810db96:	f000 fc7d 	bl	810e494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810db9a:	f001 fc1f 	bl	810f3dc <xTaskResumeAll>
 810db9e:	e76c      	b.n	810da7a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810dba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810dba2:	f000 fc77 	bl	810e494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810dba6:	f001 fc19 	bl	810f3dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810dbaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810dbac:	4618      	mov	r0, r3
 810dbae:	3738      	adds	r7, #56	@ 0x38
 810dbb0:	46bd      	mov	sp, r7
 810dbb2:	bd80      	pop	{r7, pc}
 810dbb4:	e000ed04 	.word	0xe000ed04

0810dbb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810dbb8:	b580      	push	{r7, lr}
 810dbba:	b090      	sub	sp, #64	@ 0x40
 810dbbc:	af00      	add	r7, sp, #0
 810dbbe:	60f8      	str	r0, [r7, #12]
 810dbc0:	60b9      	str	r1, [r7, #8]
 810dbc2:	607a      	str	r2, [r7, #4]
 810dbc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810dbc6:	68fb      	ldr	r3, [r7, #12]
 810dbc8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810dbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dbcc:	2b00      	cmp	r3, #0
 810dbce:	d10b      	bne.n	810dbe8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810dbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dbd4:	f383 8811 	msr	BASEPRI, r3
 810dbd8:	f3bf 8f6f 	isb	sy
 810dbdc:	f3bf 8f4f 	dsb	sy
 810dbe0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810dbe2:	bf00      	nop
 810dbe4:	bf00      	nop
 810dbe6:	e7fd      	b.n	810dbe4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810dbe8:	68bb      	ldr	r3, [r7, #8]
 810dbea:	2b00      	cmp	r3, #0
 810dbec:	d103      	bne.n	810dbf6 <xQueueGenericSendFromISR+0x3e>
 810dbee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dbf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dbf2:	2b00      	cmp	r3, #0
 810dbf4:	d101      	bne.n	810dbfa <xQueueGenericSendFromISR+0x42>
 810dbf6:	2301      	movs	r3, #1
 810dbf8:	e000      	b.n	810dbfc <xQueueGenericSendFromISR+0x44>
 810dbfa:	2300      	movs	r3, #0
 810dbfc:	2b00      	cmp	r3, #0
 810dbfe:	d10b      	bne.n	810dc18 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810dc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc04:	f383 8811 	msr	BASEPRI, r3
 810dc08:	f3bf 8f6f 	isb	sy
 810dc0c:	f3bf 8f4f 	dsb	sy
 810dc10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810dc12:	bf00      	nop
 810dc14:	bf00      	nop
 810dc16:	e7fd      	b.n	810dc14 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810dc18:	683b      	ldr	r3, [r7, #0]
 810dc1a:	2b02      	cmp	r3, #2
 810dc1c:	d103      	bne.n	810dc26 <xQueueGenericSendFromISR+0x6e>
 810dc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810dc22:	2b01      	cmp	r3, #1
 810dc24:	d101      	bne.n	810dc2a <xQueueGenericSendFromISR+0x72>
 810dc26:	2301      	movs	r3, #1
 810dc28:	e000      	b.n	810dc2c <xQueueGenericSendFromISR+0x74>
 810dc2a:	2300      	movs	r3, #0
 810dc2c:	2b00      	cmp	r3, #0
 810dc2e:	d10b      	bne.n	810dc48 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810dc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc34:	f383 8811 	msr	BASEPRI, r3
 810dc38:	f3bf 8f6f 	isb	sy
 810dc3c:	f3bf 8f4f 	dsb	sy
 810dc40:	623b      	str	r3, [r7, #32]
}
 810dc42:	bf00      	nop
 810dc44:	bf00      	nop
 810dc46:	e7fd      	b.n	810dc44 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810dc48:	f7ff fc06 	bl	810d458 <vPortValidateInterruptPriority>
	__asm volatile
 810dc4c:	f3ef 8211 	mrs	r2, BASEPRI
 810dc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc54:	f383 8811 	msr	BASEPRI, r3
 810dc58:	f3bf 8f6f 	isb	sy
 810dc5c:	f3bf 8f4f 	dsb	sy
 810dc60:	61fa      	str	r2, [r7, #28]
 810dc62:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810dc64:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810dc66:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810dc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810dc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810dc70:	429a      	cmp	r2, r3
 810dc72:	d302      	bcc.n	810dc7a <xQueueGenericSendFromISR+0xc2>
 810dc74:	683b      	ldr	r3, [r7, #0]
 810dc76:	2b02      	cmp	r3, #2
 810dc78:	d12f      	bne.n	810dcda <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810dc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810dc80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810dc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dc88:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810dc8a:	683a      	ldr	r2, [r7, #0]
 810dc8c:	68b9      	ldr	r1, [r7, #8]
 810dc8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810dc90:	f000 fb70 	bl	810e374 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810dc94:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810dc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 810dc9c:	d112      	bne.n	810dcc4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810dc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810dca2:	2b00      	cmp	r3, #0
 810dca4:	d016      	beq.n	810dcd4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810dca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dca8:	3324      	adds	r3, #36	@ 0x24
 810dcaa:	4618      	mov	r0, r3
 810dcac:	f001 fdc8 	bl	810f840 <xTaskRemoveFromEventList>
 810dcb0:	4603      	mov	r3, r0
 810dcb2:	2b00      	cmp	r3, #0
 810dcb4:	d00e      	beq.n	810dcd4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810dcb6:	687b      	ldr	r3, [r7, #4]
 810dcb8:	2b00      	cmp	r3, #0
 810dcba:	d00b      	beq.n	810dcd4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810dcbc:	687b      	ldr	r3, [r7, #4]
 810dcbe:	2201      	movs	r2, #1
 810dcc0:	601a      	str	r2, [r3, #0]
 810dcc2:	e007      	b.n	810dcd4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810dcc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810dcc8:	3301      	adds	r3, #1
 810dcca:	b2db      	uxtb	r3, r3
 810dccc:	b25a      	sxtb	r2, r3
 810dcce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dcd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810dcd4:	2301      	movs	r3, #1
 810dcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810dcd8:	e001      	b.n	810dcde <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810dcda:	2300      	movs	r3, #0
 810dcdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810dcde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810dce0:	617b      	str	r3, [r7, #20]
	__asm volatile
 810dce2:	697b      	ldr	r3, [r7, #20]
 810dce4:	f383 8811 	msr	BASEPRI, r3
}
 810dce8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810dcea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810dcec:	4618      	mov	r0, r3
 810dcee:	3740      	adds	r7, #64	@ 0x40
 810dcf0:	46bd      	mov	sp, r7
 810dcf2:	bd80      	pop	{r7, pc}

0810dcf4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810dcf4:	b580      	push	{r7, lr}
 810dcf6:	b08e      	sub	sp, #56	@ 0x38
 810dcf8:	af00      	add	r7, sp, #0
 810dcfa:	6078      	str	r0, [r7, #4]
 810dcfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810dcfe:	687b      	ldr	r3, [r7, #4]
 810dd00:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 810dd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd04:	2b00      	cmp	r3, #0
 810dd06:	d10b      	bne.n	810dd20 <xQueueGiveFromISR+0x2c>
	__asm volatile
 810dd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd0c:	f383 8811 	msr	BASEPRI, r3
 810dd10:	f3bf 8f6f 	isb	sy
 810dd14:	f3bf 8f4f 	dsb	sy
 810dd18:	623b      	str	r3, [r7, #32]
}
 810dd1a:	bf00      	nop
 810dd1c:	bf00      	nop
 810dd1e:	e7fd      	b.n	810dd1c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810dd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dd24:	2b00      	cmp	r3, #0
 810dd26:	d00b      	beq.n	810dd40 <xQueueGiveFromISR+0x4c>
	__asm volatile
 810dd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd2c:	f383 8811 	msr	BASEPRI, r3
 810dd30:	f3bf 8f6f 	isb	sy
 810dd34:	f3bf 8f4f 	dsb	sy
 810dd38:	61fb      	str	r3, [r7, #28]
}
 810dd3a:	bf00      	nop
 810dd3c:	bf00      	nop
 810dd3e:	e7fd      	b.n	810dd3c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 810dd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd42:	681b      	ldr	r3, [r3, #0]
 810dd44:	2b00      	cmp	r3, #0
 810dd46:	d103      	bne.n	810dd50 <xQueueGiveFromISR+0x5c>
 810dd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd4a:	689b      	ldr	r3, [r3, #8]
 810dd4c:	2b00      	cmp	r3, #0
 810dd4e:	d101      	bne.n	810dd54 <xQueueGiveFromISR+0x60>
 810dd50:	2301      	movs	r3, #1
 810dd52:	e000      	b.n	810dd56 <xQueueGiveFromISR+0x62>
 810dd54:	2300      	movs	r3, #0
 810dd56:	2b00      	cmp	r3, #0
 810dd58:	d10b      	bne.n	810dd72 <xQueueGiveFromISR+0x7e>
	__asm volatile
 810dd5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd5e:	f383 8811 	msr	BASEPRI, r3
 810dd62:	f3bf 8f6f 	isb	sy
 810dd66:	f3bf 8f4f 	dsb	sy
 810dd6a:	61bb      	str	r3, [r7, #24]
}
 810dd6c:	bf00      	nop
 810dd6e:	bf00      	nop
 810dd70:	e7fd      	b.n	810dd6e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810dd72:	f7ff fb71 	bl	810d458 <vPortValidateInterruptPriority>
	__asm volatile
 810dd76:	f3ef 8211 	mrs	r2, BASEPRI
 810dd7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd7e:	f383 8811 	msr	BASEPRI, r3
 810dd82:	f3bf 8f6f 	isb	sy
 810dd86:	f3bf 8f4f 	dsb	sy
 810dd8a:	617a      	str	r2, [r7, #20]
 810dd8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810dd8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810dd90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810dd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dd96:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 810dd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810dd9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810dd9e:	429a      	cmp	r2, r3
 810dda0:	d22b      	bcs.n	810ddfa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810dda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dda4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810dda8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810ddac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ddae:	1c5a      	adds	r2, r3, #1
 810ddb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddb2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810ddb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810ddb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ddbc:	d112      	bne.n	810dde4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810ddbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ddc2:	2b00      	cmp	r3, #0
 810ddc4:	d016      	beq.n	810ddf4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810ddc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddc8:	3324      	adds	r3, #36	@ 0x24
 810ddca:	4618      	mov	r0, r3
 810ddcc:	f001 fd38 	bl	810f840 <xTaskRemoveFromEventList>
 810ddd0:	4603      	mov	r3, r0
 810ddd2:	2b00      	cmp	r3, #0
 810ddd4:	d00e      	beq.n	810ddf4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810ddd6:	683b      	ldr	r3, [r7, #0]
 810ddd8:	2b00      	cmp	r3, #0
 810ddda:	d00b      	beq.n	810ddf4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810dddc:	683b      	ldr	r3, [r7, #0]
 810ddde:	2201      	movs	r2, #1
 810dde0:	601a      	str	r2, [r3, #0]
 810dde2:	e007      	b.n	810ddf4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810dde4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810dde8:	3301      	adds	r3, #1
 810ddea:	b2db      	uxtb	r3, r3
 810ddec:	b25a      	sxtb	r2, r3
 810ddee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810ddf4:	2301      	movs	r3, #1
 810ddf6:	637b      	str	r3, [r7, #52]	@ 0x34
 810ddf8:	e001      	b.n	810ddfe <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810ddfa:	2300      	movs	r3, #0
 810ddfc:	637b      	str	r3, [r7, #52]	@ 0x34
 810ddfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810de00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810de02:	68fb      	ldr	r3, [r7, #12]
 810de04:	f383 8811 	msr	BASEPRI, r3
}
 810de08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810de0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810de0c:	4618      	mov	r0, r3
 810de0e:	3738      	adds	r7, #56	@ 0x38
 810de10:	46bd      	mov	sp, r7
 810de12:	bd80      	pop	{r7, pc}

0810de14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810de14:	b580      	push	{r7, lr}
 810de16:	b08c      	sub	sp, #48	@ 0x30
 810de18:	af00      	add	r7, sp, #0
 810de1a:	60f8      	str	r0, [r7, #12]
 810de1c:	60b9      	str	r1, [r7, #8]
 810de1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810de20:	2300      	movs	r3, #0
 810de22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810de24:	68fb      	ldr	r3, [r7, #12]
 810de26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810de28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810de2a:	2b00      	cmp	r3, #0
 810de2c:	d10b      	bne.n	810de46 <xQueueReceive+0x32>
	__asm volatile
 810de2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de32:	f383 8811 	msr	BASEPRI, r3
 810de36:	f3bf 8f6f 	isb	sy
 810de3a:	f3bf 8f4f 	dsb	sy
 810de3e:	623b      	str	r3, [r7, #32]
}
 810de40:	bf00      	nop
 810de42:	bf00      	nop
 810de44:	e7fd      	b.n	810de42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810de46:	68bb      	ldr	r3, [r7, #8]
 810de48:	2b00      	cmp	r3, #0
 810de4a:	d103      	bne.n	810de54 <xQueueReceive+0x40>
 810de4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810de4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810de50:	2b00      	cmp	r3, #0
 810de52:	d101      	bne.n	810de58 <xQueueReceive+0x44>
 810de54:	2301      	movs	r3, #1
 810de56:	e000      	b.n	810de5a <xQueueReceive+0x46>
 810de58:	2300      	movs	r3, #0
 810de5a:	2b00      	cmp	r3, #0
 810de5c:	d10b      	bne.n	810de76 <xQueueReceive+0x62>
	__asm volatile
 810de5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de62:	f383 8811 	msr	BASEPRI, r3
 810de66:	f3bf 8f6f 	isb	sy
 810de6a:	f3bf 8f4f 	dsb	sy
 810de6e:	61fb      	str	r3, [r7, #28]
}
 810de70:	bf00      	nop
 810de72:	bf00      	nop
 810de74:	e7fd      	b.n	810de72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810de76:	f001 fee1 	bl	810fc3c <xTaskGetSchedulerState>
 810de7a:	4603      	mov	r3, r0
 810de7c:	2b00      	cmp	r3, #0
 810de7e:	d102      	bne.n	810de86 <xQueueReceive+0x72>
 810de80:	687b      	ldr	r3, [r7, #4]
 810de82:	2b00      	cmp	r3, #0
 810de84:	d101      	bne.n	810de8a <xQueueReceive+0x76>
 810de86:	2301      	movs	r3, #1
 810de88:	e000      	b.n	810de8c <xQueueReceive+0x78>
 810de8a:	2300      	movs	r3, #0
 810de8c:	2b00      	cmp	r3, #0
 810de8e:	d10b      	bne.n	810dea8 <xQueueReceive+0x94>
	__asm volatile
 810de90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de94:	f383 8811 	msr	BASEPRI, r3
 810de98:	f3bf 8f6f 	isb	sy
 810de9c:	f3bf 8f4f 	dsb	sy
 810dea0:	61bb      	str	r3, [r7, #24]
}
 810dea2:	bf00      	nop
 810dea4:	bf00      	nop
 810dea6:	e7fd      	b.n	810dea4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810dea8:	f7ff f9f6 	bl	810d298 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810deac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810deae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810deb0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810deb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810deb4:	2b00      	cmp	r3, #0
 810deb6:	d01f      	beq.n	810def8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810deb8:	68b9      	ldr	r1, [r7, #8]
 810deba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810debc:	f000 fac4 	bl	810e448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810dec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dec2:	1e5a      	subs	r2, r3, #1
 810dec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dec6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810dec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810deca:	691b      	ldr	r3, [r3, #16]
 810decc:	2b00      	cmp	r3, #0
 810dece:	d00f      	beq.n	810def0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810ded0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ded2:	3310      	adds	r3, #16
 810ded4:	4618      	mov	r0, r3
 810ded6:	f001 fcb3 	bl	810f840 <xTaskRemoveFromEventList>
 810deda:	4603      	mov	r3, r0
 810dedc:	2b00      	cmp	r3, #0
 810dede:	d007      	beq.n	810def0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810dee0:	4b3c      	ldr	r3, [pc, #240]	@ (810dfd4 <xQueueReceive+0x1c0>)
 810dee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dee6:	601a      	str	r2, [r3, #0]
 810dee8:	f3bf 8f4f 	dsb	sy
 810deec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810def0:	f7ff fa04 	bl	810d2fc <vPortExitCritical>
				return pdPASS;
 810def4:	2301      	movs	r3, #1
 810def6:	e069      	b.n	810dfcc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810def8:	687b      	ldr	r3, [r7, #4]
 810defa:	2b00      	cmp	r3, #0
 810defc:	d103      	bne.n	810df06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810defe:	f7ff f9fd 	bl	810d2fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810df02:	2300      	movs	r3, #0
 810df04:	e062      	b.n	810dfcc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810df06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810df08:	2b00      	cmp	r3, #0
 810df0a:	d106      	bne.n	810df1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810df0c:	f107 0310 	add.w	r3, r7, #16
 810df10:	4618      	mov	r0, r3
 810df12:	f001 fd21 	bl	810f958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810df16:	2301      	movs	r3, #1
 810df18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810df1a:	f7ff f9ef 	bl	810d2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810df1e:	f001 fa4f 	bl	810f3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810df22:	f7ff f9b9 	bl	810d298 <vPortEnterCritical>
 810df26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810df2c:	b25b      	sxtb	r3, r3
 810df2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810df32:	d103      	bne.n	810df3c <xQueueReceive+0x128>
 810df34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df36:	2200      	movs	r2, #0
 810df38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810df3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810df42:	b25b      	sxtb	r3, r3
 810df44:	f1b3 3fff 	cmp.w	r3, #4294967295
 810df48:	d103      	bne.n	810df52 <xQueueReceive+0x13e>
 810df4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df4c:	2200      	movs	r2, #0
 810df4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810df52:	f7ff f9d3 	bl	810d2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810df56:	1d3a      	adds	r2, r7, #4
 810df58:	f107 0310 	add.w	r3, r7, #16
 810df5c:	4611      	mov	r1, r2
 810df5e:	4618      	mov	r0, r3
 810df60:	f001 fd10 	bl	810f984 <xTaskCheckForTimeOut>
 810df64:	4603      	mov	r3, r0
 810df66:	2b00      	cmp	r3, #0
 810df68:	d123      	bne.n	810dfb2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810df6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810df6c:	f000 fae4 	bl	810e538 <prvIsQueueEmpty>
 810df70:	4603      	mov	r3, r0
 810df72:	2b00      	cmp	r3, #0
 810df74:	d017      	beq.n	810dfa6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810df76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df78:	3324      	adds	r3, #36	@ 0x24
 810df7a:	687a      	ldr	r2, [r7, #4]
 810df7c:	4611      	mov	r1, r2
 810df7e:	4618      	mov	r0, r3
 810df80:	f001 fc0c 	bl	810f79c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810df84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810df86:	f000 fa85 	bl	810e494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810df8a:	f001 fa27 	bl	810f3dc <xTaskResumeAll>
 810df8e:	4603      	mov	r3, r0
 810df90:	2b00      	cmp	r3, #0
 810df92:	d189      	bne.n	810dea8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810df94:	4b0f      	ldr	r3, [pc, #60]	@ (810dfd4 <xQueueReceive+0x1c0>)
 810df96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810df9a:	601a      	str	r2, [r3, #0]
 810df9c:	f3bf 8f4f 	dsb	sy
 810dfa0:	f3bf 8f6f 	isb	sy
 810dfa4:	e780      	b.n	810dea8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810dfa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810dfa8:	f000 fa74 	bl	810e494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810dfac:	f001 fa16 	bl	810f3dc <xTaskResumeAll>
 810dfb0:	e77a      	b.n	810dea8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810dfb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810dfb4:	f000 fa6e 	bl	810e494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810dfb8:	f001 fa10 	bl	810f3dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810dfbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810dfbe:	f000 fabb 	bl	810e538 <prvIsQueueEmpty>
 810dfc2:	4603      	mov	r3, r0
 810dfc4:	2b00      	cmp	r3, #0
 810dfc6:	f43f af6f 	beq.w	810dea8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810dfca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810dfcc:	4618      	mov	r0, r3
 810dfce:	3730      	adds	r7, #48	@ 0x30
 810dfd0:	46bd      	mov	sp, r7
 810dfd2:	bd80      	pop	{r7, pc}
 810dfd4:	e000ed04 	.word	0xe000ed04

0810dfd8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 810dfd8:	b580      	push	{r7, lr}
 810dfda:	b08e      	sub	sp, #56	@ 0x38
 810dfdc:	af00      	add	r7, sp, #0
 810dfde:	6078      	str	r0, [r7, #4]
 810dfe0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 810dfe2:	2300      	movs	r3, #0
 810dfe4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810dfe6:	687b      	ldr	r3, [r7, #4]
 810dfe8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810dfea:	2300      	movs	r3, #0
 810dfec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810dfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dff0:	2b00      	cmp	r3, #0
 810dff2:	d10b      	bne.n	810e00c <xQueueSemaphoreTake+0x34>
	__asm volatile
 810dff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dff8:	f383 8811 	msr	BASEPRI, r3
 810dffc:	f3bf 8f6f 	isb	sy
 810e000:	f3bf 8f4f 	dsb	sy
 810e004:	623b      	str	r3, [r7, #32]
}
 810e006:	bf00      	nop
 810e008:	bf00      	nop
 810e00a:	e7fd      	b.n	810e008 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810e00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e00e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e010:	2b00      	cmp	r3, #0
 810e012:	d00b      	beq.n	810e02c <xQueueSemaphoreTake+0x54>
	__asm volatile
 810e014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e018:	f383 8811 	msr	BASEPRI, r3
 810e01c:	f3bf 8f6f 	isb	sy
 810e020:	f3bf 8f4f 	dsb	sy
 810e024:	61fb      	str	r3, [r7, #28]
}
 810e026:	bf00      	nop
 810e028:	bf00      	nop
 810e02a:	e7fd      	b.n	810e028 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810e02c:	f001 fe06 	bl	810fc3c <xTaskGetSchedulerState>
 810e030:	4603      	mov	r3, r0
 810e032:	2b00      	cmp	r3, #0
 810e034:	d102      	bne.n	810e03c <xQueueSemaphoreTake+0x64>
 810e036:	683b      	ldr	r3, [r7, #0]
 810e038:	2b00      	cmp	r3, #0
 810e03a:	d101      	bne.n	810e040 <xQueueSemaphoreTake+0x68>
 810e03c:	2301      	movs	r3, #1
 810e03e:	e000      	b.n	810e042 <xQueueSemaphoreTake+0x6a>
 810e040:	2300      	movs	r3, #0
 810e042:	2b00      	cmp	r3, #0
 810e044:	d10b      	bne.n	810e05e <xQueueSemaphoreTake+0x86>
	__asm volatile
 810e046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e04a:	f383 8811 	msr	BASEPRI, r3
 810e04e:	f3bf 8f6f 	isb	sy
 810e052:	f3bf 8f4f 	dsb	sy
 810e056:	61bb      	str	r3, [r7, #24]
}
 810e058:	bf00      	nop
 810e05a:	bf00      	nop
 810e05c:	e7fd      	b.n	810e05a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810e05e:	f7ff f91b 	bl	810d298 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 810e062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e066:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 810e068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e06a:	2b00      	cmp	r3, #0
 810e06c:	d024      	beq.n	810e0b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810e06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e070:	1e5a      	subs	r2, r3, #1
 810e072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e074:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810e076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e078:	681b      	ldr	r3, [r3, #0]
 810e07a:	2b00      	cmp	r3, #0
 810e07c:	d104      	bne.n	810e088 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810e07e:	f001 ff57 	bl	810ff30 <pvTaskIncrementMutexHeldCount>
 810e082:	4602      	mov	r2, r0
 810e084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e086:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e08a:	691b      	ldr	r3, [r3, #16]
 810e08c:	2b00      	cmp	r3, #0
 810e08e:	d00f      	beq.n	810e0b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e092:	3310      	adds	r3, #16
 810e094:	4618      	mov	r0, r3
 810e096:	f001 fbd3 	bl	810f840 <xTaskRemoveFromEventList>
 810e09a:	4603      	mov	r3, r0
 810e09c:	2b00      	cmp	r3, #0
 810e09e:	d007      	beq.n	810e0b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810e0a0:	4b54      	ldr	r3, [pc, #336]	@ (810e1f4 <xQueueSemaphoreTake+0x21c>)
 810e0a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e0a6:	601a      	str	r2, [r3, #0]
 810e0a8:	f3bf 8f4f 	dsb	sy
 810e0ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810e0b0:	f7ff f924 	bl	810d2fc <vPortExitCritical>
				return pdPASS;
 810e0b4:	2301      	movs	r3, #1
 810e0b6:	e098      	b.n	810e1ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810e0b8:	683b      	ldr	r3, [r7, #0]
 810e0ba:	2b00      	cmp	r3, #0
 810e0bc:	d112      	bne.n	810e0e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810e0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e0c0:	2b00      	cmp	r3, #0
 810e0c2:	d00b      	beq.n	810e0dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 810e0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e0c8:	f383 8811 	msr	BASEPRI, r3
 810e0cc:	f3bf 8f6f 	isb	sy
 810e0d0:	f3bf 8f4f 	dsb	sy
 810e0d4:	617b      	str	r3, [r7, #20]
}
 810e0d6:	bf00      	nop
 810e0d8:	bf00      	nop
 810e0da:	e7fd      	b.n	810e0d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810e0dc:	f7ff f90e 	bl	810d2fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810e0e0:	2300      	movs	r3, #0
 810e0e2:	e082      	b.n	810e1ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 810e0e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e0e6:	2b00      	cmp	r3, #0
 810e0e8:	d106      	bne.n	810e0f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810e0ea:	f107 030c 	add.w	r3, r7, #12
 810e0ee:	4618      	mov	r0, r3
 810e0f0:	f001 fc32 	bl	810f958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810e0f4:	2301      	movs	r3, #1
 810e0f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810e0f8:	f7ff f900 	bl	810d2fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810e0fc:	f001 f960 	bl	810f3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810e100:	f7ff f8ca 	bl	810d298 <vPortEnterCritical>
 810e104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e106:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e10a:	b25b      	sxtb	r3, r3
 810e10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e110:	d103      	bne.n	810e11a <xQueueSemaphoreTake+0x142>
 810e112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e114:	2200      	movs	r2, #0
 810e116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810e11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e11c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e120:	b25b      	sxtb	r3, r3
 810e122:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e126:	d103      	bne.n	810e130 <xQueueSemaphoreTake+0x158>
 810e128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e12a:	2200      	movs	r2, #0
 810e12c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810e130:	f7ff f8e4 	bl	810d2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810e134:	463a      	mov	r2, r7
 810e136:	f107 030c 	add.w	r3, r7, #12
 810e13a:	4611      	mov	r1, r2
 810e13c:	4618      	mov	r0, r3
 810e13e:	f001 fc21 	bl	810f984 <xTaskCheckForTimeOut>
 810e142:	4603      	mov	r3, r0
 810e144:	2b00      	cmp	r3, #0
 810e146:	d132      	bne.n	810e1ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810e148:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e14a:	f000 f9f5 	bl	810e538 <prvIsQueueEmpty>
 810e14e:	4603      	mov	r3, r0
 810e150:	2b00      	cmp	r3, #0
 810e152:	d026      	beq.n	810e1a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810e154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e156:	681b      	ldr	r3, [r3, #0]
 810e158:	2b00      	cmp	r3, #0
 810e15a:	d109      	bne.n	810e170 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 810e15c:	f7ff f89c 	bl	810d298 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 810e160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e162:	689b      	ldr	r3, [r3, #8]
 810e164:	4618      	mov	r0, r3
 810e166:	f001 fd87 	bl	810fc78 <xTaskPriorityInherit>
 810e16a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 810e16c:	f7ff f8c6 	bl	810d2fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810e170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e172:	3324      	adds	r3, #36	@ 0x24
 810e174:	683a      	ldr	r2, [r7, #0]
 810e176:	4611      	mov	r1, r2
 810e178:	4618      	mov	r0, r3
 810e17a:	f001 fb0f 	bl	810f79c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810e17e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e180:	f000 f988 	bl	810e494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810e184:	f001 f92a 	bl	810f3dc <xTaskResumeAll>
 810e188:	4603      	mov	r3, r0
 810e18a:	2b00      	cmp	r3, #0
 810e18c:	f47f af67 	bne.w	810e05e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 810e190:	4b18      	ldr	r3, [pc, #96]	@ (810e1f4 <xQueueSemaphoreTake+0x21c>)
 810e192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e196:	601a      	str	r2, [r3, #0]
 810e198:	f3bf 8f4f 	dsb	sy
 810e19c:	f3bf 8f6f 	isb	sy
 810e1a0:	e75d      	b.n	810e05e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 810e1a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e1a4:	f000 f976 	bl	810e494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810e1a8:	f001 f918 	bl	810f3dc <xTaskResumeAll>
 810e1ac:	e757      	b.n	810e05e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810e1ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e1b0:	f000 f970 	bl	810e494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810e1b4:	f001 f912 	bl	810f3dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810e1b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e1ba:	f000 f9bd 	bl	810e538 <prvIsQueueEmpty>
 810e1be:	4603      	mov	r3, r0
 810e1c0:	2b00      	cmp	r3, #0
 810e1c2:	f43f af4c 	beq.w	810e05e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810e1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e1c8:	2b00      	cmp	r3, #0
 810e1ca:	d00d      	beq.n	810e1e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 810e1cc:	f7ff f864 	bl	810d298 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 810e1d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e1d2:	f000 f8b7 	bl	810e344 <prvGetDisinheritPriorityAfterTimeout>
 810e1d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 810e1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e1da:	689b      	ldr	r3, [r3, #8]
 810e1dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810e1de:	4618      	mov	r0, r3
 810e1e0:	f001 fe22 	bl	810fe28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810e1e4:	f7ff f88a 	bl	810d2fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810e1e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810e1ea:	4618      	mov	r0, r3
 810e1ec:	3738      	adds	r7, #56	@ 0x38
 810e1ee:	46bd      	mov	sp, r7
 810e1f0:	bd80      	pop	{r7, pc}
 810e1f2:	bf00      	nop
 810e1f4:	e000ed04 	.word	0xe000ed04

0810e1f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810e1f8:	b580      	push	{r7, lr}
 810e1fa:	b08e      	sub	sp, #56	@ 0x38
 810e1fc:	af00      	add	r7, sp, #0
 810e1fe:	60f8      	str	r0, [r7, #12]
 810e200:	60b9      	str	r1, [r7, #8]
 810e202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810e204:	68fb      	ldr	r3, [r7, #12]
 810e206:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810e208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e20a:	2b00      	cmp	r3, #0
 810e20c:	d10b      	bne.n	810e226 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 810e20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e212:	f383 8811 	msr	BASEPRI, r3
 810e216:	f3bf 8f6f 	isb	sy
 810e21a:	f3bf 8f4f 	dsb	sy
 810e21e:	623b      	str	r3, [r7, #32]
}
 810e220:	bf00      	nop
 810e222:	bf00      	nop
 810e224:	e7fd      	b.n	810e222 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810e226:	68bb      	ldr	r3, [r7, #8]
 810e228:	2b00      	cmp	r3, #0
 810e22a:	d103      	bne.n	810e234 <xQueueReceiveFromISR+0x3c>
 810e22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e22e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e230:	2b00      	cmp	r3, #0
 810e232:	d101      	bne.n	810e238 <xQueueReceiveFromISR+0x40>
 810e234:	2301      	movs	r3, #1
 810e236:	e000      	b.n	810e23a <xQueueReceiveFromISR+0x42>
 810e238:	2300      	movs	r3, #0
 810e23a:	2b00      	cmp	r3, #0
 810e23c:	d10b      	bne.n	810e256 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 810e23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e242:	f383 8811 	msr	BASEPRI, r3
 810e246:	f3bf 8f6f 	isb	sy
 810e24a:	f3bf 8f4f 	dsb	sy
 810e24e:	61fb      	str	r3, [r7, #28]
}
 810e250:	bf00      	nop
 810e252:	bf00      	nop
 810e254:	e7fd      	b.n	810e252 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810e256:	f7ff f8ff 	bl	810d458 <vPortValidateInterruptPriority>
	__asm volatile
 810e25a:	f3ef 8211 	mrs	r2, BASEPRI
 810e25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e262:	f383 8811 	msr	BASEPRI, r3
 810e266:	f3bf 8f6f 	isb	sy
 810e26a:	f3bf 8f4f 	dsb	sy
 810e26e:	61ba      	str	r2, [r7, #24]
 810e270:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810e272:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810e274:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810e276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e27a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810e27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e27e:	2b00      	cmp	r3, #0
 810e280:	d02f      	beq.n	810e2e2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 810e282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810e28c:	68b9      	ldr	r1, [r7, #8]
 810e28e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810e290:	f000 f8da 	bl	810e448 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810e294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e296:	1e5a      	subs	r2, r3, #1
 810e298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e29a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810e29c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810e2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e2a4:	d112      	bne.n	810e2cc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e2a8:	691b      	ldr	r3, [r3, #16]
 810e2aa:	2b00      	cmp	r3, #0
 810e2ac:	d016      	beq.n	810e2dc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e2b0:	3310      	adds	r3, #16
 810e2b2:	4618      	mov	r0, r3
 810e2b4:	f001 fac4 	bl	810f840 <xTaskRemoveFromEventList>
 810e2b8:	4603      	mov	r3, r0
 810e2ba:	2b00      	cmp	r3, #0
 810e2bc:	d00e      	beq.n	810e2dc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810e2be:	687b      	ldr	r3, [r7, #4]
 810e2c0:	2b00      	cmp	r3, #0
 810e2c2:	d00b      	beq.n	810e2dc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 810e2c4:	687b      	ldr	r3, [r7, #4]
 810e2c6:	2201      	movs	r2, #1
 810e2c8:	601a      	str	r2, [r3, #0]
 810e2ca:	e007      	b.n	810e2dc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810e2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810e2d0:	3301      	adds	r3, #1
 810e2d2:	b2db      	uxtb	r3, r3
 810e2d4:	b25a      	sxtb	r2, r3
 810e2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e2d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 810e2dc:	2301      	movs	r3, #1
 810e2de:	637b      	str	r3, [r7, #52]	@ 0x34
 810e2e0:	e001      	b.n	810e2e6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 810e2e2:	2300      	movs	r3, #0
 810e2e4:	637b      	str	r3, [r7, #52]	@ 0x34
 810e2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e2e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 810e2ea:	693b      	ldr	r3, [r7, #16]
 810e2ec:	f383 8811 	msr	BASEPRI, r3
}
 810e2f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810e2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810e2f4:	4618      	mov	r0, r3
 810e2f6:	3738      	adds	r7, #56	@ 0x38
 810e2f8:	46bd      	mov	sp, r7
 810e2fa:	bd80      	pop	{r7, pc}

0810e2fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 810e2fc:	b580      	push	{r7, lr}
 810e2fe:	b084      	sub	sp, #16
 810e300:	af00      	add	r7, sp, #0
 810e302:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 810e304:	687b      	ldr	r3, [r7, #4]
 810e306:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810e308:	68fb      	ldr	r3, [r7, #12]
 810e30a:	2b00      	cmp	r3, #0
 810e30c:	d10b      	bne.n	810e326 <vQueueDelete+0x2a>
	__asm volatile
 810e30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e312:	f383 8811 	msr	BASEPRI, r3
 810e316:	f3bf 8f6f 	isb	sy
 810e31a:	f3bf 8f4f 	dsb	sy
 810e31e:	60bb      	str	r3, [r7, #8]
}
 810e320:	bf00      	nop
 810e322:	bf00      	nop
 810e324:	e7fd      	b.n	810e322 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 810e326:	68f8      	ldr	r0, [r7, #12]
 810e328:	f000 f95e 	bl	810e5e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 810e32c:	68fb      	ldr	r3, [r7, #12]
 810e32e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 810e332:	2b00      	cmp	r3, #0
 810e334:	d102      	bne.n	810e33c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 810e336:	68f8      	ldr	r0, [r7, #12]
 810e338:	f7fe fca6 	bl	810cc88 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 810e33c:	bf00      	nop
 810e33e:	3710      	adds	r7, #16
 810e340:	46bd      	mov	sp, r7
 810e342:	bd80      	pop	{r7, pc}

0810e344 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 810e344:	b480      	push	{r7}
 810e346:	b085      	sub	sp, #20
 810e348:	af00      	add	r7, sp, #0
 810e34a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 810e34c:	687b      	ldr	r3, [r7, #4]
 810e34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e350:	2b00      	cmp	r3, #0
 810e352:	d006      	beq.n	810e362 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 810e354:	687b      	ldr	r3, [r7, #4]
 810e356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810e358:	681b      	ldr	r3, [r3, #0]
 810e35a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 810e35e:	60fb      	str	r3, [r7, #12]
 810e360:	e001      	b.n	810e366 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810e362:	2300      	movs	r3, #0
 810e364:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 810e366:	68fb      	ldr	r3, [r7, #12]
	}
 810e368:	4618      	mov	r0, r3
 810e36a:	3714      	adds	r7, #20
 810e36c:	46bd      	mov	sp, r7
 810e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e372:	4770      	bx	lr

0810e374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810e374:	b580      	push	{r7, lr}
 810e376:	b086      	sub	sp, #24
 810e378:	af00      	add	r7, sp, #0
 810e37a:	60f8      	str	r0, [r7, #12]
 810e37c:	60b9      	str	r1, [r7, #8]
 810e37e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810e380:	2300      	movs	r3, #0
 810e382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810e384:	68fb      	ldr	r3, [r7, #12]
 810e386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810e38a:	68fb      	ldr	r3, [r7, #12]
 810e38c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e38e:	2b00      	cmp	r3, #0
 810e390:	d10d      	bne.n	810e3ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810e392:	68fb      	ldr	r3, [r7, #12]
 810e394:	681b      	ldr	r3, [r3, #0]
 810e396:	2b00      	cmp	r3, #0
 810e398:	d14d      	bne.n	810e436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810e39a:	68fb      	ldr	r3, [r7, #12]
 810e39c:	689b      	ldr	r3, [r3, #8]
 810e39e:	4618      	mov	r0, r3
 810e3a0:	f001 fcd2 	bl	810fd48 <xTaskPriorityDisinherit>
 810e3a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810e3a6:	68fb      	ldr	r3, [r7, #12]
 810e3a8:	2200      	movs	r2, #0
 810e3aa:	609a      	str	r2, [r3, #8]
 810e3ac:	e043      	b.n	810e436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810e3ae:	687b      	ldr	r3, [r7, #4]
 810e3b0:	2b00      	cmp	r3, #0
 810e3b2:	d119      	bne.n	810e3e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810e3b4:	68fb      	ldr	r3, [r7, #12]
 810e3b6:	6858      	ldr	r0, [r3, #4]
 810e3b8:	68fb      	ldr	r3, [r7, #12]
 810e3ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e3bc:	461a      	mov	r2, r3
 810e3be:	68b9      	ldr	r1, [r7, #8]
 810e3c0:	f00d fedd 	bl	811c17e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810e3c4:	68fb      	ldr	r3, [r7, #12]
 810e3c6:	685a      	ldr	r2, [r3, #4]
 810e3c8:	68fb      	ldr	r3, [r7, #12]
 810e3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e3cc:	441a      	add	r2, r3
 810e3ce:	68fb      	ldr	r3, [r7, #12]
 810e3d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810e3d2:	68fb      	ldr	r3, [r7, #12]
 810e3d4:	685a      	ldr	r2, [r3, #4]
 810e3d6:	68fb      	ldr	r3, [r7, #12]
 810e3d8:	689b      	ldr	r3, [r3, #8]
 810e3da:	429a      	cmp	r2, r3
 810e3dc:	d32b      	bcc.n	810e436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810e3de:	68fb      	ldr	r3, [r7, #12]
 810e3e0:	681a      	ldr	r2, [r3, #0]
 810e3e2:	68fb      	ldr	r3, [r7, #12]
 810e3e4:	605a      	str	r2, [r3, #4]
 810e3e6:	e026      	b.n	810e436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810e3e8:	68fb      	ldr	r3, [r7, #12]
 810e3ea:	68d8      	ldr	r0, [r3, #12]
 810e3ec:	68fb      	ldr	r3, [r7, #12]
 810e3ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e3f0:	461a      	mov	r2, r3
 810e3f2:	68b9      	ldr	r1, [r7, #8]
 810e3f4:	f00d fec3 	bl	811c17e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810e3f8:	68fb      	ldr	r3, [r7, #12]
 810e3fa:	68da      	ldr	r2, [r3, #12]
 810e3fc:	68fb      	ldr	r3, [r7, #12]
 810e3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e400:	425b      	negs	r3, r3
 810e402:	441a      	add	r2, r3
 810e404:	68fb      	ldr	r3, [r7, #12]
 810e406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810e408:	68fb      	ldr	r3, [r7, #12]
 810e40a:	68da      	ldr	r2, [r3, #12]
 810e40c:	68fb      	ldr	r3, [r7, #12]
 810e40e:	681b      	ldr	r3, [r3, #0]
 810e410:	429a      	cmp	r2, r3
 810e412:	d207      	bcs.n	810e424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810e414:	68fb      	ldr	r3, [r7, #12]
 810e416:	689a      	ldr	r2, [r3, #8]
 810e418:	68fb      	ldr	r3, [r7, #12]
 810e41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e41c:	425b      	negs	r3, r3
 810e41e:	441a      	add	r2, r3
 810e420:	68fb      	ldr	r3, [r7, #12]
 810e422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810e424:	687b      	ldr	r3, [r7, #4]
 810e426:	2b02      	cmp	r3, #2
 810e428:	d105      	bne.n	810e436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810e42a:	693b      	ldr	r3, [r7, #16]
 810e42c:	2b00      	cmp	r3, #0
 810e42e:	d002      	beq.n	810e436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810e430:	693b      	ldr	r3, [r7, #16]
 810e432:	3b01      	subs	r3, #1
 810e434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810e436:	693b      	ldr	r3, [r7, #16]
 810e438:	1c5a      	adds	r2, r3, #1
 810e43a:	68fb      	ldr	r3, [r7, #12]
 810e43c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810e43e:	697b      	ldr	r3, [r7, #20]
}
 810e440:	4618      	mov	r0, r3
 810e442:	3718      	adds	r7, #24
 810e444:	46bd      	mov	sp, r7
 810e446:	bd80      	pop	{r7, pc}

0810e448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810e448:	b580      	push	{r7, lr}
 810e44a:	b082      	sub	sp, #8
 810e44c:	af00      	add	r7, sp, #0
 810e44e:	6078      	str	r0, [r7, #4]
 810e450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810e452:	687b      	ldr	r3, [r7, #4]
 810e454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e456:	2b00      	cmp	r3, #0
 810e458:	d018      	beq.n	810e48c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810e45a:	687b      	ldr	r3, [r7, #4]
 810e45c:	68da      	ldr	r2, [r3, #12]
 810e45e:	687b      	ldr	r3, [r7, #4]
 810e460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e462:	441a      	add	r2, r3
 810e464:	687b      	ldr	r3, [r7, #4]
 810e466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810e468:	687b      	ldr	r3, [r7, #4]
 810e46a:	68da      	ldr	r2, [r3, #12]
 810e46c:	687b      	ldr	r3, [r7, #4]
 810e46e:	689b      	ldr	r3, [r3, #8]
 810e470:	429a      	cmp	r2, r3
 810e472:	d303      	bcc.n	810e47c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810e474:	687b      	ldr	r3, [r7, #4]
 810e476:	681a      	ldr	r2, [r3, #0]
 810e478:	687b      	ldr	r3, [r7, #4]
 810e47a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810e47c:	687b      	ldr	r3, [r7, #4]
 810e47e:	68d9      	ldr	r1, [r3, #12]
 810e480:	687b      	ldr	r3, [r7, #4]
 810e482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e484:	461a      	mov	r2, r3
 810e486:	6838      	ldr	r0, [r7, #0]
 810e488:	f00d fe79 	bl	811c17e <memcpy>
	}
}
 810e48c:	bf00      	nop
 810e48e:	3708      	adds	r7, #8
 810e490:	46bd      	mov	sp, r7
 810e492:	bd80      	pop	{r7, pc}

0810e494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810e494:	b580      	push	{r7, lr}
 810e496:	b084      	sub	sp, #16
 810e498:	af00      	add	r7, sp, #0
 810e49a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810e49c:	f7fe fefc 	bl	810d298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810e4a0:	687b      	ldr	r3, [r7, #4]
 810e4a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e4a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810e4a8:	e011      	b.n	810e4ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810e4aa:	687b      	ldr	r3, [r7, #4]
 810e4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e4ae:	2b00      	cmp	r3, #0
 810e4b0:	d012      	beq.n	810e4d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810e4b2:	687b      	ldr	r3, [r7, #4]
 810e4b4:	3324      	adds	r3, #36	@ 0x24
 810e4b6:	4618      	mov	r0, r3
 810e4b8:	f001 f9c2 	bl	810f840 <xTaskRemoveFromEventList>
 810e4bc:	4603      	mov	r3, r0
 810e4be:	2b00      	cmp	r3, #0
 810e4c0:	d001      	beq.n	810e4c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810e4c2:	f001 fac3 	bl	810fa4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810e4c6:	7bfb      	ldrb	r3, [r7, #15]
 810e4c8:	3b01      	subs	r3, #1
 810e4ca:	b2db      	uxtb	r3, r3
 810e4cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810e4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810e4d2:	2b00      	cmp	r3, #0
 810e4d4:	dce9      	bgt.n	810e4aa <prvUnlockQueue+0x16>
 810e4d6:	e000      	b.n	810e4da <prvUnlockQueue+0x46>
					break;
 810e4d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810e4da:	687b      	ldr	r3, [r7, #4]
 810e4dc:	22ff      	movs	r2, #255	@ 0xff
 810e4de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810e4e2:	f7fe ff0b 	bl	810d2fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810e4e6:	f7fe fed7 	bl	810d298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810e4ea:	687b      	ldr	r3, [r7, #4]
 810e4ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e4f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810e4f2:	e011      	b.n	810e518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e4f4:	687b      	ldr	r3, [r7, #4]
 810e4f6:	691b      	ldr	r3, [r3, #16]
 810e4f8:	2b00      	cmp	r3, #0
 810e4fa:	d012      	beq.n	810e522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e4fc:	687b      	ldr	r3, [r7, #4]
 810e4fe:	3310      	adds	r3, #16
 810e500:	4618      	mov	r0, r3
 810e502:	f001 f99d 	bl	810f840 <xTaskRemoveFromEventList>
 810e506:	4603      	mov	r3, r0
 810e508:	2b00      	cmp	r3, #0
 810e50a:	d001      	beq.n	810e510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810e50c:	f001 fa9e 	bl	810fa4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810e510:	7bbb      	ldrb	r3, [r7, #14]
 810e512:	3b01      	subs	r3, #1
 810e514:	b2db      	uxtb	r3, r3
 810e516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810e518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810e51c:	2b00      	cmp	r3, #0
 810e51e:	dce9      	bgt.n	810e4f4 <prvUnlockQueue+0x60>
 810e520:	e000      	b.n	810e524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810e522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810e524:	687b      	ldr	r3, [r7, #4]
 810e526:	22ff      	movs	r2, #255	@ 0xff
 810e528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810e52c:	f7fe fee6 	bl	810d2fc <vPortExitCritical>
}
 810e530:	bf00      	nop
 810e532:	3710      	adds	r7, #16
 810e534:	46bd      	mov	sp, r7
 810e536:	bd80      	pop	{r7, pc}

0810e538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810e538:	b580      	push	{r7, lr}
 810e53a:	b084      	sub	sp, #16
 810e53c:	af00      	add	r7, sp, #0
 810e53e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810e540:	f7fe feaa 	bl	810d298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810e544:	687b      	ldr	r3, [r7, #4]
 810e546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e548:	2b00      	cmp	r3, #0
 810e54a:	d102      	bne.n	810e552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810e54c:	2301      	movs	r3, #1
 810e54e:	60fb      	str	r3, [r7, #12]
 810e550:	e001      	b.n	810e556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810e552:	2300      	movs	r3, #0
 810e554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810e556:	f7fe fed1 	bl	810d2fc <vPortExitCritical>

	return xReturn;
 810e55a:	68fb      	ldr	r3, [r7, #12]
}
 810e55c:	4618      	mov	r0, r3
 810e55e:	3710      	adds	r7, #16
 810e560:	46bd      	mov	sp, r7
 810e562:	bd80      	pop	{r7, pc}

0810e564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810e564:	b580      	push	{r7, lr}
 810e566:	b084      	sub	sp, #16
 810e568:	af00      	add	r7, sp, #0
 810e56a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810e56c:	f7fe fe94 	bl	810d298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810e570:	687b      	ldr	r3, [r7, #4]
 810e572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810e574:	687b      	ldr	r3, [r7, #4]
 810e576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810e578:	429a      	cmp	r2, r3
 810e57a:	d102      	bne.n	810e582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810e57c:	2301      	movs	r3, #1
 810e57e:	60fb      	str	r3, [r7, #12]
 810e580:	e001      	b.n	810e586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810e582:	2300      	movs	r3, #0
 810e584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810e586:	f7fe feb9 	bl	810d2fc <vPortExitCritical>

	return xReturn;
 810e58a:	68fb      	ldr	r3, [r7, #12]
}
 810e58c:	4618      	mov	r0, r3
 810e58e:	3710      	adds	r7, #16
 810e590:	46bd      	mov	sp, r7
 810e592:	bd80      	pop	{r7, pc}

0810e594 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810e594:	b480      	push	{r7}
 810e596:	b085      	sub	sp, #20
 810e598:	af00      	add	r7, sp, #0
 810e59a:	6078      	str	r0, [r7, #4]
 810e59c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e59e:	2300      	movs	r3, #0
 810e5a0:	60fb      	str	r3, [r7, #12]
 810e5a2:	e014      	b.n	810e5ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810e5a4:	4a0f      	ldr	r2, [pc, #60]	@ (810e5e4 <vQueueAddToRegistry+0x50>)
 810e5a6:	68fb      	ldr	r3, [r7, #12]
 810e5a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810e5ac:	2b00      	cmp	r3, #0
 810e5ae:	d10b      	bne.n	810e5c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810e5b0:	490c      	ldr	r1, [pc, #48]	@ (810e5e4 <vQueueAddToRegistry+0x50>)
 810e5b2:	68fb      	ldr	r3, [r7, #12]
 810e5b4:	683a      	ldr	r2, [r7, #0]
 810e5b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810e5ba:	4a0a      	ldr	r2, [pc, #40]	@ (810e5e4 <vQueueAddToRegistry+0x50>)
 810e5bc:	68fb      	ldr	r3, [r7, #12]
 810e5be:	00db      	lsls	r3, r3, #3
 810e5c0:	4413      	add	r3, r2
 810e5c2:	687a      	ldr	r2, [r7, #4]
 810e5c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810e5c6:	e006      	b.n	810e5d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e5c8:	68fb      	ldr	r3, [r7, #12]
 810e5ca:	3301      	adds	r3, #1
 810e5cc:	60fb      	str	r3, [r7, #12]
 810e5ce:	68fb      	ldr	r3, [r7, #12]
 810e5d0:	2b07      	cmp	r3, #7
 810e5d2:	d9e7      	bls.n	810e5a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810e5d4:	bf00      	nop
 810e5d6:	bf00      	nop
 810e5d8:	3714      	adds	r7, #20
 810e5da:	46bd      	mov	sp, r7
 810e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e5e0:	4770      	bx	lr
 810e5e2:	bf00      	nop
 810e5e4:	1000aae4 	.word	0x1000aae4

0810e5e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 810e5e8:	b480      	push	{r7}
 810e5ea:	b085      	sub	sp, #20
 810e5ec:	af00      	add	r7, sp, #0
 810e5ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e5f0:	2300      	movs	r3, #0
 810e5f2:	60fb      	str	r3, [r7, #12]
 810e5f4:	e016      	b.n	810e624 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 810e5f6:	4a10      	ldr	r2, [pc, #64]	@ (810e638 <vQueueUnregisterQueue+0x50>)
 810e5f8:	68fb      	ldr	r3, [r7, #12]
 810e5fa:	00db      	lsls	r3, r3, #3
 810e5fc:	4413      	add	r3, r2
 810e5fe:	685b      	ldr	r3, [r3, #4]
 810e600:	687a      	ldr	r2, [r7, #4]
 810e602:	429a      	cmp	r2, r3
 810e604:	d10b      	bne.n	810e61e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 810e606:	4a0c      	ldr	r2, [pc, #48]	@ (810e638 <vQueueUnregisterQueue+0x50>)
 810e608:	68fb      	ldr	r3, [r7, #12]
 810e60a:	2100      	movs	r1, #0
 810e60c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 810e610:	4a09      	ldr	r2, [pc, #36]	@ (810e638 <vQueueUnregisterQueue+0x50>)
 810e612:	68fb      	ldr	r3, [r7, #12]
 810e614:	00db      	lsls	r3, r3, #3
 810e616:	4413      	add	r3, r2
 810e618:	2200      	movs	r2, #0
 810e61a:	605a      	str	r2, [r3, #4]
				break;
 810e61c:	e006      	b.n	810e62c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e61e:	68fb      	ldr	r3, [r7, #12]
 810e620:	3301      	adds	r3, #1
 810e622:	60fb      	str	r3, [r7, #12]
 810e624:	68fb      	ldr	r3, [r7, #12]
 810e626:	2b07      	cmp	r3, #7
 810e628:	d9e5      	bls.n	810e5f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 810e62a:	bf00      	nop
 810e62c:	bf00      	nop
 810e62e:	3714      	adds	r7, #20
 810e630:	46bd      	mov	sp, r7
 810e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e636:	4770      	bx	lr
 810e638:	1000aae4 	.word	0x1000aae4

0810e63c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810e63c:	b580      	push	{r7, lr}
 810e63e:	b086      	sub	sp, #24
 810e640:	af00      	add	r7, sp, #0
 810e642:	60f8      	str	r0, [r7, #12]
 810e644:	60b9      	str	r1, [r7, #8]
 810e646:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810e648:	68fb      	ldr	r3, [r7, #12]
 810e64a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810e64c:	f7fe fe24 	bl	810d298 <vPortEnterCritical>
 810e650:	697b      	ldr	r3, [r7, #20]
 810e652:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e656:	b25b      	sxtb	r3, r3
 810e658:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e65c:	d103      	bne.n	810e666 <vQueueWaitForMessageRestricted+0x2a>
 810e65e:	697b      	ldr	r3, [r7, #20]
 810e660:	2200      	movs	r2, #0
 810e662:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810e666:	697b      	ldr	r3, [r7, #20]
 810e668:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e66c:	b25b      	sxtb	r3, r3
 810e66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e672:	d103      	bne.n	810e67c <vQueueWaitForMessageRestricted+0x40>
 810e674:	697b      	ldr	r3, [r7, #20]
 810e676:	2200      	movs	r2, #0
 810e678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810e67c:	f7fe fe3e 	bl	810d2fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810e680:	697b      	ldr	r3, [r7, #20]
 810e682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e684:	2b00      	cmp	r3, #0
 810e686:	d106      	bne.n	810e696 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810e688:	697b      	ldr	r3, [r7, #20]
 810e68a:	3324      	adds	r3, #36	@ 0x24
 810e68c:	687a      	ldr	r2, [r7, #4]
 810e68e:	68b9      	ldr	r1, [r7, #8]
 810e690:	4618      	mov	r0, r3
 810e692:	f001 f8a9 	bl	810f7e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810e696:	6978      	ldr	r0, [r7, #20]
 810e698:	f7ff fefc 	bl	810e494 <prvUnlockQueue>
	}
 810e69c:	bf00      	nop
 810e69e:	3718      	adds	r7, #24
 810e6a0:	46bd      	mov	sp, r7
 810e6a2:	bd80      	pop	{r7, pc}

0810e6a4 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 810e6a4:	b580      	push	{r7, lr}
 810e6a6:	b090      	sub	sp, #64	@ 0x40
 810e6a8:	af02      	add	r7, sp, #8
 810e6aa:	60f8      	str	r0, [r7, #12]
 810e6ac:	60b9      	str	r1, [r7, #8]
 810e6ae:	607a      	str	r2, [r7, #4]
 810e6b0:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 810e6b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 810e6b6:	683b      	ldr	r3, [r7, #0]
 810e6b8:	2b00      	cmp	r3, #0
 810e6ba:	d10b      	bne.n	810e6d4 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 810e6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e6c0:	f383 8811 	msr	BASEPRI, r3
 810e6c4:	f3bf 8f6f 	isb	sy
 810e6c8:	f3bf 8f4f 	dsb	sy
 810e6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810e6ce:	bf00      	nop
 810e6d0:	bf00      	nop
 810e6d2:	e7fd      	b.n	810e6d0 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 810e6d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e6d6:	2b00      	cmp	r3, #0
 810e6d8:	d10b      	bne.n	810e6f2 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 810e6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e6de:	f383 8811 	msr	BASEPRI, r3
 810e6e2:	f3bf 8f6f 	isb	sy
 810e6e6:	f3bf 8f4f 	dsb	sy
 810e6ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810e6ec:	bf00      	nop
 810e6ee:	bf00      	nop
 810e6f0:	e7fd      	b.n	810e6ee <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 810e6f2:	68ba      	ldr	r2, [r7, #8]
 810e6f4:	68fb      	ldr	r3, [r7, #12]
 810e6f6:	429a      	cmp	r2, r3
 810e6f8:	d90b      	bls.n	810e712 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 810e6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e6fe:	f383 8811 	msr	BASEPRI, r3
 810e702:	f3bf 8f6f 	isb	sy
 810e706:	f3bf 8f4f 	dsb	sy
 810e70a:	623b      	str	r3, [r7, #32]
}
 810e70c:	bf00      	nop
 810e70e:	bf00      	nop
 810e710:	e7fd      	b.n	810e70e <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 810e712:	68bb      	ldr	r3, [r7, #8]
 810e714:	2b00      	cmp	r3, #0
 810e716:	d101      	bne.n	810e71c <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 810e718:	2301      	movs	r3, #1
 810e71a:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 810e71c:	687b      	ldr	r3, [r7, #4]
 810e71e:	2b00      	cmp	r3, #0
 810e720:	d003      	beq.n	810e72a <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 810e722:	2303      	movs	r3, #3
 810e724:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 810e728:	e002      	b.n	810e730 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 810e72a:	2302      	movs	r3, #2
 810e72c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 810e730:	68fb      	ldr	r3, [r7, #12]
 810e732:	2b04      	cmp	r3, #4
 810e734:	d80b      	bhi.n	810e74e <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 810e736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e73a:	f383 8811 	msr	BASEPRI, r3
 810e73e:	f3bf 8f6f 	isb	sy
 810e742:	f3bf 8f4f 	dsb	sy
 810e746:	61fb      	str	r3, [r7, #28]
}
 810e748:	bf00      	nop
 810e74a:	bf00      	nop
 810e74c:	e7fd      	b.n	810e74a <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 810e74e:	2324      	movs	r3, #36	@ 0x24
 810e750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 810e752:	697b      	ldr	r3, [r7, #20]
 810e754:	2b24      	cmp	r3, #36	@ 0x24
 810e756:	d00b      	beq.n	810e770 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 810e758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e75c:	f383 8811 	msr	BASEPRI, r3
 810e760:	f3bf 8f6f 	isb	sy
 810e764:	f3bf 8f4f 	dsb	sy
 810e768:	61bb      	str	r3, [r7, #24]
}
 810e76a:	bf00      	nop
 810e76c:	bf00      	nop
 810e76e:	e7fd      	b.n	810e76c <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 810e770:	683b      	ldr	r3, [r7, #0]
 810e772:	2b00      	cmp	r3, #0
 810e774:	d015      	beq.n	810e7a2 <xStreamBufferGenericCreateStatic+0xfe>
 810e776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e778:	2b00      	cmp	r3, #0
 810e77a:	d012      	beq.n	810e7a2 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 810e77c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810e780:	9300      	str	r3, [sp, #0]
 810e782:	68bb      	ldr	r3, [r7, #8]
 810e784:	68fa      	ldr	r2, [r7, #12]
 810e786:	6839      	ldr	r1, [r7, #0]
 810e788:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e78a:	f000 fb81 	bl	810ee90 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 810e78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e790:	7f1b      	ldrb	r3, [r3, #28]
 810e792:	f043 0302 	orr.w	r3, r3, #2
 810e796:	b2da      	uxtb	r2, r3
 810e798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e79a:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 810e79c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e79e:	637b      	str	r3, [r7, #52]	@ 0x34
 810e7a0:	e001      	b.n	810e7a6 <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 810e7a2:	2300      	movs	r3, #0
 810e7a4:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 810e7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 810e7a8:	4618      	mov	r0, r3
 810e7aa:	3738      	adds	r7, #56	@ 0x38
 810e7ac:	46bd      	mov	sp, r7
 810e7ae:	bd80      	pop	{r7, pc}

0810e7b0 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 810e7b0:	b480      	push	{r7}
 810e7b2:	b087      	sub	sp, #28
 810e7b4:	af00      	add	r7, sp, #0
 810e7b6:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810e7b8:	687b      	ldr	r3, [r7, #4]
 810e7ba:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 810e7bc:	693b      	ldr	r3, [r7, #16]
 810e7be:	2b00      	cmp	r3, #0
 810e7c0:	d10b      	bne.n	810e7da <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 810e7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e7c6:	f383 8811 	msr	BASEPRI, r3
 810e7ca:	f3bf 8f6f 	isb	sy
 810e7ce:	f3bf 8f4f 	dsb	sy
 810e7d2:	60fb      	str	r3, [r7, #12]
}
 810e7d4:	bf00      	nop
 810e7d6:	bf00      	nop
 810e7d8:	e7fd      	b.n	810e7d6 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 810e7da:	693b      	ldr	r3, [r7, #16]
 810e7dc:	689a      	ldr	r2, [r3, #8]
 810e7de:	693b      	ldr	r3, [r7, #16]
 810e7e0:	681b      	ldr	r3, [r3, #0]
 810e7e2:	4413      	add	r3, r2
 810e7e4:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 810e7e6:	693b      	ldr	r3, [r7, #16]
 810e7e8:	685b      	ldr	r3, [r3, #4]
 810e7ea:	697a      	ldr	r2, [r7, #20]
 810e7ec:	1ad3      	subs	r3, r2, r3
 810e7ee:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 810e7f0:	697b      	ldr	r3, [r7, #20]
 810e7f2:	3b01      	subs	r3, #1
 810e7f4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 810e7f6:	693b      	ldr	r3, [r7, #16]
 810e7f8:	689b      	ldr	r3, [r3, #8]
 810e7fa:	697a      	ldr	r2, [r7, #20]
 810e7fc:	429a      	cmp	r2, r3
 810e7fe:	d304      	bcc.n	810e80a <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 810e800:	693b      	ldr	r3, [r7, #16]
 810e802:	689b      	ldr	r3, [r3, #8]
 810e804:	697a      	ldr	r2, [r7, #20]
 810e806:	1ad3      	subs	r3, r2, r3
 810e808:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 810e80a:	697b      	ldr	r3, [r7, #20]
}
 810e80c:	4618      	mov	r0, r3
 810e80e:	371c      	adds	r7, #28
 810e810:	46bd      	mov	sp, r7
 810e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e816:	4770      	bx	lr

0810e818 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 810e818:	b580      	push	{r7, lr}
 810e81a:	b090      	sub	sp, #64	@ 0x40
 810e81c:	af02      	add	r7, sp, #8
 810e81e:	60f8      	str	r0, [r7, #12]
 810e820:	60b9      	str	r1, [r7, #8]
 810e822:	607a      	str	r2, [r7, #4]
 810e824:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810e826:	68fb      	ldr	r3, [r7, #12]
 810e828:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 810e82a:	2300      	movs	r3, #0
 810e82c:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 810e82e:	687b      	ldr	r3, [r7, #4]
 810e830:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 810e832:	68bb      	ldr	r3, [r7, #8]
 810e834:	2b00      	cmp	r3, #0
 810e836:	d10b      	bne.n	810e850 <xStreamBufferSend+0x38>
	__asm volatile
 810e838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e83c:	f383 8811 	msr	BASEPRI, r3
 810e840:	f3bf 8f6f 	isb	sy
 810e844:	f3bf 8f4f 	dsb	sy
 810e848:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810e84a:	bf00      	nop
 810e84c:	bf00      	nop
 810e84e:	e7fd      	b.n	810e84c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 810e850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e852:	2b00      	cmp	r3, #0
 810e854:	d10b      	bne.n	810e86e <xStreamBufferSend+0x56>
	__asm volatile
 810e856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e85a:	f383 8811 	msr	BASEPRI, r3
 810e85e:	f3bf 8f6f 	isb	sy
 810e862:	f3bf 8f4f 	dsb	sy
 810e866:	623b      	str	r3, [r7, #32]
}
 810e868:	bf00      	nop
 810e86a:	bf00      	nop
 810e86c:	e7fd      	b.n	810e86a <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 810e86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e870:	7f1b      	ldrb	r3, [r3, #28]
 810e872:	f003 0301 	and.w	r3, r3, #1
 810e876:	2b00      	cmp	r3, #0
 810e878:	d012      	beq.n	810e8a0 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 810e87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e87c:	3304      	adds	r3, #4
 810e87e:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 810e880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e882:	687b      	ldr	r3, [r7, #4]
 810e884:	429a      	cmp	r2, r3
 810e886:	d80b      	bhi.n	810e8a0 <xStreamBufferSend+0x88>
	__asm volatile
 810e888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e88c:	f383 8811 	msr	BASEPRI, r3
 810e890:	f3bf 8f6f 	isb	sy
 810e894:	f3bf 8f4f 	dsb	sy
 810e898:	61fb      	str	r3, [r7, #28]
}
 810e89a:	bf00      	nop
 810e89c:	bf00      	nop
 810e89e:	e7fd      	b.n	810e89c <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 810e8a0:	683b      	ldr	r3, [r7, #0]
 810e8a2:	2b00      	cmp	r3, #0
 810e8a4:	d03f      	beq.n	810e926 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 810e8a6:	f107 0310 	add.w	r3, r7, #16
 810e8aa:	4618      	mov	r0, r3
 810e8ac:	f001 f82c 	bl	810f908 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 810e8b0:	f7fe fcf2 	bl	810d298 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 810e8b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e8b6:	f7ff ff7b 	bl	810e7b0 <xStreamBufferSpacesAvailable>
 810e8ba:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 810e8bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810e8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e8c0:	429a      	cmp	r2, r3
 810e8c2:	d218      	bcs.n	810e8f6 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 810e8c4:	2000      	movs	r0, #0
 810e8c6:	f001 fc8d 	bl	81101e4 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 810e8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e8cc:	695b      	ldr	r3, [r3, #20]
 810e8ce:	2b00      	cmp	r3, #0
 810e8d0:	d00b      	beq.n	810e8ea <xStreamBufferSend+0xd2>
	__asm volatile
 810e8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e8d6:	f383 8811 	msr	BASEPRI, r3
 810e8da:	f3bf 8f6f 	isb	sy
 810e8de:	f3bf 8f4f 	dsb	sy
 810e8e2:	61bb      	str	r3, [r7, #24]
}
 810e8e4:	bf00      	nop
 810e8e6:	bf00      	nop
 810e8e8:	e7fd      	b.n	810e8e6 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 810e8ea:	f001 f997 	bl	810fc1c <xTaskGetCurrentTaskHandle>
 810e8ee:	4602      	mov	r2, r0
 810e8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e8f2:	615a      	str	r2, [r3, #20]
 810e8f4:	e002      	b.n	810e8fc <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 810e8f6:	f7fe fd01 	bl	810d2fc <vPortExitCritical>
					break;
 810e8fa:	e014      	b.n	810e926 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 810e8fc:	f7fe fcfe 	bl	810d2fc <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 810e900:	683b      	ldr	r3, [r7, #0]
 810e902:	2200      	movs	r2, #0
 810e904:	2100      	movs	r1, #0
 810e906:	2000      	movs	r0, #0
 810e908:	f001 fb26 	bl	810ff58 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 810e90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e90e:	2200      	movs	r2, #0
 810e910:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 810e912:	463a      	mov	r2, r7
 810e914:	f107 0310 	add.w	r3, r7, #16
 810e918:	4611      	mov	r1, r2
 810e91a:	4618      	mov	r0, r3
 810e91c:	f001 f832 	bl	810f984 <xTaskCheckForTimeOut>
 810e920:	4603      	mov	r3, r0
 810e922:	2b00      	cmp	r3, #0
 810e924:	d0c4      	beq.n	810e8b0 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 810e926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e928:	2b00      	cmp	r3, #0
 810e92a:	d103      	bne.n	810e934 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 810e92c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e92e:	f7ff ff3f 	bl	810e7b0 <xStreamBufferSpacesAvailable>
 810e932:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 810e934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e936:	9300      	str	r3, [sp, #0]
 810e938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e93a:	687a      	ldr	r2, [r7, #4]
 810e93c:	68b9      	ldr	r1, [r7, #8]
 810e93e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e940:	f000 f814 	bl	810e96c <prvWriteMessageToBuffer>
 810e944:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 810e946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e948:	2b00      	cmp	r3, #0
 810e94a:	d00a      	beq.n	810e962 <xStreamBufferSend+0x14a>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 810e94c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e94e:	f000 fa7f 	bl	810ee50 <prvBytesInBuffer>
 810e952:	4602      	mov	r2, r0
 810e954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e956:	68db      	ldr	r3, [r3, #12]
 810e958:	429a      	cmp	r2, r3
 810e95a:	d302      	bcc.n	810e962 <xStreamBufferSend+0x14a>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 810e95c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e95e:	f7f1 fdb3 	bl	81004c8 <vGenerateRemoteInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 810e962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 810e964:	4618      	mov	r0, r3
 810e966:	3738      	adds	r7, #56	@ 0x38
 810e968:	46bd      	mov	sp, r7
 810e96a:	bd80      	pop	{r7, pc}

0810e96c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 810e96c:	b580      	push	{r7, lr}
 810e96e:	b086      	sub	sp, #24
 810e970:	af00      	add	r7, sp, #0
 810e972:	60f8      	str	r0, [r7, #12]
 810e974:	60b9      	str	r1, [r7, #8]
 810e976:	607a      	str	r2, [r7, #4]
 810e978:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 810e97a:	683b      	ldr	r3, [r7, #0]
 810e97c:	2b00      	cmp	r3, #0
 810e97e:	d102      	bne.n	810e986 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 810e980:	2300      	movs	r3, #0
 810e982:	617b      	str	r3, [r7, #20]
 810e984:	e01d      	b.n	810e9c2 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 810e986:	68fb      	ldr	r3, [r7, #12]
 810e988:	7f1b      	ldrb	r3, [r3, #28]
 810e98a:	f003 0301 	and.w	r3, r3, #1
 810e98e:	2b00      	cmp	r3, #0
 810e990:	d108      	bne.n	810e9a4 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 810e992:	2301      	movs	r3, #1
 810e994:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 810e996:	687a      	ldr	r2, [r7, #4]
 810e998:	683b      	ldr	r3, [r7, #0]
 810e99a:	4293      	cmp	r3, r2
 810e99c:	bf28      	it	cs
 810e99e:	4613      	movcs	r3, r2
 810e9a0:	607b      	str	r3, [r7, #4]
 810e9a2:	e00e      	b.n	810e9c2 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 810e9a4:	683a      	ldr	r2, [r7, #0]
 810e9a6:	6a3b      	ldr	r3, [r7, #32]
 810e9a8:	429a      	cmp	r2, r3
 810e9aa:	d308      	bcc.n	810e9be <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 810e9ac:	2301      	movs	r3, #1
 810e9ae:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 810e9b0:	1d3b      	adds	r3, r7, #4
 810e9b2:	2204      	movs	r2, #4
 810e9b4:	4619      	mov	r1, r3
 810e9b6:	68f8      	ldr	r0, [r7, #12]
 810e9b8:	f000 f958 	bl	810ec6c <prvWriteBytesToBuffer>
 810e9bc:	e001      	b.n	810e9c2 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 810e9be:	2300      	movs	r3, #0
 810e9c0:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 810e9c2:	697b      	ldr	r3, [r7, #20]
 810e9c4:	2b00      	cmp	r3, #0
 810e9c6:	d007      	beq.n	810e9d8 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 810e9c8:	687b      	ldr	r3, [r7, #4]
 810e9ca:	461a      	mov	r2, r3
 810e9cc:	68b9      	ldr	r1, [r7, #8]
 810e9ce:	68f8      	ldr	r0, [r7, #12]
 810e9d0:	f000 f94c 	bl	810ec6c <prvWriteBytesToBuffer>
 810e9d4:	6138      	str	r0, [r7, #16]
 810e9d6:	e001      	b.n	810e9dc <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 810e9d8:	2300      	movs	r3, #0
 810e9da:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 810e9dc:	693b      	ldr	r3, [r7, #16]
}
 810e9de:	4618      	mov	r0, r3
 810e9e0:	3718      	adds	r7, #24
 810e9e2:	46bd      	mov	sp, r7
 810e9e4:	bd80      	pop	{r7, pc}

0810e9e6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 810e9e6:	b580      	push	{r7, lr}
 810e9e8:	b08e      	sub	sp, #56	@ 0x38
 810e9ea:	af02      	add	r7, sp, #8
 810e9ec:	60f8      	str	r0, [r7, #12]
 810e9ee:	60b9      	str	r1, [r7, #8]
 810e9f0:	607a      	str	r2, [r7, #4]
 810e9f2:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810e9f4:	68fb      	ldr	r3, [r7, #12]
 810e9f6:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 810e9f8:	2300      	movs	r3, #0
 810e9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 810e9fc:	68bb      	ldr	r3, [r7, #8]
 810e9fe:	2b00      	cmp	r3, #0
 810ea00:	d10b      	bne.n	810ea1a <xStreamBufferReceive+0x34>
	__asm volatile
 810ea02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea06:	f383 8811 	msr	BASEPRI, r3
 810ea0a:	f3bf 8f6f 	isb	sy
 810ea0e:	f3bf 8f4f 	dsb	sy
 810ea12:	61fb      	str	r3, [r7, #28]
}
 810ea14:	bf00      	nop
 810ea16:	bf00      	nop
 810ea18:	e7fd      	b.n	810ea16 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 810ea1a:	6a3b      	ldr	r3, [r7, #32]
 810ea1c:	2b00      	cmp	r3, #0
 810ea1e:	d10b      	bne.n	810ea38 <xStreamBufferReceive+0x52>
	__asm volatile
 810ea20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea24:	f383 8811 	msr	BASEPRI, r3
 810ea28:	f3bf 8f6f 	isb	sy
 810ea2c:	f3bf 8f4f 	dsb	sy
 810ea30:	61bb      	str	r3, [r7, #24]
}
 810ea32:	bf00      	nop
 810ea34:	bf00      	nop
 810ea36:	e7fd      	b.n	810ea34 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 810ea38:	6a3b      	ldr	r3, [r7, #32]
 810ea3a:	7f1b      	ldrb	r3, [r3, #28]
 810ea3c:	f003 0301 	and.w	r3, r3, #1
 810ea40:	2b00      	cmp	r3, #0
 810ea42:	d002      	beq.n	810ea4a <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 810ea44:	2304      	movs	r3, #4
 810ea46:	627b      	str	r3, [r7, #36]	@ 0x24
 810ea48:	e001      	b.n	810ea4e <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 810ea4a:	2300      	movs	r3, #0
 810ea4c:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 810ea4e:	683b      	ldr	r3, [r7, #0]
 810ea50:	2b00      	cmp	r3, #0
 810ea52:	d035      	beq.n	810eac0 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 810ea54:	f7fe fc20 	bl	810d298 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810ea58:	6a38      	ldr	r0, [r7, #32]
 810ea5a:	f000 f9f9 	bl	810ee50 <prvBytesInBuffer>
 810ea5e:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 810ea60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810ea62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ea64:	429a      	cmp	r2, r3
 810ea66:	d817      	bhi.n	810ea98 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 810ea68:	2000      	movs	r0, #0
 810ea6a:	f001 fbbb 	bl	81101e4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 810ea6e:	6a3b      	ldr	r3, [r7, #32]
 810ea70:	691b      	ldr	r3, [r3, #16]
 810ea72:	2b00      	cmp	r3, #0
 810ea74:	d00b      	beq.n	810ea8e <xStreamBufferReceive+0xa8>
	__asm volatile
 810ea76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea7a:	f383 8811 	msr	BASEPRI, r3
 810ea7e:	f3bf 8f6f 	isb	sy
 810ea82:	f3bf 8f4f 	dsb	sy
 810ea86:	617b      	str	r3, [r7, #20]
}
 810ea88:	bf00      	nop
 810ea8a:	bf00      	nop
 810ea8c:	e7fd      	b.n	810ea8a <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 810ea8e:	f001 f8c5 	bl	810fc1c <xTaskGetCurrentTaskHandle>
 810ea92:	4602      	mov	r2, r0
 810ea94:	6a3b      	ldr	r3, [r7, #32]
 810ea96:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810ea98:	f7fe fc30 	bl	810d2fc <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 810ea9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810ea9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eaa0:	429a      	cmp	r2, r3
 810eaa2:	d811      	bhi.n	810eac8 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 810eaa4:	683b      	ldr	r3, [r7, #0]
 810eaa6:	2200      	movs	r2, #0
 810eaa8:	2100      	movs	r1, #0
 810eaaa:	2000      	movs	r0, #0
 810eaac:	f001 fa54 	bl	810ff58 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 810eab0:	6a3b      	ldr	r3, [r7, #32]
 810eab2:	2200      	movs	r2, #0
 810eab4:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810eab6:	6a38      	ldr	r0, [r7, #32]
 810eab8:	f000 f9ca 	bl	810ee50 <prvBytesInBuffer>
 810eabc:	62b8      	str	r0, [r7, #40]	@ 0x28
 810eabe:	e003      	b.n	810eac8 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810eac0:	6a38      	ldr	r0, [r7, #32]
 810eac2:	f000 f9c5 	bl	810ee50 <prvBytesInBuffer>
 810eac6:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 810eac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810eaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eacc:	429a      	cmp	r2, r3
 810eace:	d90e      	bls.n	810eaee <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 810ead0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ead2:	9300      	str	r3, [sp, #0]
 810ead4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ead6:	687a      	ldr	r2, [r7, #4]
 810ead8:	68b9      	ldr	r1, [r7, #8]
 810eada:	6a38      	ldr	r0, [r7, #32]
 810eadc:	f000 f80c 	bl	810eaf8 <prvReadMessageFromBuffer>
 810eae0:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 810eae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eae4:	2b00      	cmp	r3, #0
 810eae6:	d002      	beq.n	810eaee <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 810eae8:	6a38      	ldr	r0, [r7, #32]
 810eaea:	f7f1 fced 	bl	81004c8 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 810eaee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 810eaf0:	4618      	mov	r0, r3
 810eaf2:	3730      	adds	r7, #48	@ 0x30
 810eaf4:	46bd      	mov	sp, r7
 810eaf6:	bd80      	pop	{r7, pc}

0810eaf8 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 810eaf8:	b580      	push	{r7, lr}
 810eafa:	b088      	sub	sp, #32
 810eafc:	af00      	add	r7, sp, #0
 810eafe:	60f8      	str	r0, [r7, #12]
 810eb00:	60b9      	str	r1, [r7, #8]
 810eb02:	607a      	str	r2, [r7, #4]
 810eb04:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 810eb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eb08:	2b00      	cmp	r3, #0
 810eb0a:	d019      	beq.n	810eb40 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 810eb0c:	68fb      	ldr	r3, [r7, #12]
 810eb0e:	681b      	ldr	r3, [r3, #0]
 810eb10:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 810eb12:	f107 0110 	add.w	r1, r7, #16
 810eb16:	683b      	ldr	r3, [r7, #0]
 810eb18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810eb1a:	68f8      	ldr	r0, [r7, #12]
 810eb1c:	f000 f91b 	bl	810ed56 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 810eb20:	693b      	ldr	r3, [r7, #16]
 810eb22:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 810eb24:	683a      	ldr	r2, [r7, #0]
 810eb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eb28:	1ad3      	subs	r3, r2, r3
 810eb2a:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 810eb2c:	69fa      	ldr	r2, [r7, #28]
 810eb2e:	687b      	ldr	r3, [r7, #4]
 810eb30:	429a      	cmp	r2, r3
 810eb32:	d907      	bls.n	810eb44 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 810eb34:	68fb      	ldr	r3, [r7, #12]
 810eb36:	69ba      	ldr	r2, [r7, #24]
 810eb38:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 810eb3a:	2300      	movs	r3, #0
 810eb3c:	61fb      	str	r3, [r7, #28]
 810eb3e:	e001      	b.n	810eb44 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 810eb40:	687b      	ldr	r3, [r7, #4]
 810eb42:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 810eb44:	683b      	ldr	r3, [r7, #0]
 810eb46:	69fa      	ldr	r2, [r7, #28]
 810eb48:	68b9      	ldr	r1, [r7, #8]
 810eb4a:	68f8      	ldr	r0, [r7, #12]
 810eb4c:	f000 f903 	bl	810ed56 <prvReadBytesFromBuffer>
 810eb50:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 810eb52:	697b      	ldr	r3, [r7, #20]
}
 810eb54:	4618      	mov	r0, r3
 810eb56:	3720      	adds	r7, #32
 810eb58:	46bd      	mov	sp, r7
 810eb5a:	bd80      	pop	{r7, pc}

0810eb5c <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 810eb5c:	b580      	push	{r7, lr}
 810eb5e:	b08c      	sub	sp, #48	@ 0x30
 810eb60:	af02      	add	r7, sp, #8
 810eb62:	6078      	str	r0, [r7, #4]
 810eb64:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810eb66:	687b      	ldr	r3, [r7, #4]
 810eb68:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 810eb6a:	6a3b      	ldr	r3, [r7, #32]
 810eb6c:	2b00      	cmp	r3, #0
 810eb6e:	d10b      	bne.n	810eb88 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 810eb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb74:	f383 8811 	msr	BASEPRI, r3
 810eb78:	f3bf 8f6f 	isb	sy
 810eb7c:	f3bf 8f4f 	dsb	sy
 810eb80:	61bb      	str	r3, [r7, #24]
}
 810eb82:	bf00      	nop
 810eb84:	bf00      	nop
 810eb86:	e7fd      	b.n	810eb84 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 810eb88:	f3ef 8211 	mrs	r2, BASEPRI
 810eb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb90:	f383 8811 	msr	BASEPRI, r3
 810eb94:	f3bf 8f6f 	isb	sy
 810eb98:	f3bf 8f4f 	dsb	sy
 810eb9c:	617a      	str	r2, [r7, #20]
 810eb9e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810eba0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 810eba2:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 810eba4:	6a3b      	ldr	r3, [r7, #32]
 810eba6:	691b      	ldr	r3, [r3, #16]
 810eba8:	2b00      	cmp	r3, #0
 810ebaa:	d00e      	beq.n	810ebca <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 810ebac:	6a3b      	ldr	r3, [r7, #32]
 810ebae:	6918      	ldr	r0, [r3, #16]
 810ebb0:	683b      	ldr	r3, [r7, #0]
 810ebb2:	9300      	str	r3, [sp, #0]
 810ebb4:	2300      	movs	r3, #0
 810ebb6:	2200      	movs	r2, #0
 810ebb8:	2100      	movs	r1, #0
 810ebba:	f001 fa2d 	bl	8110018 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 810ebbe:	6a3b      	ldr	r3, [r7, #32]
 810ebc0:	2200      	movs	r2, #0
 810ebc2:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 810ebc4:	2301      	movs	r3, #1
 810ebc6:	627b      	str	r3, [r7, #36]	@ 0x24
 810ebc8:	e001      	b.n	810ebce <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 810ebca:	2300      	movs	r3, #0
 810ebcc:	627b      	str	r3, [r7, #36]	@ 0x24
 810ebce:	69fb      	ldr	r3, [r7, #28]
 810ebd0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810ebd2:	68fb      	ldr	r3, [r7, #12]
 810ebd4:	f383 8811 	msr	BASEPRI, r3
}
 810ebd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810ebda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810ebdc:	4618      	mov	r0, r3
 810ebde:	3728      	adds	r7, #40	@ 0x28
 810ebe0:	46bd      	mov	sp, r7
 810ebe2:	bd80      	pop	{r7, pc}

0810ebe4 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 810ebe4:	b580      	push	{r7, lr}
 810ebe6:	b08c      	sub	sp, #48	@ 0x30
 810ebe8:	af02      	add	r7, sp, #8
 810ebea:	6078      	str	r0, [r7, #4]
 810ebec:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810ebee:	687b      	ldr	r3, [r7, #4]
 810ebf0:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 810ebf2:	6a3b      	ldr	r3, [r7, #32]
 810ebf4:	2b00      	cmp	r3, #0
 810ebf6:	d10b      	bne.n	810ec10 <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 810ebf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ebfc:	f383 8811 	msr	BASEPRI, r3
 810ec00:	f3bf 8f6f 	isb	sy
 810ec04:	f3bf 8f4f 	dsb	sy
 810ec08:	61bb      	str	r3, [r7, #24]
}
 810ec0a:	bf00      	nop
 810ec0c:	bf00      	nop
 810ec0e:	e7fd      	b.n	810ec0c <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 810ec10:	f3ef 8211 	mrs	r2, BASEPRI
 810ec14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ec18:	f383 8811 	msr	BASEPRI, r3
 810ec1c:	f3bf 8f6f 	isb	sy
 810ec20:	f3bf 8f4f 	dsb	sy
 810ec24:	617a      	str	r2, [r7, #20]
 810ec26:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810ec28:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 810ec2a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 810ec2c:	6a3b      	ldr	r3, [r7, #32]
 810ec2e:	695b      	ldr	r3, [r3, #20]
 810ec30:	2b00      	cmp	r3, #0
 810ec32:	d00e      	beq.n	810ec52 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 810ec34:	6a3b      	ldr	r3, [r7, #32]
 810ec36:	6958      	ldr	r0, [r3, #20]
 810ec38:	683b      	ldr	r3, [r7, #0]
 810ec3a:	9300      	str	r3, [sp, #0]
 810ec3c:	2300      	movs	r3, #0
 810ec3e:	2200      	movs	r2, #0
 810ec40:	2100      	movs	r1, #0
 810ec42:	f001 f9e9 	bl	8110018 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 810ec46:	6a3b      	ldr	r3, [r7, #32]
 810ec48:	2200      	movs	r2, #0
 810ec4a:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 810ec4c:	2301      	movs	r3, #1
 810ec4e:	627b      	str	r3, [r7, #36]	@ 0x24
 810ec50:	e001      	b.n	810ec56 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 810ec52:	2300      	movs	r3, #0
 810ec54:	627b      	str	r3, [r7, #36]	@ 0x24
 810ec56:	69fb      	ldr	r3, [r7, #28]
 810ec58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810ec5a:	68fb      	ldr	r3, [r7, #12]
 810ec5c:	f383 8811 	msr	BASEPRI, r3
}
 810ec60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810ec62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810ec64:	4618      	mov	r0, r3
 810ec66:	3728      	adds	r7, #40	@ 0x28
 810ec68:	46bd      	mov	sp, r7
 810ec6a:	bd80      	pop	{r7, pc}

0810ec6c <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 810ec6c:	b580      	push	{r7, lr}
 810ec6e:	b08a      	sub	sp, #40	@ 0x28
 810ec70:	af00      	add	r7, sp, #0
 810ec72:	60f8      	str	r0, [r7, #12]
 810ec74:	60b9      	str	r1, [r7, #8]
 810ec76:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 810ec78:	687b      	ldr	r3, [r7, #4]
 810ec7a:	2b00      	cmp	r3, #0
 810ec7c:	d10b      	bne.n	810ec96 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 810ec7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ec82:	f383 8811 	msr	BASEPRI, r3
 810ec86:	f3bf 8f6f 	isb	sy
 810ec8a:	f3bf 8f4f 	dsb	sy
 810ec8e:	61fb      	str	r3, [r7, #28]
}
 810ec90:	bf00      	nop
 810ec92:	bf00      	nop
 810ec94:	e7fd      	b.n	810ec92 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 810ec96:	68fb      	ldr	r3, [r7, #12]
 810ec98:	685b      	ldr	r3, [r3, #4]
 810ec9a:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 810ec9c:	68fb      	ldr	r3, [r7, #12]
 810ec9e:	689a      	ldr	r2, [r3, #8]
 810eca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eca2:	1ad3      	subs	r3, r2, r3
 810eca4:	687a      	ldr	r2, [r7, #4]
 810eca6:	4293      	cmp	r3, r2
 810eca8:	bf28      	it	cs
 810ecaa:	4613      	movcs	r3, r2
 810ecac:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 810ecae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ecb0:	6a3b      	ldr	r3, [r7, #32]
 810ecb2:	441a      	add	r2, r3
 810ecb4:	68fb      	ldr	r3, [r7, #12]
 810ecb6:	689b      	ldr	r3, [r3, #8]
 810ecb8:	429a      	cmp	r2, r3
 810ecba:	d90b      	bls.n	810ecd4 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 810ecbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ecc0:	f383 8811 	msr	BASEPRI, r3
 810ecc4:	f3bf 8f6f 	isb	sy
 810ecc8:	f3bf 8f4f 	dsb	sy
 810eccc:	61bb      	str	r3, [r7, #24]
}
 810ecce:	bf00      	nop
 810ecd0:	bf00      	nop
 810ecd2:	e7fd      	b.n	810ecd0 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 810ecd4:	68fb      	ldr	r3, [r7, #12]
 810ecd6:	699a      	ldr	r2, [r3, #24]
 810ecd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ecda:	4413      	add	r3, r2
 810ecdc:	6a3a      	ldr	r2, [r7, #32]
 810ecde:	68b9      	ldr	r1, [r7, #8]
 810ece0:	4618      	mov	r0, r3
 810ece2:	f00d fa4c 	bl	811c17e <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 810ece6:	687a      	ldr	r2, [r7, #4]
 810ece8:	6a3b      	ldr	r3, [r7, #32]
 810ecea:	429a      	cmp	r2, r3
 810ecec:	d91d      	bls.n	810ed2a <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 810ecee:	687a      	ldr	r2, [r7, #4]
 810ecf0:	6a3b      	ldr	r3, [r7, #32]
 810ecf2:	1ad2      	subs	r2, r2, r3
 810ecf4:	68fb      	ldr	r3, [r7, #12]
 810ecf6:	689b      	ldr	r3, [r3, #8]
 810ecf8:	429a      	cmp	r2, r3
 810ecfa:	d90b      	bls.n	810ed14 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 810ecfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ed00:	f383 8811 	msr	BASEPRI, r3
 810ed04:	f3bf 8f6f 	isb	sy
 810ed08:	f3bf 8f4f 	dsb	sy
 810ed0c:	617b      	str	r3, [r7, #20]
}
 810ed0e:	bf00      	nop
 810ed10:	bf00      	nop
 810ed12:	e7fd      	b.n	810ed10 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 810ed14:	68fb      	ldr	r3, [r7, #12]
 810ed16:	6998      	ldr	r0, [r3, #24]
 810ed18:	68ba      	ldr	r2, [r7, #8]
 810ed1a:	6a3b      	ldr	r3, [r7, #32]
 810ed1c:	18d1      	adds	r1, r2, r3
 810ed1e:	687a      	ldr	r2, [r7, #4]
 810ed20:	6a3b      	ldr	r3, [r7, #32]
 810ed22:	1ad3      	subs	r3, r2, r3
 810ed24:	461a      	mov	r2, r3
 810ed26:	f00d fa2a 	bl	811c17e <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 810ed2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ed2c:	687b      	ldr	r3, [r7, #4]
 810ed2e:	4413      	add	r3, r2
 810ed30:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 810ed32:	68fb      	ldr	r3, [r7, #12]
 810ed34:	689b      	ldr	r3, [r3, #8]
 810ed36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ed38:	429a      	cmp	r2, r3
 810ed3a:	d304      	bcc.n	810ed46 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 810ed3c:	68fb      	ldr	r3, [r7, #12]
 810ed3e:	689b      	ldr	r3, [r3, #8]
 810ed40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ed42:	1ad3      	subs	r3, r2, r3
 810ed44:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 810ed46:	68fb      	ldr	r3, [r7, #12]
 810ed48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ed4a:	605a      	str	r2, [r3, #4]

	return xCount;
 810ed4c:	687b      	ldr	r3, [r7, #4]
}
 810ed4e:	4618      	mov	r0, r3
 810ed50:	3728      	adds	r7, #40	@ 0x28
 810ed52:	46bd      	mov	sp, r7
 810ed54:	bd80      	pop	{r7, pc}

0810ed56 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 810ed56:	b580      	push	{r7, lr}
 810ed58:	b08a      	sub	sp, #40	@ 0x28
 810ed5a:	af00      	add	r7, sp, #0
 810ed5c:	60f8      	str	r0, [r7, #12]
 810ed5e:	60b9      	str	r1, [r7, #8]
 810ed60:	607a      	str	r2, [r7, #4]
 810ed62:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 810ed64:	687a      	ldr	r2, [r7, #4]
 810ed66:	683b      	ldr	r3, [r7, #0]
 810ed68:	4293      	cmp	r3, r2
 810ed6a:	bf28      	it	cs
 810ed6c:	4613      	movcs	r3, r2
 810ed6e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 810ed70:	6a3b      	ldr	r3, [r7, #32]
 810ed72:	2b00      	cmp	r3, #0
 810ed74:	d067      	beq.n	810ee46 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 810ed76:	68fb      	ldr	r3, [r7, #12]
 810ed78:	681b      	ldr	r3, [r3, #0]
 810ed7a:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 810ed7c:	68fb      	ldr	r3, [r7, #12]
 810ed7e:	689a      	ldr	r2, [r3, #8]
 810ed80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ed82:	1ad3      	subs	r3, r2, r3
 810ed84:	6a3a      	ldr	r2, [r7, #32]
 810ed86:	4293      	cmp	r3, r2
 810ed88:	bf28      	it	cs
 810ed8a:	4613      	movcs	r3, r2
 810ed8c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 810ed8e:	69fa      	ldr	r2, [r7, #28]
 810ed90:	687b      	ldr	r3, [r7, #4]
 810ed92:	429a      	cmp	r2, r3
 810ed94:	d90b      	bls.n	810edae <prvReadBytesFromBuffer+0x58>
	__asm volatile
 810ed96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ed9a:	f383 8811 	msr	BASEPRI, r3
 810ed9e:	f3bf 8f6f 	isb	sy
 810eda2:	f3bf 8f4f 	dsb	sy
 810eda6:	61bb      	str	r3, [r7, #24]
}
 810eda8:	bf00      	nop
 810edaa:	bf00      	nop
 810edac:	e7fd      	b.n	810edaa <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 810edae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810edb0:	69fb      	ldr	r3, [r7, #28]
 810edb2:	441a      	add	r2, r3
 810edb4:	68fb      	ldr	r3, [r7, #12]
 810edb6:	689b      	ldr	r3, [r3, #8]
 810edb8:	429a      	cmp	r2, r3
 810edba:	d90b      	bls.n	810edd4 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 810edbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810edc0:	f383 8811 	msr	BASEPRI, r3
 810edc4:	f3bf 8f6f 	isb	sy
 810edc8:	f3bf 8f4f 	dsb	sy
 810edcc:	617b      	str	r3, [r7, #20]
}
 810edce:	bf00      	nop
 810edd0:	bf00      	nop
 810edd2:	e7fd      	b.n	810edd0 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 810edd4:	68fb      	ldr	r3, [r7, #12]
 810edd6:	699a      	ldr	r2, [r3, #24]
 810edd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810edda:	4413      	add	r3, r2
 810eddc:	69fa      	ldr	r2, [r7, #28]
 810edde:	4619      	mov	r1, r3
 810ede0:	68b8      	ldr	r0, [r7, #8]
 810ede2:	f00d f9cc 	bl	811c17e <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 810ede6:	6a3a      	ldr	r2, [r7, #32]
 810ede8:	69fb      	ldr	r3, [r7, #28]
 810edea:	429a      	cmp	r2, r3
 810edec:	d91a      	bls.n	810ee24 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 810edee:	6a3a      	ldr	r2, [r7, #32]
 810edf0:	687b      	ldr	r3, [r7, #4]
 810edf2:	429a      	cmp	r2, r3
 810edf4:	d90b      	bls.n	810ee0e <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 810edf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810edfa:	f383 8811 	msr	BASEPRI, r3
 810edfe:	f3bf 8f6f 	isb	sy
 810ee02:	f3bf 8f4f 	dsb	sy
 810ee06:	613b      	str	r3, [r7, #16]
}
 810ee08:	bf00      	nop
 810ee0a:	bf00      	nop
 810ee0c:	e7fd      	b.n	810ee0a <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 810ee0e:	68ba      	ldr	r2, [r7, #8]
 810ee10:	69fb      	ldr	r3, [r7, #28]
 810ee12:	18d0      	adds	r0, r2, r3
 810ee14:	68fb      	ldr	r3, [r7, #12]
 810ee16:	6999      	ldr	r1, [r3, #24]
 810ee18:	6a3a      	ldr	r2, [r7, #32]
 810ee1a:	69fb      	ldr	r3, [r7, #28]
 810ee1c:	1ad3      	subs	r3, r2, r3
 810ee1e:	461a      	mov	r2, r3
 810ee20:	f00d f9ad 	bl	811c17e <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 810ee24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ee26:	6a3b      	ldr	r3, [r7, #32]
 810ee28:	4413      	add	r3, r2
 810ee2a:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 810ee2c:	68fb      	ldr	r3, [r7, #12]
 810ee2e:	689b      	ldr	r3, [r3, #8]
 810ee30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ee32:	429a      	cmp	r2, r3
 810ee34:	d304      	bcc.n	810ee40 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 810ee36:	68fb      	ldr	r3, [r7, #12]
 810ee38:	689b      	ldr	r3, [r3, #8]
 810ee3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ee3c:	1ad3      	subs	r3, r2, r3
 810ee3e:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 810ee40:	68fb      	ldr	r3, [r7, #12]
 810ee42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ee44:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 810ee46:	6a3b      	ldr	r3, [r7, #32]
}
 810ee48:	4618      	mov	r0, r3
 810ee4a:	3728      	adds	r7, #40	@ 0x28
 810ee4c:	46bd      	mov	sp, r7
 810ee4e:	bd80      	pop	{r7, pc}

0810ee50 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 810ee50:	b480      	push	{r7}
 810ee52:	b085      	sub	sp, #20
 810ee54:	af00      	add	r7, sp, #0
 810ee56:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 810ee58:	687b      	ldr	r3, [r7, #4]
 810ee5a:	689a      	ldr	r2, [r3, #8]
 810ee5c:	687b      	ldr	r3, [r7, #4]
 810ee5e:	685b      	ldr	r3, [r3, #4]
 810ee60:	4413      	add	r3, r2
 810ee62:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 810ee64:	687b      	ldr	r3, [r7, #4]
 810ee66:	681b      	ldr	r3, [r3, #0]
 810ee68:	68fa      	ldr	r2, [r7, #12]
 810ee6a:	1ad3      	subs	r3, r2, r3
 810ee6c:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 810ee6e:	687b      	ldr	r3, [r7, #4]
 810ee70:	689b      	ldr	r3, [r3, #8]
 810ee72:	68fa      	ldr	r2, [r7, #12]
 810ee74:	429a      	cmp	r2, r3
 810ee76:	d304      	bcc.n	810ee82 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 810ee78:	687b      	ldr	r3, [r7, #4]
 810ee7a:	689b      	ldr	r3, [r3, #8]
 810ee7c:	68fa      	ldr	r2, [r7, #12]
 810ee7e:	1ad3      	subs	r3, r2, r3
 810ee80:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 810ee82:	68fb      	ldr	r3, [r7, #12]
}
 810ee84:	4618      	mov	r0, r3
 810ee86:	3714      	adds	r7, #20
 810ee88:	46bd      	mov	sp, r7
 810ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ee8e:	4770      	bx	lr

0810ee90 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 810ee90:	b580      	push	{r7, lr}
 810ee92:	b086      	sub	sp, #24
 810ee94:	af00      	add	r7, sp, #0
 810ee96:	60f8      	str	r0, [r7, #12]
 810ee98:	60b9      	str	r1, [r7, #8]
 810ee9a:	607a      	str	r2, [r7, #4]
 810ee9c:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 810ee9e:	2355      	movs	r3, #85	@ 0x55
 810eea0:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 810eea2:	687a      	ldr	r2, [r7, #4]
 810eea4:	6979      	ldr	r1, [r7, #20]
 810eea6:	68b8      	ldr	r0, [r7, #8]
 810eea8:	f00d f837 	bl	811bf1a <memset>
 810eeac:	4602      	mov	r2, r0
 810eeae:	68bb      	ldr	r3, [r7, #8]
 810eeb0:	4293      	cmp	r3, r2
 810eeb2:	d00b      	beq.n	810eecc <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 810eeb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eeb8:	f383 8811 	msr	BASEPRI, r3
 810eebc:	f3bf 8f6f 	isb	sy
 810eec0:	f3bf 8f4f 	dsb	sy
 810eec4:	613b      	str	r3, [r7, #16]
}
 810eec6:	bf00      	nop
 810eec8:	bf00      	nop
 810eeca:	e7fd      	b.n	810eec8 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 810eecc:	2224      	movs	r2, #36	@ 0x24
 810eece:	2100      	movs	r1, #0
 810eed0:	68f8      	ldr	r0, [r7, #12]
 810eed2:	f00d f822 	bl	811bf1a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 810eed6:	68fb      	ldr	r3, [r7, #12]
 810eed8:	68ba      	ldr	r2, [r7, #8]
 810eeda:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 810eedc:	68fb      	ldr	r3, [r7, #12]
 810eede:	687a      	ldr	r2, [r7, #4]
 810eee0:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 810eee2:	68fb      	ldr	r3, [r7, #12]
 810eee4:	683a      	ldr	r2, [r7, #0]
 810eee6:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 810eee8:	68fb      	ldr	r3, [r7, #12]
 810eeea:	f897 2020 	ldrb.w	r2, [r7, #32]
 810eeee:	771a      	strb	r2, [r3, #28]
}
 810eef0:	bf00      	nop
 810eef2:	3718      	adds	r7, #24
 810eef4:	46bd      	mov	sp, r7
 810eef6:	bd80      	pop	{r7, pc}

0810eef8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810eef8:	b580      	push	{r7, lr}
 810eefa:	b08e      	sub	sp, #56	@ 0x38
 810eefc:	af04      	add	r7, sp, #16
 810eefe:	60f8      	str	r0, [r7, #12]
 810ef00:	60b9      	str	r1, [r7, #8]
 810ef02:	607a      	str	r2, [r7, #4]
 810ef04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810ef06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ef08:	2b00      	cmp	r3, #0
 810ef0a:	d10b      	bne.n	810ef24 <xTaskCreateStatic+0x2c>
	__asm volatile
 810ef0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef10:	f383 8811 	msr	BASEPRI, r3
 810ef14:	f3bf 8f6f 	isb	sy
 810ef18:	f3bf 8f4f 	dsb	sy
 810ef1c:	623b      	str	r3, [r7, #32]
}
 810ef1e:	bf00      	nop
 810ef20:	bf00      	nop
 810ef22:	e7fd      	b.n	810ef20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810ef24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ef26:	2b00      	cmp	r3, #0
 810ef28:	d10b      	bne.n	810ef42 <xTaskCreateStatic+0x4a>
	__asm volatile
 810ef2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef2e:	f383 8811 	msr	BASEPRI, r3
 810ef32:	f3bf 8f6f 	isb	sy
 810ef36:	f3bf 8f4f 	dsb	sy
 810ef3a:	61fb      	str	r3, [r7, #28]
}
 810ef3c:	bf00      	nop
 810ef3e:	bf00      	nop
 810ef40:	e7fd      	b.n	810ef3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810ef42:	23a8      	movs	r3, #168	@ 0xa8
 810ef44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810ef46:	693b      	ldr	r3, [r7, #16]
 810ef48:	2ba8      	cmp	r3, #168	@ 0xa8
 810ef4a:	d00b      	beq.n	810ef64 <xTaskCreateStatic+0x6c>
	__asm volatile
 810ef4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef50:	f383 8811 	msr	BASEPRI, r3
 810ef54:	f3bf 8f6f 	isb	sy
 810ef58:	f3bf 8f4f 	dsb	sy
 810ef5c:	61bb      	str	r3, [r7, #24]
}
 810ef5e:	bf00      	nop
 810ef60:	bf00      	nop
 810ef62:	e7fd      	b.n	810ef60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810ef64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810ef66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ef68:	2b00      	cmp	r3, #0
 810ef6a:	d01e      	beq.n	810efaa <xTaskCreateStatic+0xb2>
 810ef6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ef6e:	2b00      	cmp	r3, #0
 810ef70:	d01b      	beq.n	810efaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810ef72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ef74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810ef76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ef78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810ef7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810ef7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ef7e:	2202      	movs	r2, #2
 810ef80:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810ef84:	2300      	movs	r3, #0
 810ef86:	9303      	str	r3, [sp, #12]
 810ef88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ef8a:	9302      	str	r3, [sp, #8]
 810ef8c:	f107 0314 	add.w	r3, r7, #20
 810ef90:	9301      	str	r3, [sp, #4]
 810ef92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ef94:	9300      	str	r3, [sp, #0]
 810ef96:	683b      	ldr	r3, [r7, #0]
 810ef98:	687a      	ldr	r2, [r7, #4]
 810ef9a:	68b9      	ldr	r1, [r7, #8]
 810ef9c:	68f8      	ldr	r0, [r7, #12]
 810ef9e:	f000 f851 	bl	810f044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810efa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810efa4:	f000 f8f6 	bl	810f194 <prvAddNewTaskToReadyList>
 810efa8:	e001      	b.n	810efae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810efaa:	2300      	movs	r3, #0
 810efac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810efae:	697b      	ldr	r3, [r7, #20]
	}
 810efb0:	4618      	mov	r0, r3
 810efb2:	3728      	adds	r7, #40	@ 0x28
 810efb4:	46bd      	mov	sp, r7
 810efb6:	bd80      	pop	{r7, pc}

0810efb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810efb8:	b580      	push	{r7, lr}
 810efba:	b08c      	sub	sp, #48	@ 0x30
 810efbc:	af04      	add	r7, sp, #16
 810efbe:	60f8      	str	r0, [r7, #12]
 810efc0:	60b9      	str	r1, [r7, #8]
 810efc2:	603b      	str	r3, [r7, #0]
 810efc4:	4613      	mov	r3, r2
 810efc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810efc8:	88fb      	ldrh	r3, [r7, #6]
 810efca:	009b      	lsls	r3, r3, #2
 810efcc:	4618      	mov	r0, r3
 810efce:	f7fd fd8d 	bl	810caec <pvPortMalloc>
 810efd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810efd4:	697b      	ldr	r3, [r7, #20]
 810efd6:	2b00      	cmp	r3, #0
 810efd8:	d00e      	beq.n	810eff8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810efda:	20a8      	movs	r0, #168	@ 0xa8
 810efdc:	f7fd fd86 	bl	810caec <pvPortMalloc>
 810efe0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810efe2:	69fb      	ldr	r3, [r7, #28]
 810efe4:	2b00      	cmp	r3, #0
 810efe6:	d003      	beq.n	810eff0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810efe8:	69fb      	ldr	r3, [r7, #28]
 810efea:	697a      	ldr	r2, [r7, #20]
 810efec:	631a      	str	r2, [r3, #48]	@ 0x30
 810efee:	e005      	b.n	810effc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810eff0:	6978      	ldr	r0, [r7, #20]
 810eff2:	f7fd fe49 	bl	810cc88 <vPortFree>
 810eff6:	e001      	b.n	810effc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810eff8:	2300      	movs	r3, #0
 810effa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810effc:	69fb      	ldr	r3, [r7, #28]
 810effe:	2b00      	cmp	r3, #0
 810f000:	d017      	beq.n	810f032 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810f002:	69fb      	ldr	r3, [r7, #28]
 810f004:	2200      	movs	r2, #0
 810f006:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810f00a:	88fa      	ldrh	r2, [r7, #6]
 810f00c:	2300      	movs	r3, #0
 810f00e:	9303      	str	r3, [sp, #12]
 810f010:	69fb      	ldr	r3, [r7, #28]
 810f012:	9302      	str	r3, [sp, #8]
 810f014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f016:	9301      	str	r3, [sp, #4]
 810f018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f01a:	9300      	str	r3, [sp, #0]
 810f01c:	683b      	ldr	r3, [r7, #0]
 810f01e:	68b9      	ldr	r1, [r7, #8]
 810f020:	68f8      	ldr	r0, [r7, #12]
 810f022:	f000 f80f 	bl	810f044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810f026:	69f8      	ldr	r0, [r7, #28]
 810f028:	f000 f8b4 	bl	810f194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810f02c:	2301      	movs	r3, #1
 810f02e:	61bb      	str	r3, [r7, #24]
 810f030:	e002      	b.n	810f038 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810f032:	f04f 33ff 	mov.w	r3, #4294967295
 810f036:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810f038:	69bb      	ldr	r3, [r7, #24]
	}
 810f03a:	4618      	mov	r0, r3
 810f03c:	3720      	adds	r7, #32
 810f03e:	46bd      	mov	sp, r7
 810f040:	bd80      	pop	{r7, pc}
	...

0810f044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810f044:	b580      	push	{r7, lr}
 810f046:	b088      	sub	sp, #32
 810f048:	af00      	add	r7, sp, #0
 810f04a:	60f8      	str	r0, [r7, #12]
 810f04c:	60b9      	str	r1, [r7, #8]
 810f04e:	607a      	str	r2, [r7, #4]
 810f050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810f052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f054:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810f056:	687b      	ldr	r3, [r7, #4]
 810f058:	009b      	lsls	r3, r3, #2
 810f05a:	461a      	mov	r2, r3
 810f05c:	21a5      	movs	r1, #165	@ 0xa5
 810f05e:	f00c ff5c 	bl	811bf1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810f062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810f066:	687b      	ldr	r3, [r7, #4]
 810f068:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810f06c:	3b01      	subs	r3, #1
 810f06e:	009b      	lsls	r3, r3, #2
 810f070:	4413      	add	r3, r2
 810f072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810f074:	69bb      	ldr	r3, [r7, #24]
 810f076:	f023 0307 	bic.w	r3, r3, #7
 810f07a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810f07c:	69bb      	ldr	r3, [r7, #24]
 810f07e:	f003 0307 	and.w	r3, r3, #7
 810f082:	2b00      	cmp	r3, #0
 810f084:	d00b      	beq.n	810f09e <prvInitialiseNewTask+0x5a>
	__asm volatile
 810f086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f08a:	f383 8811 	msr	BASEPRI, r3
 810f08e:	f3bf 8f6f 	isb	sy
 810f092:	f3bf 8f4f 	dsb	sy
 810f096:	617b      	str	r3, [r7, #20]
}
 810f098:	bf00      	nop
 810f09a:	bf00      	nop
 810f09c:	e7fd      	b.n	810f09a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810f09e:	68bb      	ldr	r3, [r7, #8]
 810f0a0:	2b00      	cmp	r3, #0
 810f0a2:	d01f      	beq.n	810f0e4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810f0a4:	2300      	movs	r3, #0
 810f0a6:	61fb      	str	r3, [r7, #28]
 810f0a8:	e012      	b.n	810f0d0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810f0aa:	68ba      	ldr	r2, [r7, #8]
 810f0ac:	69fb      	ldr	r3, [r7, #28]
 810f0ae:	4413      	add	r3, r2
 810f0b0:	7819      	ldrb	r1, [r3, #0]
 810f0b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f0b4:	69fb      	ldr	r3, [r7, #28]
 810f0b6:	4413      	add	r3, r2
 810f0b8:	3334      	adds	r3, #52	@ 0x34
 810f0ba:	460a      	mov	r2, r1
 810f0bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810f0be:	68ba      	ldr	r2, [r7, #8]
 810f0c0:	69fb      	ldr	r3, [r7, #28]
 810f0c2:	4413      	add	r3, r2
 810f0c4:	781b      	ldrb	r3, [r3, #0]
 810f0c6:	2b00      	cmp	r3, #0
 810f0c8:	d006      	beq.n	810f0d8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810f0ca:	69fb      	ldr	r3, [r7, #28]
 810f0cc:	3301      	adds	r3, #1
 810f0ce:	61fb      	str	r3, [r7, #28]
 810f0d0:	69fb      	ldr	r3, [r7, #28]
 810f0d2:	2b0f      	cmp	r3, #15
 810f0d4:	d9e9      	bls.n	810f0aa <prvInitialiseNewTask+0x66>
 810f0d6:	e000      	b.n	810f0da <prvInitialiseNewTask+0x96>
			{
				break;
 810f0d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810f0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f0dc:	2200      	movs	r2, #0
 810f0de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810f0e2:	e003      	b.n	810f0ec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810f0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f0e6:	2200      	movs	r2, #0
 810f0e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810f0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0ee:	2b37      	cmp	r3, #55	@ 0x37
 810f0f0:	d901      	bls.n	810f0f6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810f0f2:	2337      	movs	r3, #55	@ 0x37
 810f0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810f0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f0f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810f0fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810f0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f0fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810f100:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810f102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f104:	2200      	movs	r2, #0
 810f106:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810f108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f10a:	3304      	adds	r3, #4
 810f10c:	4618      	mov	r0, r3
 810f10e:	f7fd fefb 	bl	810cf08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f114:	3318      	adds	r3, #24
 810f116:	4618      	mov	r0, r3
 810f118:	f7fd fef6 	bl	810cf08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810f11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f11e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f120:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f124:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810f128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f12a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810f12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f12e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f130:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810f132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f134:	2200      	movs	r2, #0
 810f136:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810f13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f13c:	2200      	movs	r2, #0
 810f13e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810f142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f144:	3354      	adds	r3, #84	@ 0x54
 810f146:	224c      	movs	r2, #76	@ 0x4c
 810f148:	2100      	movs	r1, #0
 810f14a:	4618      	mov	r0, r3
 810f14c:	f00c fee5 	bl	811bf1a <memset>
 810f150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f152:	4a0d      	ldr	r2, [pc, #52]	@ (810f188 <prvInitialiseNewTask+0x144>)
 810f154:	659a      	str	r2, [r3, #88]	@ 0x58
 810f156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f158:	4a0c      	ldr	r2, [pc, #48]	@ (810f18c <prvInitialiseNewTask+0x148>)
 810f15a:	65da      	str	r2, [r3, #92]	@ 0x5c
 810f15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f15e:	4a0c      	ldr	r2, [pc, #48]	@ (810f190 <prvInitialiseNewTask+0x14c>)
 810f160:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810f162:	683a      	ldr	r2, [r7, #0]
 810f164:	68f9      	ldr	r1, [r7, #12]
 810f166:	69b8      	ldr	r0, [r7, #24]
 810f168:	f7fd ff62 	bl	810d030 <pxPortInitialiseStack>
 810f16c:	4602      	mov	r2, r0
 810f16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f170:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810f172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f174:	2b00      	cmp	r3, #0
 810f176:	d002      	beq.n	810f17e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810f178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f17a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f17c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810f17e:	bf00      	nop
 810f180:	3720      	adds	r7, #32
 810f182:	46bd      	mov	sp, r7
 810f184:	bd80      	pop	{r7, pc}
 810f186:	bf00      	nop
 810f188:	10011d90 	.word	0x10011d90
 810f18c:	10011df8 	.word	0x10011df8
 810f190:	10011e60 	.word	0x10011e60

0810f194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810f194:	b580      	push	{r7, lr}
 810f196:	b082      	sub	sp, #8
 810f198:	af00      	add	r7, sp, #0
 810f19a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810f19c:	f7fe f87c 	bl	810d298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810f1a0:	4b2d      	ldr	r3, [pc, #180]	@ (810f258 <prvAddNewTaskToReadyList+0xc4>)
 810f1a2:	681b      	ldr	r3, [r3, #0]
 810f1a4:	3301      	adds	r3, #1
 810f1a6:	4a2c      	ldr	r2, [pc, #176]	@ (810f258 <prvAddNewTaskToReadyList+0xc4>)
 810f1a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810f1aa:	4b2c      	ldr	r3, [pc, #176]	@ (810f25c <prvAddNewTaskToReadyList+0xc8>)
 810f1ac:	681b      	ldr	r3, [r3, #0]
 810f1ae:	2b00      	cmp	r3, #0
 810f1b0:	d109      	bne.n	810f1c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810f1b2:	4a2a      	ldr	r2, [pc, #168]	@ (810f25c <prvAddNewTaskToReadyList+0xc8>)
 810f1b4:	687b      	ldr	r3, [r7, #4]
 810f1b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810f1b8:	4b27      	ldr	r3, [pc, #156]	@ (810f258 <prvAddNewTaskToReadyList+0xc4>)
 810f1ba:	681b      	ldr	r3, [r3, #0]
 810f1bc:	2b01      	cmp	r3, #1
 810f1be:	d110      	bne.n	810f1e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810f1c0:	f000 fc68 	bl	810fa94 <prvInitialiseTaskLists>
 810f1c4:	e00d      	b.n	810f1e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810f1c6:	4b26      	ldr	r3, [pc, #152]	@ (810f260 <prvAddNewTaskToReadyList+0xcc>)
 810f1c8:	681b      	ldr	r3, [r3, #0]
 810f1ca:	2b00      	cmp	r3, #0
 810f1cc:	d109      	bne.n	810f1e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810f1ce:	4b23      	ldr	r3, [pc, #140]	@ (810f25c <prvAddNewTaskToReadyList+0xc8>)
 810f1d0:	681b      	ldr	r3, [r3, #0]
 810f1d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f1d4:	687b      	ldr	r3, [r7, #4]
 810f1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f1d8:	429a      	cmp	r2, r3
 810f1da:	d802      	bhi.n	810f1e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810f1dc:	4a1f      	ldr	r2, [pc, #124]	@ (810f25c <prvAddNewTaskToReadyList+0xc8>)
 810f1de:	687b      	ldr	r3, [r7, #4]
 810f1e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810f1e2:	4b20      	ldr	r3, [pc, #128]	@ (810f264 <prvAddNewTaskToReadyList+0xd0>)
 810f1e4:	681b      	ldr	r3, [r3, #0]
 810f1e6:	3301      	adds	r3, #1
 810f1e8:	4a1e      	ldr	r2, [pc, #120]	@ (810f264 <prvAddNewTaskToReadyList+0xd0>)
 810f1ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810f1ec:	4b1d      	ldr	r3, [pc, #116]	@ (810f264 <prvAddNewTaskToReadyList+0xd0>)
 810f1ee:	681a      	ldr	r2, [r3, #0]
 810f1f0:	687b      	ldr	r3, [r7, #4]
 810f1f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810f1f4:	687b      	ldr	r3, [r7, #4]
 810f1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f1f8:	4b1b      	ldr	r3, [pc, #108]	@ (810f268 <prvAddNewTaskToReadyList+0xd4>)
 810f1fa:	681b      	ldr	r3, [r3, #0]
 810f1fc:	429a      	cmp	r2, r3
 810f1fe:	d903      	bls.n	810f208 <prvAddNewTaskToReadyList+0x74>
 810f200:	687b      	ldr	r3, [r7, #4]
 810f202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f204:	4a18      	ldr	r2, [pc, #96]	@ (810f268 <prvAddNewTaskToReadyList+0xd4>)
 810f206:	6013      	str	r3, [r2, #0]
 810f208:	687b      	ldr	r3, [r7, #4]
 810f20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f20c:	4613      	mov	r3, r2
 810f20e:	009b      	lsls	r3, r3, #2
 810f210:	4413      	add	r3, r2
 810f212:	009b      	lsls	r3, r3, #2
 810f214:	4a15      	ldr	r2, [pc, #84]	@ (810f26c <prvAddNewTaskToReadyList+0xd8>)
 810f216:	441a      	add	r2, r3
 810f218:	687b      	ldr	r3, [r7, #4]
 810f21a:	3304      	adds	r3, #4
 810f21c:	4619      	mov	r1, r3
 810f21e:	4610      	mov	r0, r2
 810f220:	f7fd fe7f 	bl	810cf22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810f224:	f7fe f86a 	bl	810d2fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810f228:	4b0d      	ldr	r3, [pc, #52]	@ (810f260 <prvAddNewTaskToReadyList+0xcc>)
 810f22a:	681b      	ldr	r3, [r3, #0]
 810f22c:	2b00      	cmp	r3, #0
 810f22e:	d00e      	beq.n	810f24e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810f230:	4b0a      	ldr	r3, [pc, #40]	@ (810f25c <prvAddNewTaskToReadyList+0xc8>)
 810f232:	681b      	ldr	r3, [r3, #0]
 810f234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f236:	687b      	ldr	r3, [r7, #4]
 810f238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f23a:	429a      	cmp	r2, r3
 810f23c:	d207      	bcs.n	810f24e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810f23e:	4b0c      	ldr	r3, [pc, #48]	@ (810f270 <prvAddNewTaskToReadyList+0xdc>)
 810f240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f244:	601a      	str	r2, [r3, #0]
 810f246:	f3bf 8f4f 	dsb	sy
 810f24a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810f24e:	bf00      	nop
 810f250:	3708      	adds	r7, #8
 810f252:	46bd      	mov	sp, r7
 810f254:	bd80      	pop	{r7, pc}
 810f256:	bf00      	nop
 810f258:	1000aff8 	.word	0x1000aff8
 810f25c:	1000ab24 	.word	0x1000ab24
 810f260:	1000b004 	.word	0x1000b004
 810f264:	1000b014 	.word	0x1000b014
 810f268:	1000b000 	.word	0x1000b000
 810f26c:	1000ab28 	.word	0x1000ab28
 810f270:	e000ed04 	.word	0xe000ed04

0810f274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810f274:	b580      	push	{r7, lr}
 810f276:	b084      	sub	sp, #16
 810f278:	af00      	add	r7, sp, #0
 810f27a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810f27c:	2300      	movs	r3, #0
 810f27e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810f280:	687b      	ldr	r3, [r7, #4]
 810f282:	2b00      	cmp	r3, #0
 810f284:	d018      	beq.n	810f2b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810f286:	4b14      	ldr	r3, [pc, #80]	@ (810f2d8 <vTaskDelay+0x64>)
 810f288:	681b      	ldr	r3, [r3, #0]
 810f28a:	2b00      	cmp	r3, #0
 810f28c:	d00b      	beq.n	810f2a6 <vTaskDelay+0x32>
	__asm volatile
 810f28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f292:	f383 8811 	msr	BASEPRI, r3
 810f296:	f3bf 8f6f 	isb	sy
 810f29a:	f3bf 8f4f 	dsb	sy
 810f29e:	60bb      	str	r3, [r7, #8]
}
 810f2a0:	bf00      	nop
 810f2a2:	bf00      	nop
 810f2a4:	e7fd      	b.n	810f2a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810f2a6:	f000 f88b 	bl	810f3c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810f2aa:	2100      	movs	r1, #0
 810f2ac:	6878      	ldr	r0, [r7, #4]
 810f2ae:	f000 ffbf 	bl	8110230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810f2b2:	f000 f893 	bl	810f3dc <xTaskResumeAll>
 810f2b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810f2b8:	68fb      	ldr	r3, [r7, #12]
 810f2ba:	2b00      	cmp	r3, #0
 810f2bc:	d107      	bne.n	810f2ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810f2be:	4b07      	ldr	r3, [pc, #28]	@ (810f2dc <vTaskDelay+0x68>)
 810f2c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f2c4:	601a      	str	r2, [r3, #0]
 810f2c6:	f3bf 8f4f 	dsb	sy
 810f2ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810f2ce:	bf00      	nop
 810f2d0:	3710      	adds	r7, #16
 810f2d2:	46bd      	mov	sp, r7
 810f2d4:	bd80      	pop	{r7, pc}
 810f2d6:	bf00      	nop
 810f2d8:	1000b020 	.word	0x1000b020
 810f2dc:	e000ed04 	.word	0xe000ed04

0810f2e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810f2e0:	b580      	push	{r7, lr}
 810f2e2:	b08a      	sub	sp, #40	@ 0x28
 810f2e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810f2e6:	2300      	movs	r3, #0
 810f2e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810f2ea:	2300      	movs	r3, #0
 810f2ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810f2ee:	463a      	mov	r2, r7
 810f2f0:	1d39      	adds	r1, r7, #4
 810f2f2:	f107 0308 	add.w	r3, r7, #8
 810f2f6:	4618      	mov	r0, r3
 810f2f8:	f7fd fbc4 	bl	810ca84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810f2fc:	6839      	ldr	r1, [r7, #0]
 810f2fe:	687b      	ldr	r3, [r7, #4]
 810f300:	68ba      	ldr	r2, [r7, #8]
 810f302:	9202      	str	r2, [sp, #8]
 810f304:	9301      	str	r3, [sp, #4]
 810f306:	2300      	movs	r3, #0
 810f308:	9300      	str	r3, [sp, #0]
 810f30a:	2300      	movs	r3, #0
 810f30c:	460a      	mov	r2, r1
 810f30e:	4924      	ldr	r1, [pc, #144]	@ (810f3a0 <vTaskStartScheduler+0xc0>)
 810f310:	4824      	ldr	r0, [pc, #144]	@ (810f3a4 <vTaskStartScheduler+0xc4>)
 810f312:	f7ff fdf1 	bl	810eef8 <xTaskCreateStatic>
 810f316:	4603      	mov	r3, r0
 810f318:	4a23      	ldr	r2, [pc, #140]	@ (810f3a8 <vTaskStartScheduler+0xc8>)
 810f31a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810f31c:	4b22      	ldr	r3, [pc, #136]	@ (810f3a8 <vTaskStartScheduler+0xc8>)
 810f31e:	681b      	ldr	r3, [r3, #0]
 810f320:	2b00      	cmp	r3, #0
 810f322:	d002      	beq.n	810f32a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810f324:	2301      	movs	r3, #1
 810f326:	617b      	str	r3, [r7, #20]
 810f328:	e001      	b.n	810f32e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810f32a:	2300      	movs	r3, #0
 810f32c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810f32e:	697b      	ldr	r3, [r7, #20]
 810f330:	2b01      	cmp	r3, #1
 810f332:	d102      	bne.n	810f33a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810f334:	f000 ffd0 	bl	81102d8 <xTimerCreateTimerTask>
 810f338:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810f33a:	697b      	ldr	r3, [r7, #20]
 810f33c:	2b01      	cmp	r3, #1
 810f33e:	d11b      	bne.n	810f378 <vTaskStartScheduler+0x98>
	__asm volatile
 810f340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f344:	f383 8811 	msr	BASEPRI, r3
 810f348:	f3bf 8f6f 	isb	sy
 810f34c:	f3bf 8f4f 	dsb	sy
 810f350:	613b      	str	r3, [r7, #16]
}
 810f352:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810f354:	4b15      	ldr	r3, [pc, #84]	@ (810f3ac <vTaskStartScheduler+0xcc>)
 810f356:	681b      	ldr	r3, [r3, #0]
 810f358:	3354      	adds	r3, #84	@ 0x54
 810f35a:	4a15      	ldr	r2, [pc, #84]	@ (810f3b0 <vTaskStartScheduler+0xd0>)
 810f35c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810f35e:	4b15      	ldr	r3, [pc, #84]	@ (810f3b4 <vTaskStartScheduler+0xd4>)
 810f360:	f04f 32ff 	mov.w	r2, #4294967295
 810f364:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810f366:	4b14      	ldr	r3, [pc, #80]	@ (810f3b8 <vTaskStartScheduler+0xd8>)
 810f368:	2201      	movs	r2, #1
 810f36a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810f36c:	4b13      	ldr	r3, [pc, #76]	@ (810f3bc <vTaskStartScheduler+0xdc>)
 810f36e:	2200      	movs	r2, #0
 810f370:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810f372:	f7fd feed 	bl	810d150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810f376:	e00f      	b.n	810f398 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810f378:	697b      	ldr	r3, [r7, #20]
 810f37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f37e:	d10b      	bne.n	810f398 <vTaskStartScheduler+0xb8>
	__asm volatile
 810f380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f384:	f383 8811 	msr	BASEPRI, r3
 810f388:	f3bf 8f6f 	isb	sy
 810f38c:	f3bf 8f4f 	dsb	sy
 810f390:	60fb      	str	r3, [r7, #12]
}
 810f392:	bf00      	nop
 810f394:	bf00      	nop
 810f396:	e7fd      	b.n	810f394 <vTaskStartScheduler+0xb4>
}
 810f398:	bf00      	nop
 810f39a:	3718      	adds	r7, #24
 810f39c:	46bd      	mov	sp, r7
 810f39e:	bd80      	pop	{r7, pc}
 810f3a0:	0811cd10 	.word	0x0811cd10
 810f3a4:	0810fa65 	.word	0x0810fa65
 810f3a8:	1000b01c 	.word	0x1000b01c
 810f3ac:	1000ab24 	.word	0x1000ab24
 810f3b0:	10000040 	.word	0x10000040
 810f3b4:	1000b018 	.word	0x1000b018
 810f3b8:	1000b004 	.word	0x1000b004
 810f3bc:	1000affc 	.word	0x1000affc

0810f3c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810f3c0:	b480      	push	{r7}
 810f3c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810f3c4:	4b04      	ldr	r3, [pc, #16]	@ (810f3d8 <vTaskSuspendAll+0x18>)
 810f3c6:	681b      	ldr	r3, [r3, #0]
 810f3c8:	3301      	adds	r3, #1
 810f3ca:	4a03      	ldr	r2, [pc, #12]	@ (810f3d8 <vTaskSuspendAll+0x18>)
 810f3cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810f3ce:	bf00      	nop
 810f3d0:	46bd      	mov	sp, r7
 810f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f3d6:	4770      	bx	lr
 810f3d8:	1000b020 	.word	0x1000b020

0810f3dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810f3dc:	b580      	push	{r7, lr}
 810f3de:	b084      	sub	sp, #16
 810f3e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810f3e2:	2300      	movs	r3, #0
 810f3e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810f3e6:	2300      	movs	r3, #0
 810f3e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810f3ea:	4b42      	ldr	r3, [pc, #264]	@ (810f4f4 <xTaskResumeAll+0x118>)
 810f3ec:	681b      	ldr	r3, [r3, #0]
 810f3ee:	2b00      	cmp	r3, #0
 810f3f0:	d10b      	bne.n	810f40a <xTaskResumeAll+0x2e>
	__asm volatile
 810f3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f3f6:	f383 8811 	msr	BASEPRI, r3
 810f3fa:	f3bf 8f6f 	isb	sy
 810f3fe:	f3bf 8f4f 	dsb	sy
 810f402:	603b      	str	r3, [r7, #0]
}
 810f404:	bf00      	nop
 810f406:	bf00      	nop
 810f408:	e7fd      	b.n	810f406 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810f40a:	f7fd ff45 	bl	810d298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810f40e:	4b39      	ldr	r3, [pc, #228]	@ (810f4f4 <xTaskResumeAll+0x118>)
 810f410:	681b      	ldr	r3, [r3, #0]
 810f412:	3b01      	subs	r3, #1
 810f414:	4a37      	ldr	r2, [pc, #220]	@ (810f4f4 <xTaskResumeAll+0x118>)
 810f416:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810f418:	4b36      	ldr	r3, [pc, #216]	@ (810f4f4 <xTaskResumeAll+0x118>)
 810f41a:	681b      	ldr	r3, [r3, #0]
 810f41c:	2b00      	cmp	r3, #0
 810f41e:	d162      	bne.n	810f4e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810f420:	4b35      	ldr	r3, [pc, #212]	@ (810f4f8 <xTaskResumeAll+0x11c>)
 810f422:	681b      	ldr	r3, [r3, #0]
 810f424:	2b00      	cmp	r3, #0
 810f426:	d05e      	beq.n	810f4e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810f428:	e02f      	b.n	810f48a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f42a:	4b34      	ldr	r3, [pc, #208]	@ (810f4fc <xTaskResumeAll+0x120>)
 810f42c:	68db      	ldr	r3, [r3, #12]
 810f42e:	68db      	ldr	r3, [r3, #12]
 810f430:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810f432:	68fb      	ldr	r3, [r7, #12]
 810f434:	3318      	adds	r3, #24
 810f436:	4618      	mov	r0, r3
 810f438:	f7fd fdd0 	bl	810cfdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810f43c:	68fb      	ldr	r3, [r7, #12]
 810f43e:	3304      	adds	r3, #4
 810f440:	4618      	mov	r0, r3
 810f442:	f7fd fdcb 	bl	810cfdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810f446:	68fb      	ldr	r3, [r7, #12]
 810f448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f44a:	4b2d      	ldr	r3, [pc, #180]	@ (810f500 <xTaskResumeAll+0x124>)
 810f44c:	681b      	ldr	r3, [r3, #0]
 810f44e:	429a      	cmp	r2, r3
 810f450:	d903      	bls.n	810f45a <xTaskResumeAll+0x7e>
 810f452:	68fb      	ldr	r3, [r7, #12]
 810f454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f456:	4a2a      	ldr	r2, [pc, #168]	@ (810f500 <xTaskResumeAll+0x124>)
 810f458:	6013      	str	r3, [r2, #0]
 810f45a:	68fb      	ldr	r3, [r7, #12]
 810f45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f45e:	4613      	mov	r3, r2
 810f460:	009b      	lsls	r3, r3, #2
 810f462:	4413      	add	r3, r2
 810f464:	009b      	lsls	r3, r3, #2
 810f466:	4a27      	ldr	r2, [pc, #156]	@ (810f504 <xTaskResumeAll+0x128>)
 810f468:	441a      	add	r2, r3
 810f46a:	68fb      	ldr	r3, [r7, #12]
 810f46c:	3304      	adds	r3, #4
 810f46e:	4619      	mov	r1, r3
 810f470:	4610      	mov	r0, r2
 810f472:	f7fd fd56 	bl	810cf22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810f476:	68fb      	ldr	r3, [r7, #12]
 810f478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f47a:	4b23      	ldr	r3, [pc, #140]	@ (810f508 <xTaskResumeAll+0x12c>)
 810f47c:	681b      	ldr	r3, [r3, #0]
 810f47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f480:	429a      	cmp	r2, r3
 810f482:	d302      	bcc.n	810f48a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810f484:	4b21      	ldr	r3, [pc, #132]	@ (810f50c <xTaskResumeAll+0x130>)
 810f486:	2201      	movs	r2, #1
 810f488:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810f48a:	4b1c      	ldr	r3, [pc, #112]	@ (810f4fc <xTaskResumeAll+0x120>)
 810f48c:	681b      	ldr	r3, [r3, #0]
 810f48e:	2b00      	cmp	r3, #0
 810f490:	d1cb      	bne.n	810f42a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810f492:	68fb      	ldr	r3, [r7, #12]
 810f494:	2b00      	cmp	r3, #0
 810f496:	d001      	beq.n	810f49c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810f498:	f000 fba0 	bl	810fbdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810f49c:	4b1c      	ldr	r3, [pc, #112]	@ (810f510 <xTaskResumeAll+0x134>)
 810f49e:	681b      	ldr	r3, [r3, #0]
 810f4a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810f4a2:	687b      	ldr	r3, [r7, #4]
 810f4a4:	2b00      	cmp	r3, #0
 810f4a6:	d010      	beq.n	810f4ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810f4a8:	f000 f858 	bl	810f55c <xTaskIncrementTick>
 810f4ac:	4603      	mov	r3, r0
 810f4ae:	2b00      	cmp	r3, #0
 810f4b0:	d002      	beq.n	810f4b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810f4b2:	4b16      	ldr	r3, [pc, #88]	@ (810f50c <xTaskResumeAll+0x130>)
 810f4b4:	2201      	movs	r2, #1
 810f4b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810f4b8:	687b      	ldr	r3, [r7, #4]
 810f4ba:	3b01      	subs	r3, #1
 810f4bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810f4be:	687b      	ldr	r3, [r7, #4]
 810f4c0:	2b00      	cmp	r3, #0
 810f4c2:	d1f1      	bne.n	810f4a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810f4c4:	4b12      	ldr	r3, [pc, #72]	@ (810f510 <xTaskResumeAll+0x134>)
 810f4c6:	2200      	movs	r2, #0
 810f4c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810f4ca:	4b10      	ldr	r3, [pc, #64]	@ (810f50c <xTaskResumeAll+0x130>)
 810f4cc:	681b      	ldr	r3, [r3, #0]
 810f4ce:	2b00      	cmp	r3, #0
 810f4d0:	d009      	beq.n	810f4e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810f4d2:	2301      	movs	r3, #1
 810f4d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810f4d6:	4b0f      	ldr	r3, [pc, #60]	@ (810f514 <xTaskResumeAll+0x138>)
 810f4d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f4dc:	601a      	str	r2, [r3, #0]
 810f4de:	f3bf 8f4f 	dsb	sy
 810f4e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810f4e6:	f7fd ff09 	bl	810d2fc <vPortExitCritical>

	return xAlreadyYielded;
 810f4ea:	68bb      	ldr	r3, [r7, #8]
}
 810f4ec:	4618      	mov	r0, r3
 810f4ee:	3710      	adds	r7, #16
 810f4f0:	46bd      	mov	sp, r7
 810f4f2:	bd80      	pop	{r7, pc}
 810f4f4:	1000b020 	.word	0x1000b020
 810f4f8:	1000aff8 	.word	0x1000aff8
 810f4fc:	1000afb8 	.word	0x1000afb8
 810f500:	1000b000 	.word	0x1000b000
 810f504:	1000ab28 	.word	0x1000ab28
 810f508:	1000ab24 	.word	0x1000ab24
 810f50c:	1000b00c 	.word	0x1000b00c
 810f510:	1000b008 	.word	0x1000b008
 810f514:	e000ed04 	.word	0xe000ed04

0810f518 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810f518:	b480      	push	{r7}
 810f51a:	b083      	sub	sp, #12
 810f51c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810f51e:	4b05      	ldr	r3, [pc, #20]	@ (810f534 <xTaskGetTickCount+0x1c>)
 810f520:	681b      	ldr	r3, [r3, #0]
 810f522:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810f524:	687b      	ldr	r3, [r7, #4]
}
 810f526:	4618      	mov	r0, r3
 810f528:	370c      	adds	r7, #12
 810f52a:	46bd      	mov	sp, r7
 810f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f530:	4770      	bx	lr
 810f532:	bf00      	nop
 810f534:	1000affc 	.word	0x1000affc

0810f538 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 810f538:	b580      	push	{r7, lr}
 810f53a:	b082      	sub	sp, #8
 810f53c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810f53e:	f7fd ff8b 	bl	810d458 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 810f542:	2300      	movs	r3, #0
 810f544:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 810f546:	4b04      	ldr	r3, [pc, #16]	@ (810f558 <xTaskGetTickCountFromISR+0x20>)
 810f548:	681b      	ldr	r3, [r3, #0]
 810f54a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810f54c:	683b      	ldr	r3, [r7, #0]
}
 810f54e:	4618      	mov	r0, r3
 810f550:	3708      	adds	r7, #8
 810f552:	46bd      	mov	sp, r7
 810f554:	bd80      	pop	{r7, pc}
 810f556:	bf00      	nop
 810f558:	1000affc 	.word	0x1000affc

0810f55c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810f55c:	b580      	push	{r7, lr}
 810f55e:	b086      	sub	sp, #24
 810f560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810f562:	2300      	movs	r3, #0
 810f564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810f566:	4b4f      	ldr	r3, [pc, #316]	@ (810f6a4 <xTaskIncrementTick+0x148>)
 810f568:	681b      	ldr	r3, [r3, #0]
 810f56a:	2b00      	cmp	r3, #0
 810f56c:	f040 8090 	bne.w	810f690 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810f570:	4b4d      	ldr	r3, [pc, #308]	@ (810f6a8 <xTaskIncrementTick+0x14c>)
 810f572:	681b      	ldr	r3, [r3, #0]
 810f574:	3301      	adds	r3, #1
 810f576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810f578:	4a4b      	ldr	r2, [pc, #300]	@ (810f6a8 <xTaskIncrementTick+0x14c>)
 810f57a:	693b      	ldr	r3, [r7, #16]
 810f57c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810f57e:	693b      	ldr	r3, [r7, #16]
 810f580:	2b00      	cmp	r3, #0
 810f582:	d121      	bne.n	810f5c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810f584:	4b49      	ldr	r3, [pc, #292]	@ (810f6ac <xTaskIncrementTick+0x150>)
 810f586:	681b      	ldr	r3, [r3, #0]
 810f588:	681b      	ldr	r3, [r3, #0]
 810f58a:	2b00      	cmp	r3, #0
 810f58c:	d00b      	beq.n	810f5a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 810f58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f592:	f383 8811 	msr	BASEPRI, r3
 810f596:	f3bf 8f6f 	isb	sy
 810f59a:	f3bf 8f4f 	dsb	sy
 810f59e:	603b      	str	r3, [r7, #0]
}
 810f5a0:	bf00      	nop
 810f5a2:	bf00      	nop
 810f5a4:	e7fd      	b.n	810f5a2 <xTaskIncrementTick+0x46>
 810f5a6:	4b41      	ldr	r3, [pc, #260]	@ (810f6ac <xTaskIncrementTick+0x150>)
 810f5a8:	681b      	ldr	r3, [r3, #0]
 810f5aa:	60fb      	str	r3, [r7, #12]
 810f5ac:	4b40      	ldr	r3, [pc, #256]	@ (810f6b0 <xTaskIncrementTick+0x154>)
 810f5ae:	681b      	ldr	r3, [r3, #0]
 810f5b0:	4a3e      	ldr	r2, [pc, #248]	@ (810f6ac <xTaskIncrementTick+0x150>)
 810f5b2:	6013      	str	r3, [r2, #0]
 810f5b4:	4a3e      	ldr	r2, [pc, #248]	@ (810f6b0 <xTaskIncrementTick+0x154>)
 810f5b6:	68fb      	ldr	r3, [r7, #12]
 810f5b8:	6013      	str	r3, [r2, #0]
 810f5ba:	4b3e      	ldr	r3, [pc, #248]	@ (810f6b4 <xTaskIncrementTick+0x158>)
 810f5bc:	681b      	ldr	r3, [r3, #0]
 810f5be:	3301      	adds	r3, #1
 810f5c0:	4a3c      	ldr	r2, [pc, #240]	@ (810f6b4 <xTaskIncrementTick+0x158>)
 810f5c2:	6013      	str	r3, [r2, #0]
 810f5c4:	f000 fb0a 	bl	810fbdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810f5c8:	4b3b      	ldr	r3, [pc, #236]	@ (810f6b8 <xTaskIncrementTick+0x15c>)
 810f5ca:	681b      	ldr	r3, [r3, #0]
 810f5cc:	693a      	ldr	r2, [r7, #16]
 810f5ce:	429a      	cmp	r2, r3
 810f5d0:	d349      	bcc.n	810f666 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810f5d2:	4b36      	ldr	r3, [pc, #216]	@ (810f6ac <xTaskIncrementTick+0x150>)
 810f5d4:	681b      	ldr	r3, [r3, #0]
 810f5d6:	681b      	ldr	r3, [r3, #0]
 810f5d8:	2b00      	cmp	r3, #0
 810f5da:	d104      	bne.n	810f5e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f5dc:	4b36      	ldr	r3, [pc, #216]	@ (810f6b8 <xTaskIncrementTick+0x15c>)
 810f5de:	f04f 32ff 	mov.w	r2, #4294967295
 810f5e2:	601a      	str	r2, [r3, #0]
					break;
 810f5e4:	e03f      	b.n	810f666 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f5e6:	4b31      	ldr	r3, [pc, #196]	@ (810f6ac <xTaskIncrementTick+0x150>)
 810f5e8:	681b      	ldr	r3, [r3, #0]
 810f5ea:	68db      	ldr	r3, [r3, #12]
 810f5ec:	68db      	ldr	r3, [r3, #12]
 810f5ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810f5f0:	68bb      	ldr	r3, [r7, #8]
 810f5f2:	685b      	ldr	r3, [r3, #4]
 810f5f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810f5f6:	693a      	ldr	r2, [r7, #16]
 810f5f8:	687b      	ldr	r3, [r7, #4]
 810f5fa:	429a      	cmp	r2, r3
 810f5fc:	d203      	bcs.n	810f606 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810f5fe:	4a2e      	ldr	r2, [pc, #184]	@ (810f6b8 <xTaskIncrementTick+0x15c>)
 810f600:	687b      	ldr	r3, [r7, #4]
 810f602:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810f604:	e02f      	b.n	810f666 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810f606:	68bb      	ldr	r3, [r7, #8]
 810f608:	3304      	adds	r3, #4
 810f60a:	4618      	mov	r0, r3
 810f60c:	f7fd fce6 	bl	810cfdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810f610:	68bb      	ldr	r3, [r7, #8]
 810f612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f614:	2b00      	cmp	r3, #0
 810f616:	d004      	beq.n	810f622 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810f618:	68bb      	ldr	r3, [r7, #8]
 810f61a:	3318      	adds	r3, #24
 810f61c:	4618      	mov	r0, r3
 810f61e:	f7fd fcdd 	bl	810cfdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810f622:	68bb      	ldr	r3, [r7, #8]
 810f624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f626:	4b25      	ldr	r3, [pc, #148]	@ (810f6bc <xTaskIncrementTick+0x160>)
 810f628:	681b      	ldr	r3, [r3, #0]
 810f62a:	429a      	cmp	r2, r3
 810f62c:	d903      	bls.n	810f636 <xTaskIncrementTick+0xda>
 810f62e:	68bb      	ldr	r3, [r7, #8]
 810f630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f632:	4a22      	ldr	r2, [pc, #136]	@ (810f6bc <xTaskIncrementTick+0x160>)
 810f634:	6013      	str	r3, [r2, #0]
 810f636:	68bb      	ldr	r3, [r7, #8]
 810f638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f63a:	4613      	mov	r3, r2
 810f63c:	009b      	lsls	r3, r3, #2
 810f63e:	4413      	add	r3, r2
 810f640:	009b      	lsls	r3, r3, #2
 810f642:	4a1f      	ldr	r2, [pc, #124]	@ (810f6c0 <xTaskIncrementTick+0x164>)
 810f644:	441a      	add	r2, r3
 810f646:	68bb      	ldr	r3, [r7, #8]
 810f648:	3304      	adds	r3, #4
 810f64a:	4619      	mov	r1, r3
 810f64c:	4610      	mov	r0, r2
 810f64e:	f7fd fc68 	bl	810cf22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810f652:	68bb      	ldr	r3, [r7, #8]
 810f654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f656:	4b1b      	ldr	r3, [pc, #108]	@ (810f6c4 <xTaskIncrementTick+0x168>)
 810f658:	681b      	ldr	r3, [r3, #0]
 810f65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f65c:	429a      	cmp	r2, r3
 810f65e:	d3b8      	bcc.n	810f5d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810f660:	2301      	movs	r3, #1
 810f662:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810f664:	e7b5      	b.n	810f5d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810f666:	4b17      	ldr	r3, [pc, #92]	@ (810f6c4 <xTaskIncrementTick+0x168>)
 810f668:	681b      	ldr	r3, [r3, #0]
 810f66a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f66c:	4914      	ldr	r1, [pc, #80]	@ (810f6c0 <xTaskIncrementTick+0x164>)
 810f66e:	4613      	mov	r3, r2
 810f670:	009b      	lsls	r3, r3, #2
 810f672:	4413      	add	r3, r2
 810f674:	009b      	lsls	r3, r3, #2
 810f676:	440b      	add	r3, r1
 810f678:	681b      	ldr	r3, [r3, #0]
 810f67a:	2b01      	cmp	r3, #1
 810f67c:	d901      	bls.n	810f682 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810f67e:	2301      	movs	r3, #1
 810f680:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810f682:	4b11      	ldr	r3, [pc, #68]	@ (810f6c8 <xTaskIncrementTick+0x16c>)
 810f684:	681b      	ldr	r3, [r3, #0]
 810f686:	2b00      	cmp	r3, #0
 810f688:	d007      	beq.n	810f69a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810f68a:	2301      	movs	r3, #1
 810f68c:	617b      	str	r3, [r7, #20]
 810f68e:	e004      	b.n	810f69a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810f690:	4b0e      	ldr	r3, [pc, #56]	@ (810f6cc <xTaskIncrementTick+0x170>)
 810f692:	681b      	ldr	r3, [r3, #0]
 810f694:	3301      	adds	r3, #1
 810f696:	4a0d      	ldr	r2, [pc, #52]	@ (810f6cc <xTaskIncrementTick+0x170>)
 810f698:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810f69a:	697b      	ldr	r3, [r7, #20]
}
 810f69c:	4618      	mov	r0, r3
 810f69e:	3718      	adds	r7, #24
 810f6a0:	46bd      	mov	sp, r7
 810f6a2:	bd80      	pop	{r7, pc}
 810f6a4:	1000b020 	.word	0x1000b020
 810f6a8:	1000affc 	.word	0x1000affc
 810f6ac:	1000afb0 	.word	0x1000afb0
 810f6b0:	1000afb4 	.word	0x1000afb4
 810f6b4:	1000b010 	.word	0x1000b010
 810f6b8:	1000b018 	.word	0x1000b018
 810f6bc:	1000b000 	.word	0x1000b000
 810f6c0:	1000ab28 	.word	0x1000ab28
 810f6c4:	1000ab24 	.word	0x1000ab24
 810f6c8:	1000b00c 	.word	0x1000b00c
 810f6cc:	1000b008 	.word	0x1000b008

0810f6d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810f6d0:	b480      	push	{r7}
 810f6d2:	b085      	sub	sp, #20
 810f6d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810f6d6:	4b2b      	ldr	r3, [pc, #172]	@ (810f784 <vTaskSwitchContext+0xb4>)
 810f6d8:	681b      	ldr	r3, [r3, #0]
 810f6da:	2b00      	cmp	r3, #0
 810f6dc:	d003      	beq.n	810f6e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810f6de:	4b2a      	ldr	r3, [pc, #168]	@ (810f788 <vTaskSwitchContext+0xb8>)
 810f6e0:	2201      	movs	r2, #1
 810f6e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810f6e4:	e047      	b.n	810f776 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 810f6e6:	4b28      	ldr	r3, [pc, #160]	@ (810f788 <vTaskSwitchContext+0xb8>)
 810f6e8:	2200      	movs	r2, #0
 810f6ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f6ec:	4b27      	ldr	r3, [pc, #156]	@ (810f78c <vTaskSwitchContext+0xbc>)
 810f6ee:	681b      	ldr	r3, [r3, #0]
 810f6f0:	60fb      	str	r3, [r7, #12]
 810f6f2:	e011      	b.n	810f718 <vTaskSwitchContext+0x48>
 810f6f4:	68fb      	ldr	r3, [r7, #12]
 810f6f6:	2b00      	cmp	r3, #0
 810f6f8:	d10b      	bne.n	810f712 <vTaskSwitchContext+0x42>
	__asm volatile
 810f6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f6fe:	f383 8811 	msr	BASEPRI, r3
 810f702:	f3bf 8f6f 	isb	sy
 810f706:	f3bf 8f4f 	dsb	sy
 810f70a:	607b      	str	r3, [r7, #4]
}
 810f70c:	bf00      	nop
 810f70e:	bf00      	nop
 810f710:	e7fd      	b.n	810f70e <vTaskSwitchContext+0x3e>
 810f712:	68fb      	ldr	r3, [r7, #12]
 810f714:	3b01      	subs	r3, #1
 810f716:	60fb      	str	r3, [r7, #12]
 810f718:	491d      	ldr	r1, [pc, #116]	@ (810f790 <vTaskSwitchContext+0xc0>)
 810f71a:	68fa      	ldr	r2, [r7, #12]
 810f71c:	4613      	mov	r3, r2
 810f71e:	009b      	lsls	r3, r3, #2
 810f720:	4413      	add	r3, r2
 810f722:	009b      	lsls	r3, r3, #2
 810f724:	440b      	add	r3, r1
 810f726:	681b      	ldr	r3, [r3, #0]
 810f728:	2b00      	cmp	r3, #0
 810f72a:	d0e3      	beq.n	810f6f4 <vTaskSwitchContext+0x24>
 810f72c:	68fa      	ldr	r2, [r7, #12]
 810f72e:	4613      	mov	r3, r2
 810f730:	009b      	lsls	r3, r3, #2
 810f732:	4413      	add	r3, r2
 810f734:	009b      	lsls	r3, r3, #2
 810f736:	4a16      	ldr	r2, [pc, #88]	@ (810f790 <vTaskSwitchContext+0xc0>)
 810f738:	4413      	add	r3, r2
 810f73a:	60bb      	str	r3, [r7, #8]
 810f73c:	68bb      	ldr	r3, [r7, #8]
 810f73e:	685b      	ldr	r3, [r3, #4]
 810f740:	685a      	ldr	r2, [r3, #4]
 810f742:	68bb      	ldr	r3, [r7, #8]
 810f744:	605a      	str	r2, [r3, #4]
 810f746:	68bb      	ldr	r3, [r7, #8]
 810f748:	685a      	ldr	r2, [r3, #4]
 810f74a:	68bb      	ldr	r3, [r7, #8]
 810f74c:	3308      	adds	r3, #8
 810f74e:	429a      	cmp	r2, r3
 810f750:	d104      	bne.n	810f75c <vTaskSwitchContext+0x8c>
 810f752:	68bb      	ldr	r3, [r7, #8]
 810f754:	685b      	ldr	r3, [r3, #4]
 810f756:	685a      	ldr	r2, [r3, #4]
 810f758:	68bb      	ldr	r3, [r7, #8]
 810f75a:	605a      	str	r2, [r3, #4]
 810f75c:	68bb      	ldr	r3, [r7, #8]
 810f75e:	685b      	ldr	r3, [r3, #4]
 810f760:	68db      	ldr	r3, [r3, #12]
 810f762:	4a0c      	ldr	r2, [pc, #48]	@ (810f794 <vTaskSwitchContext+0xc4>)
 810f764:	6013      	str	r3, [r2, #0]
 810f766:	4a09      	ldr	r2, [pc, #36]	@ (810f78c <vTaskSwitchContext+0xbc>)
 810f768:	68fb      	ldr	r3, [r7, #12]
 810f76a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810f76c:	4b09      	ldr	r3, [pc, #36]	@ (810f794 <vTaskSwitchContext+0xc4>)
 810f76e:	681b      	ldr	r3, [r3, #0]
 810f770:	3354      	adds	r3, #84	@ 0x54
 810f772:	4a09      	ldr	r2, [pc, #36]	@ (810f798 <vTaskSwitchContext+0xc8>)
 810f774:	6013      	str	r3, [r2, #0]
}
 810f776:	bf00      	nop
 810f778:	3714      	adds	r7, #20
 810f77a:	46bd      	mov	sp, r7
 810f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f780:	4770      	bx	lr
 810f782:	bf00      	nop
 810f784:	1000b020 	.word	0x1000b020
 810f788:	1000b00c 	.word	0x1000b00c
 810f78c:	1000b000 	.word	0x1000b000
 810f790:	1000ab28 	.word	0x1000ab28
 810f794:	1000ab24 	.word	0x1000ab24
 810f798:	10000040 	.word	0x10000040

0810f79c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810f79c:	b580      	push	{r7, lr}
 810f79e:	b084      	sub	sp, #16
 810f7a0:	af00      	add	r7, sp, #0
 810f7a2:	6078      	str	r0, [r7, #4]
 810f7a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810f7a6:	687b      	ldr	r3, [r7, #4]
 810f7a8:	2b00      	cmp	r3, #0
 810f7aa:	d10b      	bne.n	810f7c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810f7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f7b0:	f383 8811 	msr	BASEPRI, r3
 810f7b4:	f3bf 8f6f 	isb	sy
 810f7b8:	f3bf 8f4f 	dsb	sy
 810f7bc:	60fb      	str	r3, [r7, #12]
}
 810f7be:	bf00      	nop
 810f7c0:	bf00      	nop
 810f7c2:	e7fd      	b.n	810f7c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810f7c4:	4b07      	ldr	r3, [pc, #28]	@ (810f7e4 <vTaskPlaceOnEventList+0x48>)
 810f7c6:	681b      	ldr	r3, [r3, #0]
 810f7c8:	3318      	adds	r3, #24
 810f7ca:	4619      	mov	r1, r3
 810f7cc:	6878      	ldr	r0, [r7, #4]
 810f7ce:	f7fd fbcc 	bl	810cf6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810f7d2:	2101      	movs	r1, #1
 810f7d4:	6838      	ldr	r0, [r7, #0]
 810f7d6:	f000 fd2b 	bl	8110230 <prvAddCurrentTaskToDelayedList>
}
 810f7da:	bf00      	nop
 810f7dc:	3710      	adds	r7, #16
 810f7de:	46bd      	mov	sp, r7
 810f7e0:	bd80      	pop	{r7, pc}
 810f7e2:	bf00      	nop
 810f7e4:	1000ab24 	.word	0x1000ab24

0810f7e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810f7e8:	b580      	push	{r7, lr}
 810f7ea:	b086      	sub	sp, #24
 810f7ec:	af00      	add	r7, sp, #0
 810f7ee:	60f8      	str	r0, [r7, #12]
 810f7f0:	60b9      	str	r1, [r7, #8]
 810f7f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810f7f4:	68fb      	ldr	r3, [r7, #12]
 810f7f6:	2b00      	cmp	r3, #0
 810f7f8:	d10b      	bne.n	810f812 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810f7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f7fe:	f383 8811 	msr	BASEPRI, r3
 810f802:	f3bf 8f6f 	isb	sy
 810f806:	f3bf 8f4f 	dsb	sy
 810f80a:	617b      	str	r3, [r7, #20]
}
 810f80c:	bf00      	nop
 810f80e:	bf00      	nop
 810f810:	e7fd      	b.n	810f80e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810f812:	4b0a      	ldr	r3, [pc, #40]	@ (810f83c <vTaskPlaceOnEventListRestricted+0x54>)
 810f814:	681b      	ldr	r3, [r3, #0]
 810f816:	3318      	adds	r3, #24
 810f818:	4619      	mov	r1, r3
 810f81a:	68f8      	ldr	r0, [r7, #12]
 810f81c:	f7fd fb81 	bl	810cf22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810f820:	687b      	ldr	r3, [r7, #4]
 810f822:	2b00      	cmp	r3, #0
 810f824:	d002      	beq.n	810f82c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810f826:	f04f 33ff 	mov.w	r3, #4294967295
 810f82a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810f82c:	6879      	ldr	r1, [r7, #4]
 810f82e:	68b8      	ldr	r0, [r7, #8]
 810f830:	f000 fcfe 	bl	8110230 <prvAddCurrentTaskToDelayedList>
	}
 810f834:	bf00      	nop
 810f836:	3718      	adds	r7, #24
 810f838:	46bd      	mov	sp, r7
 810f83a:	bd80      	pop	{r7, pc}
 810f83c:	1000ab24 	.word	0x1000ab24

0810f840 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810f840:	b580      	push	{r7, lr}
 810f842:	b086      	sub	sp, #24
 810f844:	af00      	add	r7, sp, #0
 810f846:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f848:	687b      	ldr	r3, [r7, #4]
 810f84a:	68db      	ldr	r3, [r3, #12]
 810f84c:	68db      	ldr	r3, [r3, #12]
 810f84e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810f850:	693b      	ldr	r3, [r7, #16]
 810f852:	2b00      	cmp	r3, #0
 810f854:	d10b      	bne.n	810f86e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810f856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f85a:	f383 8811 	msr	BASEPRI, r3
 810f85e:	f3bf 8f6f 	isb	sy
 810f862:	f3bf 8f4f 	dsb	sy
 810f866:	60fb      	str	r3, [r7, #12]
}
 810f868:	bf00      	nop
 810f86a:	bf00      	nop
 810f86c:	e7fd      	b.n	810f86a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810f86e:	693b      	ldr	r3, [r7, #16]
 810f870:	3318      	adds	r3, #24
 810f872:	4618      	mov	r0, r3
 810f874:	f7fd fbb2 	bl	810cfdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810f878:	4b1d      	ldr	r3, [pc, #116]	@ (810f8f0 <xTaskRemoveFromEventList+0xb0>)
 810f87a:	681b      	ldr	r3, [r3, #0]
 810f87c:	2b00      	cmp	r3, #0
 810f87e:	d11d      	bne.n	810f8bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810f880:	693b      	ldr	r3, [r7, #16]
 810f882:	3304      	adds	r3, #4
 810f884:	4618      	mov	r0, r3
 810f886:	f7fd fba9 	bl	810cfdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810f88a:	693b      	ldr	r3, [r7, #16]
 810f88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f88e:	4b19      	ldr	r3, [pc, #100]	@ (810f8f4 <xTaskRemoveFromEventList+0xb4>)
 810f890:	681b      	ldr	r3, [r3, #0]
 810f892:	429a      	cmp	r2, r3
 810f894:	d903      	bls.n	810f89e <xTaskRemoveFromEventList+0x5e>
 810f896:	693b      	ldr	r3, [r7, #16]
 810f898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f89a:	4a16      	ldr	r2, [pc, #88]	@ (810f8f4 <xTaskRemoveFromEventList+0xb4>)
 810f89c:	6013      	str	r3, [r2, #0]
 810f89e:	693b      	ldr	r3, [r7, #16]
 810f8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f8a2:	4613      	mov	r3, r2
 810f8a4:	009b      	lsls	r3, r3, #2
 810f8a6:	4413      	add	r3, r2
 810f8a8:	009b      	lsls	r3, r3, #2
 810f8aa:	4a13      	ldr	r2, [pc, #76]	@ (810f8f8 <xTaskRemoveFromEventList+0xb8>)
 810f8ac:	441a      	add	r2, r3
 810f8ae:	693b      	ldr	r3, [r7, #16]
 810f8b0:	3304      	adds	r3, #4
 810f8b2:	4619      	mov	r1, r3
 810f8b4:	4610      	mov	r0, r2
 810f8b6:	f7fd fb34 	bl	810cf22 <vListInsertEnd>
 810f8ba:	e005      	b.n	810f8c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810f8bc:	693b      	ldr	r3, [r7, #16]
 810f8be:	3318      	adds	r3, #24
 810f8c0:	4619      	mov	r1, r3
 810f8c2:	480e      	ldr	r0, [pc, #56]	@ (810f8fc <xTaskRemoveFromEventList+0xbc>)
 810f8c4:	f7fd fb2d 	bl	810cf22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810f8c8:	693b      	ldr	r3, [r7, #16]
 810f8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f8cc:	4b0c      	ldr	r3, [pc, #48]	@ (810f900 <xTaskRemoveFromEventList+0xc0>)
 810f8ce:	681b      	ldr	r3, [r3, #0]
 810f8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f8d2:	429a      	cmp	r2, r3
 810f8d4:	d905      	bls.n	810f8e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810f8d6:	2301      	movs	r3, #1
 810f8d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810f8da:	4b0a      	ldr	r3, [pc, #40]	@ (810f904 <xTaskRemoveFromEventList+0xc4>)
 810f8dc:	2201      	movs	r2, #1
 810f8de:	601a      	str	r2, [r3, #0]
 810f8e0:	e001      	b.n	810f8e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810f8e2:	2300      	movs	r3, #0
 810f8e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810f8e6:	697b      	ldr	r3, [r7, #20]
}
 810f8e8:	4618      	mov	r0, r3
 810f8ea:	3718      	adds	r7, #24
 810f8ec:	46bd      	mov	sp, r7
 810f8ee:	bd80      	pop	{r7, pc}
 810f8f0:	1000b020 	.word	0x1000b020
 810f8f4:	1000b000 	.word	0x1000b000
 810f8f8:	1000ab28 	.word	0x1000ab28
 810f8fc:	1000afb8 	.word	0x1000afb8
 810f900:	1000ab24 	.word	0x1000ab24
 810f904:	1000b00c 	.word	0x1000b00c

0810f908 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810f908:	b580      	push	{r7, lr}
 810f90a:	b084      	sub	sp, #16
 810f90c:	af00      	add	r7, sp, #0
 810f90e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 810f910:	687b      	ldr	r3, [r7, #4]
 810f912:	2b00      	cmp	r3, #0
 810f914:	d10b      	bne.n	810f92e <vTaskSetTimeOutState+0x26>
	__asm volatile
 810f916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f91a:	f383 8811 	msr	BASEPRI, r3
 810f91e:	f3bf 8f6f 	isb	sy
 810f922:	f3bf 8f4f 	dsb	sy
 810f926:	60fb      	str	r3, [r7, #12]
}
 810f928:	bf00      	nop
 810f92a:	bf00      	nop
 810f92c:	e7fd      	b.n	810f92a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 810f92e:	f7fd fcb3 	bl	810d298 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 810f932:	4b07      	ldr	r3, [pc, #28]	@ (810f950 <vTaskSetTimeOutState+0x48>)
 810f934:	681a      	ldr	r2, [r3, #0]
 810f936:	687b      	ldr	r3, [r7, #4]
 810f938:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 810f93a:	4b06      	ldr	r3, [pc, #24]	@ (810f954 <vTaskSetTimeOutState+0x4c>)
 810f93c:	681a      	ldr	r2, [r3, #0]
 810f93e:	687b      	ldr	r3, [r7, #4]
 810f940:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 810f942:	f7fd fcdb 	bl	810d2fc <vPortExitCritical>
}
 810f946:	bf00      	nop
 810f948:	3710      	adds	r7, #16
 810f94a:	46bd      	mov	sp, r7
 810f94c:	bd80      	pop	{r7, pc}
 810f94e:	bf00      	nop
 810f950:	1000b010 	.word	0x1000b010
 810f954:	1000affc 	.word	0x1000affc

0810f958 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810f958:	b480      	push	{r7}
 810f95a:	b083      	sub	sp, #12
 810f95c:	af00      	add	r7, sp, #0
 810f95e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810f960:	4b06      	ldr	r3, [pc, #24]	@ (810f97c <vTaskInternalSetTimeOutState+0x24>)
 810f962:	681a      	ldr	r2, [r3, #0]
 810f964:	687b      	ldr	r3, [r7, #4]
 810f966:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810f968:	4b05      	ldr	r3, [pc, #20]	@ (810f980 <vTaskInternalSetTimeOutState+0x28>)
 810f96a:	681a      	ldr	r2, [r3, #0]
 810f96c:	687b      	ldr	r3, [r7, #4]
 810f96e:	605a      	str	r2, [r3, #4]
}
 810f970:	bf00      	nop
 810f972:	370c      	adds	r7, #12
 810f974:	46bd      	mov	sp, r7
 810f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f97a:	4770      	bx	lr
 810f97c:	1000b010 	.word	0x1000b010
 810f980:	1000affc 	.word	0x1000affc

0810f984 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810f984:	b580      	push	{r7, lr}
 810f986:	b088      	sub	sp, #32
 810f988:	af00      	add	r7, sp, #0
 810f98a:	6078      	str	r0, [r7, #4]
 810f98c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810f98e:	687b      	ldr	r3, [r7, #4]
 810f990:	2b00      	cmp	r3, #0
 810f992:	d10b      	bne.n	810f9ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810f994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f998:	f383 8811 	msr	BASEPRI, r3
 810f99c:	f3bf 8f6f 	isb	sy
 810f9a0:	f3bf 8f4f 	dsb	sy
 810f9a4:	613b      	str	r3, [r7, #16]
}
 810f9a6:	bf00      	nop
 810f9a8:	bf00      	nop
 810f9aa:	e7fd      	b.n	810f9a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810f9ac:	683b      	ldr	r3, [r7, #0]
 810f9ae:	2b00      	cmp	r3, #0
 810f9b0:	d10b      	bne.n	810f9ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810f9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f9b6:	f383 8811 	msr	BASEPRI, r3
 810f9ba:	f3bf 8f6f 	isb	sy
 810f9be:	f3bf 8f4f 	dsb	sy
 810f9c2:	60fb      	str	r3, [r7, #12]
}
 810f9c4:	bf00      	nop
 810f9c6:	bf00      	nop
 810f9c8:	e7fd      	b.n	810f9c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810f9ca:	f7fd fc65 	bl	810d298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810f9ce:	4b1d      	ldr	r3, [pc, #116]	@ (810fa44 <xTaskCheckForTimeOut+0xc0>)
 810f9d0:	681b      	ldr	r3, [r3, #0]
 810f9d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810f9d4:	687b      	ldr	r3, [r7, #4]
 810f9d6:	685b      	ldr	r3, [r3, #4]
 810f9d8:	69ba      	ldr	r2, [r7, #24]
 810f9da:	1ad3      	subs	r3, r2, r3
 810f9dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810f9de:	683b      	ldr	r3, [r7, #0]
 810f9e0:	681b      	ldr	r3, [r3, #0]
 810f9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f9e6:	d102      	bne.n	810f9ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810f9e8:	2300      	movs	r3, #0
 810f9ea:	61fb      	str	r3, [r7, #28]
 810f9ec:	e023      	b.n	810fa36 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810f9ee:	687b      	ldr	r3, [r7, #4]
 810f9f0:	681a      	ldr	r2, [r3, #0]
 810f9f2:	4b15      	ldr	r3, [pc, #84]	@ (810fa48 <xTaskCheckForTimeOut+0xc4>)
 810f9f4:	681b      	ldr	r3, [r3, #0]
 810f9f6:	429a      	cmp	r2, r3
 810f9f8:	d007      	beq.n	810fa0a <xTaskCheckForTimeOut+0x86>
 810f9fa:	687b      	ldr	r3, [r7, #4]
 810f9fc:	685b      	ldr	r3, [r3, #4]
 810f9fe:	69ba      	ldr	r2, [r7, #24]
 810fa00:	429a      	cmp	r2, r3
 810fa02:	d302      	bcc.n	810fa0a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810fa04:	2301      	movs	r3, #1
 810fa06:	61fb      	str	r3, [r7, #28]
 810fa08:	e015      	b.n	810fa36 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810fa0a:	683b      	ldr	r3, [r7, #0]
 810fa0c:	681b      	ldr	r3, [r3, #0]
 810fa0e:	697a      	ldr	r2, [r7, #20]
 810fa10:	429a      	cmp	r2, r3
 810fa12:	d20b      	bcs.n	810fa2c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810fa14:	683b      	ldr	r3, [r7, #0]
 810fa16:	681a      	ldr	r2, [r3, #0]
 810fa18:	697b      	ldr	r3, [r7, #20]
 810fa1a:	1ad2      	subs	r2, r2, r3
 810fa1c:	683b      	ldr	r3, [r7, #0]
 810fa1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810fa20:	6878      	ldr	r0, [r7, #4]
 810fa22:	f7ff ff99 	bl	810f958 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810fa26:	2300      	movs	r3, #0
 810fa28:	61fb      	str	r3, [r7, #28]
 810fa2a:	e004      	b.n	810fa36 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810fa2c:	683b      	ldr	r3, [r7, #0]
 810fa2e:	2200      	movs	r2, #0
 810fa30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810fa32:	2301      	movs	r3, #1
 810fa34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810fa36:	f7fd fc61 	bl	810d2fc <vPortExitCritical>

	return xReturn;
 810fa3a:	69fb      	ldr	r3, [r7, #28]
}
 810fa3c:	4618      	mov	r0, r3
 810fa3e:	3720      	adds	r7, #32
 810fa40:	46bd      	mov	sp, r7
 810fa42:	bd80      	pop	{r7, pc}
 810fa44:	1000affc 	.word	0x1000affc
 810fa48:	1000b010 	.word	0x1000b010

0810fa4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810fa4c:	b480      	push	{r7}
 810fa4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810fa50:	4b03      	ldr	r3, [pc, #12]	@ (810fa60 <vTaskMissedYield+0x14>)
 810fa52:	2201      	movs	r2, #1
 810fa54:	601a      	str	r2, [r3, #0]
}
 810fa56:	bf00      	nop
 810fa58:	46bd      	mov	sp, r7
 810fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fa5e:	4770      	bx	lr
 810fa60:	1000b00c 	.word	0x1000b00c

0810fa64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810fa64:	b580      	push	{r7, lr}
 810fa66:	b082      	sub	sp, #8
 810fa68:	af00      	add	r7, sp, #0
 810fa6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810fa6c:	f000 f852 	bl	810fb14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810fa70:	4b06      	ldr	r3, [pc, #24]	@ (810fa8c <prvIdleTask+0x28>)
 810fa72:	681b      	ldr	r3, [r3, #0]
 810fa74:	2b01      	cmp	r3, #1
 810fa76:	d9f9      	bls.n	810fa6c <prvIdleTask+0x8>
			{
				taskYIELD();
 810fa78:	4b05      	ldr	r3, [pc, #20]	@ (810fa90 <prvIdleTask+0x2c>)
 810fa7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810fa7e:	601a      	str	r2, [r3, #0]
 810fa80:	f3bf 8f4f 	dsb	sy
 810fa84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810fa88:	e7f0      	b.n	810fa6c <prvIdleTask+0x8>
 810fa8a:	bf00      	nop
 810fa8c:	1000ab28 	.word	0x1000ab28
 810fa90:	e000ed04 	.word	0xe000ed04

0810fa94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810fa94:	b580      	push	{r7, lr}
 810fa96:	b082      	sub	sp, #8
 810fa98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810fa9a:	2300      	movs	r3, #0
 810fa9c:	607b      	str	r3, [r7, #4]
 810fa9e:	e00c      	b.n	810faba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810faa0:	687a      	ldr	r2, [r7, #4]
 810faa2:	4613      	mov	r3, r2
 810faa4:	009b      	lsls	r3, r3, #2
 810faa6:	4413      	add	r3, r2
 810faa8:	009b      	lsls	r3, r3, #2
 810faaa:	4a12      	ldr	r2, [pc, #72]	@ (810faf4 <prvInitialiseTaskLists+0x60>)
 810faac:	4413      	add	r3, r2
 810faae:	4618      	mov	r0, r3
 810fab0:	f7fd fa0a 	bl	810cec8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810fab4:	687b      	ldr	r3, [r7, #4]
 810fab6:	3301      	adds	r3, #1
 810fab8:	607b      	str	r3, [r7, #4]
 810faba:	687b      	ldr	r3, [r7, #4]
 810fabc:	2b37      	cmp	r3, #55	@ 0x37
 810fabe:	d9ef      	bls.n	810faa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810fac0:	480d      	ldr	r0, [pc, #52]	@ (810faf8 <prvInitialiseTaskLists+0x64>)
 810fac2:	f7fd fa01 	bl	810cec8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810fac6:	480d      	ldr	r0, [pc, #52]	@ (810fafc <prvInitialiseTaskLists+0x68>)
 810fac8:	f7fd f9fe 	bl	810cec8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810facc:	480c      	ldr	r0, [pc, #48]	@ (810fb00 <prvInitialiseTaskLists+0x6c>)
 810face:	f7fd f9fb 	bl	810cec8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810fad2:	480c      	ldr	r0, [pc, #48]	@ (810fb04 <prvInitialiseTaskLists+0x70>)
 810fad4:	f7fd f9f8 	bl	810cec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810fad8:	480b      	ldr	r0, [pc, #44]	@ (810fb08 <prvInitialiseTaskLists+0x74>)
 810fada:	f7fd f9f5 	bl	810cec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810fade:	4b0b      	ldr	r3, [pc, #44]	@ (810fb0c <prvInitialiseTaskLists+0x78>)
 810fae0:	4a05      	ldr	r2, [pc, #20]	@ (810faf8 <prvInitialiseTaskLists+0x64>)
 810fae2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810fae4:	4b0a      	ldr	r3, [pc, #40]	@ (810fb10 <prvInitialiseTaskLists+0x7c>)
 810fae6:	4a05      	ldr	r2, [pc, #20]	@ (810fafc <prvInitialiseTaskLists+0x68>)
 810fae8:	601a      	str	r2, [r3, #0]
}
 810faea:	bf00      	nop
 810faec:	3708      	adds	r7, #8
 810faee:	46bd      	mov	sp, r7
 810faf0:	bd80      	pop	{r7, pc}
 810faf2:	bf00      	nop
 810faf4:	1000ab28 	.word	0x1000ab28
 810faf8:	1000af88 	.word	0x1000af88
 810fafc:	1000af9c 	.word	0x1000af9c
 810fb00:	1000afb8 	.word	0x1000afb8
 810fb04:	1000afcc 	.word	0x1000afcc
 810fb08:	1000afe4 	.word	0x1000afe4
 810fb0c:	1000afb0 	.word	0x1000afb0
 810fb10:	1000afb4 	.word	0x1000afb4

0810fb14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810fb14:	b580      	push	{r7, lr}
 810fb16:	b082      	sub	sp, #8
 810fb18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810fb1a:	e019      	b.n	810fb50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810fb1c:	f7fd fbbc 	bl	810d298 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810fb20:	4b10      	ldr	r3, [pc, #64]	@ (810fb64 <prvCheckTasksWaitingTermination+0x50>)
 810fb22:	68db      	ldr	r3, [r3, #12]
 810fb24:	68db      	ldr	r3, [r3, #12]
 810fb26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810fb28:	687b      	ldr	r3, [r7, #4]
 810fb2a:	3304      	adds	r3, #4
 810fb2c:	4618      	mov	r0, r3
 810fb2e:	f7fd fa55 	bl	810cfdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 810fb32:	4b0d      	ldr	r3, [pc, #52]	@ (810fb68 <prvCheckTasksWaitingTermination+0x54>)
 810fb34:	681b      	ldr	r3, [r3, #0]
 810fb36:	3b01      	subs	r3, #1
 810fb38:	4a0b      	ldr	r2, [pc, #44]	@ (810fb68 <prvCheckTasksWaitingTermination+0x54>)
 810fb3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810fb3c:	4b0b      	ldr	r3, [pc, #44]	@ (810fb6c <prvCheckTasksWaitingTermination+0x58>)
 810fb3e:	681b      	ldr	r3, [r3, #0]
 810fb40:	3b01      	subs	r3, #1
 810fb42:	4a0a      	ldr	r2, [pc, #40]	@ (810fb6c <prvCheckTasksWaitingTermination+0x58>)
 810fb44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810fb46:	f7fd fbd9 	bl	810d2fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810fb4a:	6878      	ldr	r0, [r7, #4]
 810fb4c:	f000 f810 	bl	810fb70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810fb50:	4b06      	ldr	r3, [pc, #24]	@ (810fb6c <prvCheckTasksWaitingTermination+0x58>)
 810fb52:	681b      	ldr	r3, [r3, #0]
 810fb54:	2b00      	cmp	r3, #0
 810fb56:	d1e1      	bne.n	810fb1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810fb58:	bf00      	nop
 810fb5a:	bf00      	nop
 810fb5c:	3708      	adds	r7, #8
 810fb5e:	46bd      	mov	sp, r7
 810fb60:	bd80      	pop	{r7, pc}
 810fb62:	bf00      	nop
 810fb64:	1000afcc 	.word	0x1000afcc
 810fb68:	1000aff8 	.word	0x1000aff8
 810fb6c:	1000afe0 	.word	0x1000afe0

0810fb70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810fb70:	b580      	push	{r7, lr}
 810fb72:	b084      	sub	sp, #16
 810fb74:	af00      	add	r7, sp, #0
 810fb76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810fb78:	687b      	ldr	r3, [r7, #4]
 810fb7a:	3354      	adds	r3, #84	@ 0x54
 810fb7c:	4618      	mov	r0, r3
 810fb7e:	f00c fa27 	bl	811bfd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810fb82:	687b      	ldr	r3, [r7, #4]
 810fb84:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810fb88:	2b00      	cmp	r3, #0
 810fb8a:	d108      	bne.n	810fb9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810fb8c:	687b      	ldr	r3, [r7, #4]
 810fb8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810fb90:	4618      	mov	r0, r3
 810fb92:	f7fd f879 	bl	810cc88 <vPortFree>
				vPortFree( pxTCB );
 810fb96:	6878      	ldr	r0, [r7, #4]
 810fb98:	f7fd f876 	bl	810cc88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810fb9c:	e019      	b.n	810fbd2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810fb9e:	687b      	ldr	r3, [r7, #4]
 810fba0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810fba4:	2b01      	cmp	r3, #1
 810fba6:	d103      	bne.n	810fbb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810fba8:	6878      	ldr	r0, [r7, #4]
 810fbaa:	f7fd f86d 	bl	810cc88 <vPortFree>
	}
 810fbae:	e010      	b.n	810fbd2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810fbb0:	687b      	ldr	r3, [r7, #4]
 810fbb2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810fbb6:	2b02      	cmp	r3, #2
 810fbb8:	d00b      	beq.n	810fbd2 <prvDeleteTCB+0x62>
	__asm volatile
 810fbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fbbe:	f383 8811 	msr	BASEPRI, r3
 810fbc2:	f3bf 8f6f 	isb	sy
 810fbc6:	f3bf 8f4f 	dsb	sy
 810fbca:	60fb      	str	r3, [r7, #12]
}
 810fbcc:	bf00      	nop
 810fbce:	bf00      	nop
 810fbd0:	e7fd      	b.n	810fbce <prvDeleteTCB+0x5e>
	}
 810fbd2:	bf00      	nop
 810fbd4:	3710      	adds	r7, #16
 810fbd6:	46bd      	mov	sp, r7
 810fbd8:	bd80      	pop	{r7, pc}
	...

0810fbdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810fbdc:	b480      	push	{r7}
 810fbde:	b083      	sub	sp, #12
 810fbe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810fbe2:	4b0c      	ldr	r3, [pc, #48]	@ (810fc14 <prvResetNextTaskUnblockTime+0x38>)
 810fbe4:	681b      	ldr	r3, [r3, #0]
 810fbe6:	681b      	ldr	r3, [r3, #0]
 810fbe8:	2b00      	cmp	r3, #0
 810fbea:	d104      	bne.n	810fbf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810fbec:	4b0a      	ldr	r3, [pc, #40]	@ (810fc18 <prvResetNextTaskUnblockTime+0x3c>)
 810fbee:	f04f 32ff 	mov.w	r2, #4294967295
 810fbf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810fbf4:	e008      	b.n	810fc08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810fbf6:	4b07      	ldr	r3, [pc, #28]	@ (810fc14 <prvResetNextTaskUnblockTime+0x38>)
 810fbf8:	681b      	ldr	r3, [r3, #0]
 810fbfa:	68db      	ldr	r3, [r3, #12]
 810fbfc:	68db      	ldr	r3, [r3, #12]
 810fbfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810fc00:	687b      	ldr	r3, [r7, #4]
 810fc02:	685b      	ldr	r3, [r3, #4]
 810fc04:	4a04      	ldr	r2, [pc, #16]	@ (810fc18 <prvResetNextTaskUnblockTime+0x3c>)
 810fc06:	6013      	str	r3, [r2, #0]
}
 810fc08:	bf00      	nop
 810fc0a:	370c      	adds	r7, #12
 810fc0c:	46bd      	mov	sp, r7
 810fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fc12:	4770      	bx	lr
 810fc14:	1000afb0 	.word	0x1000afb0
 810fc18:	1000b018 	.word	0x1000b018

0810fc1c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 810fc1c:	b480      	push	{r7}
 810fc1e:	b083      	sub	sp, #12
 810fc20:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 810fc22:	4b05      	ldr	r3, [pc, #20]	@ (810fc38 <xTaskGetCurrentTaskHandle+0x1c>)
 810fc24:	681b      	ldr	r3, [r3, #0]
 810fc26:	607b      	str	r3, [r7, #4]

		return xReturn;
 810fc28:	687b      	ldr	r3, [r7, #4]
	}
 810fc2a:	4618      	mov	r0, r3
 810fc2c:	370c      	adds	r7, #12
 810fc2e:	46bd      	mov	sp, r7
 810fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fc34:	4770      	bx	lr
 810fc36:	bf00      	nop
 810fc38:	1000ab24 	.word	0x1000ab24

0810fc3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810fc3c:	b480      	push	{r7}
 810fc3e:	b083      	sub	sp, #12
 810fc40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810fc42:	4b0b      	ldr	r3, [pc, #44]	@ (810fc70 <xTaskGetSchedulerState+0x34>)
 810fc44:	681b      	ldr	r3, [r3, #0]
 810fc46:	2b00      	cmp	r3, #0
 810fc48:	d102      	bne.n	810fc50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810fc4a:	2301      	movs	r3, #1
 810fc4c:	607b      	str	r3, [r7, #4]
 810fc4e:	e008      	b.n	810fc62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810fc50:	4b08      	ldr	r3, [pc, #32]	@ (810fc74 <xTaskGetSchedulerState+0x38>)
 810fc52:	681b      	ldr	r3, [r3, #0]
 810fc54:	2b00      	cmp	r3, #0
 810fc56:	d102      	bne.n	810fc5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810fc58:	2302      	movs	r3, #2
 810fc5a:	607b      	str	r3, [r7, #4]
 810fc5c:	e001      	b.n	810fc62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810fc5e:	2300      	movs	r3, #0
 810fc60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810fc62:	687b      	ldr	r3, [r7, #4]
	}
 810fc64:	4618      	mov	r0, r3
 810fc66:	370c      	adds	r7, #12
 810fc68:	46bd      	mov	sp, r7
 810fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fc6e:	4770      	bx	lr
 810fc70:	1000b004 	.word	0x1000b004
 810fc74:	1000b020 	.word	0x1000b020

0810fc78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810fc78:	b580      	push	{r7, lr}
 810fc7a:	b084      	sub	sp, #16
 810fc7c:	af00      	add	r7, sp, #0
 810fc7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810fc80:	687b      	ldr	r3, [r7, #4]
 810fc82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810fc84:	2300      	movs	r3, #0
 810fc86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810fc88:	687b      	ldr	r3, [r7, #4]
 810fc8a:	2b00      	cmp	r3, #0
 810fc8c:	d051      	beq.n	810fd32 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810fc8e:	68bb      	ldr	r3, [r7, #8]
 810fc90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fc92:	4b2a      	ldr	r3, [pc, #168]	@ (810fd3c <xTaskPriorityInherit+0xc4>)
 810fc94:	681b      	ldr	r3, [r3, #0]
 810fc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fc98:	429a      	cmp	r2, r3
 810fc9a:	d241      	bcs.n	810fd20 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810fc9c:	68bb      	ldr	r3, [r7, #8]
 810fc9e:	699b      	ldr	r3, [r3, #24]
 810fca0:	2b00      	cmp	r3, #0
 810fca2:	db06      	blt.n	810fcb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810fca4:	4b25      	ldr	r3, [pc, #148]	@ (810fd3c <xTaskPriorityInherit+0xc4>)
 810fca6:	681b      	ldr	r3, [r3, #0]
 810fca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fcaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810fcae:	68bb      	ldr	r3, [r7, #8]
 810fcb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810fcb2:	68bb      	ldr	r3, [r7, #8]
 810fcb4:	6959      	ldr	r1, [r3, #20]
 810fcb6:	68bb      	ldr	r3, [r7, #8]
 810fcb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fcba:	4613      	mov	r3, r2
 810fcbc:	009b      	lsls	r3, r3, #2
 810fcbe:	4413      	add	r3, r2
 810fcc0:	009b      	lsls	r3, r3, #2
 810fcc2:	4a1f      	ldr	r2, [pc, #124]	@ (810fd40 <xTaskPriorityInherit+0xc8>)
 810fcc4:	4413      	add	r3, r2
 810fcc6:	4299      	cmp	r1, r3
 810fcc8:	d122      	bne.n	810fd10 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810fcca:	68bb      	ldr	r3, [r7, #8]
 810fccc:	3304      	adds	r3, #4
 810fcce:	4618      	mov	r0, r3
 810fcd0:	f7fd f984 	bl	810cfdc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810fcd4:	4b19      	ldr	r3, [pc, #100]	@ (810fd3c <xTaskPriorityInherit+0xc4>)
 810fcd6:	681b      	ldr	r3, [r3, #0]
 810fcd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fcda:	68bb      	ldr	r3, [r7, #8]
 810fcdc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810fcde:	68bb      	ldr	r3, [r7, #8]
 810fce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fce2:	4b18      	ldr	r3, [pc, #96]	@ (810fd44 <xTaskPriorityInherit+0xcc>)
 810fce4:	681b      	ldr	r3, [r3, #0]
 810fce6:	429a      	cmp	r2, r3
 810fce8:	d903      	bls.n	810fcf2 <xTaskPriorityInherit+0x7a>
 810fcea:	68bb      	ldr	r3, [r7, #8]
 810fcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fcee:	4a15      	ldr	r2, [pc, #84]	@ (810fd44 <xTaskPriorityInherit+0xcc>)
 810fcf0:	6013      	str	r3, [r2, #0]
 810fcf2:	68bb      	ldr	r3, [r7, #8]
 810fcf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fcf6:	4613      	mov	r3, r2
 810fcf8:	009b      	lsls	r3, r3, #2
 810fcfa:	4413      	add	r3, r2
 810fcfc:	009b      	lsls	r3, r3, #2
 810fcfe:	4a10      	ldr	r2, [pc, #64]	@ (810fd40 <xTaskPriorityInherit+0xc8>)
 810fd00:	441a      	add	r2, r3
 810fd02:	68bb      	ldr	r3, [r7, #8]
 810fd04:	3304      	adds	r3, #4
 810fd06:	4619      	mov	r1, r3
 810fd08:	4610      	mov	r0, r2
 810fd0a:	f7fd f90a 	bl	810cf22 <vListInsertEnd>
 810fd0e:	e004      	b.n	810fd1a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810fd10:	4b0a      	ldr	r3, [pc, #40]	@ (810fd3c <xTaskPriorityInherit+0xc4>)
 810fd12:	681b      	ldr	r3, [r3, #0]
 810fd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fd16:	68bb      	ldr	r3, [r7, #8]
 810fd18:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810fd1a:	2301      	movs	r3, #1
 810fd1c:	60fb      	str	r3, [r7, #12]
 810fd1e:	e008      	b.n	810fd32 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810fd20:	68bb      	ldr	r3, [r7, #8]
 810fd22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810fd24:	4b05      	ldr	r3, [pc, #20]	@ (810fd3c <xTaskPriorityInherit+0xc4>)
 810fd26:	681b      	ldr	r3, [r3, #0]
 810fd28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fd2a:	429a      	cmp	r2, r3
 810fd2c:	d201      	bcs.n	810fd32 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810fd2e:	2301      	movs	r3, #1
 810fd30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810fd32:	68fb      	ldr	r3, [r7, #12]
	}
 810fd34:	4618      	mov	r0, r3
 810fd36:	3710      	adds	r7, #16
 810fd38:	46bd      	mov	sp, r7
 810fd3a:	bd80      	pop	{r7, pc}
 810fd3c:	1000ab24 	.word	0x1000ab24
 810fd40:	1000ab28 	.word	0x1000ab28
 810fd44:	1000b000 	.word	0x1000b000

0810fd48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810fd48:	b580      	push	{r7, lr}
 810fd4a:	b086      	sub	sp, #24
 810fd4c:	af00      	add	r7, sp, #0
 810fd4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810fd50:	687b      	ldr	r3, [r7, #4]
 810fd52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810fd54:	2300      	movs	r3, #0
 810fd56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810fd58:	687b      	ldr	r3, [r7, #4]
 810fd5a:	2b00      	cmp	r3, #0
 810fd5c:	d058      	beq.n	810fe10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810fd5e:	4b2f      	ldr	r3, [pc, #188]	@ (810fe1c <xTaskPriorityDisinherit+0xd4>)
 810fd60:	681b      	ldr	r3, [r3, #0]
 810fd62:	693a      	ldr	r2, [r7, #16]
 810fd64:	429a      	cmp	r2, r3
 810fd66:	d00b      	beq.n	810fd80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810fd68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fd6c:	f383 8811 	msr	BASEPRI, r3
 810fd70:	f3bf 8f6f 	isb	sy
 810fd74:	f3bf 8f4f 	dsb	sy
 810fd78:	60fb      	str	r3, [r7, #12]
}
 810fd7a:	bf00      	nop
 810fd7c:	bf00      	nop
 810fd7e:	e7fd      	b.n	810fd7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810fd80:	693b      	ldr	r3, [r7, #16]
 810fd82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fd84:	2b00      	cmp	r3, #0
 810fd86:	d10b      	bne.n	810fda0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810fd88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fd8c:	f383 8811 	msr	BASEPRI, r3
 810fd90:	f3bf 8f6f 	isb	sy
 810fd94:	f3bf 8f4f 	dsb	sy
 810fd98:	60bb      	str	r3, [r7, #8]
}
 810fd9a:	bf00      	nop
 810fd9c:	bf00      	nop
 810fd9e:	e7fd      	b.n	810fd9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810fda0:	693b      	ldr	r3, [r7, #16]
 810fda2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fda4:	1e5a      	subs	r2, r3, #1
 810fda6:	693b      	ldr	r3, [r7, #16]
 810fda8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810fdaa:	693b      	ldr	r3, [r7, #16]
 810fdac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fdae:	693b      	ldr	r3, [r7, #16]
 810fdb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810fdb2:	429a      	cmp	r2, r3
 810fdb4:	d02c      	beq.n	810fe10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810fdb6:	693b      	ldr	r3, [r7, #16]
 810fdb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fdba:	2b00      	cmp	r3, #0
 810fdbc:	d128      	bne.n	810fe10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810fdbe:	693b      	ldr	r3, [r7, #16]
 810fdc0:	3304      	adds	r3, #4
 810fdc2:	4618      	mov	r0, r3
 810fdc4:	f7fd f90a 	bl	810cfdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810fdc8:	693b      	ldr	r3, [r7, #16]
 810fdca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810fdcc:	693b      	ldr	r3, [r7, #16]
 810fdce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810fdd0:	693b      	ldr	r3, [r7, #16]
 810fdd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fdd4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810fdd8:	693b      	ldr	r3, [r7, #16]
 810fdda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810fddc:	693b      	ldr	r3, [r7, #16]
 810fdde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fde0:	4b0f      	ldr	r3, [pc, #60]	@ (810fe20 <xTaskPriorityDisinherit+0xd8>)
 810fde2:	681b      	ldr	r3, [r3, #0]
 810fde4:	429a      	cmp	r2, r3
 810fde6:	d903      	bls.n	810fdf0 <xTaskPriorityDisinherit+0xa8>
 810fde8:	693b      	ldr	r3, [r7, #16]
 810fdea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fdec:	4a0c      	ldr	r2, [pc, #48]	@ (810fe20 <xTaskPriorityDisinherit+0xd8>)
 810fdee:	6013      	str	r3, [r2, #0]
 810fdf0:	693b      	ldr	r3, [r7, #16]
 810fdf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fdf4:	4613      	mov	r3, r2
 810fdf6:	009b      	lsls	r3, r3, #2
 810fdf8:	4413      	add	r3, r2
 810fdfa:	009b      	lsls	r3, r3, #2
 810fdfc:	4a09      	ldr	r2, [pc, #36]	@ (810fe24 <xTaskPriorityDisinherit+0xdc>)
 810fdfe:	441a      	add	r2, r3
 810fe00:	693b      	ldr	r3, [r7, #16]
 810fe02:	3304      	adds	r3, #4
 810fe04:	4619      	mov	r1, r3
 810fe06:	4610      	mov	r0, r2
 810fe08:	f7fd f88b 	bl	810cf22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810fe0c:	2301      	movs	r3, #1
 810fe0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810fe10:	697b      	ldr	r3, [r7, #20]
	}
 810fe12:	4618      	mov	r0, r3
 810fe14:	3718      	adds	r7, #24
 810fe16:	46bd      	mov	sp, r7
 810fe18:	bd80      	pop	{r7, pc}
 810fe1a:	bf00      	nop
 810fe1c:	1000ab24 	.word	0x1000ab24
 810fe20:	1000b000 	.word	0x1000b000
 810fe24:	1000ab28 	.word	0x1000ab28

0810fe28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810fe28:	b580      	push	{r7, lr}
 810fe2a:	b088      	sub	sp, #32
 810fe2c:	af00      	add	r7, sp, #0
 810fe2e:	6078      	str	r0, [r7, #4]
 810fe30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810fe32:	687b      	ldr	r3, [r7, #4]
 810fe34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810fe36:	2301      	movs	r3, #1
 810fe38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810fe3a:	687b      	ldr	r3, [r7, #4]
 810fe3c:	2b00      	cmp	r3, #0
 810fe3e:	d06c      	beq.n	810ff1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810fe40:	69bb      	ldr	r3, [r7, #24]
 810fe42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fe44:	2b00      	cmp	r3, #0
 810fe46:	d10b      	bne.n	810fe60 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 810fe48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fe4c:	f383 8811 	msr	BASEPRI, r3
 810fe50:	f3bf 8f6f 	isb	sy
 810fe54:	f3bf 8f4f 	dsb	sy
 810fe58:	60fb      	str	r3, [r7, #12]
}
 810fe5a:	bf00      	nop
 810fe5c:	bf00      	nop
 810fe5e:	e7fd      	b.n	810fe5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810fe60:	69bb      	ldr	r3, [r7, #24]
 810fe62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810fe64:	683a      	ldr	r2, [r7, #0]
 810fe66:	429a      	cmp	r2, r3
 810fe68:	d902      	bls.n	810fe70 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810fe6a:	683b      	ldr	r3, [r7, #0]
 810fe6c:	61fb      	str	r3, [r7, #28]
 810fe6e:	e002      	b.n	810fe76 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810fe70:	69bb      	ldr	r3, [r7, #24]
 810fe72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810fe74:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810fe76:	69bb      	ldr	r3, [r7, #24]
 810fe78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fe7a:	69fa      	ldr	r2, [r7, #28]
 810fe7c:	429a      	cmp	r2, r3
 810fe7e:	d04c      	beq.n	810ff1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810fe80:	69bb      	ldr	r3, [r7, #24]
 810fe82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fe84:	697a      	ldr	r2, [r7, #20]
 810fe86:	429a      	cmp	r2, r3
 810fe88:	d147      	bne.n	810ff1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810fe8a:	4b26      	ldr	r3, [pc, #152]	@ (810ff24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 810fe8c:	681b      	ldr	r3, [r3, #0]
 810fe8e:	69ba      	ldr	r2, [r7, #24]
 810fe90:	429a      	cmp	r2, r3
 810fe92:	d10b      	bne.n	810feac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 810fe94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fe98:	f383 8811 	msr	BASEPRI, r3
 810fe9c:	f3bf 8f6f 	isb	sy
 810fea0:	f3bf 8f4f 	dsb	sy
 810fea4:	60bb      	str	r3, [r7, #8]
}
 810fea6:	bf00      	nop
 810fea8:	bf00      	nop
 810feaa:	e7fd      	b.n	810fea8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810feac:	69bb      	ldr	r3, [r7, #24]
 810feae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810feb0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810feb2:	69bb      	ldr	r3, [r7, #24]
 810feb4:	69fa      	ldr	r2, [r7, #28]
 810feb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810feb8:	69bb      	ldr	r3, [r7, #24]
 810feba:	699b      	ldr	r3, [r3, #24]
 810febc:	2b00      	cmp	r3, #0
 810febe:	db04      	blt.n	810feca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810fec0:	69fb      	ldr	r3, [r7, #28]
 810fec2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810fec6:	69bb      	ldr	r3, [r7, #24]
 810fec8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810feca:	69bb      	ldr	r3, [r7, #24]
 810fecc:	6959      	ldr	r1, [r3, #20]
 810fece:	693a      	ldr	r2, [r7, #16]
 810fed0:	4613      	mov	r3, r2
 810fed2:	009b      	lsls	r3, r3, #2
 810fed4:	4413      	add	r3, r2
 810fed6:	009b      	lsls	r3, r3, #2
 810fed8:	4a13      	ldr	r2, [pc, #76]	@ (810ff28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810feda:	4413      	add	r3, r2
 810fedc:	4299      	cmp	r1, r3
 810fede:	d11c      	bne.n	810ff1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810fee0:	69bb      	ldr	r3, [r7, #24]
 810fee2:	3304      	adds	r3, #4
 810fee4:	4618      	mov	r0, r3
 810fee6:	f7fd f879 	bl	810cfdc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810feea:	69bb      	ldr	r3, [r7, #24]
 810feec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810feee:	4b0f      	ldr	r3, [pc, #60]	@ (810ff2c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810fef0:	681b      	ldr	r3, [r3, #0]
 810fef2:	429a      	cmp	r2, r3
 810fef4:	d903      	bls.n	810fefe <vTaskPriorityDisinheritAfterTimeout+0xd6>
 810fef6:	69bb      	ldr	r3, [r7, #24]
 810fef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fefa:	4a0c      	ldr	r2, [pc, #48]	@ (810ff2c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810fefc:	6013      	str	r3, [r2, #0]
 810fefe:	69bb      	ldr	r3, [r7, #24]
 810ff00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ff02:	4613      	mov	r3, r2
 810ff04:	009b      	lsls	r3, r3, #2
 810ff06:	4413      	add	r3, r2
 810ff08:	009b      	lsls	r3, r3, #2
 810ff0a:	4a07      	ldr	r2, [pc, #28]	@ (810ff28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810ff0c:	441a      	add	r2, r3
 810ff0e:	69bb      	ldr	r3, [r7, #24]
 810ff10:	3304      	adds	r3, #4
 810ff12:	4619      	mov	r1, r3
 810ff14:	4610      	mov	r0, r2
 810ff16:	f7fd f804 	bl	810cf22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810ff1a:	bf00      	nop
 810ff1c:	3720      	adds	r7, #32
 810ff1e:	46bd      	mov	sp, r7
 810ff20:	bd80      	pop	{r7, pc}
 810ff22:	bf00      	nop
 810ff24:	1000ab24 	.word	0x1000ab24
 810ff28:	1000ab28 	.word	0x1000ab28
 810ff2c:	1000b000 	.word	0x1000b000

0810ff30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810ff30:	b480      	push	{r7}
 810ff32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810ff34:	4b07      	ldr	r3, [pc, #28]	@ (810ff54 <pvTaskIncrementMutexHeldCount+0x24>)
 810ff36:	681b      	ldr	r3, [r3, #0]
 810ff38:	2b00      	cmp	r3, #0
 810ff3a:	d004      	beq.n	810ff46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810ff3c:	4b05      	ldr	r3, [pc, #20]	@ (810ff54 <pvTaskIncrementMutexHeldCount+0x24>)
 810ff3e:	681b      	ldr	r3, [r3, #0]
 810ff40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810ff42:	3201      	adds	r2, #1
 810ff44:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 810ff46:	4b03      	ldr	r3, [pc, #12]	@ (810ff54 <pvTaskIncrementMutexHeldCount+0x24>)
 810ff48:	681b      	ldr	r3, [r3, #0]
	}
 810ff4a:	4618      	mov	r0, r3
 810ff4c:	46bd      	mov	sp, r7
 810ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ff52:	4770      	bx	lr
 810ff54:	1000ab24 	.word	0x1000ab24

0810ff58 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 810ff58:	b580      	push	{r7, lr}
 810ff5a:	b086      	sub	sp, #24
 810ff5c:	af00      	add	r7, sp, #0
 810ff5e:	60f8      	str	r0, [r7, #12]
 810ff60:	60b9      	str	r1, [r7, #8]
 810ff62:	607a      	str	r2, [r7, #4]
 810ff64:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 810ff66:	f7fd f997 	bl	810d298 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810ff6a:	4b29      	ldr	r3, [pc, #164]	@ (8110010 <xTaskNotifyWait+0xb8>)
 810ff6c:	681b      	ldr	r3, [r3, #0]
 810ff6e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810ff72:	b2db      	uxtb	r3, r3
 810ff74:	2b02      	cmp	r3, #2
 810ff76:	d01c      	beq.n	810ffb2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 810ff78:	4b25      	ldr	r3, [pc, #148]	@ (8110010 <xTaskNotifyWait+0xb8>)
 810ff7a:	681b      	ldr	r3, [r3, #0]
 810ff7c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 810ff80:	68fa      	ldr	r2, [r7, #12]
 810ff82:	43d2      	mvns	r2, r2
 810ff84:	400a      	ands	r2, r1
 810ff86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 810ff8a:	4b21      	ldr	r3, [pc, #132]	@ (8110010 <xTaskNotifyWait+0xb8>)
 810ff8c:	681b      	ldr	r3, [r3, #0]
 810ff8e:	2201      	movs	r2, #1
 810ff90:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 810ff94:	683b      	ldr	r3, [r7, #0]
 810ff96:	2b00      	cmp	r3, #0
 810ff98:	d00b      	beq.n	810ffb2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810ff9a:	2101      	movs	r1, #1
 810ff9c:	6838      	ldr	r0, [r7, #0]
 810ff9e:	f000 f947 	bl	8110230 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 810ffa2:	4b1c      	ldr	r3, [pc, #112]	@ (8110014 <xTaskNotifyWait+0xbc>)
 810ffa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ffa8:	601a      	str	r2, [r3, #0]
 810ffaa:	f3bf 8f4f 	dsb	sy
 810ffae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810ffb2:	f7fd f9a3 	bl	810d2fc <vPortExitCritical>

		taskENTER_CRITICAL();
 810ffb6:	f7fd f96f 	bl	810d298 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 810ffba:	687b      	ldr	r3, [r7, #4]
 810ffbc:	2b00      	cmp	r3, #0
 810ffbe:	d005      	beq.n	810ffcc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 810ffc0:	4b13      	ldr	r3, [pc, #76]	@ (8110010 <xTaskNotifyWait+0xb8>)
 810ffc2:	681b      	ldr	r3, [r3, #0]
 810ffc4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 810ffc8:	687b      	ldr	r3, [r7, #4]
 810ffca:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810ffcc:	4b10      	ldr	r3, [pc, #64]	@ (8110010 <xTaskNotifyWait+0xb8>)
 810ffce:	681b      	ldr	r3, [r3, #0]
 810ffd0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810ffd4:	b2db      	uxtb	r3, r3
 810ffd6:	2b02      	cmp	r3, #2
 810ffd8:	d002      	beq.n	810ffe0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 810ffda:	2300      	movs	r3, #0
 810ffdc:	617b      	str	r3, [r7, #20]
 810ffde:	e00a      	b.n	810fff6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 810ffe0:	4b0b      	ldr	r3, [pc, #44]	@ (8110010 <xTaskNotifyWait+0xb8>)
 810ffe2:	681b      	ldr	r3, [r3, #0]
 810ffe4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 810ffe8:	68ba      	ldr	r2, [r7, #8]
 810ffea:	43d2      	mvns	r2, r2
 810ffec:	400a      	ands	r2, r1
 810ffee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 810fff2:	2301      	movs	r3, #1
 810fff4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810fff6:	4b06      	ldr	r3, [pc, #24]	@ (8110010 <xTaskNotifyWait+0xb8>)
 810fff8:	681b      	ldr	r3, [r3, #0]
 810fffa:	2200      	movs	r2, #0
 810fffc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8110000:	f7fd f97c 	bl	810d2fc <vPortExitCritical>

		return xReturn;
 8110004:	697b      	ldr	r3, [r7, #20]
	}
 8110006:	4618      	mov	r0, r3
 8110008:	3718      	adds	r7, #24
 811000a:	46bd      	mov	sp, r7
 811000c:	bd80      	pop	{r7, pc}
 811000e:	bf00      	nop
 8110010:	1000ab24 	.word	0x1000ab24
 8110014:	e000ed04 	.word	0xe000ed04

08110018 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8110018:	b580      	push	{r7, lr}
 811001a:	b08e      	sub	sp, #56	@ 0x38
 811001c:	af00      	add	r7, sp, #0
 811001e:	60f8      	str	r0, [r7, #12]
 8110020:	60b9      	str	r1, [r7, #8]
 8110022:	603b      	str	r3, [r7, #0]
 8110024:	4613      	mov	r3, r2
 8110026:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8110028:	2301      	movs	r3, #1
 811002a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 811002c:	68fb      	ldr	r3, [r7, #12]
 811002e:	2b00      	cmp	r3, #0
 8110030:	d10b      	bne.n	811004a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8110032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110036:	f383 8811 	msr	BASEPRI, r3
 811003a:	f3bf 8f6f 	isb	sy
 811003e:	f3bf 8f4f 	dsb	sy
 8110042:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8110044:	bf00      	nop
 8110046:	bf00      	nop
 8110048:	e7fd      	b.n	8110046 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 811004a:	f7fd fa05 	bl	810d458 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 811004e:	68fb      	ldr	r3, [r7, #12]
 8110050:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8110052:	f3ef 8211 	mrs	r2, BASEPRI
 8110056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811005a:	f383 8811 	msr	BASEPRI, r3
 811005e:	f3bf 8f6f 	isb	sy
 8110062:	f3bf 8f4f 	dsb	sy
 8110066:	623a      	str	r2, [r7, #32]
 8110068:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 811006a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 811006c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 811006e:	683b      	ldr	r3, [r7, #0]
 8110070:	2b00      	cmp	r3, #0
 8110072:	d004      	beq.n	811007e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8110074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110076:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 811007a:	683b      	ldr	r3, [r7, #0]
 811007c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 811007e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110080:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8110084:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8110088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811008a:	2202      	movs	r2, #2
 811008c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8110090:	79fb      	ldrb	r3, [r7, #7]
 8110092:	2b04      	cmp	r3, #4
 8110094:	d82e      	bhi.n	81100f4 <xTaskGenericNotifyFromISR+0xdc>
 8110096:	a201      	add	r2, pc, #4	@ (adr r2, 811009c <xTaskGenericNotifyFromISR+0x84>)
 8110098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811009c:	08110119 	.word	0x08110119
 81100a0:	081100b1 	.word	0x081100b1
 81100a4:	081100c3 	.word	0x081100c3
 81100a8:	081100d3 	.word	0x081100d3
 81100ac:	081100dd 	.word	0x081100dd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 81100b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81100b6:	68bb      	ldr	r3, [r7, #8]
 81100b8:	431a      	orrs	r2, r3
 81100ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 81100c0:	e02d      	b.n	811011e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 81100c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81100c8:	1c5a      	adds	r2, r3, #1
 81100ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 81100d0:	e025      	b.n	811011e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 81100d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100d4:	68ba      	ldr	r2, [r7, #8]
 81100d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 81100da:	e020      	b.n	811011e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 81100dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 81100e0:	2b02      	cmp	r3, #2
 81100e2:	d004      	beq.n	81100ee <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 81100e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100e6:	68ba      	ldr	r2, [r7, #8]
 81100e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 81100ec:	e017      	b.n	811011e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 81100ee:	2300      	movs	r3, #0
 81100f0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 81100f2:	e014      	b.n	811011e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 81100f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81100fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 81100fe:	d00d      	beq.n	811011c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8110100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110104:	f383 8811 	msr	BASEPRI, r3
 8110108:	f3bf 8f6f 	isb	sy
 811010c:	f3bf 8f4f 	dsb	sy
 8110110:	61bb      	str	r3, [r7, #24]
}
 8110112:	bf00      	nop
 8110114:	bf00      	nop
 8110116:	e7fd      	b.n	8110114 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8110118:	bf00      	nop
 811011a:	e000      	b.n	811011e <xTaskGenericNotifyFromISR+0x106>
					break;
 811011c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 811011e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8110122:	2b01      	cmp	r3, #1
 8110124:	d147      	bne.n	81101b6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8110126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811012a:	2b00      	cmp	r3, #0
 811012c:	d00b      	beq.n	8110146 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 811012e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110132:	f383 8811 	msr	BASEPRI, r3
 8110136:	f3bf 8f6f 	isb	sy
 811013a:	f3bf 8f4f 	dsb	sy
 811013e:	617b      	str	r3, [r7, #20]
}
 8110140:	bf00      	nop
 8110142:	bf00      	nop
 8110144:	e7fd      	b.n	8110142 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8110146:	4b21      	ldr	r3, [pc, #132]	@ (81101cc <xTaskGenericNotifyFromISR+0x1b4>)
 8110148:	681b      	ldr	r3, [r3, #0]
 811014a:	2b00      	cmp	r3, #0
 811014c:	d11d      	bne.n	811018a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 811014e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110150:	3304      	adds	r3, #4
 8110152:	4618      	mov	r0, r3
 8110154:	f7fc ff42 	bl	810cfdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8110158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811015a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811015c:	4b1c      	ldr	r3, [pc, #112]	@ (81101d0 <xTaskGenericNotifyFromISR+0x1b8>)
 811015e:	681b      	ldr	r3, [r3, #0]
 8110160:	429a      	cmp	r2, r3
 8110162:	d903      	bls.n	811016c <xTaskGenericNotifyFromISR+0x154>
 8110164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110168:	4a19      	ldr	r2, [pc, #100]	@ (81101d0 <xTaskGenericNotifyFromISR+0x1b8>)
 811016a:	6013      	str	r3, [r2, #0]
 811016c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811016e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110170:	4613      	mov	r3, r2
 8110172:	009b      	lsls	r3, r3, #2
 8110174:	4413      	add	r3, r2
 8110176:	009b      	lsls	r3, r3, #2
 8110178:	4a16      	ldr	r2, [pc, #88]	@ (81101d4 <xTaskGenericNotifyFromISR+0x1bc>)
 811017a:	441a      	add	r2, r3
 811017c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811017e:	3304      	adds	r3, #4
 8110180:	4619      	mov	r1, r3
 8110182:	4610      	mov	r0, r2
 8110184:	f7fc fecd 	bl	810cf22 <vListInsertEnd>
 8110188:	e005      	b.n	8110196 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 811018a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811018c:	3318      	adds	r3, #24
 811018e:	4619      	mov	r1, r3
 8110190:	4811      	ldr	r0, [pc, #68]	@ (81101d8 <xTaskGenericNotifyFromISR+0x1c0>)
 8110192:	f7fc fec6 	bl	810cf22 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8110196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811019a:	4b10      	ldr	r3, [pc, #64]	@ (81101dc <xTaskGenericNotifyFromISR+0x1c4>)
 811019c:	681b      	ldr	r3, [r3, #0]
 811019e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81101a0:	429a      	cmp	r2, r3
 81101a2:	d908      	bls.n	81101b6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 81101a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81101a6:	2b00      	cmp	r3, #0
 81101a8:	d002      	beq.n	81101b0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 81101aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81101ac:	2201      	movs	r2, #1
 81101ae:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 81101b0:	4b0b      	ldr	r3, [pc, #44]	@ (81101e0 <xTaskGenericNotifyFromISR+0x1c8>)
 81101b2:	2201      	movs	r2, #1
 81101b4:	601a      	str	r2, [r3, #0]
 81101b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81101b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 81101ba:	693b      	ldr	r3, [r7, #16]
 81101bc:	f383 8811 	msr	BASEPRI, r3
}
 81101c0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 81101c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 81101c4:	4618      	mov	r0, r3
 81101c6:	3738      	adds	r7, #56	@ 0x38
 81101c8:	46bd      	mov	sp, r7
 81101ca:	bd80      	pop	{r7, pc}
 81101cc:	1000b020 	.word	0x1000b020
 81101d0:	1000b000 	.word	0x1000b000
 81101d4:	1000ab28 	.word	0x1000ab28
 81101d8:	1000afb8 	.word	0x1000afb8
 81101dc:	1000ab24 	.word	0x1000ab24
 81101e0:	1000b00c 	.word	0x1000b00c

081101e4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 81101e4:	b580      	push	{r7, lr}
 81101e6:	b084      	sub	sp, #16
 81101e8:	af00      	add	r7, sp, #0
 81101ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 81101ec:	687b      	ldr	r3, [r7, #4]
 81101ee:	2b00      	cmp	r3, #0
 81101f0:	d102      	bne.n	81101f8 <xTaskNotifyStateClear+0x14>
 81101f2:	4b0e      	ldr	r3, [pc, #56]	@ (811022c <xTaskNotifyStateClear+0x48>)
 81101f4:	681b      	ldr	r3, [r3, #0]
 81101f6:	e000      	b.n	81101fa <xTaskNotifyStateClear+0x16>
 81101f8:	687b      	ldr	r3, [r7, #4]
 81101fa:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 81101fc:	f7fd f84c 	bl	810d298 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8110200:	68bb      	ldr	r3, [r7, #8]
 8110202:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8110206:	b2db      	uxtb	r3, r3
 8110208:	2b02      	cmp	r3, #2
 811020a:	d106      	bne.n	811021a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 811020c:	68bb      	ldr	r3, [r7, #8]
 811020e:	2200      	movs	r2, #0
 8110210:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8110214:	2301      	movs	r3, #1
 8110216:	60fb      	str	r3, [r7, #12]
 8110218:	e001      	b.n	811021e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 811021a:	2300      	movs	r3, #0
 811021c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 811021e:	f7fd f86d 	bl	810d2fc <vPortExitCritical>

		return xReturn;
 8110222:	68fb      	ldr	r3, [r7, #12]
	}
 8110224:	4618      	mov	r0, r3
 8110226:	3710      	adds	r7, #16
 8110228:	46bd      	mov	sp, r7
 811022a:	bd80      	pop	{r7, pc}
 811022c:	1000ab24 	.word	0x1000ab24

08110230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8110230:	b580      	push	{r7, lr}
 8110232:	b084      	sub	sp, #16
 8110234:	af00      	add	r7, sp, #0
 8110236:	6078      	str	r0, [r7, #4]
 8110238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 811023a:	4b21      	ldr	r3, [pc, #132]	@ (81102c0 <prvAddCurrentTaskToDelayedList+0x90>)
 811023c:	681b      	ldr	r3, [r3, #0]
 811023e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8110240:	4b20      	ldr	r3, [pc, #128]	@ (81102c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8110242:	681b      	ldr	r3, [r3, #0]
 8110244:	3304      	adds	r3, #4
 8110246:	4618      	mov	r0, r3
 8110248:	f7fc fec8 	bl	810cfdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 811024c:	687b      	ldr	r3, [r7, #4]
 811024e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110252:	d10a      	bne.n	811026a <prvAddCurrentTaskToDelayedList+0x3a>
 8110254:	683b      	ldr	r3, [r7, #0]
 8110256:	2b00      	cmp	r3, #0
 8110258:	d007      	beq.n	811026a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 811025a:	4b1a      	ldr	r3, [pc, #104]	@ (81102c4 <prvAddCurrentTaskToDelayedList+0x94>)
 811025c:	681b      	ldr	r3, [r3, #0]
 811025e:	3304      	adds	r3, #4
 8110260:	4619      	mov	r1, r3
 8110262:	4819      	ldr	r0, [pc, #100]	@ (81102c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8110264:	f7fc fe5d 	bl	810cf22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8110268:	e026      	b.n	81102b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 811026a:	68fa      	ldr	r2, [r7, #12]
 811026c:	687b      	ldr	r3, [r7, #4]
 811026e:	4413      	add	r3, r2
 8110270:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8110272:	4b14      	ldr	r3, [pc, #80]	@ (81102c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8110274:	681b      	ldr	r3, [r3, #0]
 8110276:	68ba      	ldr	r2, [r7, #8]
 8110278:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 811027a:	68ba      	ldr	r2, [r7, #8]
 811027c:	68fb      	ldr	r3, [r7, #12]
 811027e:	429a      	cmp	r2, r3
 8110280:	d209      	bcs.n	8110296 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8110282:	4b12      	ldr	r3, [pc, #72]	@ (81102cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8110284:	681a      	ldr	r2, [r3, #0]
 8110286:	4b0f      	ldr	r3, [pc, #60]	@ (81102c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8110288:	681b      	ldr	r3, [r3, #0]
 811028a:	3304      	adds	r3, #4
 811028c:	4619      	mov	r1, r3
 811028e:	4610      	mov	r0, r2
 8110290:	f7fc fe6b 	bl	810cf6a <vListInsert>
}
 8110294:	e010      	b.n	81102b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8110296:	4b0e      	ldr	r3, [pc, #56]	@ (81102d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8110298:	681a      	ldr	r2, [r3, #0]
 811029a:	4b0a      	ldr	r3, [pc, #40]	@ (81102c4 <prvAddCurrentTaskToDelayedList+0x94>)
 811029c:	681b      	ldr	r3, [r3, #0]
 811029e:	3304      	adds	r3, #4
 81102a0:	4619      	mov	r1, r3
 81102a2:	4610      	mov	r0, r2
 81102a4:	f7fc fe61 	bl	810cf6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81102a8:	4b0a      	ldr	r3, [pc, #40]	@ (81102d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 81102aa:	681b      	ldr	r3, [r3, #0]
 81102ac:	68ba      	ldr	r2, [r7, #8]
 81102ae:	429a      	cmp	r2, r3
 81102b0:	d202      	bcs.n	81102b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 81102b2:	4a08      	ldr	r2, [pc, #32]	@ (81102d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 81102b4:	68bb      	ldr	r3, [r7, #8]
 81102b6:	6013      	str	r3, [r2, #0]
}
 81102b8:	bf00      	nop
 81102ba:	3710      	adds	r7, #16
 81102bc:	46bd      	mov	sp, r7
 81102be:	bd80      	pop	{r7, pc}
 81102c0:	1000affc 	.word	0x1000affc
 81102c4:	1000ab24 	.word	0x1000ab24
 81102c8:	1000afe4 	.word	0x1000afe4
 81102cc:	1000afb4 	.word	0x1000afb4
 81102d0:	1000afb0 	.word	0x1000afb0
 81102d4:	1000b018 	.word	0x1000b018

081102d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 81102d8:	b580      	push	{r7, lr}
 81102da:	b08a      	sub	sp, #40	@ 0x28
 81102dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 81102de:	2300      	movs	r3, #0
 81102e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 81102e2:	f000 fb13 	bl	811090c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 81102e6:	4b1d      	ldr	r3, [pc, #116]	@ (811035c <xTimerCreateTimerTask+0x84>)
 81102e8:	681b      	ldr	r3, [r3, #0]
 81102ea:	2b00      	cmp	r3, #0
 81102ec:	d021      	beq.n	8110332 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 81102ee:	2300      	movs	r3, #0
 81102f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 81102f2:	2300      	movs	r3, #0
 81102f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 81102f6:	1d3a      	adds	r2, r7, #4
 81102f8:	f107 0108 	add.w	r1, r7, #8
 81102fc:	f107 030c 	add.w	r3, r7, #12
 8110300:	4618      	mov	r0, r3
 8110302:	f7fc fbd9 	bl	810cab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8110306:	6879      	ldr	r1, [r7, #4]
 8110308:	68bb      	ldr	r3, [r7, #8]
 811030a:	68fa      	ldr	r2, [r7, #12]
 811030c:	9202      	str	r2, [sp, #8]
 811030e:	9301      	str	r3, [sp, #4]
 8110310:	2302      	movs	r3, #2
 8110312:	9300      	str	r3, [sp, #0]
 8110314:	2300      	movs	r3, #0
 8110316:	460a      	mov	r2, r1
 8110318:	4911      	ldr	r1, [pc, #68]	@ (8110360 <xTimerCreateTimerTask+0x88>)
 811031a:	4812      	ldr	r0, [pc, #72]	@ (8110364 <xTimerCreateTimerTask+0x8c>)
 811031c:	f7fe fdec 	bl	810eef8 <xTaskCreateStatic>
 8110320:	4603      	mov	r3, r0
 8110322:	4a11      	ldr	r2, [pc, #68]	@ (8110368 <xTimerCreateTimerTask+0x90>)
 8110324:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8110326:	4b10      	ldr	r3, [pc, #64]	@ (8110368 <xTimerCreateTimerTask+0x90>)
 8110328:	681b      	ldr	r3, [r3, #0]
 811032a:	2b00      	cmp	r3, #0
 811032c:	d001      	beq.n	8110332 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 811032e:	2301      	movs	r3, #1
 8110330:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8110332:	697b      	ldr	r3, [r7, #20]
 8110334:	2b00      	cmp	r3, #0
 8110336:	d10b      	bne.n	8110350 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8110338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811033c:	f383 8811 	msr	BASEPRI, r3
 8110340:	f3bf 8f6f 	isb	sy
 8110344:	f3bf 8f4f 	dsb	sy
 8110348:	613b      	str	r3, [r7, #16]
}
 811034a:	bf00      	nop
 811034c:	bf00      	nop
 811034e:	e7fd      	b.n	811034c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8110350:	697b      	ldr	r3, [r7, #20]
}
 8110352:	4618      	mov	r0, r3
 8110354:	3718      	adds	r7, #24
 8110356:	46bd      	mov	sp, r7
 8110358:	bd80      	pop	{r7, pc}
 811035a:	bf00      	nop
 811035c:	1000b054 	.word	0x1000b054
 8110360:	0811cd18 	.word	0x0811cd18
 8110364:	081104a5 	.word	0x081104a5
 8110368:	1000b058 	.word	0x1000b058

0811036c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 811036c:	b580      	push	{r7, lr}
 811036e:	b08a      	sub	sp, #40	@ 0x28
 8110370:	af00      	add	r7, sp, #0
 8110372:	60f8      	str	r0, [r7, #12]
 8110374:	60b9      	str	r1, [r7, #8]
 8110376:	607a      	str	r2, [r7, #4]
 8110378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 811037a:	2300      	movs	r3, #0
 811037c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 811037e:	68fb      	ldr	r3, [r7, #12]
 8110380:	2b00      	cmp	r3, #0
 8110382:	d10b      	bne.n	811039c <xTimerGenericCommand+0x30>
	__asm volatile
 8110384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110388:	f383 8811 	msr	BASEPRI, r3
 811038c:	f3bf 8f6f 	isb	sy
 8110390:	f3bf 8f4f 	dsb	sy
 8110394:	623b      	str	r3, [r7, #32]
}
 8110396:	bf00      	nop
 8110398:	bf00      	nop
 811039a:	e7fd      	b.n	8110398 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 811039c:	4b19      	ldr	r3, [pc, #100]	@ (8110404 <xTimerGenericCommand+0x98>)
 811039e:	681b      	ldr	r3, [r3, #0]
 81103a0:	2b00      	cmp	r3, #0
 81103a2:	d02a      	beq.n	81103fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 81103a4:	68bb      	ldr	r3, [r7, #8]
 81103a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 81103a8:	687b      	ldr	r3, [r7, #4]
 81103aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 81103ac:	68fb      	ldr	r3, [r7, #12]
 81103ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 81103b0:	68bb      	ldr	r3, [r7, #8]
 81103b2:	2b05      	cmp	r3, #5
 81103b4:	dc18      	bgt.n	81103e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 81103b6:	f7ff fc41 	bl	810fc3c <xTaskGetSchedulerState>
 81103ba:	4603      	mov	r3, r0
 81103bc:	2b02      	cmp	r3, #2
 81103be:	d109      	bne.n	81103d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 81103c0:	4b10      	ldr	r3, [pc, #64]	@ (8110404 <xTimerGenericCommand+0x98>)
 81103c2:	6818      	ldr	r0, [r3, #0]
 81103c4:	f107 0110 	add.w	r1, r7, #16
 81103c8:	2300      	movs	r3, #0
 81103ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81103cc:	f7fd faf2 	bl	810d9b4 <xQueueGenericSend>
 81103d0:	6278      	str	r0, [r7, #36]	@ 0x24
 81103d2:	e012      	b.n	81103fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 81103d4:	4b0b      	ldr	r3, [pc, #44]	@ (8110404 <xTimerGenericCommand+0x98>)
 81103d6:	6818      	ldr	r0, [r3, #0]
 81103d8:	f107 0110 	add.w	r1, r7, #16
 81103dc:	2300      	movs	r3, #0
 81103de:	2200      	movs	r2, #0
 81103e0:	f7fd fae8 	bl	810d9b4 <xQueueGenericSend>
 81103e4:	6278      	str	r0, [r7, #36]	@ 0x24
 81103e6:	e008      	b.n	81103fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 81103e8:	4b06      	ldr	r3, [pc, #24]	@ (8110404 <xTimerGenericCommand+0x98>)
 81103ea:	6818      	ldr	r0, [r3, #0]
 81103ec:	f107 0110 	add.w	r1, r7, #16
 81103f0:	2300      	movs	r3, #0
 81103f2:	683a      	ldr	r2, [r7, #0]
 81103f4:	f7fd fbe0 	bl	810dbb8 <xQueueGenericSendFromISR>
 81103f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 81103fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81103fc:	4618      	mov	r0, r3
 81103fe:	3728      	adds	r7, #40	@ 0x28
 8110400:	46bd      	mov	sp, r7
 8110402:	bd80      	pop	{r7, pc}
 8110404:	1000b054 	.word	0x1000b054

08110408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8110408:	b580      	push	{r7, lr}
 811040a:	b088      	sub	sp, #32
 811040c:	af02      	add	r7, sp, #8
 811040e:	6078      	str	r0, [r7, #4]
 8110410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110412:	4b23      	ldr	r3, [pc, #140]	@ (81104a0 <prvProcessExpiredTimer+0x98>)
 8110414:	681b      	ldr	r3, [r3, #0]
 8110416:	68db      	ldr	r3, [r3, #12]
 8110418:	68db      	ldr	r3, [r3, #12]
 811041a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811041c:	697b      	ldr	r3, [r7, #20]
 811041e:	3304      	adds	r3, #4
 8110420:	4618      	mov	r0, r3
 8110422:	f7fc fddb 	bl	810cfdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8110426:	697b      	ldr	r3, [r7, #20]
 8110428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811042c:	f003 0304 	and.w	r3, r3, #4
 8110430:	2b00      	cmp	r3, #0
 8110432:	d023      	beq.n	811047c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8110434:	697b      	ldr	r3, [r7, #20]
 8110436:	699a      	ldr	r2, [r3, #24]
 8110438:	687b      	ldr	r3, [r7, #4]
 811043a:	18d1      	adds	r1, r2, r3
 811043c:	687b      	ldr	r3, [r7, #4]
 811043e:	683a      	ldr	r2, [r7, #0]
 8110440:	6978      	ldr	r0, [r7, #20]
 8110442:	f000 f8d5 	bl	81105f0 <prvInsertTimerInActiveList>
 8110446:	4603      	mov	r3, r0
 8110448:	2b00      	cmp	r3, #0
 811044a:	d020      	beq.n	811048e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 811044c:	2300      	movs	r3, #0
 811044e:	9300      	str	r3, [sp, #0]
 8110450:	2300      	movs	r3, #0
 8110452:	687a      	ldr	r2, [r7, #4]
 8110454:	2100      	movs	r1, #0
 8110456:	6978      	ldr	r0, [r7, #20]
 8110458:	f7ff ff88 	bl	811036c <xTimerGenericCommand>
 811045c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 811045e:	693b      	ldr	r3, [r7, #16]
 8110460:	2b00      	cmp	r3, #0
 8110462:	d114      	bne.n	811048e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8110464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110468:	f383 8811 	msr	BASEPRI, r3
 811046c:	f3bf 8f6f 	isb	sy
 8110470:	f3bf 8f4f 	dsb	sy
 8110474:	60fb      	str	r3, [r7, #12]
}
 8110476:	bf00      	nop
 8110478:	bf00      	nop
 811047a:	e7fd      	b.n	8110478 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 811047c:	697b      	ldr	r3, [r7, #20]
 811047e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8110482:	f023 0301 	bic.w	r3, r3, #1
 8110486:	b2da      	uxtb	r2, r3
 8110488:	697b      	ldr	r3, [r7, #20]
 811048a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 811048e:	697b      	ldr	r3, [r7, #20]
 8110490:	6a1b      	ldr	r3, [r3, #32]
 8110492:	6978      	ldr	r0, [r7, #20]
 8110494:	4798      	blx	r3
}
 8110496:	bf00      	nop
 8110498:	3718      	adds	r7, #24
 811049a:	46bd      	mov	sp, r7
 811049c:	bd80      	pop	{r7, pc}
 811049e:	bf00      	nop
 81104a0:	1000b04c 	.word	0x1000b04c

081104a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 81104a4:	b580      	push	{r7, lr}
 81104a6:	b084      	sub	sp, #16
 81104a8:	af00      	add	r7, sp, #0
 81104aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81104ac:	f107 0308 	add.w	r3, r7, #8
 81104b0:	4618      	mov	r0, r3
 81104b2:	f000 f859 	bl	8110568 <prvGetNextExpireTime>
 81104b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 81104b8:	68bb      	ldr	r3, [r7, #8]
 81104ba:	4619      	mov	r1, r3
 81104bc:	68f8      	ldr	r0, [r7, #12]
 81104be:	f000 f805 	bl	81104cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 81104c2:	f000 f8d7 	bl	8110674 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81104c6:	bf00      	nop
 81104c8:	e7f0      	b.n	81104ac <prvTimerTask+0x8>
	...

081104cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 81104cc:	b580      	push	{r7, lr}
 81104ce:	b084      	sub	sp, #16
 81104d0:	af00      	add	r7, sp, #0
 81104d2:	6078      	str	r0, [r7, #4]
 81104d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 81104d6:	f7fe ff73 	bl	810f3c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 81104da:	f107 0308 	add.w	r3, r7, #8
 81104de:	4618      	mov	r0, r3
 81104e0:	f000 f866 	bl	81105b0 <prvSampleTimeNow>
 81104e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 81104e6:	68bb      	ldr	r3, [r7, #8]
 81104e8:	2b00      	cmp	r3, #0
 81104ea:	d130      	bne.n	811054e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 81104ec:	683b      	ldr	r3, [r7, #0]
 81104ee:	2b00      	cmp	r3, #0
 81104f0:	d10a      	bne.n	8110508 <prvProcessTimerOrBlockTask+0x3c>
 81104f2:	687a      	ldr	r2, [r7, #4]
 81104f4:	68fb      	ldr	r3, [r7, #12]
 81104f6:	429a      	cmp	r2, r3
 81104f8:	d806      	bhi.n	8110508 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 81104fa:	f7fe ff6f 	bl	810f3dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 81104fe:	68f9      	ldr	r1, [r7, #12]
 8110500:	6878      	ldr	r0, [r7, #4]
 8110502:	f7ff ff81 	bl	8110408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8110506:	e024      	b.n	8110552 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8110508:	683b      	ldr	r3, [r7, #0]
 811050a:	2b00      	cmp	r3, #0
 811050c:	d008      	beq.n	8110520 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 811050e:	4b13      	ldr	r3, [pc, #76]	@ (811055c <prvProcessTimerOrBlockTask+0x90>)
 8110510:	681b      	ldr	r3, [r3, #0]
 8110512:	681b      	ldr	r3, [r3, #0]
 8110514:	2b00      	cmp	r3, #0
 8110516:	d101      	bne.n	811051c <prvProcessTimerOrBlockTask+0x50>
 8110518:	2301      	movs	r3, #1
 811051a:	e000      	b.n	811051e <prvProcessTimerOrBlockTask+0x52>
 811051c:	2300      	movs	r3, #0
 811051e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8110520:	4b0f      	ldr	r3, [pc, #60]	@ (8110560 <prvProcessTimerOrBlockTask+0x94>)
 8110522:	6818      	ldr	r0, [r3, #0]
 8110524:	687a      	ldr	r2, [r7, #4]
 8110526:	68fb      	ldr	r3, [r7, #12]
 8110528:	1ad3      	subs	r3, r2, r3
 811052a:	683a      	ldr	r2, [r7, #0]
 811052c:	4619      	mov	r1, r3
 811052e:	f7fe f885 	bl	810e63c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8110532:	f7fe ff53 	bl	810f3dc <xTaskResumeAll>
 8110536:	4603      	mov	r3, r0
 8110538:	2b00      	cmp	r3, #0
 811053a:	d10a      	bne.n	8110552 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 811053c:	4b09      	ldr	r3, [pc, #36]	@ (8110564 <prvProcessTimerOrBlockTask+0x98>)
 811053e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8110542:	601a      	str	r2, [r3, #0]
 8110544:	f3bf 8f4f 	dsb	sy
 8110548:	f3bf 8f6f 	isb	sy
}
 811054c:	e001      	b.n	8110552 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 811054e:	f7fe ff45 	bl	810f3dc <xTaskResumeAll>
}
 8110552:	bf00      	nop
 8110554:	3710      	adds	r7, #16
 8110556:	46bd      	mov	sp, r7
 8110558:	bd80      	pop	{r7, pc}
 811055a:	bf00      	nop
 811055c:	1000b050 	.word	0x1000b050
 8110560:	1000b054 	.word	0x1000b054
 8110564:	e000ed04 	.word	0xe000ed04

08110568 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8110568:	b480      	push	{r7}
 811056a:	b085      	sub	sp, #20
 811056c:	af00      	add	r7, sp, #0
 811056e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8110570:	4b0e      	ldr	r3, [pc, #56]	@ (81105ac <prvGetNextExpireTime+0x44>)
 8110572:	681b      	ldr	r3, [r3, #0]
 8110574:	681b      	ldr	r3, [r3, #0]
 8110576:	2b00      	cmp	r3, #0
 8110578:	d101      	bne.n	811057e <prvGetNextExpireTime+0x16>
 811057a:	2201      	movs	r2, #1
 811057c:	e000      	b.n	8110580 <prvGetNextExpireTime+0x18>
 811057e:	2200      	movs	r2, #0
 8110580:	687b      	ldr	r3, [r7, #4]
 8110582:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8110584:	687b      	ldr	r3, [r7, #4]
 8110586:	681b      	ldr	r3, [r3, #0]
 8110588:	2b00      	cmp	r3, #0
 811058a:	d105      	bne.n	8110598 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 811058c:	4b07      	ldr	r3, [pc, #28]	@ (81105ac <prvGetNextExpireTime+0x44>)
 811058e:	681b      	ldr	r3, [r3, #0]
 8110590:	68db      	ldr	r3, [r3, #12]
 8110592:	681b      	ldr	r3, [r3, #0]
 8110594:	60fb      	str	r3, [r7, #12]
 8110596:	e001      	b.n	811059c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8110598:	2300      	movs	r3, #0
 811059a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 811059c:	68fb      	ldr	r3, [r7, #12]
}
 811059e:	4618      	mov	r0, r3
 81105a0:	3714      	adds	r7, #20
 81105a2:	46bd      	mov	sp, r7
 81105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81105a8:	4770      	bx	lr
 81105aa:	bf00      	nop
 81105ac:	1000b04c 	.word	0x1000b04c

081105b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 81105b0:	b580      	push	{r7, lr}
 81105b2:	b084      	sub	sp, #16
 81105b4:	af00      	add	r7, sp, #0
 81105b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 81105b8:	f7fe ffae 	bl	810f518 <xTaskGetTickCount>
 81105bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 81105be:	4b0b      	ldr	r3, [pc, #44]	@ (81105ec <prvSampleTimeNow+0x3c>)
 81105c0:	681b      	ldr	r3, [r3, #0]
 81105c2:	68fa      	ldr	r2, [r7, #12]
 81105c4:	429a      	cmp	r2, r3
 81105c6:	d205      	bcs.n	81105d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 81105c8:	f000 f93a 	bl	8110840 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 81105cc:	687b      	ldr	r3, [r7, #4]
 81105ce:	2201      	movs	r2, #1
 81105d0:	601a      	str	r2, [r3, #0]
 81105d2:	e002      	b.n	81105da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 81105d4:	687b      	ldr	r3, [r7, #4]
 81105d6:	2200      	movs	r2, #0
 81105d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 81105da:	4a04      	ldr	r2, [pc, #16]	@ (81105ec <prvSampleTimeNow+0x3c>)
 81105dc:	68fb      	ldr	r3, [r7, #12]
 81105de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 81105e0:	68fb      	ldr	r3, [r7, #12]
}
 81105e2:	4618      	mov	r0, r3
 81105e4:	3710      	adds	r7, #16
 81105e6:	46bd      	mov	sp, r7
 81105e8:	bd80      	pop	{r7, pc}
 81105ea:	bf00      	nop
 81105ec:	1000b05c 	.word	0x1000b05c

081105f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 81105f0:	b580      	push	{r7, lr}
 81105f2:	b086      	sub	sp, #24
 81105f4:	af00      	add	r7, sp, #0
 81105f6:	60f8      	str	r0, [r7, #12]
 81105f8:	60b9      	str	r1, [r7, #8]
 81105fa:	607a      	str	r2, [r7, #4]
 81105fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 81105fe:	2300      	movs	r3, #0
 8110600:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8110602:	68fb      	ldr	r3, [r7, #12]
 8110604:	68ba      	ldr	r2, [r7, #8]
 8110606:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8110608:	68fb      	ldr	r3, [r7, #12]
 811060a:	68fa      	ldr	r2, [r7, #12]
 811060c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 811060e:	68ba      	ldr	r2, [r7, #8]
 8110610:	687b      	ldr	r3, [r7, #4]
 8110612:	429a      	cmp	r2, r3
 8110614:	d812      	bhi.n	811063c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8110616:	687a      	ldr	r2, [r7, #4]
 8110618:	683b      	ldr	r3, [r7, #0]
 811061a:	1ad2      	subs	r2, r2, r3
 811061c:	68fb      	ldr	r3, [r7, #12]
 811061e:	699b      	ldr	r3, [r3, #24]
 8110620:	429a      	cmp	r2, r3
 8110622:	d302      	bcc.n	811062a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8110624:	2301      	movs	r3, #1
 8110626:	617b      	str	r3, [r7, #20]
 8110628:	e01b      	b.n	8110662 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 811062a:	4b10      	ldr	r3, [pc, #64]	@ (811066c <prvInsertTimerInActiveList+0x7c>)
 811062c:	681a      	ldr	r2, [r3, #0]
 811062e:	68fb      	ldr	r3, [r7, #12]
 8110630:	3304      	adds	r3, #4
 8110632:	4619      	mov	r1, r3
 8110634:	4610      	mov	r0, r2
 8110636:	f7fc fc98 	bl	810cf6a <vListInsert>
 811063a:	e012      	b.n	8110662 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 811063c:	687a      	ldr	r2, [r7, #4]
 811063e:	683b      	ldr	r3, [r7, #0]
 8110640:	429a      	cmp	r2, r3
 8110642:	d206      	bcs.n	8110652 <prvInsertTimerInActiveList+0x62>
 8110644:	68ba      	ldr	r2, [r7, #8]
 8110646:	683b      	ldr	r3, [r7, #0]
 8110648:	429a      	cmp	r2, r3
 811064a:	d302      	bcc.n	8110652 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 811064c:	2301      	movs	r3, #1
 811064e:	617b      	str	r3, [r7, #20]
 8110650:	e007      	b.n	8110662 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8110652:	4b07      	ldr	r3, [pc, #28]	@ (8110670 <prvInsertTimerInActiveList+0x80>)
 8110654:	681a      	ldr	r2, [r3, #0]
 8110656:	68fb      	ldr	r3, [r7, #12]
 8110658:	3304      	adds	r3, #4
 811065a:	4619      	mov	r1, r3
 811065c:	4610      	mov	r0, r2
 811065e:	f7fc fc84 	bl	810cf6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8110662:	697b      	ldr	r3, [r7, #20]
}
 8110664:	4618      	mov	r0, r3
 8110666:	3718      	adds	r7, #24
 8110668:	46bd      	mov	sp, r7
 811066a:	bd80      	pop	{r7, pc}
 811066c:	1000b050 	.word	0x1000b050
 8110670:	1000b04c 	.word	0x1000b04c

08110674 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8110674:	b580      	push	{r7, lr}
 8110676:	b08e      	sub	sp, #56	@ 0x38
 8110678:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 811067a:	e0ce      	b.n	811081a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 811067c:	687b      	ldr	r3, [r7, #4]
 811067e:	2b00      	cmp	r3, #0
 8110680:	da19      	bge.n	81106b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8110682:	1d3b      	adds	r3, r7, #4
 8110684:	3304      	adds	r3, #4
 8110686:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8110688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811068a:	2b00      	cmp	r3, #0
 811068c:	d10b      	bne.n	81106a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 811068e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110692:	f383 8811 	msr	BASEPRI, r3
 8110696:	f3bf 8f6f 	isb	sy
 811069a:	f3bf 8f4f 	dsb	sy
 811069e:	61fb      	str	r3, [r7, #28]
}
 81106a0:	bf00      	nop
 81106a2:	bf00      	nop
 81106a4:	e7fd      	b.n	81106a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 81106a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106a8:	681b      	ldr	r3, [r3, #0]
 81106aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81106ac:	6850      	ldr	r0, [r2, #4]
 81106ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81106b0:	6892      	ldr	r2, [r2, #8]
 81106b2:	4611      	mov	r1, r2
 81106b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 81106b6:	687b      	ldr	r3, [r7, #4]
 81106b8:	2b00      	cmp	r3, #0
 81106ba:	f2c0 80ae 	blt.w	811081a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 81106be:	68fb      	ldr	r3, [r7, #12]
 81106c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 81106c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81106c4:	695b      	ldr	r3, [r3, #20]
 81106c6:	2b00      	cmp	r3, #0
 81106c8:	d004      	beq.n	81106d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81106ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81106cc:	3304      	adds	r3, #4
 81106ce:	4618      	mov	r0, r3
 81106d0:	f7fc fc84 	bl	810cfdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 81106d4:	463b      	mov	r3, r7
 81106d6:	4618      	mov	r0, r3
 81106d8:	f7ff ff6a 	bl	81105b0 <prvSampleTimeNow>
 81106dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 81106de:	687b      	ldr	r3, [r7, #4]
 81106e0:	2b09      	cmp	r3, #9
 81106e2:	f200 8097 	bhi.w	8110814 <prvProcessReceivedCommands+0x1a0>
 81106e6:	a201      	add	r2, pc, #4	@ (adr r2, 81106ec <prvProcessReceivedCommands+0x78>)
 81106e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81106ec:	08110715 	.word	0x08110715
 81106f0:	08110715 	.word	0x08110715
 81106f4:	08110715 	.word	0x08110715
 81106f8:	0811078b 	.word	0x0811078b
 81106fc:	0811079f 	.word	0x0811079f
 8110700:	081107eb 	.word	0x081107eb
 8110704:	08110715 	.word	0x08110715
 8110708:	08110715 	.word	0x08110715
 811070c:	0811078b 	.word	0x0811078b
 8110710:	0811079f 	.word	0x0811079f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8110714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811071a:	f043 0301 	orr.w	r3, r3, #1
 811071e:	b2da      	uxtb	r2, r3
 8110720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8110726:	68ba      	ldr	r2, [r7, #8]
 8110728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811072a:	699b      	ldr	r3, [r3, #24]
 811072c:	18d1      	adds	r1, r2, r3
 811072e:	68bb      	ldr	r3, [r7, #8]
 8110730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110734:	f7ff ff5c 	bl	81105f0 <prvInsertTimerInActiveList>
 8110738:	4603      	mov	r3, r0
 811073a:	2b00      	cmp	r3, #0
 811073c:	d06c      	beq.n	8110818 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 811073e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110740:	6a1b      	ldr	r3, [r3, #32]
 8110742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110744:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8110746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811074c:	f003 0304 	and.w	r3, r3, #4
 8110750:	2b00      	cmp	r3, #0
 8110752:	d061      	beq.n	8110818 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8110754:	68ba      	ldr	r2, [r7, #8]
 8110756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110758:	699b      	ldr	r3, [r3, #24]
 811075a:	441a      	add	r2, r3
 811075c:	2300      	movs	r3, #0
 811075e:	9300      	str	r3, [sp, #0]
 8110760:	2300      	movs	r3, #0
 8110762:	2100      	movs	r1, #0
 8110764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110766:	f7ff fe01 	bl	811036c <xTimerGenericCommand>
 811076a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 811076c:	6a3b      	ldr	r3, [r7, #32]
 811076e:	2b00      	cmp	r3, #0
 8110770:	d152      	bne.n	8110818 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8110772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110776:	f383 8811 	msr	BASEPRI, r3
 811077a:	f3bf 8f6f 	isb	sy
 811077e:	f3bf 8f4f 	dsb	sy
 8110782:	61bb      	str	r3, [r7, #24]
}
 8110784:	bf00      	nop
 8110786:	bf00      	nop
 8110788:	e7fd      	b.n	8110786 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 811078a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811078c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8110790:	f023 0301 	bic.w	r3, r3, #1
 8110794:	b2da      	uxtb	r2, r3
 8110796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110798:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 811079c:	e03d      	b.n	811081a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 811079e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81107a4:	f043 0301 	orr.w	r3, r3, #1
 81107a8:	b2da      	uxtb	r2, r3
 81107aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 81107b0:	68ba      	ldr	r2, [r7, #8]
 81107b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 81107b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107b8:	699b      	ldr	r3, [r3, #24]
 81107ba:	2b00      	cmp	r3, #0
 81107bc:	d10b      	bne.n	81107d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 81107be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81107c2:	f383 8811 	msr	BASEPRI, r3
 81107c6:	f3bf 8f6f 	isb	sy
 81107ca:	f3bf 8f4f 	dsb	sy
 81107ce:	617b      	str	r3, [r7, #20]
}
 81107d0:	bf00      	nop
 81107d2:	bf00      	nop
 81107d4:	e7fd      	b.n	81107d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 81107d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107d8:	699a      	ldr	r2, [r3, #24]
 81107da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81107dc:	18d1      	adds	r1, r2, r3
 81107de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81107e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81107e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81107e4:	f7ff ff04 	bl	81105f0 <prvInsertTimerInActiveList>
					break;
 81107e8:	e017      	b.n	811081a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 81107ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81107f0:	f003 0302 	and.w	r3, r3, #2
 81107f4:	2b00      	cmp	r3, #0
 81107f6:	d103      	bne.n	8110800 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 81107f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81107fa:	f7fc fa45 	bl	810cc88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 81107fe:	e00c      	b.n	811081a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8110800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8110806:	f023 0301 	bic.w	r3, r3, #1
 811080a:	b2da      	uxtb	r2, r3
 811080c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811080e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8110812:	e002      	b.n	811081a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8110814:	bf00      	nop
 8110816:	e000      	b.n	811081a <prvProcessReceivedCommands+0x1a6>
					break;
 8110818:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 811081a:	4b08      	ldr	r3, [pc, #32]	@ (811083c <prvProcessReceivedCommands+0x1c8>)
 811081c:	681b      	ldr	r3, [r3, #0]
 811081e:	1d39      	adds	r1, r7, #4
 8110820:	2200      	movs	r2, #0
 8110822:	4618      	mov	r0, r3
 8110824:	f7fd faf6 	bl	810de14 <xQueueReceive>
 8110828:	4603      	mov	r3, r0
 811082a:	2b00      	cmp	r3, #0
 811082c:	f47f af26 	bne.w	811067c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8110830:	bf00      	nop
 8110832:	bf00      	nop
 8110834:	3730      	adds	r7, #48	@ 0x30
 8110836:	46bd      	mov	sp, r7
 8110838:	bd80      	pop	{r7, pc}
 811083a:	bf00      	nop
 811083c:	1000b054 	.word	0x1000b054

08110840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8110840:	b580      	push	{r7, lr}
 8110842:	b088      	sub	sp, #32
 8110844:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8110846:	e049      	b.n	81108dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8110848:	4b2e      	ldr	r3, [pc, #184]	@ (8110904 <prvSwitchTimerLists+0xc4>)
 811084a:	681b      	ldr	r3, [r3, #0]
 811084c:	68db      	ldr	r3, [r3, #12]
 811084e:	681b      	ldr	r3, [r3, #0]
 8110850:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110852:	4b2c      	ldr	r3, [pc, #176]	@ (8110904 <prvSwitchTimerLists+0xc4>)
 8110854:	681b      	ldr	r3, [r3, #0]
 8110856:	68db      	ldr	r3, [r3, #12]
 8110858:	68db      	ldr	r3, [r3, #12]
 811085a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811085c:	68fb      	ldr	r3, [r7, #12]
 811085e:	3304      	adds	r3, #4
 8110860:	4618      	mov	r0, r3
 8110862:	f7fc fbbb 	bl	810cfdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8110866:	68fb      	ldr	r3, [r7, #12]
 8110868:	6a1b      	ldr	r3, [r3, #32]
 811086a:	68f8      	ldr	r0, [r7, #12]
 811086c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 811086e:	68fb      	ldr	r3, [r7, #12]
 8110870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8110874:	f003 0304 	and.w	r3, r3, #4
 8110878:	2b00      	cmp	r3, #0
 811087a:	d02f      	beq.n	81108dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 811087c:	68fb      	ldr	r3, [r7, #12]
 811087e:	699b      	ldr	r3, [r3, #24]
 8110880:	693a      	ldr	r2, [r7, #16]
 8110882:	4413      	add	r3, r2
 8110884:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8110886:	68ba      	ldr	r2, [r7, #8]
 8110888:	693b      	ldr	r3, [r7, #16]
 811088a:	429a      	cmp	r2, r3
 811088c:	d90e      	bls.n	81108ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 811088e:	68fb      	ldr	r3, [r7, #12]
 8110890:	68ba      	ldr	r2, [r7, #8]
 8110892:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8110894:	68fb      	ldr	r3, [r7, #12]
 8110896:	68fa      	ldr	r2, [r7, #12]
 8110898:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 811089a:	4b1a      	ldr	r3, [pc, #104]	@ (8110904 <prvSwitchTimerLists+0xc4>)
 811089c:	681a      	ldr	r2, [r3, #0]
 811089e:	68fb      	ldr	r3, [r7, #12]
 81108a0:	3304      	adds	r3, #4
 81108a2:	4619      	mov	r1, r3
 81108a4:	4610      	mov	r0, r2
 81108a6:	f7fc fb60 	bl	810cf6a <vListInsert>
 81108aa:	e017      	b.n	81108dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81108ac:	2300      	movs	r3, #0
 81108ae:	9300      	str	r3, [sp, #0]
 81108b0:	2300      	movs	r3, #0
 81108b2:	693a      	ldr	r2, [r7, #16]
 81108b4:	2100      	movs	r1, #0
 81108b6:	68f8      	ldr	r0, [r7, #12]
 81108b8:	f7ff fd58 	bl	811036c <xTimerGenericCommand>
 81108bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 81108be:	687b      	ldr	r3, [r7, #4]
 81108c0:	2b00      	cmp	r3, #0
 81108c2:	d10b      	bne.n	81108dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 81108c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81108c8:	f383 8811 	msr	BASEPRI, r3
 81108cc:	f3bf 8f6f 	isb	sy
 81108d0:	f3bf 8f4f 	dsb	sy
 81108d4:	603b      	str	r3, [r7, #0]
}
 81108d6:	bf00      	nop
 81108d8:	bf00      	nop
 81108da:	e7fd      	b.n	81108d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81108dc:	4b09      	ldr	r3, [pc, #36]	@ (8110904 <prvSwitchTimerLists+0xc4>)
 81108de:	681b      	ldr	r3, [r3, #0]
 81108e0:	681b      	ldr	r3, [r3, #0]
 81108e2:	2b00      	cmp	r3, #0
 81108e4:	d1b0      	bne.n	8110848 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 81108e6:	4b07      	ldr	r3, [pc, #28]	@ (8110904 <prvSwitchTimerLists+0xc4>)
 81108e8:	681b      	ldr	r3, [r3, #0]
 81108ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 81108ec:	4b06      	ldr	r3, [pc, #24]	@ (8110908 <prvSwitchTimerLists+0xc8>)
 81108ee:	681b      	ldr	r3, [r3, #0]
 81108f0:	4a04      	ldr	r2, [pc, #16]	@ (8110904 <prvSwitchTimerLists+0xc4>)
 81108f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 81108f4:	4a04      	ldr	r2, [pc, #16]	@ (8110908 <prvSwitchTimerLists+0xc8>)
 81108f6:	697b      	ldr	r3, [r7, #20]
 81108f8:	6013      	str	r3, [r2, #0]
}
 81108fa:	bf00      	nop
 81108fc:	3718      	adds	r7, #24
 81108fe:	46bd      	mov	sp, r7
 8110900:	bd80      	pop	{r7, pc}
 8110902:	bf00      	nop
 8110904:	1000b04c 	.word	0x1000b04c
 8110908:	1000b050 	.word	0x1000b050

0811090c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 811090c:	b580      	push	{r7, lr}
 811090e:	b082      	sub	sp, #8
 8110910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8110912:	f7fc fcc1 	bl	810d298 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8110916:	4b15      	ldr	r3, [pc, #84]	@ (811096c <prvCheckForValidListAndQueue+0x60>)
 8110918:	681b      	ldr	r3, [r3, #0]
 811091a:	2b00      	cmp	r3, #0
 811091c:	d120      	bne.n	8110960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 811091e:	4814      	ldr	r0, [pc, #80]	@ (8110970 <prvCheckForValidListAndQueue+0x64>)
 8110920:	f7fc fad2 	bl	810cec8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8110924:	4813      	ldr	r0, [pc, #76]	@ (8110974 <prvCheckForValidListAndQueue+0x68>)
 8110926:	f7fc facf 	bl	810cec8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 811092a:	4b13      	ldr	r3, [pc, #76]	@ (8110978 <prvCheckForValidListAndQueue+0x6c>)
 811092c:	4a10      	ldr	r2, [pc, #64]	@ (8110970 <prvCheckForValidListAndQueue+0x64>)
 811092e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8110930:	4b12      	ldr	r3, [pc, #72]	@ (811097c <prvCheckForValidListAndQueue+0x70>)
 8110932:	4a10      	ldr	r2, [pc, #64]	@ (8110974 <prvCheckForValidListAndQueue+0x68>)
 8110934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8110936:	2300      	movs	r3, #0
 8110938:	9300      	str	r3, [sp, #0]
 811093a:	4b11      	ldr	r3, [pc, #68]	@ (8110980 <prvCheckForValidListAndQueue+0x74>)
 811093c:	4a11      	ldr	r2, [pc, #68]	@ (8110984 <prvCheckForValidListAndQueue+0x78>)
 811093e:	2110      	movs	r1, #16
 8110940:	200a      	movs	r0, #10
 8110942:	f7fc fe35 	bl	810d5b0 <xQueueGenericCreateStatic>
 8110946:	4603      	mov	r3, r0
 8110948:	4a08      	ldr	r2, [pc, #32]	@ (811096c <prvCheckForValidListAndQueue+0x60>)
 811094a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 811094c:	4b07      	ldr	r3, [pc, #28]	@ (811096c <prvCheckForValidListAndQueue+0x60>)
 811094e:	681b      	ldr	r3, [r3, #0]
 8110950:	2b00      	cmp	r3, #0
 8110952:	d005      	beq.n	8110960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8110954:	4b05      	ldr	r3, [pc, #20]	@ (811096c <prvCheckForValidListAndQueue+0x60>)
 8110956:	681b      	ldr	r3, [r3, #0]
 8110958:	490b      	ldr	r1, [pc, #44]	@ (8110988 <prvCheckForValidListAndQueue+0x7c>)
 811095a:	4618      	mov	r0, r3
 811095c:	f7fd fe1a 	bl	810e594 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8110960:	f7fc fccc 	bl	810d2fc <vPortExitCritical>
}
 8110964:	bf00      	nop
 8110966:	46bd      	mov	sp, r7
 8110968:	bd80      	pop	{r7, pc}
 811096a:	bf00      	nop
 811096c:	1000b054 	.word	0x1000b054
 8110970:	1000b024 	.word	0x1000b024
 8110974:	1000b038 	.word	0x1000b038
 8110978:	1000b04c 	.word	0x1000b04c
 811097c:	1000b050 	.word	0x1000b050
 8110980:	1000b100 	.word	0x1000b100
 8110984:	1000b060 	.word	0x1000b060
 8110988:	0811cd20 	.word	0x0811cd20

0811098c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 811098c:	b480      	push	{r7}
 811098e:	b083      	sub	sp, #12
 8110990:	af00      	add	r7, sp, #0
 8110992:	4603      	mov	r3, r0
 8110994:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8110996:	88fb      	ldrh	r3, [r7, #6]
 8110998:	021b      	lsls	r3, r3, #8
 811099a:	b21a      	sxth	r2, r3
 811099c:	88fb      	ldrh	r3, [r7, #6]
 811099e:	0a1b      	lsrs	r3, r3, #8
 81109a0:	b29b      	uxth	r3, r3
 81109a2:	b21b      	sxth	r3, r3
 81109a4:	4313      	orrs	r3, r2
 81109a6:	b21b      	sxth	r3, r3
 81109a8:	b29b      	uxth	r3, r3
}
 81109aa:	4618      	mov	r0, r3
 81109ac:	370c      	adds	r7, #12
 81109ae:	46bd      	mov	sp, r7
 81109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81109b4:	4770      	bx	lr

081109b6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 81109b6:	b480      	push	{r7}
 81109b8:	b083      	sub	sp, #12
 81109ba:	af00      	add	r7, sp, #0
 81109bc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 81109be:	687b      	ldr	r3, [r7, #4]
 81109c0:	061a      	lsls	r2, r3, #24
 81109c2:	687b      	ldr	r3, [r7, #4]
 81109c4:	021b      	lsls	r3, r3, #8
 81109c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81109ca:	431a      	orrs	r2, r3
 81109cc:	687b      	ldr	r3, [r7, #4]
 81109ce:	0a1b      	lsrs	r3, r3, #8
 81109d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 81109d4:	431a      	orrs	r2, r3
 81109d6:	687b      	ldr	r3, [r7, #4]
 81109d8:	0e1b      	lsrs	r3, r3, #24
 81109da:	4313      	orrs	r3, r2
}
 81109dc:	4618      	mov	r0, r3
 81109de:	370c      	adds	r7, #12
 81109e0:	46bd      	mov	sp, r7
 81109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81109e6:	4770      	bx	lr

081109e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 81109e8:	b580      	push	{r7, lr}
 81109ea:	b082      	sub	sp, #8
 81109ec:	af00      	add	r7, sp, #0
 81109ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 81109f0:	4915      	ldr	r1, [pc, #84]	@ (8110a48 <etharp_free_entry+0x60>)
 81109f2:	687a      	ldr	r2, [r7, #4]
 81109f4:	4613      	mov	r3, r2
 81109f6:	005b      	lsls	r3, r3, #1
 81109f8:	4413      	add	r3, r2
 81109fa:	00db      	lsls	r3, r3, #3
 81109fc:	440b      	add	r3, r1
 81109fe:	681b      	ldr	r3, [r3, #0]
 8110a00:	2b00      	cmp	r3, #0
 8110a02:	d013      	beq.n	8110a2c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8110a04:	4910      	ldr	r1, [pc, #64]	@ (8110a48 <etharp_free_entry+0x60>)
 8110a06:	687a      	ldr	r2, [r7, #4]
 8110a08:	4613      	mov	r3, r2
 8110a0a:	005b      	lsls	r3, r3, #1
 8110a0c:	4413      	add	r3, r2
 8110a0e:	00db      	lsls	r3, r3, #3
 8110a10:	440b      	add	r3, r1
 8110a12:	681b      	ldr	r3, [r3, #0]
 8110a14:	4618      	mov	r0, r3
 8110a16:	f003 ff3f 	bl	8114898 <pbuf_free>
    arp_table[i].q = NULL;
 8110a1a:	490b      	ldr	r1, [pc, #44]	@ (8110a48 <etharp_free_entry+0x60>)
 8110a1c:	687a      	ldr	r2, [r7, #4]
 8110a1e:	4613      	mov	r3, r2
 8110a20:	005b      	lsls	r3, r3, #1
 8110a22:	4413      	add	r3, r2
 8110a24:	00db      	lsls	r3, r3, #3
 8110a26:	440b      	add	r3, r1
 8110a28:	2200      	movs	r2, #0
 8110a2a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8110a2c:	4906      	ldr	r1, [pc, #24]	@ (8110a48 <etharp_free_entry+0x60>)
 8110a2e:	687a      	ldr	r2, [r7, #4]
 8110a30:	4613      	mov	r3, r2
 8110a32:	005b      	lsls	r3, r3, #1
 8110a34:	4413      	add	r3, r2
 8110a36:	00db      	lsls	r3, r3, #3
 8110a38:	440b      	add	r3, r1
 8110a3a:	3314      	adds	r3, #20
 8110a3c:	2200      	movs	r2, #0
 8110a3e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8110a40:	bf00      	nop
 8110a42:	3708      	adds	r7, #8
 8110a44:	46bd      	mov	sp, r7
 8110a46:	bd80      	pop	{r7, pc}
 8110a48:	1000b150 	.word	0x1000b150

08110a4c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8110a4c:	b580      	push	{r7, lr}
 8110a4e:	b082      	sub	sp, #8
 8110a50:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8110a52:	2300      	movs	r3, #0
 8110a54:	607b      	str	r3, [r7, #4]
 8110a56:	e096      	b.n	8110b86 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8110a58:	494f      	ldr	r1, [pc, #316]	@ (8110b98 <etharp_tmr+0x14c>)
 8110a5a:	687a      	ldr	r2, [r7, #4]
 8110a5c:	4613      	mov	r3, r2
 8110a5e:	005b      	lsls	r3, r3, #1
 8110a60:	4413      	add	r3, r2
 8110a62:	00db      	lsls	r3, r3, #3
 8110a64:	440b      	add	r3, r1
 8110a66:	3314      	adds	r3, #20
 8110a68:	781b      	ldrb	r3, [r3, #0]
 8110a6a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8110a6c:	78fb      	ldrb	r3, [r7, #3]
 8110a6e:	2b00      	cmp	r3, #0
 8110a70:	f000 8086 	beq.w	8110b80 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8110a74:	4948      	ldr	r1, [pc, #288]	@ (8110b98 <etharp_tmr+0x14c>)
 8110a76:	687a      	ldr	r2, [r7, #4]
 8110a78:	4613      	mov	r3, r2
 8110a7a:	005b      	lsls	r3, r3, #1
 8110a7c:	4413      	add	r3, r2
 8110a7e:	00db      	lsls	r3, r3, #3
 8110a80:	440b      	add	r3, r1
 8110a82:	3312      	adds	r3, #18
 8110a84:	881b      	ldrh	r3, [r3, #0]
 8110a86:	3301      	adds	r3, #1
 8110a88:	b298      	uxth	r0, r3
 8110a8a:	4943      	ldr	r1, [pc, #268]	@ (8110b98 <etharp_tmr+0x14c>)
 8110a8c:	687a      	ldr	r2, [r7, #4]
 8110a8e:	4613      	mov	r3, r2
 8110a90:	005b      	lsls	r3, r3, #1
 8110a92:	4413      	add	r3, r2
 8110a94:	00db      	lsls	r3, r3, #3
 8110a96:	440b      	add	r3, r1
 8110a98:	3312      	adds	r3, #18
 8110a9a:	4602      	mov	r2, r0
 8110a9c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8110a9e:	493e      	ldr	r1, [pc, #248]	@ (8110b98 <etharp_tmr+0x14c>)
 8110aa0:	687a      	ldr	r2, [r7, #4]
 8110aa2:	4613      	mov	r3, r2
 8110aa4:	005b      	lsls	r3, r3, #1
 8110aa6:	4413      	add	r3, r2
 8110aa8:	00db      	lsls	r3, r3, #3
 8110aaa:	440b      	add	r3, r1
 8110aac:	3312      	adds	r3, #18
 8110aae:	881b      	ldrh	r3, [r3, #0]
 8110ab0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8110ab4:	d215      	bcs.n	8110ae2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8110ab6:	4938      	ldr	r1, [pc, #224]	@ (8110b98 <etharp_tmr+0x14c>)
 8110ab8:	687a      	ldr	r2, [r7, #4]
 8110aba:	4613      	mov	r3, r2
 8110abc:	005b      	lsls	r3, r3, #1
 8110abe:	4413      	add	r3, r2
 8110ac0:	00db      	lsls	r3, r3, #3
 8110ac2:	440b      	add	r3, r1
 8110ac4:	3314      	adds	r3, #20
 8110ac6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8110ac8:	2b01      	cmp	r3, #1
 8110aca:	d10e      	bne.n	8110aea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8110acc:	4932      	ldr	r1, [pc, #200]	@ (8110b98 <etharp_tmr+0x14c>)
 8110ace:	687a      	ldr	r2, [r7, #4]
 8110ad0:	4613      	mov	r3, r2
 8110ad2:	005b      	lsls	r3, r3, #1
 8110ad4:	4413      	add	r3, r2
 8110ad6:	00db      	lsls	r3, r3, #3
 8110ad8:	440b      	add	r3, r1
 8110ada:	3312      	adds	r3, #18
 8110adc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8110ade:	2b04      	cmp	r3, #4
 8110ae0:	d903      	bls.n	8110aea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8110ae2:	6878      	ldr	r0, [r7, #4]
 8110ae4:	f7ff ff80 	bl	81109e8 <etharp_free_entry>
 8110ae8:	e04a      	b.n	8110b80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8110aea:	492b      	ldr	r1, [pc, #172]	@ (8110b98 <etharp_tmr+0x14c>)
 8110aec:	687a      	ldr	r2, [r7, #4]
 8110aee:	4613      	mov	r3, r2
 8110af0:	005b      	lsls	r3, r3, #1
 8110af2:	4413      	add	r3, r2
 8110af4:	00db      	lsls	r3, r3, #3
 8110af6:	440b      	add	r3, r1
 8110af8:	3314      	adds	r3, #20
 8110afa:	781b      	ldrb	r3, [r3, #0]
 8110afc:	2b03      	cmp	r3, #3
 8110afe:	d10a      	bne.n	8110b16 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8110b00:	4925      	ldr	r1, [pc, #148]	@ (8110b98 <etharp_tmr+0x14c>)
 8110b02:	687a      	ldr	r2, [r7, #4]
 8110b04:	4613      	mov	r3, r2
 8110b06:	005b      	lsls	r3, r3, #1
 8110b08:	4413      	add	r3, r2
 8110b0a:	00db      	lsls	r3, r3, #3
 8110b0c:	440b      	add	r3, r1
 8110b0e:	3314      	adds	r3, #20
 8110b10:	2204      	movs	r2, #4
 8110b12:	701a      	strb	r2, [r3, #0]
 8110b14:	e034      	b.n	8110b80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8110b16:	4920      	ldr	r1, [pc, #128]	@ (8110b98 <etharp_tmr+0x14c>)
 8110b18:	687a      	ldr	r2, [r7, #4]
 8110b1a:	4613      	mov	r3, r2
 8110b1c:	005b      	lsls	r3, r3, #1
 8110b1e:	4413      	add	r3, r2
 8110b20:	00db      	lsls	r3, r3, #3
 8110b22:	440b      	add	r3, r1
 8110b24:	3314      	adds	r3, #20
 8110b26:	781b      	ldrb	r3, [r3, #0]
 8110b28:	2b04      	cmp	r3, #4
 8110b2a:	d10a      	bne.n	8110b42 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8110b2c:	491a      	ldr	r1, [pc, #104]	@ (8110b98 <etharp_tmr+0x14c>)
 8110b2e:	687a      	ldr	r2, [r7, #4]
 8110b30:	4613      	mov	r3, r2
 8110b32:	005b      	lsls	r3, r3, #1
 8110b34:	4413      	add	r3, r2
 8110b36:	00db      	lsls	r3, r3, #3
 8110b38:	440b      	add	r3, r1
 8110b3a:	3314      	adds	r3, #20
 8110b3c:	2202      	movs	r2, #2
 8110b3e:	701a      	strb	r2, [r3, #0]
 8110b40:	e01e      	b.n	8110b80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8110b42:	4915      	ldr	r1, [pc, #84]	@ (8110b98 <etharp_tmr+0x14c>)
 8110b44:	687a      	ldr	r2, [r7, #4]
 8110b46:	4613      	mov	r3, r2
 8110b48:	005b      	lsls	r3, r3, #1
 8110b4a:	4413      	add	r3, r2
 8110b4c:	00db      	lsls	r3, r3, #3
 8110b4e:	440b      	add	r3, r1
 8110b50:	3314      	adds	r3, #20
 8110b52:	781b      	ldrb	r3, [r3, #0]
 8110b54:	2b01      	cmp	r3, #1
 8110b56:	d113      	bne.n	8110b80 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8110b58:	490f      	ldr	r1, [pc, #60]	@ (8110b98 <etharp_tmr+0x14c>)
 8110b5a:	687a      	ldr	r2, [r7, #4]
 8110b5c:	4613      	mov	r3, r2
 8110b5e:	005b      	lsls	r3, r3, #1
 8110b60:	4413      	add	r3, r2
 8110b62:	00db      	lsls	r3, r3, #3
 8110b64:	440b      	add	r3, r1
 8110b66:	3308      	adds	r3, #8
 8110b68:	6818      	ldr	r0, [r3, #0]
 8110b6a:	687a      	ldr	r2, [r7, #4]
 8110b6c:	4613      	mov	r3, r2
 8110b6e:	005b      	lsls	r3, r3, #1
 8110b70:	4413      	add	r3, r2
 8110b72:	00db      	lsls	r3, r3, #3
 8110b74:	4a08      	ldr	r2, [pc, #32]	@ (8110b98 <etharp_tmr+0x14c>)
 8110b76:	4413      	add	r3, r2
 8110b78:	3304      	adds	r3, #4
 8110b7a:	4619      	mov	r1, r3
 8110b7c:	f000 fe6e 	bl	811185c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8110b80:	687b      	ldr	r3, [r7, #4]
 8110b82:	3301      	adds	r3, #1
 8110b84:	607b      	str	r3, [r7, #4]
 8110b86:	687b      	ldr	r3, [r7, #4]
 8110b88:	2b09      	cmp	r3, #9
 8110b8a:	f77f af65 	ble.w	8110a58 <etharp_tmr+0xc>
      }
    }
  }
}
 8110b8e:	bf00      	nop
 8110b90:	bf00      	nop
 8110b92:	3708      	adds	r7, #8
 8110b94:	46bd      	mov	sp, r7
 8110b96:	bd80      	pop	{r7, pc}
 8110b98:	1000b150 	.word	0x1000b150

08110b9c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8110b9c:	b580      	push	{r7, lr}
 8110b9e:	b08a      	sub	sp, #40	@ 0x28
 8110ba0:	af00      	add	r7, sp, #0
 8110ba2:	60f8      	str	r0, [r7, #12]
 8110ba4:	460b      	mov	r3, r1
 8110ba6:	607a      	str	r2, [r7, #4]
 8110ba8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8110baa:	230a      	movs	r3, #10
 8110bac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8110bae:	230a      	movs	r3, #10
 8110bb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8110bb2:	230a      	movs	r3, #10
 8110bb4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8110bb6:	2300      	movs	r3, #0
 8110bb8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8110bba:	230a      	movs	r3, #10
 8110bbc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8110bbe:	2300      	movs	r3, #0
 8110bc0:	83bb      	strh	r3, [r7, #28]
 8110bc2:	2300      	movs	r3, #0
 8110bc4:	837b      	strh	r3, [r7, #26]
 8110bc6:	2300      	movs	r3, #0
 8110bc8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8110bca:	2300      	movs	r3, #0
 8110bcc:	843b      	strh	r3, [r7, #32]
 8110bce:	e0ae      	b.n	8110d2e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8110bd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110bd4:	49a6      	ldr	r1, [pc, #664]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110bd6:	4613      	mov	r3, r2
 8110bd8:	005b      	lsls	r3, r3, #1
 8110bda:	4413      	add	r3, r2
 8110bdc:	00db      	lsls	r3, r3, #3
 8110bde:	440b      	add	r3, r1
 8110be0:	3314      	adds	r3, #20
 8110be2:	781b      	ldrb	r3, [r3, #0]
 8110be4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8110be6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8110bea:	2b0a      	cmp	r3, #10
 8110bec:	d105      	bne.n	8110bfa <etharp_find_entry+0x5e>
 8110bee:	7dfb      	ldrb	r3, [r7, #23]
 8110bf0:	2b00      	cmp	r3, #0
 8110bf2:	d102      	bne.n	8110bfa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8110bf4:	8c3b      	ldrh	r3, [r7, #32]
 8110bf6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8110bf8:	e095      	b.n	8110d26 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8110bfa:	7dfb      	ldrb	r3, [r7, #23]
 8110bfc:	2b00      	cmp	r3, #0
 8110bfe:	f000 8092 	beq.w	8110d26 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8110c02:	7dfb      	ldrb	r3, [r7, #23]
 8110c04:	2b01      	cmp	r3, #1
 8110c06:	d009      	beq.n	8110c1c <etharp_find_entry+0x80>
 8110c08:	7dfb      	ldrb	r3, [r7, #23]
 8110c0a:	2b01      	cmp	r3, #1
 8110c0c:	d806      	bhi.n	8110c1c <etharp_find_entry+0x80>
 8110c0e:	4b99      	ldr	r3, [pc, #612]	@ (8110e74 <etharp_find_entry+0x2d8>)
 8110c10:	f240 1223 	movw	r2, #291	@ 0x123
 8110c14:	4998      	ldr	r1, [pc, #608]	@ (8110e78 <etharp_find_entry+0x2dc>)
 8110c16:	4899      	ldr	r0, [pc, #612]	@ (8110e7c <etharp_find_entry+0x2e0>)
 8110c18:	f00b f900 	bl	811be1c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8110c1c:	68fb      	ldr	r3, [r7, #12]
 8110c1e:	2b00      	cmp	r3, #0
 8110c20:	d020      	beq.n	8110c64 <etharp_find_entry+0xc8>
 8110c22:	68fb      	ldr	r3, [r7, #12]
 8110c24:	6819      	ldr	r1, [r3, #0]
 8110c26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110c2a:	4891      	ldr	r0, [pc, #580]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110c2c:	4613      	mov	r3, r2
 8110c2e:	005b      	lsls	r3, r3, #1
 8110c30:	4413      	add	r3, r2
 8110c32:	00db      	lsls	r3, r3, #3
 8110c34:	4403      	add	r3, r0
 8110c36:	3304      	adds	r3, #4
 8110c38:	681b      	ldr	r3, [r3, #0]
 8110c3a:	4299      	cmp	r1, r3
 8110c3c:	d112      	bne.n	8110c64 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8110c3e:	687b      	ldr	r3, [r7, #4]
 8110c40:	2b00      	cmp	r3, #0
 8110c42:	d00c      	beq.n	8110c5e <etharp_find_entry+0xc2>
 8110c44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110c48:	4989      	ldr	r1, [pc, #548]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110c4a:	4613      	mov	r3, r2
 8110c4c:	005b      	lsls	r3, r3, #1
 8110c4e:	4413      	add	r3, r2
 8110c50:	00db      	lsls	r3, r3, #3
 8110c52:	440b      	add	r3, r1
 8110c54:	3308      	adds	r3, #8
 8110c56:	681b      	ldr	r3, [r3, #0]
 8110c58:	687a      	ldr	r2, [r7, #4]
 8110c5a:	429a      	cmp	r2, r3
 8110c5c:	d102      	bne.n	8110c64 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8110c5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8110c62:	e100      	b.n	8110e66 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8110c64:	7dfb      	ldrb	r3, [r7, #23]
 8110c66:	2b01      	cmp	r3, #1
 8110c68:	d140      	bne.n	8110cec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8110c6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110c6e:	4980      	ldr	r1, [pc, #512]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110c70:	4613      	mov	r3, r2
 8110c72:	005b      	lsls	r3, r3, #1
 8110c74:	4413      	add	r3, r2
 8110c76:	00db      	lsls	r3, r3, #3
 8110c78:	440b      	add	r3, r1
 8110c7a:	681b      	ldr	r3, [r3, #0]
 8110c7c:	2b00      	cmp	r3, #0
 8110c7e:	d01a      	beq.n	8110cb6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8110c80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110c84:	497a      	ldr	r1, [pc, #488]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110c86:	4613      	mov	r3, r2
 8110c88:	005b      	lsls	r3, r3, #1
 8110c8a:	4413      	add	r3, r2
 8110c8c:	00db      	lsls	r3, r3, #3
 8110c8e:	440b      	add	r3, r1
 8110c90:	3312      	adds	r3, #18
 8110c92:	881b      	ldrh	r3, [r3, #0]
 8110c94:	8bba      	ldrh	r2, [r7, #28]
 8110c96:	429a      	cmp	r2, r3
 8110c98:	d845      	bhi.n	8110d26 <etharp_find_entry+0x18a>
            old_queue = i;
 8110c9a:	8c3b      	ldrh	r3, [r7, #32]
 8110c9c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8110c9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110ca2:	4973      	ldr	r1, [pc, #460]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110ca4:	4613      	mov	r3, r2
 8110ca6:	005b      	lsls	r3, r3, #1
 8110ca8:	4413      	add	r3, r2
 8110caa:	00db      	lsls	r3, r3, #3
 8110cac:	440b      	add	r3, r1
 8110cae:	3312      	adds	r3, #18
 8110cb0:	881b      	ldrh	r3, [r3, #0]
 8110cb2:	83bb      	strh	r3, [r7, #28]
 8110cb4:	e037      	b.n	8110d26 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8110cb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110cba:	496d      	ldr	r1, [pc, #436]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110cbc:	4613      	mov	r3, r2
 8110cbe:	005b      	lsls	r3, r3, #1
 8110cc0:	4413      	add	r3, r2
 8110cc2:	00db      	lsls	r3, r3, #3
 8110cc4:	440b      	add	r3, r1
 8110cc6:	3312      	adds	r3, #18
 8110cc8:	881b      	ldrh	r3, [r3, #0]
 8110cca:	8b7a      	ldrh	r2, [r7, #26]
 8110ccc:	429a      	cmp	r2, r3
 8110cce:	d82a      	bhi.n	8110d26 <etharp_find_entry+0x18a>
            old_pending = i;
 8110cd0:	8c3b      	ldrh	r3, [r7, #32]
 8110cd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8110cd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110cd8:	4965      	ldr	r1, [pc, #404]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110cda:	4613      	mov	r3, r2
 8110cdc:	005b      	lsls	r3, r3, #1
 8110cde:	4413      	add	r3, r2
 8110ce0:	00db      	lsls	r3, r3, #3
 8110ce2:	440b      	add	r3, r1
 8110ce4:	3312      	adds	r3, #18
 8110ce6:	881b      	ldrh	r3, [r3, #0]
 8110ce8:	837b      	strh	r3, [r7, #26]
 8110cea:	e01c      	b.n	8110d26 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8110cec:	7dfb      	ldrb	r3, [r7, #23]
 8110cee:	2b01      	cmp	r3, #1
 8110cf0:	d919      	bls.n	8110d26 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8110cf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110cf6:	495e      	ldr	r1, [pc, #376]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110cf8:	4613      	mov	r3, r2
 8110cfa:	005b      	lsls	r3, r3, #1
 8110cfc:	4413      	add	r3, r2
 8110cfe:	00db      	lsls	r3, r3, #3
 8110d00:	440b      	add	r3, r1
 8110d02:	3312      	adds	r3, #18
 8110d04:	881b      	ldrh	r3, [r3, #0]
 8110d06:	8b3a      	ldrh	r2, [r7, #24]
 8110d08:	429a      	cmp	r2, r3
 8110d0a:	d80c      	bhi.n	8110d26 <etharp_find_entry+0x18a>
            old_stable = i;
 8110d0c:	8c3b      	ldrh	r3, [r7, #32]
 8110d0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8110d10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110d14:	4956      	ldr	r1, [pc, #344]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110d16:	4613      	mov	r3, r2
 8110d18:	005b      	lsls	r3, r3, #1
 8110d1a:	4413      	add	r3, r2
 8110d1c:	00db      	lsls	r3, r3, #3
 8110d1e:	440b      	add	r3, r1
 8110d20:	3312      	adds	r3, #18
 8110d22:	881b      	ldrh	r3, [r3, #0]
 8110d24:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8110d26:	8c3b      	ldrh	r3, [r7, #32]
 8110d28:	3301      	adds	r3, #1
 8110d2a:	b29b      	uxth	r3, r3
 8110d2c:	843b      	strh	r3, [r7, #32]
 8110d2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8110d32:	2b09      	cmp	r3, #9
 8110d34:	f77f af4c 	ble.w	8110bd0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8110d38:	7afb      	ldrb	r3, [r7, #11]
 8110d3a:	f003 0302 	and.w	r3, r3, #2
 8110d3e:	2b00      	cmp	r3, #0
 8110d40:	d108      	bne.n	8110d54 <etharp_find_entry+0x1b8>
 8110d42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8110d46:	2b0a      	cmp	r3, #10
 8110d48:	d107      	bne.n	8110d5a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8110d4a:	7afb      	ldrb	r3, [r7, #11]
 8110d4c:	f003 0301 	and.w	r3, r3, #1
 8110d50:	2b00      	cmp	r3, #0
 8110d52:	d102      	bne.n	8110d5a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8110d54:	f04f 33ff 	mov.w	r3, #4294967295
 8110d58:	e085      	b.n	8110e66 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8110d5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8110d5e:	2b09      	cmp	r3, #9
 8110d60:	dc02      	bgt.n	8110d68 <etharp_find_entry+0x1cc>
    i = empty;
 8110d62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8110d64:	843b      	strh	r3, [r7, #32]
 8110d66:	e039      	b.n	8110ddc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8110d68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8110d6c:	2b09      	cmp	r3, #9
 8110d6e:	dc14      	bgt.n	8110d9a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8110d70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8110d72:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8110d74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110d78:	493d      	ldr	r1, [pc, #244]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110d7a:	4613      	mov	r3, r2
 8110d7c:	005b      	lsls	r3, r3, #1
 8110d7e:	4413      	add	r3, r2
 8110d80:	00db      	lsls	r3, r3, #3
 8110d82:	440b      	add	r3, r1
 8110d84:	681b      	ldr	r3, [r3, #0]
 8110d86:	2b00      	cmp	r3, #0
 8110d88:	d018      	beq.n	8110dbc <etharp_find_entry+0x220>
 8110d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8110e74 <etharp_find_entry+0x2d8>)
 8110d8c:	f240 126d 	movw	r2, #365	@ 0x16d
 8110d90:	493b      	ldr	r1, [pc, #236]	@ (8110e80 <etharp_find_entry+0x2e4>)
 8110d92:	483a      	ldr	r0, [pc, #232]	@ (8110e7c <etharp_find_entry+0x2e0>)
 8110d94:	f00b f842 	bl	811be1c <iprintf>
 8110d98:	e010      	b.n	8110dbc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8110d9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8110d9e:	2b09      	cmp	r3, #9
 8110da0:	dc02      	bgt.n	8110da8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8110da2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8110da4:	843b      	strh	r3, [r7, #32]
 8110da6:	e009      	b.n	8110dbc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8110da8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8110dac:	2b09      	cmp	r3, #9
 8110dae:	dc02      	bgt.n	8110db6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8110db0:	8bfb      	ldrh	r3, [r7, #30]
 8110db2:	843b      	strh	r3, [r7, #32]
 8110db4:	e002      	b.n	8110dbc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8110db6:	f04f 33ff 	mov.w	r3, #4294967295
 8110dba:	e054      	b.n	8110e66 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8110dbc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8110dc0:	2b09      	cmp	r3, #9
 8110dc2:	dd06      	ble.n	8110dd2 <etharp_find_entry+0x236>
 8110dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8110e74 <etharp_find_entry+0x2d8>)
 8110dc6:	f240 127f 	movw	r2, #383	@ 0x17f
 8110dca:	492e      	ldr	r1, [pc, #184]	@ (8110e84 <etharp_find_entry+0x2e8>)
 8110dcc:	482b      	ldr	r0, [pc, #172]	@ (8110e7c <etharp_find_entry+0x2e0>)
 8110dce:	f00b f825 	bl	811be1c <iprintf>
    etharp_free_entry(i);
 8110dd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8110dd6:	4618      	mov	r0, r3
 8110dd8:	f7ff fe06 	bl	81109e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8110ddc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8110de0:	2b09      	cmp	r3, #9
 8110de2:	dd06      	ble.n	8110df2 <etharp_find_entry+0x256>
 8110de4:	4b23      	ldr	r3, [pc, #140]	@ (8110e74 <etharp_find_entry+0x2d8>)
 8110de6:	f240 1283 	movw	r2, #387	@ 0x183
 8110dea:	4926      	ldr	r1, [pc, #152]	@ (8110e84 <etharp_find_entry+0x2e8>)
 8110dec:	4823      	ldr	r0, [pc, #140]	@ (8110e7c <etharp_find_entry+0x2e0>)
 8110dee:	f00b f815 	bl	811be1c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8110df2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110df6:	491e      	ldr	r1, [pc, #120]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110df8:	4613      	mov	r3, r2
 8110dfa:	005b      	lsls	r3, r3, #1
 8110dfc:	4413      	add	r3, r2
 8110dfe:	00db      	lsls	r3, r3, #3
 8110e00:	440b      	add	r3, r1
 8110e02:	3314      	adds	r3, #20
 8110e04:	781b      	ldrb	r3, [r3, #0]
 8110e06:	2b00      	cmp	r3, #0
 8110e08:	d006      	beq.n	8110e18 <etharp_find_entry+0x27c>
 8110e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8110e74 <etharp_find_entry+0x2d8>)
 8110e0c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8110e10:	491d      	ldr	r1, [pc, #116]	@ (8110e88 <etharp_find_entry+0x2ec>)
 8110e12:	481a      	ldr	r0, [pc, #104]	@ (8110e7c <etharp_find_entry+0x2e0>)
 8110e14:	f00b f802 	bl	811be1c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8110e18:	68fb      	ldr	r3, [r7, #12]
 8110e1a:	2b00      	cmp	r3, #0
 8110e1c:	d00b      	beq.n	8110e36 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8110e1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110e22:	68fb      	ldr	r3, [r7, #12]
 8110e24:	6819      	ldr	r1, [r3, #0]
 8110e26:	4812      	ldr	r0, [pc, #72]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110e28:	4613      	mov	r3, r2
 8110e2a:	005b      	lsls	r3, r3, #1
 8110e2c:	4413      	add	r3, r2
 8110e2e:	00db      	lsls	r3, r3, #3
 8110e30:	4403      	add	r3, r0
 8110e32:	3304      	adds	r3, #4
 8110e34:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8110e36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110e3a:	490d      	ldr	r1, [pc, #52]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110e3c:	4613      	mov	r3, r2
 8110e3e:	005b      	lsls	r3, r3, #1
 8110e40:	4413      	add	r3, r2
 8110e42:	00db      	lsls	r3, r3, #3
 8110e44:	440b      	add	r3, r1
 8110e46:	3312      	adds	r3, #18
 8110e48:	2200      	movs	r2, #0
 8110e4a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8110e4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110e50:	4907      	ldr	r1, [pc, #28]	@ (8110e70 <etharp_find_entry+0x2d4>)
 8110e52:	4613      	mov	r3, r2
 8110e54:	005b      	lsls	r3, r3, #1
 8110e56:	4413      	add	r3, r2
 8110e58:	00db      	lsls	r3, r3, #3
 8110e5a:	440b      	add	r3, r1
 8110e5c:	3308      	adds	r3, #8
 8110e5e:	687a      	ldr	r2, [r7, #4]
 8110e60:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8110e62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8110e66:	4618      	mov	r0, r3
 8110e68:	3728      	adds	r7, #40	@ 0x28
 8110e6a:	46bd      	mov	sp, r7
 8110e6c:	bd80      	pop	{r7, pc}
 8110e6e:	bf00      	nop
 8110e70:	1000b150 	.word	0x1000b150
 8110e74:	0811cd28 	.word	0x0811cd28
 8110e78:	0811cda0 	.word	0x0811cda0
 8110e7c:	0811cde0 	.word	0x0811cde0
 8110e80:	0811ce08 	.word	0x0811ce08
 8110e84:	0811ce20 	.word	0x0811ce20
 8110e88:	0811ce34 	.word	0x0811ce34

08110e8c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8110e8c:	b580      	push	{r7, lr}
 8110e8e:	b088      	sub	sp, #32
 8110e90:	af02      	add	r7, sp, #8
 8110e92:	60f8      	str	r0, [r7, #12]
 8110e94:	60b9      	str	r1, [r7, #8]
 8110e96:	607a      	str	r2, [r7, #4]
 8110e98:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8110e9a:	68fb      	ldr	r3, [r7, #12]
 8110e9c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8110ea0:	2b06      	cmp	r3, #6
 8110ea2:	d006      	beq.n	8110eb2 <etharp_update_arp_entry+0x26>
 8110ea4:	4b48      	ldr	r3, [pc, #288]	@ (8110fc8 <etharp_update_arp_entry+0x13c>)
 8110ea6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8110eaa:	4948      	ldr	r1, [pc, #288]	@ (8110fcc <etharp_update_arp_entry+0x140>)
 8110eac:	4848      	ldr	r0, [pc, #288]	@ (8110fd0 <etharp_update_arp_entry+0x144>)
 8110eae:	f00a ffb5 	bl	811be1c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8110eb2:	68bb      	ldr	r3, [r7, #8]
 8110eb4:	2b00      	cmp	r3, #0
 8110eb6:	d012      	beq.n	8110ede <etharp_update_arp_entry+0x52>
 8110eb8:	68bb      	ldr	r3, [r7, #8]
 8110eba:	681b      	ldr	r3, [r3, #0]
 8110ebc:	2b00      	cmp	r3, #0
 8110ebe:	d00e      	beq.n	8110ede <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8110ec0:	68bb      	ldr	r3, [r7, #8]
 8110ec2:	681b      	ldr	r3, [r3, #0]
 8110ec4:	68f9      	ldr	r1, [r7, #12]
 8110ec6:	4618      	mov	r0, r3
 8110ec8:	f001 face 	bl	8112468 <ip4_addr_isbroadcast_u32>
 8110ecc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8110ece:	2b00      	cmp	r3, #0
 8110ed0:	d105      	bne.n	8110ede <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8110ed2:	68bb      	ldr	r3, [r7, #8]
 8110ed4:	681b      	ldr	r3, [r3, #0]
 8110ed6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8110eda:	2be0      	cmp	r3, #224	@ 0xe0
 8110edc:	d102      	bne.n	8110ee4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8110ede:	f06f 030f 	mvn.w	r3, #15
 8110ee2:	e06c      	b.n	8110fbe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8110ee4:	78fb      	ldrb	r3, [r7, #3]
 8110ee6:	68fa      	ldr	r2, [r7, #12]
 8110ee8:	4619      	mov	r1, r3
 8110eea:	68b8      	ldr	r0, [r7, #8]
 8110eec:	f7ff fe56 	bl	8110b9c <etharp_find_entry>
 8110ef0:	4603      	mov	r3, r0
 8110ef2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8110ef4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8110ef8:	2b00      	cmp	r3, #0
 8110efa:	da02      	bge.n	8110f02 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8110efc:	8afb      	ldrh	r3, [r7, #22]
 8110efe:	b25b      	sxtb	r3, r3
 8110f00:	e05d      	b.n	8110fbe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8110f02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f06:	4933      	ldr	r1, [pc, #204]	@ (8110fd4 <etharp_update_arp_entry+0x148>)
 8110f08:	4613      	mov	r3, r2
 8110f0a:	005b      	lsls	r3, r3, #1
 8110f0c:	4413      	add	r3, r2
 8110f0e:	00db      	lsls	r3, r3, #3
 8110f10:	440b      	add	r3, r1
 8110f12:	3314      	adds	r3, #20
 8110f14:	2202      	movs	r2, #2
 8110f16:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8110f18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f1c:	492d      	ldr	r1, [pc, #180]	@ (8110fd4 <etharp_update_arp_entry+0x148>)
 8110f1e:	4613      	mov	r3, r2
 8110f20:	005b      	lsls	r3, r3, #1
 8110f22:	4413      	add	r3, r2
 8110f24:	00db      	lsls	r3, r3, #3
 8110f26:	440b      	add	r3, r1
 8110f28:	3308      	adds	r3, #8
 8110f2a:	68fa      	ldr	r2, [r7, #12]
 8110f2c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8110f2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f32:	4613      	mov	r3, r2
 8110f34:	005b      	lsls	r3, r3, #1
 8110f36:	4413      	add	r3, r2
 8110f38:	00db      	lsls	r3, r3, #3
 8110f3a:	3308      	adds	r3, #8
 8110f3c:	4a25      	ldr	r2, [pc, #148]	@ (8110fd4 <etharp_update_arp_entry+0x148>)
 8110f3e:	4413      	add	r3, r2
 8110f40:	3304      	adds	r3, #4
 8110f42:	2206      	movs	r2, #6
 8110f44:	6879      	ldr	r1, [r7, #4]
 8110f46:	4618      	mov	r0, r3
 8110f48:	f00b f919 	bl	811c17e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8110f4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f50:	4920      	ldr	r1, [pc, #128]	@ (8110fd4 <etharp_update_arp_entry+0x148>)
 8110f52:	4613      	mov	r3, r2
 8110f54:	005b      	lsls	r3, r3, #1
 8110f56:	4413      	add	r3, r2
 8110f58:	00db      	lsls	r3, r3, #3
 8110f5a:	440b      	add	r3, r1
 8110f5c:	3312      	adds	r3, #18
 8110f5e:	2200      	movs	r2, #0
 8110f60:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8110f62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f66:	491b      	ldr	r1, [pc, #108]	@ (8110fd4 <etharp_update_arp_entry+0x148>)
 8110f68:	4613      	mov	r3, r2
 8110f6a:	005b      	lsls	r3, r3, #1
 8110f6c:	4413      	add	r3, r2
 8110f6e:	00db      	lsls	r3, r3, #3
 8110f70:	440b      	add	r3, r1
 8110f72:	681b      	ldr	r3, [r3, #0]
 8110f74:	2b00      	cmp	r3, #0
 8110f76:	d021      	beq.n	8110fbc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8110f78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f7c:	4915      	ldr	r1, [pc, #84]	@ (8110fd4 <etharp_update_arp_entry+0x148>)
 8110f7e:	4613      	mov	r3, r2
 8110f80:	005b      	lsls	r3, r3, #1
 8110f82:	4413      	add	r3, r2
 8110f84:	00db      	lsls	r3, r3, #3
 8110f86:	440b      	add	r3, r1
 8110f88:	681b      	ldr	r3, [r3, #0]
 8110f8a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8110f8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f90:	4910      	ldr	r1, [pc, #64]	@ (8110fd4 <etharp_update_arp_entry+0x148>)
 8110f92:	4613      	mov	r3, r2
 8110f94:	005b      	lsls	r3, r3, #1
 8110f96:	4413      	add	r3, r2
 8110f98:	00db      	lsls	r3, r3, #3
 8110f9a:	440b      	add	r3, r1
 8110f9c:	2200      	movs	r2, #0
 8110f9e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8110fa0:	68fb      	ldr	r3, [r7, #12]
 8110fa2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8110fa6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8110faa:	9300      	str	r3, [sp, #0]
 8110fac:	687b      	ldr	r3, [r7, #4]
 8110fae:	6939      	ldr	r1, [r7, #16]
 8110fb0:	68f8      	ldr	r0, [r7, #12]
 8110fb2:	f000 fcf3 	bl	811199c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8110fb6:	6938      	ldr	r0, [r7, #16]
 8110fb8:	f003 fc6e 	bl	8114898 <pbuf_free>
  }
  return ERR_OK;
 8110fbc:	2300      	movs	r3, #0
}
 8110fbe:	4618      	mov	r0, r3
 8110fc0:	3718      	adds	r7, #24
 8110fc2:	46bd      	mov	sp, r7
 8110fc4:	bd80      	pop	{r7, pc}
 8110fc6:	bf00      	nop
 8110fc8:	0811cd28 	.word	0x0811cd28
 8110fcc:	0811ce60 	.word	0x0811ce60
 8110fd0:	0811cde0 	.word	0x0811cde0
 8110fd4:	1000b150 	.word	0x1000b150

08110fd8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8110fd8:	b580      	push	{r7, lr}
 8110fda:	b084      	sub	sp, #16
 8110fdc:	af00      	add	r7, sp, #0
 8110fde:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8110fe0:	2300      	movs	r3, #0
 8110fe2:	60fb      	str	r3, [r7, #12]
 8110fe4:	e01e      	b.n	8111024 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8110fe6:	4913      	ldr	r1, [pc, #76]	@ (8111034 <etharp_cleanup_netif+0x5c>)
 8110fe8:	68fa      	ldr	r2, [r7, #12]
 8110fea:	4613      	mov	r3, r2
 8110fec:	005b      	lsls	r3, r3, #1
 8110fee:	4413      	add	r3, r2
 8110ff0:	00db      	lsls	r3, r3, #3
 8110ff2:	440b      	add	r3, r1
 8110ff4:	3314      	adds	r3, #20
 8110ff6:	781b      	ldrb	r3, [r3, #0]
 8110ff8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8110ffa:	7afb      	ldrb	r3, [r7, #11]
 8110ffc:	2b00      	cmp	r3, #0
 8110ffe:	d00e      	beq.n	811101e <etharp_cleanup_netif+0x46>
 8111000:	490c      	ldr	r1, [pc, #48]	@ (8111034 <etharp_cleanup_netif+0x5c>)
 8111002:	68fa      	ldr	r2, [r7, #12]
 8111004:	4613      	mov	r3, r2
 8111006:	005b      	lsls	r3, r3, #1
 8111008:	4413      	add	r3, r2
 811100a:	00db      	lsls	r3, r3, #3
 811100c:	440b      	add	r3, r1
 811100e:	3308      	adds	r3, #8
 8111010:	681b      	ldr	r3, [r3, #0]
 8111012:	687a      	ldr	r2, [r7, #4]
 8111014:	429a      	cmp	r2, r3
 8111016:	d102      	bne.n	811101e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8111018:	68f8      	ldr	r0, [r7, #12]
 811101a:	f7ff fce5 	bl	81109e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811101e:	68fb      	ldr	r3, [r7, #12]
 8111020:	3301      	adds	r3, #1
 8111022:	60fb      	str	r3, [r7, #12]
 8111024:	68fb      	ldr	r3, [r7, #12]
 8111026:	2b09      	cmp	r3, #9
 8111028:	dddd      	ble.n	8110fe6 <etharp_cleanup_netif+0xe>
    }
  }
}
 811102a:	bf00      	nop
 811102c:	bf00      	nop
 811102e:	3710      	adds	r7, #16
 8111030:	46bd      	mov	sp, r7
 8111032:	bd80      	pop	{r7, pc}
 8111034:	1000b150 	.word	0x1000b150

08111038 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8111038:	b5b0      	push	{r4, r5, r7, lr}
 811103a:	b08a      	sub	sp, #40	@ 0x28
 811103c:	af04      	add	r7, sp, #16
 811103e:	6078      	str	r0, [r7, #4]
 8111040:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8111042:	683b      	ldr	r3, [r7, #0]
 8111044:	2b00      	cmp	r3, #0
 8111046:	d107      	bne.n	8111058 <etharp_input+0x20>
 8111048:	4b3d      	ldr	r3, [pc, #244]	@ (8111140 <etharp_input+0x108>)
 811104a:	f240 228a 	movw	r2, #650	@ 0x28a
 811104e:	493d      	ldr	r1, [pc, #244]	@ (8111144 <etharp_input+0x10c>)
 8111050:	483d      	ldr	r0, [pc, #244]	@ (8111148 <etharp_input+0x110>)
 8111052:	f00a fee3 	bl	811be1c <iprintf>
 8111056:	e06f      	b.n	8111138 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8111058:	687b      	ldr	r3, [r7, #4]
 811105a:	685b      	ldr	r3, [r3, #4]
 811105c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 811105e:	693b      	ldr	r3, [r7, #16]
 8111060:	881b      	ldrh	r3, [r3, #0]
 8111062:	b29b      	uxth	r3, r3
 8111064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8111068:	d10c      	bne.n	8111084 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 811106a:	693b      	ldr	r3, [r7, #16]
 811106c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 811106e:	2b06      	cmp	r3, #6
 8111070:	d108      	bne.n	8111084 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8111072:	693b      	ldr	r3, [r7, #16]
 8111074:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8111076:	2b04      	cmp	r3, #4
 8111078:	d104      	bne.n	8111084 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 811107a:	693b      	ldr	r3, [r7, #16]
 811107c:	885b      	ldrh	r3, [r3, #2]
 811107e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8111080:	2b08      	cmp	r3, #8
 8111082:	d003      	beq.n	811108c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8111084:	6878      	ldr	r0, [r7, #4]
 8111086:	f003 fc07 	bl	8114898 <pbuf_free>
    return;
 811108a:	e055      	b.n	8111138 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 811108c:	693b      	ldr	r3, [r7, #16]
 811108e:	330e      	adds	r3, #14
 8111090:	681b      	ldr	r3, [r3, #0]
 8111092:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8111094:	693b      	ldr	r3, [r7, #16]
 8111096:	3318      	adds	r3, #24
 8111098:	681b      	ldr	r3, [r3, #0]
 811109a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 811109c:	683b      	ldr	r3, [r7, #0]
 811109e:	3304      	adds	r3, #4
 81110a0:	681b      	ldr	r3, [r3, #0]
 81110a2:	2b00      	cmp	r3, #0
 81110a4:	d102      	bne.n	81110ac <etharp_input+0x74>
    for_us = 0;
 81110a6:	2300      	movs	r3, #0
 81110a8:	75fb      	strb	r3, [r7, #23]
 81110aa:	e009      	b.n	81110c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 81110ac:	68ba      	ldr	r2, [r7, #8]
 81110ae:	683b      	ldr	r3, [r7, #0]
 81110b0:	3304      	adds	r3, #4
 81110b2:	681b      	ldr	r3, [r3, #0]
 81110b4:	429a      	cmp	r2, r3
 81110b6:	bf0c      	ite	eq
 81110b8:	2301      	moveq	r3, #1
 81110ba:	2300      	movne	r3, #0
 81110bc:	b2db      	uxtb	r3, r3
 81110be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 81110c0:	693b      	ldr	r3, [r7, #16]
 81110c2:	f103 0208 	add.w	r2, r3, #8
 81110c6:	7dfb      	ldrb	r3, [r7, #23]
 81110c8:	2b00      	cmp	r3, #0
 81110ca:	d001      	beq.n	81110d0 <etharp_input+0x98>
 81110cc:	2301      	movs	r3, #1
 81110ce:	e000      	b.n	81110d2 <etharp_input+0x9a>
 81110d0:	2302      	movs	r3, #2
 81110d2:	f107 010c 	add.w	r1, r7, #12
 81110d6:	6838      	ldr	r0, [r7, #0]
 81110d8:	f7ff fed8 	bl	8110e8c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 81110dc:	693b      	ldr	r3, [r7, #16]
 81110de:	88db      	ldrh	r3, [r3, #6]
 81110e0:	b29b      	uxth	r3, r3
 81110e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81110e6:	d003      	beq.n	81110f0 <etharp_input+0xb8>
 81110e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81110ec:	d01e      	beq.n	811112c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 81110ee:	e020      	b.n	8111132 <etharp_input+0xfa>
      if (for_us) {
 81110f0:	7dfb      	ldrb	r3, [r7, #23]
 81110f2:	2b00      	cmp	r3, #0
 81110f4:	d01c      	beq.n	8111130 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 81110f6:	683b      	ldr	r3, [r7, #0]
 81110f8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 81110fc:	693b      	ldr	r3, [r7, #16]
 81110fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8111102:	683b      	ldr	r3, [r7, #0]
 8111104:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8111108:	683b      	ldr	r3, [r7, #0]
 811110a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 811110c:	693a      	ldr	r2, [r7, #16]
 811110e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8111110:	2102      	movs	r1, #2
 8111112:	9103      	str	r1, [sp, #12]
 8111114:	f107 010c 	add.w	r1, r7, #12
 8111118:	9102      	str	r1, [sp, #8]
 811111a:	9201      	str	r2, [sp, #4]
 811111c:	9300      	str	r3, [sp, #0]
 811111e:	462b      	mov	r3, r5
 8111120:	4622      	mov	r2, r4
 8111122:	4601      	mov	r1, r0
 8111124:	6838      	ldr	r0, [r7, #0]
 8111126:	f000 faeb 	bl	8111700 <etharp_raw>
      break;
 811112a:	e001      	b.n	8111130 <etharp_input+0xf8>
      break;
 811112c:	bf00      	nop
 811112e:	e000      	b.n	8111132 <etharp_input+0xfa>
      break;
 8111130:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8111132:	6878      	ldr	r0, [r7, #4]
 8111134:	f003 fbb0 	bl	8114898 <pbuf_free>
}
 8111138:	3718      	adds	r7, #24
 811113a:	46bd      	mov	sp, r7
 811113c:	bdb0      	pop	{r4, r5, r7, pc}
 811113e:	bf00      	nop
 8111140:	0811cd28 	.word	0x0811cd28
 8111144:	0811ceb8 	.word	0x0811ceb8
 8111148:	0811cde0 	.word	0x0811cde0

0811114c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 811114c:	b580      	push	{r7, lr}
 811114e:	b086      	sub	sp, #24
 8111150:	af02      	add	r7, sp, #8
 8111152:	60f8      	str	r0, [r7, #12]
 8111154:	60b9      	str	r1, [r7, #8]
 8111156:	4613      	mov	r3, r2
 8111158:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 811115a:	79fa      	ldrb	r2, [r7, #7]
 811115c:	4944      	ldr	r1, [pc, #272]	@ (8111270 <etharp_output_to_arp_index+0x124>)
 811115e:	4613      	mov	r3, r2
 8111160:	005b      	lsls	r3, r3, #1
 8111162:	4413      	add	r3, r2
 8111164:	00db      	lsls	r3, r3, #3
 8111166:	440b      	add	r3, r1
 8111168:	3314      	adds	r3, #20
 811116a:	781b      	ldrb	r3, [r3, #0]
 811116c:	2b01      	cmp	r3, #1
 811116e:	d806      	bhi.n	811117e <etharp_output_to_arp_index+0x32>
 8111170:	4b40      	ldr	r3, [pc, #256]	@ (8111274 <etharp_output_to_arp_index+0x128>)
 8111172:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8111176:	4940      	ldr	r1, [pc, #256]	@ (8111278 <etharp_output_to_arp_index+0x12c>)
 8111178:	4840      	ldr	r0, [pc, #256]	@ (811127c <etharp_output_to_arp_index+0x130>)
 811117a:	f00a fe4f 	bl	811be1c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 811117e:	79fa      	ldrb	r2, [r7, #7]
 8111180:	493b      	ldr	r1, [pc, #236]	@ (8111270 <etharp_output_to_arp_index+0x124>)
 8111182:	4613      	mov	r3, r2
 8111184:	005b      	lsls	r3, r3, #1
 8111186:	4413      	add	r3, r2
 8111188:	00db      	lsls	r3, r3, #3
 811118a:	440b      	add	r3, r1
 811118c:	3314      	adds	r3, #20
 811118e:	781b      	ldrb	r3, [r3, #0]
 8111190:	2b02      	cmp	r3, #2
 8111192:	d153      	bne.n	811123c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8111194:	79fa      	ldrb	r2, [r7, #7]
 8111196:	4936      	ldr	r1, [pc, #216]	@ (8111270 <etharp_output_to_arp_index+0x124>)
 8111198:	4613      	mov	r3, r2
 811119a:	005b      	lsls	r3, r3, #1
 811119c:	4413      	add	r3, r2
 811119e:	00db      	lsls	r3, r3, #3
 81111a0:	440b      	add	r3, r1
 81111a2:	3312      	adds	r3, #18
 81111a4:	881b      	ldrh	r3, [r3, #0]
 81111a6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 81111aa:	d919      	bls.n	81111e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 81111ac:	79fa      	ldrb	r2, [r7, #7]
 81111ae:	4613      	mov	r3, r2
 81111b0:	005b      	lsls	r3, r3, #1
 81111b2:	4413      	add	r3, r2
 81111b4:	00db      	lsls	r3, r3, #3
 81111b6:	4a2e      	ldr	r2, [pc, #184]	@ (8111270 <etharp_output_to_arp_index+0x124>)
 81111b8:	4413      	add	r3, r2
 81111ba:	3304      	adds	r3, #4
 81111bc:	4619      	mov	r1, r3
 81111be:	68f8      	ldr	r0, [r7, #12]
 81111c0:	f000 fb4c 	bl	811185c <etharp_request>
 81111c4:	4603      	mov	r3, r0
 81111c6:	2b00      	cmp	r3, #0
 81111c8:	d138      	bne.n	811123c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 81111ca:	79fa      	ldrb	r2, [r7, #7]
 81111cc:	4928      	ldr	r1, [pc, #160]	@ (8111270 <etharp_output_to_arp_index+0x124>)
 81111ce:	4613      	mov	r3, r2
 81111d0:	005b      	lsls	r3, r3, #1
 81111d2:	4413      	add	r3, r2
 81111d4:	00db      	lsls	r3, r3, #3
 81111d6:	440b      	add	r3, r1
 81111d8:	3314      	adds	r3, #20
 81111da:	2203      	movs	r2, #3
 81111dc:	701a      	strb	r2, [r3, #0]
 81111de:	e02d      	b.n	811123c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 81111e0:	79fa      	ldrb	r2, [r7, #7]
 81111e2:	4923      	ldr	r1, [pc, #140]	@ (8111270 <etharp_output_to_arp_index+0x124>)
 81111e4:	4613      	mov	r3, r2
 81111e6:	005b      	lsls	r3, r3, #1
 81111e8:	4413      	add	r3, r2
 81111ea:	00db      	lsls	r3, r3, #3
 81111ec:	440b      	add	r3, r1
 81111ee:	3312      	adds	r3, #18
 81111f0:	881b      	ldrh	r3, [r3, #0]
 81111f2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 81111f6:	d321      	bcc.n	811123c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 81111f8:	79fa      	ldrb	r2, [r7, #7]
 81111fa:	4613      	mov	r3, r2
 81111fc:	005b      	lsls	r3, r3, #1
 81111fe:	4413      	add	r3, r2
 8111200:	00db      	lsls	r3, r3, #3
 8111202:	4a1b      	ldr	r2, [pc, #108]	@ (8111270 <etharp_output_to_arp_index+0x124>)
 8111204:	4413      	add	r3, r2
 8111206:	1d19      	adds	r1, r3, #4
 8111208:	79fa      	ldrb	r2, [r7, #7]
 811120a:	4613      	mov	r3, r2
 811120c:	005b      	lsls	r3, r3, #1
 811120e:	4413      	add	r3, r2
 8111210:	00db      	lsls	r3, r3, #3
 8111212:	3308      	adds	r3, #8
 8111214:	4a16      	ldr	r2, [pc, #88]	@ (8111270 <etharp_output_to_arp_index+0x124>)
 8111216:	4413      	add	r3, r2
 8111218:	3304      	adds	r3, #4
 811121a:	461a      	mov	r2, r3
 811121c:	68f8      	ldr	r0, [r7, #12]
 811121e:	f000 fafb 	bl	8111818 <etharp_request_dst>
 8111222:	4603      	mov	r3, r0
 8111224:	2b00      	cmp	r3, #0
 8111226:	d109      	bne.n	811123c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8111228:	79fa      	ldrb	r2, [r7, #7]
 811122a:	4911      	ldr	r1, [pc, #68]	@ (8111270 <etharp_output_to_arp_index+0x124>)
 811122c:	4613      	mov	r3, r2
 811122e:	005b      	lsls	r3, r3, #1
 8111230:	4413      	add	r3, r2
 8111232:	00db      	lsls	r3, r3, #3
 8111234:	440b      	add	r3, r1
 8111236:	3314      	adds	r3, #20
 8111238:	2203      	movs	r2, #3
 811123a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 811123c:	68fb      	ldr	r3, [r7, #12]
 811123e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8111242:	79fa      	ldrb	r2, [r7, #7]
 8111244:	4613      	mov	r3, r2
 8111246:	005b      	lsls	r3, r3, #1
 8111248:	4413      	add	r3, r2
 811124a:	00db      	lsls	r3, r3, #3
 811124c:	3308      	adds	r3, #8
 811124e:	4a08      	ldr	r2, [pc, #32]	@ (8111270 <etharp_output_to_arp_index+0x124>)
 8111250:	4413      	add	r3, r2
 8111252:	3304      	adds	r3, #4
 8111254:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8111258:	9200      	str	r2, [sp, #0]
 811125a:	460a      	mov	r2, r1
 811125c:	68b9      	ldr	r1, [r7, #8]
 811125e:	68f8      	ldr	r0, [r7, #12]
 8111260:	f000 fb9c 	bl	811199c <ethernet_output>
 8111264:	4603      	mov	r3, r0
}
 8111266:	4618      	mov	r0, r3
 8111268:	3710      	adds	r7, #16
 811126a:	46bd      	mov	sp, r7
 811126c:	bd80      	pop	{r7, pc}
 811126e:	bf00      	nop
 8111270:	1000b150 	.word	0x1000b150
 8111274:	0811cd28 	.word	0x0811cd28
 8111278:	0811ced8 	.word	0x0811ced8
 811127c:	0811cde0 	.word	0x0811cde0

08111280 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8111280:	b580      	push	{r7, lr}
 8111282:	b08a      	sub	sp, #40	@ 0x28
 8111284:	af02      	add	r7, sp, #8
 8111286:	60f8      	str	r0, [r7, #12]
 8111288:	60b9      	str	r1, [r7, #8]
 811128a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 811128c:	687b      	ldr	r3, [r7, #4]
 811128e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8111290:	68fb      	ldr	r3, [r7, #12]
 8111292:	2b00      	cmp	r3, #0
 8111294:	d106      	bne.n	81112a4 <etharp_output+0x24>
 8111296:	4b73      	ldr	r3, [pc, #460]	@ (8111464 <etharp_output+0x1e4>)
 8111298:	f240 321e 	movw	r2, #798	@ 0x31e
 811129c:	4972      	ldr	r1, [pc, #456]	@ (8111468 <etharp_output+0x1e8>)
 811129e:	4873      	ldr	r0, [pc, #460]	@ (811146c <etharp_output+0x1ec>)
 81112a0:	f00a fdbc 	bl	811be1c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 81112a4:	68bb      	ldr	r3, [r7, #8]
 81112a6:	2b00      	cmp	r3, #0
 81112a8:	d106      	bne.n	81112b8 <etharp_output+0x38>
 81112aa:	4b6e      	ldr	r3, [pc, #440]	@ (8111464 <etharp_output+0x1e4>)
 81112ac:	f240 321f 	movw	r2, #799	@ 0x31f
 81112b0:	496f      	ldr	r1, [pc, #444]	@ (8111470 <etharp_output+0x1f0>)
 81112b2:	486e      	ldr	r0, [pc, #440]	@ (811146c <etharp_output+0x1ec>)
 81112b4:	f00a fdb2 	bl	811be1c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 81112b8:	687b      	ldr	r3, [r7, #4]
 81112ba:	2b00      	cmp	r3, #0
 81112bc:	d106      	bne.n	81112cc <etharp_output+0x4c>
 81112be:	4b69      	ldr	r3, [pc, #420]	@ (8111464 <etharp_output+0x1e4>)
 81112c0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 81112c4:	496b      	ldr	r1, [pc, #428]	@ (8111474 <etharp_output+0x1f4>)
 81112c6:	4869      	ldr	r0, [pc, #420]	@ (811146c <etharp_output+0x1ec>)
 81112c8:	f00a fda8 	bl	811be1c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 81112cc:	687b      	ldr	r3, [r7, #4]
 81112ce:	681b      	ldr	r3, [r3, #0]
 81112d0:	68f9      	ldr	r1, [r7, #12]
 81112d2:	4618      	mov	r0, r3
 81112d4:	f001 f8c8 	bl	8112468 <ip4_addr_isbroadcast_u32>
 81112d8:	4603      	mov	r3, r0
 81112da:	2b00      	cmp	r3, #0
 81112dc:	d002      	beq.n	81112e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 81112de:	4b66      	ldr	r3, [pc, #408]	@ (8111478 <etharp_output+0x1f8>)
 81112e0:	61fb      	str	r3, [r7, #28]
 81112e2:	e0af      	b.n	8111444 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 81112e4:	687b      	ldr	r3, [r7, #4]
 81112e6:	681b      	ldr	r3, [r3, #0]
 81112e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81112ec:	2be0      	cmp	r3, #224	@ 0xe0
 81112ee:	d118      	bne.n	8111322 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 81112f0:	2301      	movs	r3, #1
 81112f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 81112f4:	2300      	movs	r3, #0
 81112f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 81112f8:	235e      	movs	r3, #94	@ 0x5e
 81112fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 81112fc:	687b      	ldr	r3, [r7, #4]
 81112fe:	3301      	adds	r3, #1
 8111300:	781b      	ldrb	r3, [r3, #0]
 8111302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8111306:	b2db      	uxtb	r3, r3
 8111308:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 811130a:	687b      	ldr	r3, [r7, #4]
 811130c:	3302      	adds	r3, #2
 811130e:	781b      	ldrb	r3, [r3, #0]
 8111310:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8111312:	687b      	ldr	r3, [r7, #4]
 8111314:	3303      	adds	r3, #3
 8111316:	781b      	ldrb	r3, [r3, #0]
 8111318:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 811131a:	f107 0310 	add.w	r3, r7, #16
 811131e:	61fb      	str	r3, [r7, #28]
 8111320:	e090      	b.n	8111444 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8111322:	687b      	ldr	r3, [r7, #4]
 8111324:	681a      	ldr	r2, [r3, #0]
 8111326:	68fb      	ldr	r3, [r7, #12]
 8111328:	3304      	adds	r3, #4
 811132a:	681b      	ldr	r3, [r3, #0]
 811132c:	405a      	eors	r2, r3
 811132e:	68fb      	ldr	r3, [r7, #12]
 8111330:	3308      	adds	r3, #8
 8111332:	681b      	ldr	r3, [r3, #0]
 8111334:	4013      	ands	r3, r2
 8111336:	2b00      	cmp	r3, #0
 8111338:	d012      	beq.n	8111360 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 811133a:	687b      	ldr	r3, [r7, #4]
 811133c:	681b      	ldr	r3, [r3, #0]
 811133e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8111340:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8111344:	4293      	cmp	r3, r2
 8111346:	d00b      	beq.n	8111360 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8111348:	68fb      	ldr	r3, [r7, #12]
 811134a:	330c      	adds	r3, #12
 811134c:	681b      	ldr	r3, [r3, #0]
 811134e:	2b00      	cmp	r3, #0
 8111350:	d003      	beq.n	811135a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8111352:	68fb      	ldr	r3, [r7, #12]
 8111354:	330c      	adds	r3, #12
 8111356:	61bb      	str	r3, [r7, #24]
 8111358:	e002      	b.n	8111360 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 811135a:	f06f 0303 	mvn.w	r3, #3
 811135e:	e07d      	b.n	811145c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8111360:	4b46      	ldr	r3, [pc, #280]	@ (811147c <etharp_output+0x1fc>)
 8111362:	781b      	ldrb	r3, [r3, #0]
 8111364:	4619      	mov	r1, r3
 8111366:	4a46      	ldr	r2, [pc, #280]	@ (8111480 <etharp_output+0x200>)
 8111368:	460b      	mov	r3, r1
 811136a:	005b      	lsls	r3, r3, #1
 811136c:	440b      	add	r3, r1
 811136e:	00db      	lsls	r3, r3, #3
 8111370:	4413      	add	r3, r2
 8111372:	3314      	adds	r3, #20
 8111374:	781b      	ldrb	r3, [r3, #0]
 8111376:	2b01      	cmp	r3, #1
 8111378:	d925      	bls.n	81113c6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 811137a:	4b40      	ldr	r3, [pc, #256]	@ (811147c <etharp_output+0x1fc>)
 811137c:	781b      	ldrb	r3, [r3, #0]
 811137e:	4619      	mov	r1, r3
 8111380:	4a3f      	ldr	r2, [pc, #252]	@ (8111480 <etharp_output+0x200>)
 8111382:	460b      	mov	r3, r1
 8111384:	005b      	lsls	r3, r3, #1
 8111386:	440b      	add	r3, r1
 8111388:	00db      	lsls	r3, r3, #3
 811138a:	4413      	add	r3, r2
 811138c:	3308      	adds	r3, #8
 811138e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8111390:	68fa      	ldr	r2, [r7, #12]
 8111392:	429a      	cmp	r2, r3
 8111394:	d117      	bne.n	81113c6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8111396:	69bb      	ldr	r3, [r7, #24]
 8111398:	681a      	ldr	r2, [r3, #0]
 811139a:	4b38      	ldr	r3, [pc, #224]	@ (811147c <etharp_output+0x1fc>)
 811139c:	781b      	ldrb	r3, [r3, #0]
 811139e:	4618      	mov	r0, r3
 81113a0:	4937      	ldr	r1, [pc, #220]	@ (8111480 <etharp_output+0x200>)
 81113a2:	4603      	mov	r3, r0
 81113a4:	005b      	lsls	r3, r3, #1
 81113a6:	4403      	add	r3, r0
 81113a8:	00db      	lsls	r3, r3, #3
 81113aa:	440b      	add	r3, r1
 81113ac:	3304      	adds	r3, #4
 81113ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 81113b0:	429a      	cmp	r2, r3
 81113b2:	d108      	bne.n	81113c6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 81113b4:	4b31      	ldr	r3, [pc, #196]	@ (811147c <etharp_output+0x1fc>)
 81113b6:	781b      	ldrb	r3, [r3, #0]
 81113b8:	461a      	mov	r2, r3
 81113ba:	68b9      	ldr	r1, [r7, #8]
 81113bc:	68f8      	ldr	r0, [r7, #12]
 81113be:	f7ff fec5 	bl	811114c <etharp_output_to_arp_index>
 81113c2:	4603      	mov	r3, r0
 81113c4:	e04a      	b.n	811145c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 81113c6:	2300      	movs	r3, #0
 81113c8:	75fb      	strb	r3, [r7, #23]
 81113ca:	e031      	b.n	8111430 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 81113cc:	7dfa      	ldrb	r2, [r7, #23]
 81113ce:	492c      	ldr	r1, [pc, #176]	@ (8111480 <etharp_output+0x200>)
 81113d0:	4613      	mov	r3, r2
 81113d2:	005b      	lsls	r3, r3, #1
 81113d4:	4413      	add	r3, r2
 81113d6:	00db      	lsls	r3, r3, #3
 81113d8:	440b      	add	r3, r1
 81113da:	3314      	adds	r3, #20
 81113dc:	781b      	ldrb	r3, [r3, #0]
 81113de:	2b01      	cmp	r3, #1
 81113e0:	d923      	bls.n	811142a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 81113e2:	7dfa      	ldrb	r2, [r7, #23]
 81113e4:	4926      	ldr	r1, [pc, #152]	@ (8111480 <etharp_output+0x200>)
 81113e6:	4613      	mov	r3, r2
 81113e8:	005b      	lsls	r3, r3, #1
 81113ea:	4413      	add	r3, r2
 81113ec:	00db      	lsls	r3, r3, #3
 81113ee:	440b      	add	r3, r1
 81113f0:	3308      	adds	r3, #8
 81113f2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 81113f4:	68fa      	ldr	r2, [r7, #12]
 81113f6:	429a      	cmp	r2, r3
 81113f8:	d117      	bne.n	811142a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 81113fa:	69bb      	ldr	r3, [r7, #24]
 81113fc:	6819      	ldr	r1, [r3, #0]
 81113fe:	7dfa      	ldrb	r2, [r7, #23]
 8111400:	481f      	ldr	r0, [pc, #124]	@ (8111480 <etharp_output+0x200>)
 8111402:	4613      	mov	r3, r2
 8111404:	005b      	lsls	r3, r3, #1
 8111406:	4413      	add	r3, r2
 8111408:	00db      	lsls	r3, r3, #3
 811140a:	4403      	add	r3, r0
 811140c:	3304      	adds	r3, #4
 811140e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8111410:	4299      	cmp	r1, r3
 8111412:	d10a      	bne.n	811142a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8111414:	4a19      	ldr	r2, [pc, #100]	@ (811147c <etharp_output+0x1fc>)
 8111416:	7dfb      	ldrb	r3, [r7, #23]
 8111418:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 811141a:	7dfb      	ldrb	r3, [r7, #23]
 811141c:	461a      	mov	r2, r3
 811141e:	68b9      	ldr	r1, [r7, #8]
 8111420:	68f8      	ldr	r0, [r7, #12]
 8111422:	f7ff fe93 	bl	811114c <etharp_output_to_arp_index>
 8111426:	4603      	mov	r3, r0
 8111428:	e018      	b.n	811145c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 811142a:	7dfb      	ldrb	r3, [r7, #23]
 811142c:	3301      	adds	r3, #1
 811142e:	75fb      	strb	r3, [r7, #23]
 8111430:	7dfb      	ldrb	r3, [r7, #23]
 8111432:	2b09      	cmp	r3, #9
 8111434:	d9ca      	bls.n	81113cc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8111436:	68ba      	ldr	r2, [r7, #8]
 8111438:	69b9      	ldr	r1, [r7, #24]
 811143a:	68f8      	ldr	r0, [r7, #12]
 811143c:	f000 f822 	bl	8111484 <etharp_query>
 8111440:	4603      	mov	r3, r0
 8111442:	e00b      	b.n	811145c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8111444:	68fb      	ldr	r3, [r7, #12]
 8111446:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 811144a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 811144e:	9300      	str	r3, [sp, #0]
 8111450:	69fb      	ldr	r3, [r7, #28]
 8111452:	68b9      	ldr	r1, [r7, #8]
 8111454:	68f8      	ldr	r0, [r7, #12]
 8111456:	f000 faa1 	bl	811199c <ethernet_output>
 811145a:	4603      	mov	r3, r0
}
 811145c:	4618      	mov	r0, r3
 811145e:	3720      	adds	r7, #32
 8111460:	46bd      	mov	sp, r7
 8111462:	bd80      	pop	{r7, pc}
 8111464:	0811cd28 	.word	0x0811cd28
 8111468:	0811ceb8 	.word	0x0811ceb8
 811146c:	0811cde0 	.word	0x0811cde0
 8111470:	0811cf08 	.word	0x0811cf08
 8111474:	0811cea8 	.word	0x0811cea8
 8111478:	0811fc10 	.word	0x0811fc10
 811147c:	1000b240 	.word	0x1000b240
 8111480:	1000b150 	.word	0x1000b150

08111484 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8111484:	b580      	push	{r7, lr}
 8111486:	b08c      	sub	sp, #48	@ 0x30
 8111488:	af02      	add	r7, sp, #8
 811148a:	60f8      	str	r0, [r7, #12]
 811148c:	60b9      	str	r1, [r7, #8]
 811148e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8111490:	68fb      	ldr	r3, [r7, #12]
 8111492:	3326      	adds	r3, #38	@ 0x26
 8111494:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8111496:	23ff      	movs	r3, #255	@ 0xff
 8111498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 811149c:	2300      	movs	r3, #0
 811149e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 81114a0:	68bb      	ldr	r3, [r7, #8]
 81114a2:	681b      	ldr	r3, [r3, #0]
 81114a4:	68f9      	ldr	r1, [r7, #12]
 81114a6:	4618      	mov	r0, r3
 81114a8:	f000 ffde 	bl	8112468 <ip4_addr_isbroadcast_u32>
 81114ac:	4603      	mov	r3, r0
 81114ae:	2b00      	cmp	r3, #0
 81114b0:	d10c      	bne.n	81114cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 81114b2:	68bb      	ldr	r3, [r7, #8]
 81114b4:	681b      	ldr	r3, [r3, #0]
 81114b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 81114ba:	2be0      	cmp	r3, #224	@ 0xe0
 81114bc:	d006      	beq.n	81114cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 81114be:	68bb      	ldr	r3, [r7, #8]
 81114c0:	2b00      	cmp	r3, #0
 81114c2:	d003      	beq.n	81114cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 81114c4:	68bb      	ldr	r3, [r7, #8]
 81114c6:	681b      	ldr	r3, [r3, #0]
 81114c8:	2b00      	cmp	r3, #0
 81114ca:	d102      	bne.n	81114d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 81114cc:	f06f 030f 	mvn.w	r3, #15
 81114d0:	e101      	b.n	81116d6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 81114d2:	68fa      	ldr	r2, [r7, #12]
 81114d4:	2101      	movs	r1, #1
 81114d6:	68b8      	ldr	r0, [r7, #8]
 81114d8:	f7ff fb60 	bl	8110b9c <etharp_find_entry>
 81114dc:	4603      	mov	r3, r0
 81114de:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 81114e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81114e4:	2b00      	cmp	r3, #0
 81114e6:	da02      	bge.n	81114ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 81114e8:	8a7b      	ldrh	r3, [r7, #18]
 81114ea:	b25b      	sxtb	r3, r3
 81114ec:	e0f3      	b.n	81116d6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 81114ee:	8a7b      	ldrh	r3, [r7, #18]
 81114f0:	2b7e      	cmp	r3, #126	@ 0x7e
 81114f2:	d906      	bls.n	8111502 <etharp_query+0x7e>
 81114f4:	4b7a      	ldr	r3, [pc, #488]	@ (81116e0 <etharp_query+0x25c>)
 81114f6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 81114fa:	497a      	ldr	r1, [pc, #488]	@ (81116e4 <etharp_query+0x260>)
 81114fc:	487a      	ldr	r0, [pc, #488]	@ (81116e8 <etharp_query+0x264>)
 81114fe:	f00a fc8d 	bl	811be1c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8111502:	8a7b      	ldrh	r3, [r7, #18]
 8111504:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8111506:	7c7a      	ldrb	r2, [r7, #17]
 8111508:	4978      	ldr	r1, [pc, #480]	@ (81116ec <etharp_query+0x268>)
 811150a:	4613      	mov	r3, r2
 811150c:	005b      	lsls	r3, r3, #1
 811150e:	4413      	add	r3, r2
 8111510:	00db      	lsls	r3, r3, #3
 8111512:	440b      	add	r3, r1
 8111514:	3314      	adds	r3, #20
 8111516:	781b      	ldrb	r3, [r3, #0]
 8111518:	2b00      	cmp	r3, #0
 811151a:	d115      	bne.n	8111548 <etharp_query+0xc4>
    is_new_entry = 1;
 811151c:	2301      	movs	r3, #1
 811151e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8111520:	7c7a      	ldrb	r2, [r7, #17]
 8111522:	4972      	ldr	r1, [pc, #456]	@ (81116ec <etharp_query+0x268>)
 8111524:	4613      	mov	r3, r2
 8111526:	005b      	lsls	r3, r3, #1
 8111528:	4413      	add	r3, r2
 811152a:	00db      	lsls	r3, r3, #3
 811152c:	440b      	add	r3, r1
 811152e:	3314      	adds	r3, #20
 8111530:	2201      	movs	r2, #1
 8111532:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8111534:	7c7a      	ldrb	r2, [r7, #17]
 8111536:	496d      	ldr	r1, [pc, #436]	@ (81116ec <etharp_query+0x268>)
 8111538:	4613      	mov	r3, r2
 811153a:	005b      	lsls	r3, r3, #1
 811153c:	4413      	add	r3, r2
 811153e:	00db      	lsls	r3, r3, #3
 8111540:	440b      	add	r3, r1
 8111542:	3308      	adds	r3, #8
 8111544:	68fa      	ldr	r2, [r7, #12]
 8111546:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8111548:	7c7a      	ldrb	r2, [r7, #17]
 811154a:	4968      	ldr	r1, [pc, #416]	@ (81116ec <etharp_query+0x268>)
 811154c:	4613      	mov	r3, r2
 811154e:	005b      	lsls	r3, r3, #1
 8111550:	4413      	add	r3, r2
 8111552:	00db      	lsls	r3, r3, #3
 8111554:	440b      	add	r3, r1
 8111556:	3314      	adds	r3, #20
 8111558:	781b      	ldrb	r3, [r3, #0]
 811155a:	2b01      	cmp	r3, #1
 811155c:	d011      	beq.n	8111582 <etharp_query+0xfe>
 811155e:	7c7a      	ldrb	r2, [r7, #17]
 8111560:	4962      	ldr	r1, [pc, #392]	@ (81116ec <etharp_query+0x268>)
 8111562:	4613      	mov	r3, r2
 8111564:	005b      	lsls	r3, r3, #1
 8111566:	4413      	add	r3, r2
 8111568:	00db      	lsls	r3, r3, #3
 811156a:	440b      	add	r3, r1
 811156c:	3314      	adds	r3, #20
 811156e:	781b      	ldrb	r3, [r3, #0]
 8111570:	2b01      	cmp	r3, #1
 8111572:	d806      	bhi.n	8111582 <etharp_query+0xfe>
 8111574:	4b5a      	ldr	r3, [pc, #360]	@ (81116e0 <etharp_query+0x25c>)
 8111576:	f240 32cd 	movw	r2, #973	@ 0x3cd
 811157a:	495d      	ldr	r1, [pc, #372]	@ (81116f0 <etharp_query+0x26c>)
 811157c:	485a      	ldr	r0, [pc, #360]	@ (81116e8 <etharp_query+0x264>)
 811157e:	f00a fc4d 	bl	811be1c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8111582:	6a3b      	ldr	r3, [r7, #32]
 8111584:	2b00      	cmp	r3, #0
 8111586:	d102      	bne.n	811158e <etharp_query+0x10a>
 8111588:	687b      	ldr	r3, [r7, #4]
 811158a:	2b00      	cmp	r3, #0
 811158c:	d10c      	bne.n	81115a8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 811158e:	68b9      	ldr	r1, [r7, #8]
 8111590:	68f8      	ldr	r0, [r7, #12]
 8111592:	f000 f963 	bl	811185c <etharp_request>
 8111596:	4603      	mov	r3, r0
 8111598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 811159c:	687b      	ldr	r3, [r7, #4]
 811159e:	2b00      	cmp	r3, #0
 81115a0:	d102      	bne.n	81115a8 <etharp_query+0x124>
      return result;
 81115a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 81115a6:	e096      	b.n	81116d6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 81115a8:	687b      	ldr	r3, [r7, #4]
 81115aa:	2b00      	cmp	r3, #0
 81115ac:	d106      	bne.n	81115bc <etharp_query+0x138>
 81115ae:	4b4c      	ldr	r3, [pc, #304]	@ (81116e0 <etharp_query+0x25c>)
 81115b0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 81115b4:	494f      	ldr	r1, [pc, #316]	@ (81116f4 <etharp_query+0x270>)
 81115b6:	484c      	ldr	r0, [pc, #304]	@ (81116e8 <etharp_query+0x264>)
 81115b8:	f00a fc30 	bl	811be1c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 81115bc:	7c7a      	ldrb	r2, [r7, #17]
 81115be:	494b      	ldr	r1, [pc, #300]	@ (81116ec <etharp_query+0x268>)
 81115c0:	4613      	mov	r3, r2
 81115c2:	005b      	lsls	r3, r3, #1
 81115c4:	4413      	add	r3, r2
 81115c6:	00db      	lsls	r3, r3, #3
 81115c8:	440b      	add	r3, r1
 81115ca:	3314      	adds	r3, #20
 81115cc:	781b      	ldrb	r3, [r3, #0]
 81115ce:	2b01      	cmp	r3, #1
 81115d0:	d917      	bls.n	8111602 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 81115d2:	4a49      	ldr	r2, [pc, #292]	@ (81116f8 <etharp_query+0x274>)
 81115d4:	7c7b      	ldrb	r3, [r7, #17]
 81115d6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 81115d8:	7c7a      	ldrb	r2, [r7, #17]
 81115da:	4613      	mov	r3, r2
 81115dc:	005b      	lsls	r3, r3, #1
 81115de:	4413      	add	r3, r2
 81115e0:	00db      	lsls	r3, r3, #3
 81115e2:	3308      	adds	r3, #8
 81115e4:	4a41      	ldr	r2, [pc, #260]	@ (81116ec <etharp_query+0x268>)
 81115e6:	4413      	add	r3, r2
 81115e8:	3304      	adds	r3, #4
 81115ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81115ee:	9200      	str	r2, [sp, #0]
 81115f0:	697a      	ldr	r2, [r7, #20]
 81115f2:	6879      	ldr	r1, [r7, #4]
 81115f4:	68f8      	ldr	r0, [r7, #12]
 81115f6:	f000 f9d1 	bl	811199c <ethernet_output>
 81115fa:	4603      	mov	r3, r0
 81115fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8111600:	e067      	b.n	81116d2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8111602:	7c7a      	ldrb	r2, [r7, #17]
 8111604:	4939      	ldr	r1, [pc, #228]	@ (81116ec <etharp_query+0x268>)
 8111606:	4613      	mov	r3, r2
 8111608:	005b      	lsls	r3, r3, #1
 811160a:	4413      	add	r3, r2
 811160c:	00db      	lsls	r3, r3, #3
 811160e:	440b      	add	r3, r1
 8111610:	3314      	adds	r3, #20
 8111612:	781b      	ldrb	r3, [r3, #0]
 8111614:	2b01      	cmp	r3, #1
 8111616:	d15c      	bne.n	81116d2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8111618:	2300      	movs	r3, #0
 811161a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 811161c:	687b      	ldr	r3, [r7, #4]
 811161e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8111620:	e01c      	b.n	811165c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8111622:	69fb      	ldr	r3, [r7, #28]
 8111624:	895a      	ldrh	r2, [r3, #10]
 8111626:	69fb      	ldr	r3, [r7, #28]
 8111628:	891b      	ldrh	r3, [r3, #8]
 811162a:	429a      	cmp	r2, r3
 811162c:	d10a      	bne.n	8111644 <etharp_query+0x1c0>
 811162e:	69fb      	ldr	r3, [r7, #28]
 8111630:	681b      	ldr	r3, [r3, #0]
 8111632:	2b00      	cmp	r3, #0
 8111634:	d006      	beq.n	8111644 <etharp_query+0x1c0>
 8111636:	4b2a      	ldr	r3, [pc, #168]	@ (81116e0 <etharp_query+0x25c>)
 8111638:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 811163c:	492f      	ldr	r1, [pc, #188]	@ (81116fc <etharp_query+0x278>)
 811163e:	482a      	ldr	r0, [pc, #168]	@ (81116e8 <etharp_query+0x264>)
 8111640:	f00a fbec 	bl	811be1c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8111644:	69fb      	ldr	r3, [r7, #28]
 8111646:	7b1b      	ldrb	r3, [r3, #12]
 8111648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 811164c:	2b00      	cmp	r3, #0
 811164e:	d002      	beq.n	8111656 <etharp_query+0x1d2>
        copy_needed = 1;
 8111650:	2301      	movs	r3, #1
 8111652:	61bb      	str	r3, [r7, #24]
        break;
 8111654:	e005      	b.n	8111662 <etharp_query+0x1de>
      }
      p = p->next;
 8111656:	69fb      	ldr	r3, [r7, #28]
 8111658:	681b      	ldr	r3, [r3, #0]
 811165a:	61fb      	str	r3, [r7, #28]
    while (p) {
 811165c:	69fb      	ldr	r3, [r7, #28]
 811165e:	2b00      	cmp	r3, #0
 8111660:	d1df      	bne.n	8111622 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8111662:	69bb      	ldr	r3, [r7, #24]
 8111664:	2b00      	cmp	r3, #0
 8111666:	d007      	beq.n	8111678 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8111668:	687a      	ldr	r2, [r7, #4]
 811166a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 811166e:	200e      	movs	r0, #14
 8111670:	f003 fb7a 	bl	8114d68 <pbuf_clone>
 8111674:	61f8      	str	r0, [r7, #28]
 8111676:	e004      	b.n	8111682 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8111678:	687b      	ldr	r3, [r7, #4]
 811167a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 811167c:	69f8      	ldr	r0, [r7, #28]
 811167e:	f003 f9b1 	bl	81149e4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8111682:	69fb      	ldr	r3, [r7, #28]
 8111684:	2b00      	cmp	r3, #0
 8111686:	d021      	beq.n	81116cc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8111688:	7c7a      	ldrb	r2, [r7, #17]
 811168a:	4918      	ldr	r1, [pc, #96]	@ (81116ec <etharp_query+0x268>)
 811168c:	4613      	mov	r3, r2
 811168e:	005b      	lsls	r3, r3, #1
 8111690:	4413      	add	r3, r2
 8111692:	00db      	lsls	r3, r3, #3
 8111694:	440b      	add	r3, r1
 8111696:	681b      	ldr	r3, [r3, #0]
 8111698:	2b00      	cmp	r3, #0
 811169a:	d00a      	beq.n	81116b2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 811169c:	7c7a      	ldrb	r2, [r7, #17]
 811169e:	4913      	ldr	r1, [pc, #76]	@ (81116ec <etharp_query+0x268>)
 81116a0:	4613      	mov	r3, r2
 81116a2:	005b      	lsls	r3, r3, #1
 81116a4:	4413      	add	r3, r2
 81116a6:	00db      	lsls	r3, r3, #3
 81116a8:	440b      	add	r3, r1
 81116aa:	681b      	ldr	r3, [r3, #0]
 81116ac:	4618      	mov	r0, r3
 81116ae:	f003 f8f3 	bl	8114898 <pbuf_free>
      }
      arp_table[i].q = p;
 81116b2:	7c7a      	ldrb	r2, [r7, #17]
 81116b4:	490d      	ldr	r1, [pc, #52]	@ (81116ec <etharp_query+0x268>)
 81116b6:	4613      	mov	r3, r2
 81116b8:	005b      	lsls	r3, r3, #1
 81116ba:	4413      	add	r3, r2
 81116bc:	00db      	lsls	r3, r3, #3
 81116be:	440b      	add	r3, r1
 81116c0:	69fa      	ldr	r2, [r7, #28]
 81116c2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 81116c4:	2300      	movs	r3, #0
 81116c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81116ca:	e002      	b.n	81116d2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 81116cc:	23ff      	movs	r3, #255	@ 0xff
 81116ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 81116d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 81116d6:	4618      	mov	r0, r3
 81116d8:	3728      	adds	r7, #40	@ 0x28
 81116da:	46bd      	mov	sp, r7
 81116dc:	bd80      	pop	{r7, pc}
 81116de:	bf00      	nop
 81116e0:	0811cd28 	.word	0x0811cd28
 81116e4:	0811cf14 	.word	0x0811cf14
 81116e8:	0811cde0 	.word	0x0811cde0
 81116ec:	1000b150 	.word	0x1000b150
 81116f0:	0811cf24 	.word	0x0811cf24
 81116f4:	0811cf08 	.word	0x0811cf08
 81116f8:	1000b240 	.word	0x1000b240
 81116fc:	0811cf4c 	.word	0x0811cf4c

08111700 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8111700:	b580      	push	{r7, lr}
 8111702:	b08a      	sub	sp, #40	@ 0x28
 8111704:	af02      	add	r7, sp, #8
 8111706:	60f8      	str	r0, [r7, #12]
 8111708:	60b9      	str	r1, [r7, #8]
 811170a:	607a      	str	r2, [r7, #4]
 811170c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 811170e:	2300      	movs	r3, #0
 8111710:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8111712:	68fb      	ldr	r3, [r7, #12]
 8111714:	2b00      	cmp	r3, #0
 8111716:	d106      	bne.n	8111726 <etharp_raw+0x26>
 8111718:	4b3a      	ldr	r3, [pc, #232]	@ (8111804 <etharp_raw+0x104>)
 811171a:	f240 4257 	movw	r2, #1111	@ 0x457
 811171e:	493a      	ldr	r1, [pc, #232]	@ (8111808 <etharp_raw+0x108>)
 8111720:	483a      	ldr	r0, [pc, #232]	@ (811180c <etharp_raw+0x10c>)
 8111722:	f00a fb7b 	bl	811be1c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8111726:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811172a:	211c      	movs	r1, #28
 811172c:	200e      	movs	r0, #14
 811172e:	f002 fdcf 	bl	81142d0 <pbuf_alloc>
 8111732:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8111734:	69bb      	ldr	r3, [r7, #24]
 8111736:	2b00      	cmp	r3, #0
 8111738:	d102      	bne.n	8111740 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 811173a:	f04f 33ff 	mov.w	r3, #4294967295
 811173e:	e05d      	b.n	81117fc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8111740:	69bb      	ldr	r3, [r7, #24]
 8111742:	895b      	ldrh	r3, [r3, #10]
 8111744:	2b1b      	cmp	r3, #27
 8111746:	d806      	bhi.n	8111756 <etharp_raw+0x56>
 8111748:	4b2e      	ldr	r3, [pc, #184]	@ (8111804 <etharp_raw+0x104>)
 811174a:	f240 4262 	movw	r2, #1122	@ 0x462
 811174e:	4930      	ldr	r1, [pc, #192]	@ (8111810 <etharp_raw+0x110>)
 8111750:	482e      	ldr	r0, [pc, #184]	@ (811180c <etharp_raw+0x10c>)
 8111752:	f00a fb63 	bl	811be1c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8111756:	69bb      	ldr	r3, [r7, #24]
 8111758:	685b      	ldr	r3, [r3, #4]
 811175a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 811175c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 811175e:	4618      	mov	r0, r3
 8111760:	f7ff f914 	bl	811098c <lwip_htons>
 8111764:	4603      	mov	r3, r0
 8111766:	461a      	mov	r2, r3
 8111768:	697b      	ldr	r3, [r7, #20]
 811176a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 811176c:	68fb      	ldr	r3, [r7, #12]
 811176e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8111772:	2b06      	cmp	r3, #6
 8111774:	d006      	beq.n	8111784 <etharp_raw+0x84>
 8111776:	4b23      	ldr	r3, [pc, #140]	@ (8111804 <etharp_raw+0x104>)
 8111778:	f240 4269 	movw	r2, #1129	@ 0x469
 811177c:	4925      	ldr	r1, [pc, #148]	@ (8111814 <etharp_raw+0x114>)
 811177e:	4823      	ldr	r0, [pc, #140]	@ (811180c <etharp_raw+0x10c>)
 8111780:	f00a fb4c 	bl	811be1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8111784:	697b      	ldr	r3, [r7, #20]
 8111786:	3308      	adds	r3, #8
 8111788:	2206      	movs	r2, #6
 811178a:	6839      	ldr	r1, [r7, #0]
 811178c:	4618      	mov	r0, r3
 811178e:	f00a fcf6 	bl	811c17e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8111792:	697b      	ldr	r3, [r7, #20]
 8111794:	3312      	adds	r3, #18
 8111796:	2206      	movs	r2, #6
 8111798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811179a:	4618      	mov	r0, r3
 811179c:	f00a fcef 	bl	811c17e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 81117a0:	697b      	ldr	r3, [r7, #20]
 81117a2:	330e      	adds	r3, #14
 81117a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81117a6:	6812      	ldr	r2, [r2, #0]
 81117a8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 81117aa:	697b      	ldr	r3, [r7, #20]
 81117ac:	3318      	adds	r3, #24
 81117ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81117b0:	6812      	ldr	r2, [r2, #0]
 81117b2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 81117b4:	697b      	ldr	r3, [r7, #20]
 81117b6:	2200      	movs	r2, #0
 81117b8:	701a      	strb	r2, [r3, #0]
 81117ba:	2200      	movs	r2, #0
 81117bc:	f042 0201 	orr.w	r2, r2, #1
 81117c0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 81117c2:	697b      	ldr	r3, [r7, #20]
 81117c4:	2200      	movs	r2, #0
 81117c6:	f042 0208 	orr.w	r2, r2, #8
 81117ca:	709a      	strb	r2, [r3, #2]
 81117cc:	2200      	movs	r2, #0
 81117ce:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 81117d0:	697b      	ldr	r3, [r7, #20]
 81117d2:	2206      	movs	r2, #6
 81117d4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 81117d6:	697b      	ldr	r3, [r7, #20]
 81117d8:	2204      	movs	r2, #4
 81117da:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 81117dc:	f640 0306 	movw	r3, #2054	@ 0x806
 81117e0:	9300      	str	r3, [sp, #0]
 81117e2:	687b      	ldr	r3, [r7, #4]
 81117e4:	68ba      	ldr	r2, [r7, #8]
 81117e6:	69b9      	ldr	r1, [r7, #24]
 81117e8:	68f8      	ldr	r0, [r7, #12]
 81117ea:	f000 f8d7 	bl	811199c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 81117ee:	69b8      	ldr	r0, [r7, #24]
 81117f0:	f003 f852 	bl	8114898 <pbuf_free>
  p = NULL;
 81117f4:	2300      	movs	r3, #0
 81117f6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 81117f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 81117fc:	4618      	mov	r0, r3
 81117fe:	3720      	adds	r7, #32
 8111800:	46bd      	mov	sp, r7
 8111802:	bd80      	pop	{r7, pc}
 8111804:	0811cd28 	.word	0x0811cd28
 8111808:	0811ceb8 	.word	0x0811ceb8
 811180c:	0811cde0 	.word	0x0811cde0
 8111810:	0811cf68 	.word	0x0811cf68
 8111814:	0811cf9c 	.word	0x0811cf9c

08111818 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8111818:	b580      	push	{r7, lr}
 811181a:	b088      	sub	sp, #32
 811181c:	af04      	add	r7, sp, #16
 811181e:	60f8      	str	r0, [r7, #12]
 8111820:	60b9      	str	r1, [r7, #8]
 8111822:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8111824:	68fb      	ldr	r3, [r7, #12]
 8111826:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 811182a:	68fb      	ldr	r3, [r7, #12]
 811182c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8111830:	68fb      	ldr	r3, [r7, #12]
 8111832:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8111834:	2201      	movs	r2, #1
 8111836:	9203      	str	r2, [sp, #12]
 8111838:	68ba      	ldr	r2, [r7, #8]
 811183a:	9202      	str	r2, [sp, #8]
 811183c:	4a06      	ldr	r2, [pc, #24]	@ (8111858 <etharp_request_dst+0x40>)
 811183e:	9201      	str	r2, [sp, #4]
 8111840:	9300      	str	r3, [sp, #0]
 8111842:	4603      	mov	r3, r0
 8111844:	687a      	ldr	r2, [r7, #4]
 8111846:	68f8      	ldr	r0, [r7, #12]
 8111848:	f7ff ff5a 	bl	8111700 <etharp_raw>
 811184c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 811184e:	4618      	mov	r0, r3
 8111850:	3710      	adds	r7, #16
 8111852:	46bd      	mov	sp, r7
 8111854:	bd80      	pop	{r7, pc}
 8111856:	bf00      	nop
 8111858:	0811fc18 	.word	0x0811fc18

0811185c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 811185c:	b580      	push	{r7, lr}
 811185e:	b082      	sub	sp, #8
 8111860:	af00      	add	r7, sp, #0
 8111862:	6078      	str	r0, [r7, #4]
 8111864:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8111866:	4a05      	ldr	r2, [pc, #20]	@ (811187c <etharp_request+0x20>)
 8111868:	6839      	ldr	r1, [r7, #0]
 811186a:	6878      	ldr	r0, [r7, #4]
 811186c:	f7ff ffd4 	bl	8111818 <etharp_request_dst>
 8111870:	4603      	mov	r3, r0
}
 8111872:	4618      	mov	r0, r3
 8111874:	3708      	adds	r7, #8
 8111876:	46bd      	mov	sp, r7
 8111878:	bd80      	pop	{r7, pc}
 811187a:	bf00      	nop
 811187c:	0811fc10 	.word	0x0811fc10

08111880 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8111880:	b580      	push	{r7, lr}
 8111882:	b086      	sub	sp, #24
 8111884:	af00      	add	r7, sp, #0
 8111886:	6078      	str	r0, [r7, #4]
 8111888:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 811188a:	230e      	movs	r3, #14
 811188c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 811188e:	687b      	ldr	r3, [r7, #4]
 8111890:	895b      	ldrh	r3, [r3, #10]
 8111892:	2b0e      	cmp	r3, #14
 8111894:	d96e      	bls.n	8111974 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8111896:	687b      	ldr	r3, [r7, #4]
 8111898:	7bdb      	ldrb	r3, [r3, #15]
 811189a:	2b00      	cmp	r3, #0
 811189c:	d106      	bne.n	81118ac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 811189e:	683b      	ldr	r3, [r7, #0]
 81118a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81118a4:	3301      	adds	r3, #1
 81118a6:	b2da      	uxtb	r2, r3
 81118a8:	687b      	ldr	r3, [r7, #4]
 81118aa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 81118ac:	687b      	ldr	r3, [r7, #4]
 81118ae:	685b      	ldr	r3, [r3, #4]
 81118b0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 81118b2:	693b      	ldr	r3, [r7, #16]
 81118b4:	7b1a      	ldrb	r2, [r3, #12]
 81118b6:	7b5b      	ldrb	r3, [r3, #13]
 81118b8:	021b      	lsls	r3, r3, #8
 81118ba:	4313      	orrs	r3, r2
 81118bc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 81118be:	693b      	ldr	r3, [r7, #16]
 81118c0:	781b      	ldrb	r3, [r3, #0]
 81118c2:	f003 0301 	and.w	r3, r3, #1
 81118c6:	2b00      	cmp	r3, #0
 81118c8:	d023      	beq.n	8111912 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 81118ca:	693b      	ldr	r3, [r7, #16]
 81118cc:	781b      	ldrb	r3, [r3, #0]
 81118ce:	2b01      	cmp	r3, #1
 81118d0:	d10f      	bne.n	81118f2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 81118d2:	693b      	ldr	r3, [r7, #16]
 81118d4:	785b      	ldrb	r3, [r3, #1]
 81118d6:	2b00      	cmp	r3, #0
 81118d8:	d11b      	bne.n	8111912 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 81118da:	693b      	ldr	r3, [r7, #16]
 81118dc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 81118de:	2b5e      	cmp	r3, #94	@ 0x5e
 81118e0:	d117      	bne.n	8111912 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 81118e2:	687b      	ldr	r3, [r7, #4]
 81118e4:	7b5b      	ldrb	r3, [r3, #13]
 81118e6:	f043 0310 	orr.w	r3, r3, #16
 81118ea:	b2da      	uxtb	r2, r3
 81118ec:	687b      	ldr	r3, [r7, #4]
 81118ee:	735a      	strb	r2, [r3, #13]
 81118f0:	e00f      	b.n	8111912 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 81118f2:	693b      	ldr	r3, [r7, #16]
 81118f4:	2206      	movs	r2, #6
 81118f6:	4928      	ldr	r1, [pc, #160]	@ (8111998 <ethernet_input+0x118>)
 81118f8:	4618      	mov	r0, r3
 81118fa:	f00a fae4 	bl	811bec6 <memcmp>
 81118fe:	4603      	mov	r3, r0
 8111900:	2b00      	cmp	r3, #0
 8111902:	d106      	bne.n	8111912 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8111904:	687b      	ldr	r3, [r7, #4]
 8111906:	7b5b      	ldrb	r3, [r3, #13]
 8111908:	f043 0308 	orr.w	r3, r3, #8
 811190c:	b2da      	uxtb	r2, r3
 811190e:	687b      	ldr	r3, [r7, #4]
 8111910:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8111912:	89fb      	ldrh	r3, [r7, #14]
 8111914:	2b08      	cmp	r3, #8
 8111916:	d003      	beq.n	8111920 <ethernet_input+0xa0>
 8111918:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 811191c:	d014      	beq.n	8111948 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 811191e:	e032      	b.n	8111986 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8111920:	683b      	ldr	r3, [r7, #0]
 8111922:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8111926:	f003 0308 	and.w	r3, r3, #8
 811192a:	2b00      	cmp	r3, #0
 811192c:	d024      	beq.n	8111978 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 811192e:	8afb      	ldrh	r3, [r7, #22]
 8111930:	4619      	mov	r1, r3
 8111932:	6878      	ldr	r0, [r7, #4]
 8111934:	f002 ff2a 	bl	811478c <pbuf_remove_header>
 8111938:	4603      	mov	r3, r0
 811193a:	2b00      	cmp	r3, #0
 811193c:	d11e      	bne.n	811197c <ethernet_input+0xfc>
        ip4_input(p, netif);
 811193e:	6839      	ldr	r1, [r7, #0]
 8111940:	6878      	ldr	r0, [r7, #4]
 8111942:	f000 fb95 	bl	8112070 <ip4_input>
      break;
 8111946:	e013      	b.n	8111970 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8111948:	683b      	ldr	r3, [r7, #0]
 811194a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811194e:	f003 0308 	and.w	r3, r3, #8
 8111952:	2b00      	cmp	r3, #0
 8111954:	d014      	beq.n	8111980 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8111956:	8afb      	ldrh	r3, [r7, #22]
 8111958:	4619      	mov	r1, r3
 811195a:	6878      	ldr	r0, [r7, #4]
 811195c:	f002 ff16 	bl	811478c <pbuf_remove_header>
 8111960:	4603      	mov	r3, r0
 8111962:	2b00      	cmp	r3, #0
 8111964:	d10e      	bne.n	8111984 <ethernet_input+0x104>
        etharp_input(p, netif);
 8111966:	6839      	ldr	r1, [r7, #0]
 8111968:	6878      	ldr	r0, [r7, #4]
 811196a:	f7ff fb65 	bl	8111038 <etharp_input>
      break;
 811196e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8111970:	2300      	movs	r3, #0
 8111972:	e00c      	b.n	811198e <ethernet_input+0x10e>
    goto free_and_return;
 8111974:	bf00      	nop
 8111976:	e006      	b.n	8111986 <ethernet_input+0x106>
        goto free_and_return;
 8111978:	bf00      	nop
 811197a:	e004      	b.n	8111986 <ethernet_input+0x106>
        goto free_and_return;
 811197c:	bf00      	nop
 811197e:	e002      	b.n	8111986 <ethernet_input+0x106>
        goto free_and_return;
 8111980:	bf00      	nop
 8111982:	e000      	b.n	8111986 <ethernet_input+0x106>
        goto free_and_return;
 8111984:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8111986:	6878      	ldr	r0, [r7, #4]
 8111988:	f002 ff86 	bl	8114898 <pbuf_free>
  return ERR_OK;
 811198c:	2300      	movs	r3, #0
}
 811198e:	4618      	mov	r0, r3
 8111990:	3718      	adds	r7, #24
 8111992:	46bd      	mov	sp, r7
 8111994:	bd80      	pop	{r7, pc}
 8111996:	bf00      	nop
 8111998:	0811fc10 	.word	0x0811fc10

0811199c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 811199c:	b580      	push	{r7, lr}
 811199e:	b086      	sub	sp, #24
 81119a0:	af00      	add	r7, sp, #0
 81119a2:	60f8      	str	r0, [r7, #12]
 81119a4:	60b9      	str	r1, [r7, #8]
 81119a6:	607a      	str	r2, [r7, #4]
 81119a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 81119aa:	8c3b      	ldrh	r3, [r7, #32]
 81119ac:	4618      	mov	r0, r3
 81119ae:	f7fe ffed 	bl	811098c <lwip_htons>
 81119b2:	4603      	mov	r3, r0
 81119b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 81119b6:	210e      	movs	r1, #14
 81119b8:	68b8      	ldr	r0, [r7, #8]
 81119ba:	f002 fed7 	bl	811476c <pbuf_add_header>
 81119be:	4603      	mov	r3, r0
 81119c0:	2b00      	cmp	r3, #0
 81119c2:	d125      	bne.n	8111a10 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 81119c4:	68bb      	ldr	r3, [r7, #8]
 81119c6:	685b      	ldr	r3, [r3, #4]
 81119c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 81119ca:	693b      	ldr	r3, [r7, #16]
 81119cc:	8afa      	ldrh	r2, [r7, #22]
 81119ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 81119d0:	693b      	ldr	r3, [r7, #16]
 81119d2:	2206      	movs	r2, #6
 81119d4:	6839      	ldr	r1, [r7, #0]
 81119d6:	4618      	mov	r0, r3
 81119d8:	f00a fbd1 	bl	811c17e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 81119dc:	693b      	ldr	r3, [r7, #16]
 81119de:	3306      	adds	r3, #6
 81119e0:	2206      	movs	r2, #6
 81119e2:	6879      	ldr	r1, [r7, #4]
 81119e4:	4618      	mov	r0, r3
 81119e6:	f00a fbca 	bl	811c17e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 81119ea:	68fb      	ldr	r3, [r7, #12]
 81119ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 81119f0:	2b06      	cmp	r3, #6
 81119f2:	d006      	beq.n	8111a02 <ethernet_output+0x66>
 81119f4:	4b0a      	ldr	r3, [pc, #40]	@ (8111a20 <ethernet_output+0x84>)
 81119f6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 81119fa:	490a      	ldr	r1, [pc, #40]	@ (8111a24 <ethernet_output+0x88>)
 81119fc:	480a      	ldr	r0, [pc, #40]	@ (8111a28 <ethernet_output+0x8c>)
 81119fe:	f00a fa0d 	bl	811be1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8111a02:	68fb      	ldr	r3, [r7, #12]
 8111a04:	699b      	ldr	r3, [r3, #24]
 8111a06:	68b9      	ldr	r1, [r7, #8]
 8111a08:	68f8      	ldr	r0, [r7, #12]
 8111a0a:	4798      	blx	r3
 8111a0c:	4603      	mov	r3, r0
 8111a0e:	e002      	b.n	8111a16 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8111a10:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8111a12:	f06f 0301 	mvn.w	r3, #1
}
 8111a16:	4618      	mov	r0, r3
 8111a18:	3718      	adds	r7, #24
 8111a1a:	46bd      	mov	sp, r7
 8111a1c:	bd80      	pop	{r7, pc}
 8111a1e:	bf00      	nop
 8111a20:	0811cfe0 	.word	0x0811cfe0
 8111a24:	0811d054 	.word	0x0811d054
 8111a28:	0811d088 	.word	0x0811d088

08111a2c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8111a2c:	b580      	push	{r7, lr}
 8111a2e:	b08e      	sub	sp, #56	@ 0x38
 8111a30:	af04      	add	r7, sp, #16
 8111a32:	6078      	str	r0, [r7, #4]
 8111a34:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8111a36:	4b87      	ldr	r3, [pc, #540]	@ (8111c54 <icmp_input+0x228>)
 8111a38:	689b      	ldr	r3, [r3, #8]
 8111a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8111a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111a3e:	781b      	ldrb	r3, [r3, #0]
 8111a40:	f003 030f 	and.w	r3, r3, #15
 8111a44:	b2db      	uxtb	r3, r3
 8111a46:	009b      	lsls	r3, r3, #2
 8111a48:	b2db      	uxtb	r3, r3
 8111a4a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8111a4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111a4e:	2b13      	cmp	r3, #19
 8111a50:	f240 80e8 	bls.w	8111c24 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8111a54:	687b      	ldr	r3, [r7, #4]
 8111a56:	895b      	ldrh	r3, [r3, #10]
 8111a58:	2b03      	cmp	r3, #3
 8111a5a:	f240 80e5 	bls.w	8111c28 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8111a5e:	687b      	ldr	r3, [r7, #4]
 8111a60:	685b      	ldr	r3, [r3, #4]
 8111a62:	781b      	ldrb	r3, [r3, #0]
 8111a64:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8111a68:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8111a6c:	2b00      	cmp	r3, #0
 8111a6e:	f000 80d2 	beq.w	8111c16 <icmp_input+0x1ea>
 8111a72:	2b08      	cmp	r3, #8
 8111a74:	f040 80d2 	bne.w	8111c1c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8111a78:	4b77      	ldr	r3, [pc, #476]	@ (8111c58 <icmp_input+0x22c>)
 8111a7a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8111a7c:	4b75      	ldr	r3, [pc, #468]	@ (8111c54 <icmp_input+0x228>)
 8111a7e:	695b      	ldr	r3, [r3, #20]
 8111a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8111a84:	2be0      	cmp	r3, #224	@ 0xe0
 8111a86:	f000 80d6 	beq.w	8111c36 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8111a8a:	4b72      	ldr	r3, [pc, #456]	@ (8111c54 <icmp_input+0x228>)
 8111a8c:	695b      	ldr	r3, [r3, #20]
 8111a8e:	4a71      	ldr	r2, [pc, #452]	@ (8111c54 <icmp_input+0x228>)
 8111a90:	6812      	ldr	r2, [r2, #0]
 8111a92:	4611      	mov	r1, r2
 8111a94:	4618      	mov	r0, r3
 8111a96:	f000 fce7 	bl	8112468 <ip4_addr_isbroadcast_u32>
 8111a9a:	4603      	mov	r3, r0
 8111a9c:	2b00      	cmp	r3, #0
 8111a9e:	f040 80cc 	bne.w	8111c3a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8111aa2:	687b      	ldr	r3, [r7, #4]
 8111aa4:	891b      	ldrh	r3, [r3, #8]
 8111aa6:	2b07      	cmp	r3, #7
 8111aa8:	f240 80c0 	bls.w	8111c2c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8111aac:	6878      	ldr	r0, [r7, #4]
 8111aae:	f000 f9e0 	bl	8111e72 <inet_chksum_pbuf>
 8111ab2:	4603      	mov	r3, r0
 8111ab4:	2b00      	cmp	r3, #0
 8111ab6:	d003      	beq.n	8111ac0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8111ab8:	6878      	ldr	r0, [r7, #4]
 8111aba:	f002 feed 	bl	8114898 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8111abe:	e0c5      	b.n	8111c4c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8111ac0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111ac2:	330e      	adds	r3, #14
 8111ac4:	4619      	mov	r1, r3
 8111ac6:	6878      	ldr	r0, [r7, #4]
 8111ac8:	f002 fe50 	bl	811476c <pbuf_add_header>
 8111acc:	4603      	mov	r3, r0
 8111ace:	2b00      	cmp	r3, #0
 8111ad0:	d04b      	beq.n	8111b6a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8111ad2:	687b      	ldr	r3, [r7, #4]
 8111ad4:	891a      	ldrh	r2, [r3, #8]
 8111ad6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111ad8:	4413      	add	r3, r2
 8111ada:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8111adc:	687b      	ldr	r3, [r7, #4]
 8111ade:	891b      	ldrh	r3, [r3, #8]
 8111ae0:	8b7a      	ldrh	r2, [r7, #26]
 8111ae2:	429a      	cmp	r2, r3
 8111ae4:	f0c0 80ab 	bcc.w	8111c3e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8111ae8:	8b7b      	ldrh	r3, [r7, #26]
 8111aea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8111aee:	4619      	mov	r1, r3
 8111af0:	200e      	movs	r0, #14
 8111af2:	f002 fbed 	bl	81142d0 <pbuf_alloc>
 8111af6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8111af8:	697b      	ldr	r3, [r7, #20]
 8111afa:	2b00      	cmp	r3, #0
 8111afc:	f000 80a1 	beq.w	8111c42 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8111b00:	697b      	ldr	r3, [r7, #20]
 8111b02:	895b      	ldrh	r3, [r3, #10]
 8111b04:	461a      	mov	r2, r3
 8111b06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111b08:	3308      	adds	r3, #8
 8111b0a:	429a      	cmp	r2, r3
 8111b0c:	d203      	bcs.n	8111b16 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8111b0e:	6978      	ldr	r0, [r7, #20]
 8111b10:	f002 fec2 	bl	8114898 <pbuf_free>
          goto icmperr;
 8111b14:	e096      	b.n	8111c44 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8111b16:	697b      	ldr	r3, [r7, #20]
 8111b18:	685b      	ldr	r3, [r3, #4]
 8111b1a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8111b1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8111b1e:	4618      	mov	r0, r3
 8111b20:	f00a fb2d 	bl	811c17e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8111b24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111b26:	4619      	mov	r1, r3
 8111b28:	6978      	ldr	r0, [r7, #20]
 8111b2a:	f002 fe2f 	bl	811478c <pbuf_remove_header>
 8111b2e:	4603      	mov	r3, r0
 8111b30:	2b00      	cmp	r3, #0
 8111b32:	d009      	beq.n	8111b48 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8111b34:	4b49      	ldr	r3, [pc, #292]	@ (8111c5c <icmp_input+0x230>)
 8111b36:	22b6      	movs	r2, #182	@ 0xb6
 8111b38:	4949      	ldr	r1, [pc, #292]	@ (8111c60 <icmp_input+0x234>)
 8111b3a:	484a      	ldr	r0, [pc, #296]	@ (8111c64 <icmp_input+0x238>)
 8111b3c:	f00a f96e 	bl	811be1c <iprintf>
          pbuf_free(r);
 8111b40:	6978      	ldr	r0, [r7, #20]
 8111b42:	f002 fea9 	bl	8114898 <pbuf_free>
          goto icmperr;
 8111b46:	e07d      	b.n	8111c44 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8111b48:	6879      	ldr	r1, [r7, #4]
 8111b4a:	6978      	ldr	r0, [r7, #20]
 8111b4c:	f002 ffc8 	bl	8114ae0 <pbuf_copy>
 8111b50:	4603      	mov	r3, r0
 8111b52:	2b00      	cmp	r3, #0
 8111b54:	d003      	beq.n	8111b5e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8111b56:	6978      	ldr	r0, [r7, #20]
 8111b58:	f002 fe9e 	bl	8114898 <pbuf_free>
          goto icmperr;
 8111b5c:	e072      	b.n	8111c44 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8111b5e:	6878      	ldr	r0, [r7, #4]
 8111b60:	f002 fe9a 	bl	8114898 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8111b64:	697b      	ldr	r3, [r7, #20]
 8111b66:	607b      	str	r3, [r7, #4]
 8111b68:	e00f      	b.n	8111b8a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8111b6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111b6c:	330e      	adds	r3, #14
 8111b6e:	4619      	mov	r1, r3
 8111b70:	6878      	ldr	r0, [r7, #4]
 8111b72:	f002 fe0b 	bl	811478c <pbuf_remove_header>
 8111b76:	4603      	mov	r3, r0
 8111b78:	2b00      	cmp	r3, #0
 8111b7a:	d006      	beq.n	8111b8a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8111b7c:	4b37      	ldr	r3, [pc, #220]	@ (8111c5c <icmp_input+0x230>)
 8111b7e:	22c7      	movs	r2, #199	@ 0xc7
 8111b80:	4939      	ldr	r1, [pc, #228]	@ (8111c68 <icmp_input+0x23c>)
 8111b82:	4838      	ldr	r0, [pc, #224]	@ (8111c64 <icmp_input+0x238>)
 8111b84:	f00a f94a 	bl	811be1c <iprintf>
          goto icmperr;
 8111b88:	e05c      	b.n	8111c44 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8111b8a:	687b      	ldr	r3, [r7, #4]
 8111b8c:	685b      	ldr	r3, [r3, #4]
 8111b8e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8111b90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111b92:	4619      	mov	r1, r3
 8111b94:	6878      	ldr	r0, [r7, #4]
 8111b96:	f002 fde9 	bl	811476c <pbuf_add_header>
 8111b9a:	4603      	mov	r3, r0
 8111b9c:	2b00      	cmp	r3, #0
 8111b9e:	d13c      	bne.n	8111c1a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8111ba0:	687b      	ldr	r3, [r7, #4]
 8111ba2:	685b      	ldr	r3, [r3, #4]
 8111ba4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8111ba6:	69fb      	ldr	r3, [r7, #28]
 8111ba8:	681a      	ldr	r2, [r3, #0]
 8111baa:	68fb      	ldr	r3, [r7, #12]
 8111bac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8111bae:	4b29      	ldr	r3, [pc, #164]	@ (8111c54 <icmp_input+0x228>)
 8111bb0:	691a      	ldr	r2, [r3, #16]
 8111bb2:	68fb      	ldr	r3, [r7, #12]
 8111bb4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8111bb6:	693b      	ldr	r3, [r7, #16]
 8111bb8:	2200      	movs	r2, #0
 8111bba:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8111bbc:	693b      	ldr	r3, [r7, #16]
 8111bbe:	885b      	ldrh	r3, [r3, #2]
 8111bc0:	b29b      	uxth	r3, r3
 8111bc2:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8111bc6:	4293      	cmp	r3, r2
 8111bc8:	d907      	bls.n	8111bda <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8111bca:	693b      	ldr	r3, [r7, #16]
 8111bcc:	885b      	ldrh	r3, [r3, #2]
 8111bce:	b29b      	uxth	r3, r3
 8111bd0:	3309      	adds	r3, #9
 8111bd2:	b29a      	uxth	r2, r3
 8111bd4:	693b      	ldr	r3, [r7, #16]
 8111bd6:	805a      	strh	r2, [r3, #2]
 8111bd8:	e006      	b.n	8111be8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8111bda:	693b      	ldr	r3, [r7, #16]
 8111bdc:	885b      	ldrh	r3, [r3, #2]
 8111bde:	b29b      	uxth	r3, r3
 8111be0:	3308      	adds	r3, #8
 8111be2:	b29a      	uxth	r2, r3
 8111be4:	693b      	ldr	r3, [r7, #16]
 8111be6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8111be8:	68fb      	ldr	r3, [r7, #12]
 8111bea:	22ff      	movs	r2, #255	@ 0xff
 8111bec:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8111bee:	68fb      	ldr	r3, [r7, #12]
 8111bf0:	2200      	movs	r2, #0
 8111bf2:	729a      	strb	r2, [r3, #10]
 8111bf4:	2200      	movs	r2, #0
 8111bf6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8111bf8:	683b      	ldr	r3, [r7, #0]
 8111bfa:	9302      	str	r3, [sp, #8]
 8111bfc:	2301      	movs	r3, #1
 8111bfe:	9301      	str	r3, [sp, #4]
 8111c00:	2300      	movs	r3, #0
 8111c02:	9300      	str	r3, [sp, #0]
 8111c04:	23ff      	movs	r3, #255	@ 0xff
 8111c06:	2200      	movs	r2, #0
 8111c08:	69f9      	ldr	r1, [r7, #28]
 8111c0a:	6878      	ldr	r0, [r7, #4]
 8111c0c:	f000 fb54 	bl	81122b8 <ip4_output_if>
 8111c10:	4603      	mov	r3, r0
 8111c12:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8111c14:	e001      	b.n	8111c1a <icmp_input+0x1ee>
      break;
 8111c16:	bf00      	nop
 8111c18:	e000      	b.n	8111c1c <icmp_input+0x1f0>
      break;
 8111c1a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8111c1c:	6878      	ldr	r0, [r7, #4]
 8111c1e:	f002 fe3b 	bl	8114898 <pbuf_free>
  return;
 8111c22:	e013      	b.n	8111c4c <icmp_input+0x220>
    goto lenerr;
 8111c24:	bf00      	nop
 8111c26:	e002      	b.n	8111c2e <icmp_input+0x202>
    goto lenerr;
 8111c28:	bf00      	nop
 8111c2a:	e000      	b.n	8111c2e <icmp_input+0x202>
        goto lenerr;
 8111c2c:	bf00      	nop
lenerr:
  pbuf_free(p);
 8111c2e:	6878      	ldr	r0, [r7, #4]
 8111c30:	f002 fe32 	bl	8114898 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8111c34:	e00a      	b.n	8111c4c <icmp_input+0x220>
        goto icmperr;
 8111c36:	bf00      	nop
 8111c38:	e004      	b.n	8111c44 <icmp_input+0x218>
        goto icmperr;
 8111c3a:	bf00      	nop
 8111c3c:	e002      	b.n	8111c44 <icmp_input+0x218>
          goto icmperr;
 8111c3e:	bf00      	nop
 8111c40:	e000      	b.n	8111c44 <icmp_input+0x218>
          goto icmperr;
 8111c42:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8111c44:	6878      	ldr	r0, [r7, #4]
 8111c46:	f002 fe27 	bl	8114898 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8111c4a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8111c4c:	3728      	adds	r7, #40	@ 0x28
 8111c4e:	46bd      	mov	sp, r7
 8111c50:	bd80      	pop	{r7, pc}
 8111c52:	bf00      	nop
 8111c54:	1000b244 	.word	0x1000b244
 8111c58:	1000b258 	.word	0x1000b258
 8111c5c:	0811d0b0 	.word	0x0811d0b0
 8111c60:	0811d124 	.word	0x0811d124
 8111c64:	0811d15c 	.word	0x0811d15c
 8111c68:	0811d184 	.word	0x0811d184

08111c6c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8111c6c:	b580      	push	{r7, lr}
 8111c6e:	b082      	sub	sp, #8
 8111c70:	af00      	add	r7, sp, #0
 8111c72:	6078      	str	r0, [r7, #4]
 8111c74:	460b      	mov	r3, r1
 8111c76:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8111c78:	78fb      	ldrb	r3, [r7, #3]
 8111c7a:	461a      	mov	r2, r3
 8111c7c:	2103      	movs	r1, #3
 8111c7e:	6878      	ldr	r0, [r7, #4]
 8111c80:	f000 f814 	bl	8111cac <icmp_send_response>
}
 8111c84:	bf00      	nop
 8111c86:	3708      	adds	r7, #8
 8111c88:	46bd      	mov	sp, r7
 8111c8a:	bd80      	pop	{r7, pc}

08111c8c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8111c8c:	b580      	push	{r7, lr}
 8111c8e:	b082      	sub	sp, #8
 8111c90:	af00      	add	r7, sp, #0
 8111c92:	6078      	str	r0, [r7, #4]
 8111c94:	460b      	mov	r3, r1
 8111c96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8111c98:	78fb      	ldrb	r3, [r7, #3]
 8111c9a:	461a      	mov	r2, r3
 8111c9c:	210b      	movs	r1, #11
 8111c9e:	6878      	ldr	r0, [r7, #4]
 8111ca0:	f000 f804 	bl	8111cac <icmp_send_response>
}
 8111ca4:	bf00      	nop
 8111ca6:	3708      	adds	r7, #8
 8111ca8:	46bd      	mov	sp, r7
 8111caa:	bd80      	pop	{r7, pc}

08111cac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8111cac:	b580      	push	{r7, lr}
 8111cae:	b08c      	sub	sp, #48	@ 0x30
 8111cb0:	af04      	add	r7, sp, #16
 8111cb2:	6078      	str	r0, [r7, #4]
 8111cb4:	460b      	mov	r3, r1
 8111cb6:	70fb      	strb	r3, [r7, #3]
 8111cb8:	4613      	mov	r3, r2
 8111cba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8111cbc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8111cc0:	2124      	movs	r1, #36	@ 0x24
 8111cc2:	2022      	movs	r0, #34	@ 0x22
 8111cc4:	f002 fb04 	bl	81142d0 <pbuf_alloc>
 8111cc8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8111cca:	69fb      	ldr	r3, [r7, #28]
 8111ccc:	2b00      	cmp	r3, #0
 8111cce:	d056      	beq.n	8111d7e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8111cd0:	69fb      	ldr	r3, [r7, #28]
 8111cd2:	895b      	ldrh	r3, [r3, #10]
 8111cd4:	2b23      	cmp	r3, #35	@ 0x23
 8111cd6:	d806      	bhi.n	8111ce6 <icmp_send_response+0x3a>
 8111cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8111d88 <icmp_send_response+0xdc>)
 8111cda:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8111cde:	492b      	ldr	r1, [pc, #172]	@ (8111d8c <icmp_send_response+0xe0>)
 8111ce0:	482b      	ldr	r0, [pc, #172]	@ (8111d90 <icmp_send_response+0xe4>)
 8111ce2:	f00a f89b 	bl	811be1c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8111ce6:	687b      	ldr	r3, [r7, #4]
 8111ce8:	685b      	ldr	r3, [r3, #4]
 8111cea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8111cec:	69fb      	ldr	r3, [r7, #28]
 8111cee:	685b      	ldr	r3, [r3, #4]
 8111cf0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8111cf2:	697b      	ldr	r3, [r7, #20]
 8111cf4:	78fa      	ldrb	r2, [r7, #3]
 8111cf6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8111cf8:	697b      	ldr	r3, [r7, #20]
 8111cfa:	78ba      	ldrb	r2, [r7, #2]
 8111cfc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8111cfe:	697b      	ldr	r3, [r7, #20]
 8111d00:	2200      	movs	r2, #0
 8111d02:	711a      	strb	r2, [r3, #4]
 8111d04:	2200      	movs	r2, #0
 8111d06:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8111d08:	697b      	ldr	r3, [r7, #20]
 8111d0a:	2200      	movs	r2, #0
 8111d0c:	719a      	strb	r2, [r3, #6]
 8111d0e:	2200      	movs	r2, #0
 8111d10:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8111d12:	69fb      	ldr	r3, [r7, #28]
 8111d14:	685b      	ldr	r3, [r3, #4]
 8111d16:	f103 0008 	add.w	r0, r3, #8
 8111d1a:	687b      	ldr	r3, [r7, #4]
 8111d1c:	685b      	ldr	r3, [r3, #4]
 8111d1e:	221c      	movs	r2, #28
 8111d20:	4619      	mov	r1, r3
 8111d22:	f00a fa2c 	bl	811c17e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8111d26:	69bb      	ldr	r3, [r7, #24]
 8111d28:	68db      	ldr	r3, [r3, #12]
 8111d2a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8111d2c:	f107 030c 	add.w	r3, r7, #12
 8111d30:	4618      	mov	r0, r3
 8111d32:	f000 f903 	bl	8111f3c <ip4_route>
 8111d36:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8111d38:	693b      	ldr	r3, [r7, #16]
 8111d3a:	2b00      	cmp	r3, #0
 8111d3c:	d01b      	beq.n	8111d76 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8111d3e:	697b      	ldr	r3, [r7, #20]
 8111d40:	2200      	movs	r2, #0
 8111d42:	709a      	strb	r2, [r3, #2]
 8111d44:	2200      	movs	r2, #0
 8111d46:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8111d48:	69fb      	ldr	r3, [r7, #28]
 8111d4a:	895b      	ldrh	r3, [r3, #10]
 8111d4c:	4619      	mov	r1, r3
 8111d4e:	6978      	ldr	r0, [r7, #20]
 8111d50:	f000 f87d 	bl	8111e4e <inet_chksum>
 8111d54:	4603      	mov	r3, r0
 8111d56:	461a      	mov	r2, r3
 8111d58:	697b      	ldr	r3, [r7, #20]
 8111d5a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8111d5c:	f107 020c 	add.w	r2, r7, #12
 8111d60:	693b      	ldr	r3, [r7, #16]
 8111d62:	9302      	str	r3, [sp, #8]
 8111d64:	2301      	movs	r3, #1
 8111d66:	9301      	str	r3, [sp, #4]
 8111d68:	2300      	movs	r3, #0
 8111d6a:	9300      	str	r3, [sp, #0]
 8111d6c:	23ff      	movs	r3, #255	@ 0xff
 8111d6e:	2100      	movs	r1, #0
 8111d70:	69f8      	ldr	r0, [r7, #28]
 8111d72:	f000 faa1 	bl	81122b8 <ip4_output_if>
  }
  pbuf_free(q);
 8111d76:	69f8      	ldr	r0, [r7, #28]
 8111d78:	f002 fd8e 	bl	8114898 <pbuf_free>
 8111d7c:	e000      	b.n	8111d80 <icmp_send_response+0xd4>
    return;
 8111d7e:	bf00      	nop
}
 8111d80:	3720      	adds	r7, #32
 8111d82:	46bd      	mov	sp, r7
 8111d84:	bd80      	pop	{r7, pc}
 8111d86:	bf00      	nop
 8111d88:	0811d0b0 	.word	0x0811d0b0
 8111d8c:	0811d1b8 	.word	0x0811d1b8
 8111d90:	0811d15c 	.word	0x0811d15c

08111d94 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8111d94:	b480      	push	{r7}
 8111d96:	b089      	sub	sp, #36	@ 0x24
 8111d98:	af00      	add	r7, sp, #0
 8111d9a:	6078      	str	r0, [r7, #4]
 8111d9c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8111d9e:	687b      	ldr	r3, [r7, #4]
 8111da0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8111da2:	2300      	movs	r3, #0
 8111da4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8111da6:	2300      	movs	r3, #0
 8111da8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8111daa:	69fb      	ldr	r3, [r7, #28]
 8111dac:	f003 0301 	and.w	r3, r3, #1
 8111db0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8111db2:	693b      	ldr	r3, [r7, #16]
 8111db4:	2b00      	cmp	r3, #0
 8111db6:	d00d      	beq.n	8111dd4 <lwip_standard_chksum+0x40>
 8111db8:	683b      	ldr	r3, [r7, #0]
 8111dba:	2b00      	cmp	r3, #0
 8111dbc:	dd0a      	ble.n	8111dd4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8111dbe:	69fa      	ldr	r2, [r7, #28]
 8111dc0:	1c53      	adds	r3, r2, #1
 8111dc2:	61fb      	str	r3, [r7, #28]
 8111dc4:	f107 030e 	add.w	r3, r7, #14
 8111dc8:	3301      	adds	r3, #1
 8111dca:	7812      	ldrb	r2, [r2, #0]
 8111dcc:	701a      	strb	r2, [r3, #0]
    len--;
 8111dce:	683b      	ldr	r3, [r7, #0]
 8111dd0:	3b01      	subs	r3, #1
 8111dd2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8111dd4:	69fb      	ldr	r3, [r7, #28]
 8111dd6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8111dd8:	e00a      	b.n	8111df0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8111dda:	69bb      	ldr	r3, [r7, #24]
 8111ddc:	1c9a      	adds	r2, r3, #2
 8111dde:	61ba      	str	r2, [r7, #24]
 8111de0:	881b      	ldrh	r3, [r3, #0]
 8111de2:	461a      	mov	r2, r3
 8111de4:	697b      	ldr	r3, [r7, #20]
 8111de6:	4413      	add	r3, r2
 8111de8:	617b      	str	r3, [r7, #20]
    len -= 2;
 8111dea:	683b      	ldr	r3, [r7, #0]
 8111dec:	3b02      	subs	r3, #2
 8111dee:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8111df0:	683b      	ldr	r3, [r7, #0]
 8111df2:	2b01      	cmp	r3, #1
 8111df4:	dcf1      	bgt.n	8111dda <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8111df6:	683b      	ldr	r3, [r7, #0]
 8111df8:	2b00      	cmp	r3, #0
 8111dfa:	dd04      	ble.n	8111e06 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8111dfc:	f107 030e 	add.w	r3, r7, #14
 8111e00:	69ba      	ldr	r2, [r7, #24]
 8111e02:	7812      	ldrb	r2, [r2, #0]
 8111e04:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8111e06:	89fb      	ldrh	r3, [r7, #14]
 8111e08:	461a      	mov	r2, r3
 8111e0a:	697b      	ldr	r3, [r7, #20]
 8111e0c:	4413      	add	r3, r2
 8111e0e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8111e10:	697b      	ldr	r3, [r7, #20]
 8111e12:	0c1a      	lsrs	r2, r3, #16
 8111e14:	697b      	ldr	r3, [r7, #20]
 8111e16:	b29b      	uxth	r3, r3
 8111e18:	4413      	add	r3, r2
 8111e1a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8111e1c:	697b      	ldr	r3, [r7, #20]
 8111e1e:	0c1a      	lsrs	r2, r3, #16
 8111e20:	697b      	ldr	r3, [r7, #20]
 8111e22:	b29b      	uxth	r3, r3
 8111e24:	4413      	add	r3, r2
 8111e26:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8111e28:	693b      	ldr	r3, [r7, #16]
 8111e2a:	2b00      	cmp	r3, #0
 8111e2c:	d007      	beq.n	8111e3e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8111e2e:	697b      	ldr	r3, [r7, #20]
 8111e30:	021b      	lsls	r3, r3, #8
 8111e32:	b29a      	uxth	r2, r3
 8111e34:	697b      	ldr	r3, [r7, #20]
 8111e36:	0a1b      	lsrs	r3, r3, #8
 8111e38:	b2db      	uxtb	r3, r3
 8111e3a:	4313      	orrs	r3, r2
 8111e3c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8111e3e:	697b      	ldr	r3, [r7, #20]
 8111e40:	b29b      	uxth	r3, r3
}
 8111e42:	4618      	mov	r0, r3
 8111e44:	3724      	adds	r7, #36	@ 0x24
 8111e46:	46bd      	mov	sp, r7
 8111e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111e4c:	4770      	bx	lr

08111e4e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8111e4e:	b580      	push	{r7, lr}
 8111e50:	b082      	sub	sp, #8
 8111e52:	af00      	add	r7, sp, #0
 8111e54:	6078      	str	r0, [r7, #4]
 8111e56:	460b      	mov	r3, r1
 8111e58:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8111e5a:	887b      	ldrh	r3, [r7, #2]
 8111e5c:	4619      	mov	r1, r3
 8111e5e:	6878      	ldr	r0, [r7, #4]
 8111e60:	f7ff ff98 	bl	8111d94 <lwip_standard_chksum>
 8111e64:	4603      	mov	r3, r0
 8111e66:	43db      	mvns	r3, r3
 8111e68:	b29b      	uxth	r3, r3
}
 8111e6a:	4618      	mov	r0, r3
 8111e6c:	3708      	adds	r7, #8
 8111e6e:	46bd      	mov	sp, r7
 8111e70:	bd80      	pop	{r7, pc}

08111e72 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8111e72:	b580      	push	{r7, lr}
 8111e74:	b086      	sub	sp, #24
 8111e76:	af00      	add	r7, sp, #0
 8111e78:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8111e7a:	2300      	movs	r3, #0
 8111e7c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8111e7e:	2300      	movs	r3, #0
 8111e80:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8111e82:	687b      	ldr	r3, [r7, #4]
 8111e84:	613b      	str	r3, [r7, #16]
 8111e86:	e02b      	b.n	8111ee0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8111e88:	693b      	ldr	r3, [r7, #16]
 8111e8a:	685a      	ldr	r2, [r3, #4]
 8111e8c:	693b      	ldr	r3, [r7, #16]
 8111e8e:	895b      	ldrh	r3, [r3, #10]
 8111e90:	4619      	mov	r1, r3
 8111e92:	4610      	mov	r0, r2
 8111e94:	f7ff ff7e 	bl	8111d94 <lwip_standard_chksum>
 8111e98:	4603      	mov	r3, r0
 8111e9a:	461a      	mov	r2, r3
 8111e9c:	697b      	ldr	r3, [r7, #20]
 8111e9e:	4413      	add	r3, r2
 8111ea0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8111ea2:	697b      	ldr	r3, [r7, #20]
 8111ea4:	0c1a      	lsrs	r2, r3, #16
 8111ea6:	697b      	ldr	r3, [r7, #20]
 8111ea8:	b29b      	uxth	r3, r3
 8111eaa:	4413      	add	r3, r2
 8111eac:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8111eae:	693b      	ldr	r3, [r7, #16]
 8111eb0:	895b      	ldrh	r3, [r3, #10]
 8111eb2:	f003 0301 	and.w	r3, r3, #1
 8111eb6:	b29b      	uxth	r3, r3
 8111eb8:	2b00      	cmp	r3, #0
 8111eba:	d00e      	beq.n	8111eda <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8111ebc:	68fb      	ldr	r3, [r7, #12]
 8111ebe:	2b00      	cmp	r3, #0
 8111ec0:	bf0c      	ite	eq
 8111ec2:	2301      	moveq	r3, #1
 8111ec4:	2300      	movne	r3, #0
 8111ec6:	b2db      	uxtb	r3, r3
 8111ec8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8111eca:	697b      	ldr	r3, [r7, #20]
 8111ecc:	021b      	lsls	r3, r3, #8
 8111ece:	b29a      	uxth	r2, r3
 8111ed0:	697b      	ldr	r3, [r7, #20]
 8111ed2:	0a1b      	lsrs	r3, r3, #8
 8111ed4:	b2db      	uxtb	r3, r3
 8111ed6:	4313      	orrs	r3, r2
 8111ed8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8111eda:	693b      	ldr	r3, [r7, #16]
 8111edc:	681b      	ldr	r3, [r3, #0]
 8111ede:	613b      	str	r3, [r7, #16]
 8111ee0:	693b      	ldr	r3, [r7, #16]
 8111ee2:	2b00      	cmp	r3, #0
 8111ee4:	d1d0      	bne.n	8111e88 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8111ee6:	68fb      	ldr	r3, [r7, #12]
 8111ee8:	2b00      	cmp	r3, #0
 8111eea:	d007      	beq.n	8111efc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8111eec:	697b      	ldr	r3, [r7, #20]
 8111eee:	021b      	lsls	r3, r3, #8
 8111ef0:	b29a      	uxth	r2, r3
 8111ef2:	697b      	ldr	r3, [r7, #20]
 8111ef4:	0a1b      	lsrs	r3, r3, #8
 8111ef6:	b2db      	uxtb	r3, r3
 8111ef8:	4313      	orrs	r3, r2
 8111efa:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8111efc:	697b      	ldr	r3, [r7, #20]
 8111efe:	b29b      	uxth	r3, r3
 8111f00:	43db      	mvns	r3, r3
 8111f02:	b29b      	uxth	r3, r3
}
 8111f04:	4618      	mov	r0, r3
 8111f06:	3718      	adds	r7, #24
 8111f08:	46bd      	mov	sp, r7
 8111f0a:	bd80      	pop	{r7, pc}

08111f0c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8111f0c:	b580      	push	{r7, lr}
 8111f0e:	b082      	sub	sp, #8
 8111f10:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8111f12:	2300      	movs	r3, #0
 8111f14:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8111f16:	f002 ffcf 	bl	8114eb8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8111f1a:	f001 f9e9 	bl	81132f0 <mem_init>
  memp_init();
 8111f1e:	f001 fd33 	bl	8113988 <memp_init>
  pbuf_init();
  netif_init();
 8111f22:	f001 fe3f 	bl	8113ba4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8111f26:	f009 faef 	bl	811b508 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8111f2a:	f003 f841 	bl	8114fb0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8111f2e:	f009 fa31 	bl	811b394 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8111f32:	bf00      	nop
 8111f34:	3708      	adds	r7, #8
 8111f36:	46bd      	mov	sp, r7
 8111f38:	bd80      	pop	{r7, pc}
	...

08111f3c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8111f3c:	b480      	push	{r7}
 8111f3e:	b085      	sub	sp, #20
 8111f40:	af00      	add	r7, sp, #0
 8111f42:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8111f44:	4b33      	ldr	r3, [pc, #204]	@ (8112014 <ip4_route+0xd8>)
 8111f46:	681b      	ldr	r3, [r3, #0]
 8111f48:	60fb      	str	r3, [r7, #12]
 8111f4a:	e036      	b.n	8111fba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8111f4c:	68fb      	ldr	r3, [r7, #12]
 8111f4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8111f52:	f003 0301 	and.w	r3, r3, #1
 8111f56:	b2db      	uxtb	r3, r3
 8111f58:	2b00      	cmp	r3, #0
 8111f5a:	d02b      	beq.n	8111fb4 <ip4_route+0x78>
 8111f5c:	68fb      	ldr	r3, [r7, #12]
 8111f5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8111f62:	089b      	lsrs	r3, r3, #2
 8111f64:	f003 0301 	and.w	r3, r3, #1
 8111f68:	b2db      	uxtb	r3, r3
 8111f6a:	2b00      	cmp	r3, #0
 8111f6c:	d022      	beq.n	8111fb4 <ip4_route+0x78>
 8111f6e:	68fb      	ldr	r3, [r7, #12]
 8111f70:	3304      	adds	r3, #4
 8111f72:	681b      	ldr	r3, [r3, #0]
 8111f74:	2b00      	cmp	r3, #0
 8111f76:	d01d      	beq.n	8111fb4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8111f78:	687b      	ldr	r3, [r7, #4]
 8111f7a:	681a      	ldr	r2, [r3, #0]
 8111f7c:	68fb      	ldr	r3, [r7, #12]
 8111f7e:	3304      	adds	r3, #4
 8111f80:	681b      	ldr	r3, [r3, #0]
 8111f82:	405a      	eors	r2, r3
 8111f84:	68fb      	ldr	r3, [r7, #12]
 8111f86:	3308      	adds	r3, #8
 8111f88:	681b      	ldr	r3, [r3, #0]
 8111f8a:	4013      	ands	r3, r2
 8111f8c:	2b00      	cmp	r3, #0
 8111f8e:	d101      	bne.n	8111f94 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8111f90:	68fb      	ldr	r3, [r7, #12]
 8111f92:	e038      	b.n	8112006 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8111f94:	68fb      	ldr	r3, [r7, #12]
 8111f96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8111f9a:	f003 0302 	and.w	r3, r3, #2
 8111f9e:	2b00      	cmp	r3, #0
 8111fa0:	d108      	bne.n	8111fb4 <ip4_route+0x78>
 8111fa2:	687b      	ldr	r3, [r7, #4]
 8111fa4:	681a      	ldr	r2, [r3, #0]
 8111fa6:	68fb      	ldr	r3, [r7, #12]
 8111fa8:	330c      	adds	r3, #12
 8111faa:	681b      	ldr	r3, [r3, #0]
 8111fac:	429a      	cmp	r2, r3
 8111fae:	d101      	bne.n	8111fb4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8111fb0:	68fb      	ldr	r3, [r7, #12]
 8111fb2:	e028      	b.n	8112006 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8111fb4:	68fb      	ldr	r3, [r7, #12]
 8111fb6:	681b      	ldr	r3, [r3, #0]
 8111fb8:	60fb      	str	r3, [r7, #12]
 8111fba:	68fb      	ldr	r3, [r7, #12]
 8111fbc:	2b00      	cmp	r3, #0
 8111fbe:	d1c5      	bne.n	8111f4c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8111fc0:	4b15      	ldr	r3, [pc, #84]	@ (8112018 <ip4_route+0xdc>)
 8111fc2:	681b      	ldr	r3, [r3, #0]
 8111fc4:	2b00      	cmp	r3, #0
 8111fc6:	d01a      	beq.n	8111ffe <ip4_route+0xc2>
 8111fc8:	4b13      	ldr	r3, [pc, #76]	@ (8112018 <ip4_route+0xdc>)
 8111fca:	681b      	ldr	r3, [r3, #0]
 8111fcc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8111fd0:	f003 0301 	and.w	r3, r3, #1
 8111fd4:	2b00      	cmp	r3, #0
 8111fd6:	d012      	beq.n	8111ffe <ip4_route+0xc2>
 8111fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8112018 <ip4_route+0xdc>)
 8111fda:	681b      	ldr	r3, [r3, #0]
 8111fdc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8111fe0:	f003 0304 	and.w	r3, r3, #4
 8111fe4:	2b00      	cmp	r3, #0
 8111fe6:	d00a      	beq.n	8111ffe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8111fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8112018 <ip4_route+0xdc>)
 8111fea:	681b      	ldr	r3, [r3, #0]
 8111fec:	3304      	adds	r3, #4
 8111fee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8111ff0:	2b00      	cmp	r3, #0
 8111ff2:	d004      	beq.n	8111ffe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8111ff4:	687b      	ldr	r3, [r7, #4]
 8111ff6:	681b      	ldr	r3, [r3, #0]
 8111ff8:	b2db      	uxtb	r3, r3
 8111ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8111ffc:	d101      	bne.n	8112002 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8111ffe:	2300      	movs	r3, #0
 8112000:	e001      	b.n	8112006 <ip4_route+0xca>
  }

  return netif_default;
 8112002:	4b05      	ldr	r3, [pc, #20]	@ (8112018 <ip4_route+0xdc>)
 8112004:	681b      	ldr	r3, [r3, #0]
}
 8112006:	4618      	mov	r0, r3
 8112008:	3714      	adds	r7, #20
 811200a:	46bd      	mov	sp, r7
 811200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112010:	4770      	bx	lr
 8112012:	bf00      	nop
 8112014:	10011d04 	.word	0x10011d04
 8112018:	10011d08 	.word	0x10011d08

0811201c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 811201c:	b580      	push	{r7, lr}
 811201e:	b082      	sub	sp, #8
 8112020:	af00      	add	r7, sp, #0
 8112022:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8112024:	687b      	ldr	r3, [r7, #4]
 8112026:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811202a:	f003 0301 	and.w	r3, r3, #1
 811202e:	b2db      	uxtb	r3, r3
 8112030:	2b00      	cmp	r3, #0
 8112032:	d016      	beq.n	8112062 <ip4_input_accept+0x46>
 8112034:	687b      	ldr	r3, [r7, #4]
 8112036:	3304      	adds	r3, #4
 8112038:	681b      	ldr	r3, [r3, #0]
 811203a:	2b00      	cmp	r3, #0
 811203c:	d011      	beq.n	8112062 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 811203e:	4b0b      	ldr	r3, [pc, #44]	@ (811206c <ip4_input_accept+0x50>)
 8112040:	695a      	ldr	r2, [r3, #20]
 8112042:	687b      	ldr	r3, [r7, #4]
 8112044:	3304      	adds	r3, #4
 8112046:	681b      	ldr	r3, [r3, #0]
 8112048:	429a      	cmp	r2, r3
 811204a:	d008      	beq.n	811205e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 811204c:	4b07      	ldr	r3, [pc, #28]	@ (811206c <ip4_input_accept+0x50>)
 811204e:	695b      	ldr	r3, [r3, #20]
 8112050:	6879      	ldr	r1, [r7, #4]
 8112052:	4618      	mov	r0, r3
 8112054:	f000 fa08 	bl	8112468 <ip4_addr_isbroadcast_u32>
 8112058:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 811205a:	2b00      	cmp	r3, #0
 811205c:	d001      	beq.n	8112062 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 811205e:	2301      	movs	r3, #1
 8112060:	e000      	b.n	8112064 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8112062:	2300      	movs	r3, #0
}
 8112064:	4618      	mov	r0, r3
 8112066:	3708      	adds	r7, #8
 8112068:	46bd      	mov	sp, r7
 811206a:	bd80      	pop	{r7, pc}
 811206c:	1000b244 	.word	0x1000b244

08112070 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8112070:	b580      	push	{r7, lr}
 8112072:	b086      	sub	sp, #24
 8112074:	af00      	add	r7, sp, #0
 8112076:	6078      	str	r0, [r7, #4]
 8112078:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 811207a:	687b      	ldr	r3, [r7, #4]
 811207c:	685b      	ldr	r3, [r3, #4]
 811207e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8112080:	697b      	ldr	r3, [r7, #20]
 8112082:	781b      	ldrb	r3, [r3, #0]
 8112084:	091b      	lsrs	r3, r3, #4
 8112086:	b2db      	uxtb	r3, r3
 8112088:	2b04      	cmp	r3, #4
 811208a:	d004      	beq.n	8112096 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 811208c:	6878      	ldr	r0, [r7, #4]
 811208e:	f002 fc03 	bl	8114898 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8112092:	2300      	movs	r3, #0
 8112094:	e107      	b.n	81122a6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8112096:	697b      	ldr	r3, [r7, #20]
 8112098:	781b      	ldrb	r3, [r3, #0]
 811209a:	f003 030f 	and.w	r3, r3, #15
 811209e:	b2db      	uxtb	r3, r3
 81120a0:	009b      	lsls	r3, r3, #2
 81120a2:	b2db      	uxtb	r3, r3
 81120a4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 81120a6:	697b      	ldr	r3, [r7, #20]
 81120a8:	885b      	ldrh	r3, [r3, #2]
 81120aa:	b29b      	uxth	r3, r3
 81120ac:	4618      	mov	r0, r3
 81120ae:	f7fe fc6d 	bl	811098c <lwip_htons>
 81120b2:	4603      	mov	r3, r0
 81120b4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 81120b6:	687b      	ldr	r3, [r7, #4]
 81120b8:	891b      	ldrh	r3, [r3, #8]
 81120ba:	89ba      	ldrh	r2, [r7, #12]
 81120bc:	429a      	cmp	r2, r3
 81120be:	d204      	bcs.n	81120ca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 81120c0:	89bb      	ldrh	r3, [r7, #12]
 81120c2:	4619      	mov	r1, r3
 81120c4:	6878      	ldr	r0, [r7, #4]
 81120c6:	f002 fa63 	bl	8114590 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 81120ca:	687b      	ldr	r3, [r7, #4]
 81120cc:	895b      	ldrh	r3, [r3, #10]
 81120ce:	89fa      	ldrh	r2, [r7, #14]
 81120d0:	429a      	cmp	r2, r3
 81120d2:	d807      	bhi.n	81120e4 <ip4_input+0x74>
 81120d4:	687b      	ldr	r3, [r7, #4]
 81120d6:	891b      	ldrh	r3, [r3, #8]
 81120d8:	89ba      	ldrh	r2, [r7, #12]
 81120da:	429a      	cmp	r2, r3
 81120dc:	d802      	bhi.n	81120e4 <ip4_input+0x74>
 81120de:	89fb      	ldrh	r3, [r7, #14]
 81120e0:	2b13      	cmp	r3, #19
 81120e2:	d804      	bhi.n	81120ee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 81120e4:	6878      	ldr	r0, [r7, #4]
 81120e6:	f002 fbd7 	bl	8114898 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 81120ea:	2300      	movs	r3, #0
 81120ec:	e0db      	b.n	81122a6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 81120ee:	697b      	ldr	r3, [r7, #20]
 81120f0:	691b      	ldr	r3, [r3, #16]
 81120f2:	4a6f      	ldr	r2, [pc, #444]	@ (81122b0 <ip4_input+0x240>)
 81120f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 81120f6:	697b      	ldr	r3, [r7, #20]
 81120f8:	68db      	ldr	r3, [r3, #12]
 81120fa:	4a6d      	ldr	r2, [pc, #436]	@ (81122b0 <ip4_input+0x240>)
 81120fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 81120fe:	4b6c      	ldr	r3, [pc, #432]	@ (81122b0 <ip4_input+0x240>)
 8112100:	695b      	ldr	r3, [r3, #20]
 8112102:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8112106:	2be0      	cmp	r3, #224	@ 0xe0
 8112108:	d112      	bne.n	8112130 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 811210a:	683b      	ldr	r3, [r7, #0]
 811210c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8112110:	f003 0301 	and.w	r3, r3, #1
 8112114:	b2db      	uxtb	r3, r3
 8112116:	2b00      	cmp	r3, #0
 8112118:	d007      	beq.n	811212a <ip4_input+0xba>
 811211a:	683b      	ldr	r3, [r7, #0]
 811211c:	3304      	adds	r3, #4
 811211e:	681b      	ldr	r3, [r3, #0]
 8112120:	2b00      	cmp	r3, #0
 8112122:	d002      	beq.n	811212a <ip4_input+0xba>
      netif = inp;
 8112124:	683b      	ldr	r3, [r7, #0]
 8112126:	613b      	str	r3, [r7, #16]
 8112128:	e02a      	b.n	8112180 <ip4_input+0x110>
    } else {
      netif = NULL;
 811212a:	2300      	movs	r3, #0
 811212c:	613b      	str	r3, [r7, #16]
 811212e:	e027      	b.n	8112180 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8112130:	6838      	ldr	r0, [r7, #0]
 8112132:	f7ff ff73 	bl	811201c <ip4_input_accept>
 8112136:	4603      	mov	r3, r0
 8112138:	2b00      	cmp	r3, #0
 811213a:	d002      	beq.n	8112142 <ip4_input+0xd2>
      netif = inp;
 811213c:	683b      	ldr	r3, [r7, #0]
 811213e:	613b      	str	r3, [r7, #16]
 8112140:	e01e      	b.n	8112180 <ip4_input+0x110>
    } else {
      netif = NULL;
 8112142:	2300      	movs	r3, #0
 8112144:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8112146:	4b5a      	ldr	r3, [pc, #360]	@ (81122b0 <ip4_input+0x240>)
 8112148:	695b      	ldr	r3, [r3, #20]
 811214a:	b2db      	uxtb	r3, r3
 811214c:	2b7f      	cmp	r3, #127	@ 0x7f
 811214e:	d017      	beq.n	8112180 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8112150:	4b58      	ldr	r3, [pc, #352]	@ (81122b4 <ip4_input+0x244>)
 8112152:	681b      	ldr	r3, [r3, #0]
 8112154:	613b      	str	r3, [r7, #16]
 8112156:	e00e      	b.n	8112176 <ip4_input+0x106>
          if (netif == inp) {
 8112158:	693a      	ldr	r2, [r7, #16]
 811215a:	683b      	ldr	r3, [r7, #0]
 811215c:	429a      	cmp	r2, r3
 811215e:	d006      	beq.n	811216e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8112160:	6938      	ldr	r0, [r7, #16]
 8112162:	f7ff ff5b 	bl	811201c <ip4_input_accept>
 8112166:	4603      	mov	r3, r0
 8112168:	2b00      	cmp	r3, #0
 811216a:	d108      	bne.n	811217e <ip4_input+0x10e>
 811216c:	e000      	b.n	8112170 <ip4_input+0x100>
            continue;
 811216e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8112170:	693b      	ldr	r3, [r7, #16]
 8112172:	681b      	ldr	r3, [r3, #0]
 8112174:	613b      	str	r3, [r7, #16]
 8112176:	693b      	ldr	r3, [r7, #16]
 8112178:	2b00      	cmp	r3, #0
 811217a:	d1ed      	bne.n	8112158 <ip4_input+0xe8>
 811217c:	e000      	b.n	8112180 <ip4_input+0x110>
            break;
 811217e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8112180:	4b4b      	ldr	r3, [pc, #300]	@ (81122b0 <ip4_input+0x240>)
 8112182:	691b      	ldr	r3, [r3, #16]
 8112184:	6839      	ldr	r1, [r7, #0]
 8112186:	4618      	mov	r0, r3
 8112188:	f000 f96e 	bl	8112468 <ip4_addr_isbroadcast_u32>
 811218c:	4603      	mov	r3, r0
 811218e:	2b00      	cmp	r3, #0
 8112190:	d105      	bne.n	811219e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8112192:	4b47      	ldr	r3, [pc, #284]	@ (81122b0 <ip4_input+0x240>)
 8112194:	691b      	ldr	r3, [r3, #16]
 8112196:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 811219a:	2be0      	cmp	r3, #224	@ 0xe0
 811219c:	d104      	bne.n	81121a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 811219e:	6878      	ldr	r0, [r7, #4]
 81121a0:	f002 fb7a 	bl	8114898 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 81121a4:	2300      	movs	r3, #0
 81121a6:	e07e      	b.n	81122a6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 81121a8:	693b      	ldr	r3, [r7, #16]
 81121aa:	2b00      	cmp	r3, #0
 81121ac:	d104      	bne.n	81121b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 81121ae:	6878      	ldr	r0, [r7, #4]
 81121b0:	f002 fb72 	bl	8114898 <pbuf_free>
    return ERR_OK;
 81121b4:	2300      	movs	r3, #0
 81121b6:	e076      	b.n	81122a6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 81121b8:	697b      	ldr	r3, [r7, #20]
 81121ba:	88db      	ldrh	r3, [r3, #6]
 81121bc:	b29b      	uxth	r3, r3
 81121be:	461a      	mov	r2, r3
 81121c0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 81121c4:	4013      	ands	r3, r2
 81121c6:	2b00      	cmp	r3, #0
 81121c8:	d00b      	beq.n	81121e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 81121ca:	6878      	ldr	r0, [r7, #4]
 81121cc:	f000 fc92 	bl	8112af4 <ip4_reass>
 81121d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 81121d2:	687b      	ldr	r3, [r7, #4]
 81121d4:	2b00      	cmp	r3, #0
 81121d6:	d101      	bne.n	81121dc <ip4_input+0x16c>
      return ERR_OK;
 81121d8:	2300      	movs	r3, #0
 81121da:	e064      	b.n	81122a6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 81121dc:	687b      	ldr	r3, [r7, #4]
 81121de:	685b      	ldr	r3, [r3, #4]
 81121e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 81121e2:	4a33      	ldr	r2, [pc, #204]	@ (81122b0 <ip4_input+0x240>)
 81121e4:	693b      	ldr	r3, [r7, #16]
 81121e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 81121e8:	4a31      	ldr	r2, [pc, #196]	@ (81122b0 <ip4_input+0x240>)
 81121ea:	683b      	ldr	r3, [r7, #0]
 81121ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 81121ee:	4a30      	ldr	r2, [pc, #192]	@ (81122b0 <ip4_input+0x240>)
 81121f0:	697b      	ldr	r3, [r7, #20]
 81121f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 81121f4:	697b      	ldr	r3, [r7, #20]
 81121f6:	781b      	ldrb	r3, [r3, #0]
 81121f8:	f003 030f 	and.w	r3, r3, #15
 81121fc:	b2db      	uxtb	r3, r3
 81121fe:	009b      	lsls	r3, r3, #2
 8112200:	b2db      	uxtb	r3, r3
 8112202:	461a      	mov	r2, r3
 8112204:	4b2a      	ldr	r3, [pc, #168]	@ (81122b0 <ip4_input+0x240>)
 8112206:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8112208:	89fb      	ldrh	r3, [r7, #14]
 811220a:	4619      	mov	r1, r3
 811220c:	6878      	ldr	r0, [r7, #4]
 811220e:	f002 fabd 	bl	811478c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8112212:	697b      	ldr	r3, [r7, #20]
 8112214:	7a5b      	ldrb	r3, [r3, #9]
 8112216:	2b11      	cmp	r3, #17
 8112218:	d006      	beq.n	8112228 <ip4_input+0x1b8>
 811221a:	2b11      	cmp	r3, #17
 811221c:	dc13      	bgt.n	8112246 <ip4_input+0x1d6>
 811221e:	2b01      	cmp	r3, #1
 8112220:	d00c      	beq.n	811223c <ip4_input+0x1cc>
 8112222:	2b06      	cmp	r3, #6
 8112224:	d005      	beq.n	8112232 <ip4_input+0x1c2>
 8112226:	e00e      	b.n	8112246 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8112228:	6839      	ldr	r1, [r7, #0]
 811222a:	6878      	ldr	r0, [r7, #4]
 811222c:	f009 f9e2 	bl	811b5f4 <udp_input>
        break;
 8112230:	e026      	b.n	8112280 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8112232:	6839      	ldr	r1, [r7, #0]
 8112234:	6878      	ldr	r0, [r7, #4]
 8112236:	f004 fc35 	bl	8116aa4 <tcp_input>
        break;
 811223a:	e021      	b.n	8112280 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 811223c:	6839      	ldr	r1, [r7, #0]
 811223e:	6878      	ldr	r0, [r7, #4]
 8112240:	f7ff fbf4 	bl	8111a2c <icmp_input>
        break;
 8112244:	e01c      	b.n	8112280 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8112246:	4b1a      	ldr	r3, [pc, #104]	@ (81122b0 <ip4_input+0x240>)
 8112248:	695b      	ldr	r3, [r3, #20]
 811224a:	6939      	ldr	r1, [r7, #16]
 811224c:	4618      	mov	r0, r3
 811224e:	f000 f90b 	bl	8112468 <ip4_addr_isbroadcast_u32>
 8112252:	4603      	mov	r3, r0
 8112254:	2b00      	cmp	r3, #0
 8112256:	d10f      	bne.n	8112278 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8112258:	4b15      	ldr	r3, [pc, #84]	@ (81122b0 <ip4_input+0x240>)
 811225a:	695b      	ldr	r3, [r3, #20]
 811225c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8112260:	2be0      	cmp	r3, #224	@ 0xe0
 8112262:	d009      	beq.n	8112278 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8112264:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8112268:	4619      	mov	r1, r3
 811226a:	6878      	ldr	r0, [r7, #4]
 811226c:	f002 fb01 	bl	8114872 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8112270:	2102      	movs	r1, #2
 8112272:	6878      	ldr	r0, [r7, #4]
 8112274:	f7ff fcfa 	bl	8111c6c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8112278:	6878      	ldr	r0, [r7, #4]
 811227a:	f002 fb0d 	bl	8114898 <pbuf_free>
        break;
 811227e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8112280:	4b0b      	ldr	r3, [pc, #44]	@ (81122b0 <ip4_input+0x240>)
 8112282:	2200      	movs	r2, #0
 8112284:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8112286:	4b0a      	ldr	r3, [pc, #40]	@ (81122b0 <ip4_input+0x240>)
 8112288:	2200      	movs	r2, #0
 811228a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 811228c:	4b08      	ldr	r3, [pc, #32]	@ (81122b0 <ip4_input+0x240>)
 811228e:	2200      	movs	r2, #0
 8112290:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8112292:	4b07      	ldr	r3, [pc, #28]	@ (81122b0 <ip4_input+0x240>)
 8112294:	2200      	movs	r2, #0
 8112296:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8112298:	4b05      	ldr	r3, [pc, #20]	@ (81122b0 <ip4_input+0x240>)
 811229a:	2200      	movs	r2, #0
 811229c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 811229e:	4b04      	ldr	r3, [pc, #16]	@ (81122b0 <ip4_input+0x240>)
 81122a0:	2200      	movs	r2, #0
 81122a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 81122a4:	2300      	movs	r3, #0
}
 81122a6:	4618      	mov	r0, r3
 81122a8:	3718      	adds	r7, #24
 81122aa:	46bd      	mov	sp, r7
 81122ac:	bd80      	pop	{r7, pc}
 81122ae:	bf00      	nop
 81122b0:	1000b244 	.word	0x1000b244
 81122b4:	10011d04 	.word	0x10011d04

081122b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 81122b8:	b580      	push	{r7, lr}
 81122ba:	b08a      	sub	sp, #40	@ 0x28
 81122bc:	af04      	add	r7, sp, #16
 81122be:	60f8      	str	r0, [r7, #12]
 81122c0:	60b9      	str	r1, [r7, #8]
 81122c2:	607a      	str	r2, [r7, #4]
 81122c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 81122c6:	68bb      	ldr	r3, [r7, #8]
 81122c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 81122ca:	687b      	ldr	r3, [r7, #4]
 81122cc:	2b00      	cmp	r3, #0
 81122ce:	d009      	beq.n	81122e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 81122d0:	68bb      	ldr	r3, [r7, #8]
 81122d2:	2b00      	cmp	r3, #0
 81122d4:	d003      	beq.n	81122de <ip4_output_if+0x26>
 81122d6:	68bb      	ldr	r3, [r7, #8]
 81122d8:	681b      	ldr	r3, [r3, #0]
 81122da:	2b00      	cmp	r3, #0
 81122dc:	d102      	bne.n	81122e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 81122de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81122e0:	3304      	adds	r3, #4
 81122e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 81122e4:	78fa      	ldrb	r2, [r7, #3]
 81122e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81122e8:	9302      	str	r3, [sp, #8]
 81122ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 81122ee:	9301      	str	r3, [sp, #4]
 81122f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 81122f4:	9300      	str	r3, [sp, #0]
 81122f6:	4613      	mov	r3, r2
 81122f8:	687a      	ldr	r2, [r7, #4]
 81122fa:	6979      	ldr	r1, [r7, #20]
 81122fc:	68f8      	ldr	r0, [r7, #12]
 81122fe:	f000 f805 	bl	811230c <ip4_output_if_src>
 8112302:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8112304:	4618      	mov	r0, r3
 8112306:	3718      	adds	r7, #24
 8112308:	46bd      	mov	sp, r7
 811230a:	bd80      	pop	{r7, pc}

0811230c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 811230c:	b580      	push	{r7, lr}
 811230e:	b088      	sub	sp, #32
 8112310:	af00      	add	r7, sp, #0
 8112312:	60f8      	str	r0, [r7, #12]
 8112314:	60b9      	str	r1, [r7, #8]
 8112316:	607a      	str	r2, [r7, #4]
 8112318:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 811231a:	68fb      	ldr	r3, [r7, #12]
 811231c:	7b9b      	ldrb	r3, [r3, #14]
 811231e:	2b01      	cmp	r3, #1
 8112320:	d006      	beq.n	8112330 <ip4_output_if_src+0x24>
 8112322:	4b4b      	ldr	r3, [pc, #300]	@ (8112450 <ip4_output_if_src+0x144>)
 8112324:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8112328:	494a      	ldr	r1, [pc, #296]	@ (8112454 <ip4_output_if_src+0x148>)
 811232a:	484b      	ldr	r0, [pc, #300]	@ (8112458 <ip4_output_if_src+0x14c>)
 811232c:	f009 fd76 	bl	811be1c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8112330:	687b      	ldr	r3, [r7, #4]
 8112332:	2b00      	cmp	r3, #0
 8112334:	d060      	beq.n	81123f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8112336:	2314      	movs	r3, #20
 8112338:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 811233a:	2114      	movs	r1, #20
 811233c:	68f8      	ldr	r0, [r7, #12]
 811233e:	f002 fa15 	bl	811476c <pbuf_add_header>
 8112342:	4603      	mov	r3, r0
 8112344:	2b00      	cmp	r3, #0
 8112346:	d002      	beq.n	811234e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8112348:	f06f 0301 	mvn.w	r3, #1
 811234c:	e07c      	b.n	8112448 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 811234e:	68fb      	ldr	r3, [r7, #12]
 8112350:	685b      	ldr	r3, [r3, #4]
 8112352:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8112354:	68fb      	ldr	r3, [r7, #12]
 8112356:	895b      	ldrh	r3, [r3, #10]
 8112358:	2b13      	cmp	r3, #19
 811235a:	d806      	bhi.n	811236a <ip4_output_if_src+0x5e>
 811235c:	4b3c      	ldr	r3, [pc, #240]	@ (8112450 <ip4_output_if_src+0x144>)
 811235e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8112362:	493e      	ldr	r1, [pc, #248]	@ (811245c <ip4_output_if_src+0x150>)
 8112364:	483c      	ldr	r0, [pc, #240]	@ (8112458 <ip4_output_if_src+0x14c>)
 8112366:	f009 fd59 	bl	811be1c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 811236a:	69fb      	ldr	r3, [r7, #28]
 811236c:	78fa      	ldrb	r2, [r7, #3]
 811236e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8112370:	69fb      	ldr	r3, [r7, #28]
 8112372:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8112376:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8112378:	687b      	ldr	r3, [r7, #4]
 811237a:	681a      	ldr	r2, [r3, #0]
 811237c:	69fb      	ldr	r3, [r7, #28]
 811237e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8112380:	8b7b      	ldrh	r3, [r7, #26]
 8112382:	089b      	lsrs	r3, r3, #2
 8112384:	b29b      	uxth	r3, r3
 8112386:	b2db      	uxtb	r3, r3
 8112388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811238c:	b2da      	uxtb	r2, r3
 811238e:	69fb      	ldr	r3, [r7, #28]
 8112390:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8112392:	69fb      	ldr	r3, [r7, #28]
 8112394:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8112398:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 811239a:	68fb      	ldr	r3, [r7, #12]
 811239c:	891b      	ldrh	r3, [r3, #8]
 811239e:	4618      	mov	r0, r3
 81123a0:	f7fe faf4 	bl	811098c <lwip_htons>
 81123a4:	4603      	mov	r3, r0
 81123a6:	461a      	mov	r2, r3
 81123a8:	69fb      	ldr	r3, [r7, #28]
 81123aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 81123ac:	69fb      	ldr	r3, [r7, #28]
 81123ae:	2200      	movs	r2, #0
 81123b0:	719a      	strb	r2, [r3, #6]
 81123b2:	2200      	movs	r2, #0
 81123b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 81123b6:	4b2a      	ldr	r3, [pc, #168]	@ (8112460 <ip4_output_if_src+0x154>)
 81123b8:	881b      	ldrh	r3, [r3, #0]
 81123ba:	4618      	mov	r0, r3
 81123bc:	f7fe fae6 	bl	811098c <lwip_htons>
 81123c0:	4603      	mov	r3, r0
 81123c2:	461a      	mov	r2, r3
 81123c4:	69fb      	ldr	r3, [r7, #28]
 81123c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 81123c8:	4b25      	ldr	r3, [pc, #148]	@ (8112460 <ip4_output_if_src+0x154>)
 81123ca:	881b      	ldrh	r3, [r3, #0]
 81123cc:	3301      	adds	r3, #1
 81123ce:	b29a      	uxth	r2, r3
 81123d0:	4b23      	ldr	r3, [pc, #140]	@ (8112460 <ip4_output_if_src+0x154>)
 81123d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 81123d4:	68bb      	ldr	r3, [r7, #8]
 81123d6:	2b00      	cmp	r3, #0
 81123d8:	d104      	bne.n	81123e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 81123da:	4b22      	ldr	r3, [pc, #136]	@ (8112464 <ip4_output_if_src+0x158>)
 81123dc:	681a      	ldr	r2, [r3, #0]
 81123de:	69fb      	ldr	r3, [r7, #28]
 81123e0:	60da      	str	r2, [r3, #12]
 81123e2:	e003      	b.n	81123ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 81123e4:	68bb      	ldr	r3, [r7, #8]
 81123e6:	681a      	ldr	r2, [r3, #0]
 81123e8:	69fb      	ldr	r3, [r7, #28]
 81123ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 81123ec:	69fb      	ldr	r3, [r7, #28]
 81123ee:	2200      	movs	r2, #0
 81123f0:	729a      	strb	r2, [r3, #10]
 81123f2:	2200      	movs	r2, #0
 81123f4:	72da      	strb	r2, [r3, #11]
 81123f6:	e00f      	b.n	8112418 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 81123f8:	68fb      	ldr	r3, [r7, #12]
 81123fa:	895b      	ldrh	r3, [r3, #10]
 81123fc:	2b13      	cmp	r3, #19
 81123fe:	d802      	bhi.n	8112406 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8112400:	f06f 0301 	mvn.w	r3, #1
 8112404:	e020      	b.n	8112448 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8112406:	68fb      	ldr	r3, [r7, #12]
 8112408:	685b      	ldr	r3, [r3, #4]
 811240a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 811240c:	69fb      	ldr	r3, [r7, #28]
 811240e:	691b      	ldr	r3, [r3, #16]
 8112410:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8112412:	f107 0314 	add.w	r3, r7, #20
 8112416:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8112418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811241a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811241c:	2b00      	cmp	r3, #0
 811241e:	d00c      	beq.n	811243a <ip4_output_if_src+0x12e>
 8112420:	68fb      	ldr	r3, [r7, #12]
 8112422:	891a      	ldrh	r2, [r3, #8]
 8112424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112426:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8112428:	429a      	cmp	r2, r3
 811242a:	d906      	bls.n	811243a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 811242c:	687a      	ldr	r2, [r7, #4]
 811242e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8112430:	68f8      	ldr	r0, [r7, #12]
 8112432:	f000 fd53 	bl	8112edc <ip4_frag>
 8112436:	4603      	mov	r3, r0
 8112438:	e006      	b.n	8112448 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 811243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811243c:	695b      	ldr	r3, [r3, #20]
 811243e:	687a      	ldr	r2, [r7, #4]
 8112440:	68f9      	ldr	r1, [r7, #12]
 8112442:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112444:	4798      	blx	r3
 8112446:	4603      	mov	r3, r0
}
 8112448:	4618      	mov	r0, r3
 811244a:	3720      	adds	r7, #32
 811244c:	46bd      	mov	sp, r7
 811244e:	bd80      	pop	{r7, pc}
 8112450:	0811d1e4 	.word	0x0811d1e4
 8112454:	0811d258 	.word	0x0811d258
 8112458:	0811d264 	.word	0x0811d264
 811245c:	0811d28c 	.word	0x0811d28c
 8112460:	1000b25c 	.word	0x1000b25c
 8112464:	0811fc20 	.word	0x0811fc20

08112468 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8112468:	b480      	push	{r7}
 811246a:	b085      	sub	sp, #20
 811246c:	af00      	add	r7, sp, #0
 811246e:	6078      	str	r0, [r7, #4]
 8112470:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8112472:	687b      	ldr	r3, [r7, #4]
 8112474:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8112476:	687b      	ldr	r3, [r7, #4]
 8112478:	f1b3 3fff 	cmp.w	r3, #4294967295
 811247c:	d002      	beq.n	8112484 <ip4_addr_isbroadcast_u32+0x1c>
 811247e:	687b      	ldr	r3, [r7, #4]
 8112480:	2b00      	cmp	r3, #0
 8112482:	d101      	bne.n	8112488 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8112484:	2301      	movs	r3, #1
 8112486:	e02a      	b.n	81124de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8112488:	683b      	ldr	r3, [r7, #0]
 811248a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811248e:	f003 0302 	and.w	r3, r3, #2
 8112492:	2b00      	cmp	r3, #0
 8112494:	d101      	bne.n	811249a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8112496:	2300      	movs	r3, #0
 8112498:	e021      	b.n	81124de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 811249a:	683b      	ldr	r3, [r7, #0]
 811249c:	3304      	adds	r3, #4
 811249e:	681b      	ldr	r3, [r3, #0]
 81124a0:	687a      	ldr	r2, [r7, #4]
 81124a2:	429a      	cmp	r2, r3
 81124a4:	d101      	bne.n	81124aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 81124a6:	2300      	movs	r3, #0
 81124a8:	e019      	b.n	81124de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 81124aa:	68fa      	ldr	r2, [r7, #12]
 81124ac:	683b      	ldr	r3, [r7, #0]
 81124ae:	3304      	adds	r3, #4
 81124b0:	681b      	ldr	r3, [r3, #0]
 81124b2:	405a      	eors	r2, r3
 81124b4:	683b      	ldr	r3, [r7, #0]
 81124b6:	3308      	adds	r3, #8
 81124b8:	681b      	ldr	r3, [r3, #0]
 81124ba:	4013      	ands	r3, r2
 81124bc:	2b00      	cmp	r3, #0
 81124be:	d10d      	bne.n	81124dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 81124c0:	683b      	ldr	r3, [r7, #0]
 81124c2:	3308      	adds	r3, #8
 81124c4:	681b      	ldr	r3, [r3, #0]
 81124c6:	43da      	mvns	r2, r3
 81124c8:	687b      	ldr	r3, [r7, #4]
 81124ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 81124cc:	683b      	ldr	r3, [r7, #0]
 81124ce:	3308      	adds	r3, #8
 81124d0:	681b      	ldr	r3, [r3, #0]
 81124d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 81124d4:	429a      	cmp	r2, r3
 81124d6:	d101      	bne.n	81124dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 81124d8:	2301      	movs	r3, #1
 81124da:	e000      	b.n	81124de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 81124dc:	2300      	movs	r3, #0
  }
}
 81124de:	4618      	mov	r0, r3
 81124e0:	3714      	adds	r7, #20
 81124e2:	46bd      	mov	sp, r7
 81124e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81124e8:	4770      	bx	lr
	...

081124ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 81124ec:	b580      	push	{r7, lr}
 81124ee:	b084      	sub	sp, #16
 81124f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 81124f2:	2300      	movs	r3, #0
 81124f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 81124f6:	4b12      	ldr	r3, [pc, #72]	@ (8112540 <ip_reass_tmr+0x54>)
 81124f8:	681b      	ldr	r3, [r3, #0]
 81124fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 81124fc:	e018      	b.n	8112530 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 81124fe:	68fb      	ldr	r3, [r7, #12]
 8112500:	7fdb      	ldrb	r3, [r3, #31]
 8112502:	2b00      	cmp	r3, #0
 8112504:	d00b      	beq.n	811251e <ip_reass_tmr+0x32>
      r->timer--;
 8112506:	68fb      	ldr	r3, [r7, #12]
 8112508:	7fdb      	ldrb	r3, [r3, #31]
 811250a:	3b01      	subs	r3, #1
 811250c:	b2da      	uxtb	r2, r3
 811250e:	68fb      	ldr	r3, [r7, #12]
 8112510:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8112512:	68fb      	ldr	r3, [r7, #12]
 8112514:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8112516:	68fb      	ldr	r3, [r7, #12]
 8112518:	681b      	ldr	r3, [r3, #0]
 811251a:	60fb      	str	r3, [r7, #12]
 811251c:	e008      	b.n	8112530 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 811251e:	68fb      	ldr	r3, [r7, #12]
 8112520:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8112522:	68fb      	ldr	r3, [r7, #12]
 8112524:	681b      	ldr	r3, [r3, #0]
 8112526:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8112528:	68b9      	ldr	r1, [r7, #8]
 811252a:	6878      	ldr	r0, [r7, #4]
 811252c:	f000 f80a 	bl	8112544 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8112530:	68fb      	ldr	r3, [r7, #12]
 8112532:	2b00      	cmp	r3, #0
 8112534:	d1e3      	bne.n	81124fe <ip_reass_tmr+0x12>
    }
  }
}
 8112536:	bf00      	nop
 8112538:	bf00      	nop
 811253a:	3710      	adds	r7, #16
 811253c:	46bd      	mov	sp, r7
 811253e:	bd80      	pop	{r7, pc}
 8112540:	1000b260 	.word	0x1000b260

08112544 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8112544:	b580      	push	{r7, lr}
 8112546:	b088      	sub	sp, #32
 8112548:	af00      	add	r7, sp, #0
 811254a:	6078      	str	r0, [r7, #4]
 811254c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 811254e:	2300      	movs	r3, #0
 8112550:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8112552:	683a      	ldr	r2, [r7, #0]
 8112554:	687b      	ldr	r3, [r7, #4]
 8112556:	429a      	cmp	r2, r3
 8112558:	d105      	bne.n	8112566 <ip_reass_free_complete_datagram+0x22>
 811255a:	4b45      	ldr	r3, [pc, #276]	@ (8112670 <ip_reass_free_complete_datagram+0x12c>)
 811255c:	22ab      	movs	r2, #171	@ 0xab
 811255e:	4945      	ldr	r1, [pc, #276]	@ (8112674 <ip_reass_free_complete_datagram+0x130>)
 8112560:	4845      	ldr	r0, [pc, #276]	@ (8112678 <ip_reass_free_complete_datagram+0x134>)
 8112562:	f009 fc5b 	bl	811be1c <iprintf>
  if (prev != NULL) {
 8112566:	683b      	ldr	r3, [r7, #0]
 8112568:	2b00      	cmp	r3, #0
 811256a:	d00a      	beq.n	8112582 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 811256c:	683b      	ldr	r3, [r7, #0]
 811256e:	681b      	ldr	r3, [r3, #0]
 8112570:	687a      	ldr	r2, [r7, #4]
 8112572:	429a      	cmp	r2, r3
 8112574:	d005      	beq.n	8112582 <ip_reass_free_complete_datagram+0x3e>
 8112576:	4b3e      	ldr	r3, [pc, #248]	@ (8112670 <ip_reass_free_complete_datagram+0x12c>)
 8112578:	22ad      	movs	r2, #173	@ 0xad
 811257a:	4940      	ldr	r1, [pc, #256]	@ (811267c <ip_reass_free_complete_datagram+0x138>)
 811257c:	483e      	ldr	r0, [pc, #248]	@ (8112678 <ip_reass_free_complete_datagram+0x134>)
 811257e:	f009 fc4d 	bl	811be1c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8112582:	687b      	ldr	r3, [r7, #4]
 8112584:	685b      	ldr	r3, [r3, #4]
 8112586:	685b      	ldr	r3, [r3, #4]
 8112588:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 811258a:	697b      	ldr	r3, [r7, #20]
 811258c:	889b      	ldrh	r3, [r3, #4]
 811258e:	b29b      	uxth	r3, r3
 8112590:	2b00      	cmp	r3, #0
 8112592:	d12a      	bne.n	81125ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8112594:	687b      	ldr	r3, [r7, #4]
 8112596:	685b      	ldr	r3, [r3, #4]
 8112598:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 811259a:	697b      	ldr	r3, [r7, #20]
 811259c:	681a      	ldr	r2, [r3, #0]
 811259e:	687b      	ldr	r3, [r7, #4]
 81125a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 81125a2:	69bb      	ldr	r3, [r7, #24]
 81125a4:	6858      	ldr	r0, [r3, #4]
 81125a6:	687b      	ldr	r3, [r7, #4]
 81125a8:	3308      	adds	r3, #8
 81125aa:	2214      	movs	r2, #20
 81125ac:	4619      	mov	r1, r3
 81125ae:	f009 fde6 	bl	811c17e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 81125b2:	2101      	movs	r1, #1
 81125b4:	69b8      	ldr	r0, [r7, #24]
 81125b6:	f7ff fb69 	bl	8111c8c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 81125ba:	69b8      	ldr	r0, [r7, #24]
 81125bc:	f002 f9fa 	bl	81149b4 <pbuf_clen>
 81125c0:	4603      	mov	r3, r0
 81125c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 81125c4:	8bfa      	ldrh	r2, [r7, #30]
 81125c6:	8a7b      	ldrh	r3, [r7, #18]
 81125c8:	4413      	add	r3, r2
 81125ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81125ce:	db05      	blt.n	81125dc <ip_reass_free_complete_datagram+0x98>
 81125d0:	4b27      	ldr	r3, [pc, #156]	@ (8112670 <ip_reass_free_complete_datagram+0x12c>)
 81125d2:	22bc      	movs	r2, #188	@ 0xbc
 81125d4:	492a      	ldr	r1, [pc, #168]	@ (8112680 <ip_reass_free_complete_datagram+0x13c>)
 81125d6:	4828      	ldr	r0, [pc, #160]	@ (8112678 <ip_reass_free_complete_datagram+0x134>)
 81125d8:	f009 fc20 	bl	811be1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 81125dc:	8bfa      	ldrh	r2, [r7, #30]
 81125de:	8a7b      	ldrh	r3, [r7, #18]
 81125e0:	4413      	add	r3, r2
 81125e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 81125e4:	69b8      	ldr	r0, [r7, #24]
 81125e6:	f002 f957 	bl	8114898 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 81125ea:	687b      	ldr	r3, [r7, #4]
 81125ec:	685b      	ldr	r3, [r3, #4]
 81125ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 81125f0:	e01f      	b.n	8112632 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 81125f2:	69bb      	ldr	r3, [r7, #24]
 81125f4:	685b      	ldr	r3, [r3, #4]
 81125f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 81125f8:	69bb      	ldr	r3, [r7, #24]
 81125fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 81125fc:	697b      	ldr	r3, [r7, #20]
 81125fe:	681b      	ldr	r3, [r3, #0]
 8112600:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8112602:	68f8      	ldr	r0, [r7, #12]
 8112604:	f002 f9d6 	bl	81149b4 <pbuf_clen>
 8112608:	4603      	mov	r3, r0
 811260a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 811260c:	8bfa      	ldrh	r2, [r7, #30]
 811260e:	8a7b      	ldrh	r3, [r7, #18]
 8112610:	4413      	add	r3, r2
 8112612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8112616:	db05      	blt.n	8112624 <ip_reass_free_complete_datagram+0xe0>
 8112618:	4b15      	ldr	r3, [pc, #84]	@ (8112670 <ip_reass_free_complete_datagram+0x12c>)
 811261a:	22cc      	movs	r2, #204	@ 0xcc
 811261c:	4918      	ldr	r1, [pc, #96]	@ (8112680 <ip_reass_free_complete_datagram+0x13c>)
 811261e:	4816      	ldr	r0, [pc, #88]	@ (8112678 <ip_reass_free_complete_datagram+0x134>)
 8112620:	f009 fbfc 	bl	811be1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8112624:	8bfa      	ldrh	r2, [r7, #30]
 8112626:	8a7b      	ldrh	r3, [r7, #18]
 8112628:	4413      	add	r3, r2
 811262a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 811262c:	68f8      	ldr	r0, [r7, #12]
 811262e:	f002 f933 	bl	8114898 <pbuf_free>
  while (p != NULL) {
 8112632:	69bb      	ldr	r3, [r7, #24]
 8112634:	2b00      	cmp	r3, #0
 8112636:	d1dc      	bne.n	81125f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8112638:	6839      	ldr	r1, [r7, #0]
 811263a:	6878      	ldr	r0, [r7, #4]
 811263c:	f000 f8c2 	bl	81127c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8112640:	4b10      	ldr	r3, [pc, #64]	@ (8112684 <ip_reass_free_complete_datagram+0x140>)
 8112642:	881b      	ldrh	r3, [r3, #0]
 8112644:	8bfa      	ldrh	r2, [r7, #30]
 8112646:	429a      	cmp	r2, r3
 8112648:	d905      	bls.n	8112656 <ip_reass_free_complete_datagram+0x112>
 811264a:	4b09      	ldr	r3, [pc, #36]	@ (8112670 <ip_reass_free_complete_datagram+0x12c>)
 811264c:	22d2      	movs	r2, #210	@ 0xd2
 811264e:	490e      	ldr	r1, [pc, #56]	@ (8112688 <ip_reass_free_complete_datagram+0x144>)
 8112650:	4809      	ldr	r0, [pc, #36]	@ (8112678 <ip_reass_free_complete_datagram+0x134>)
 8112652:	f009 fbe3 	bl	811be1c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8112656:	4b0b      	ldr	r3, [pc, #44]	@ (8112684 <ip_reass_free_complete_datagram+0x140>)
 8112658:	881a      	ldrh	r2, [r3, #0]
 811265a:	8bfb      	ldrh	r3, [r7, #30]
 811265c:	1ad3      	subs	r3, r2, r3
 811265e:	b29a      	uxth	r2, r3
 8112660:	4b08      	ldr	r3, [pc, #32]	@ (8112684 <ip_reass_free_complete_datagram+0x140>)
 8112662:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8112664:	8bfb      	ldrh	r3, [r7, #30]
}
 8112666:	4618      	mov	r0, r3
 8112668:	3720      	adds	r7, #32
 811266a:	46bd      	mov	sp, r7
 811266c:	bd80      	pop	{r7, pc}
 811266e:	bf00      	nop
 8112670:	0811d2bc 	.word	0x0811d2bc
 8112674:	0811d334 	.word	0x0811d334
 8112678:	0811d340 	.word	0x0811d340
 811267c:	0811d368 	.word	0x0811d368
 8112680:	0811d37c 	.word	0x0811d37c
 8112684:	1000b264 	.word	0x1000b264
 8112688:	0811d39c 	.word	0x0811d39c

0811268c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 811268c:	b580      	push	{r7, lr}
 811268e:	b08a      	sub	sp, #40	@ 0x28
 8112690:	af00      	add	r7, sp, #0
 8112692:	6078      	str	r0, [r7, #4]
 8112694:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8112696:	2300      	movs	r3, #0
 8112698:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 811269a:	2300      	movs	r3, #0
 811269c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 811269e:	2300      	movs	r3, #0
 81126a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 81126a2:	2300      	movs	r3, #0
 81126a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 81126a6:	2300      	movs	r3, #0
 81126a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 81126aa:	4b28      	ldr	r3, [pc, #160]	@ (811274c <ip_reass_remove_oldest_datagram+0xc0>)
 81126ac:	681b      	ldr	r3, [r3, #0]
 81126ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 81126b0:	e030      	b.n	8112714 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 81126b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81126b4:	695a      	ldr	r2, [r3, #20]
 81126b6:	687b      	ldr	r3, [r7, #4]
 81126b8:	68db      	ldr	r3, [r3, #12]
 81126ba:	429a      	cmp	r2, r3
 81126bc:	d10c      	bne.n	81126d8 <ip_reass_remove_oldest_datagram+0x4c>
 81126be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81126c0:	699a      	ldr	r2, [r3, #24]
 81126c2:	687b      	ldr	r3, [r7, #4]
 81126c4:	691b      	ldr	r3, [r3, #16]
 81126c6:	429a      	cmp	r2, r3
 81126c8:	d106      	bne.n	81126d8 <ip_reass_remove_oldest_datagram+0x4c>
 81126ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81126cc:	899a      	ldrh	r2, [r3, #12]
 81126ce:	687b      	ldr	r3, [r7, #4]
 81126d0:	889b      	ldrh	r3, [r3, #4]
 81126d2:	b29b      	uxth	r3, r3
 81126d4:	429a      	cmp	r2, r3
 81126d6:	d014      	beq.n	8112702 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 81126d8:	693b      	ldr	r3, [r7, #16]
 81126da:	3301      	adds	r3, #1
 81126dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 81126de:	6a3b      	ldr	r3, [r7, #32]
 81126e0:	2b00      	cmp	r3, #0
 81126e2:	d104      	bne.n	81126ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 81126e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81126e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 81126e8:	69fb      	ldr	r3, [r7, #28]
 81126ea:	61bb      	str	r3, [r7, #24]
 81126ec:	e009      	b.n	8112702 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 81126ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81126f0:	7fda      	ldrb	r2, [r3, #31]
 81126f2:	6a3b      	ldr	r3, [r7, #32]
 81126f4:	7fdb      	ldrb	r3, [r3, #31]
 81126f6:	429a      	cmp	r2, r3
 81126f8:	d803      	bhi.n	8112702 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 81126fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81126fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 81126fe:	69fb      	ldr	r3, [r7, #28]
 8112700:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8112702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112704:	681b      	ldr	r3, [r3, #0]
 8112706:	2b00      	cmp	r3, #0
 8112708:	d001      	beq.n	811270e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 811270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811270c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 811270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112710:	681b      	ldr	r3, [r3, #0]
 8112712:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8112714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112716:	2b00      	cmp	r3, #0
 8112718:	d1cb      	bne.n	81126b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 811271a:	6a3b      	ldr	r3, [r7, #32]
 811271c:	2b00      	cmp	r3, #0
 811271e:	d008      	beq.n	8112732 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8112720:	69b9      	ldr	r1, [r7, #24]
 8112722:	6a38      	ldr	r0, [r7, #32]
 8112724:	f7ff ff0e 	bl	8112544 <ip_reass_free_complete_datagram>
 8112728:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 811272a:	697a      	ldr	r2, [r7, #20]
 811272c:	68fb      	ldr	r3, [r7, #12]
 811272e:	4413      	add	r3, r2
 8112730:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8112732:	697a      	ldr	r2, [r7, #20]
 8112734:	683b      	ldr	r3, [r7, #0]
 8112736:	429a      	cmp	r2, r3
 8112738:	da02      	bge.n	8112740 <ip_reass_remove_oldest_datagram+0xb4>
 811273a:	693b      	ldr	r3, [r7, #16]
 811273c:	2b01      	cmp	r3, #1
 811273e:	dcac      	bgt.n	811269a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8112740:	697b      	ldr	r3, [r7, #20]
}
 8112742:	4618      	mov	r0, r3
 8112744:	3728      	adds	r7, #40	@ 0x28
 8112746:	46bd      	mov	sp, r7
 8112748:	bd80      	pop	{r7, pc}
 811274a:	bf00      	nop
 811274c:	1000b260 	.word	0x1000b260

08112750 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8112750:	b580      	push	{r7, lr}
 8112752:	b084      	sub	sp, #16
 8112754:	af00      	add	r7, sp, #0
 8112756:	6078      	str	r0, [r7, #4]
 8112758:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 811275a:	2004      	movs	r0, #4
 811275c:	f001 f982 	bl	8113a64 <memp_malloc>
 8112760:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8112762:	68fb      	ldr	r3, [r7, #12]
 8112764:	2b00      	cmp	r3, #0
 8112766:	d110      	bne.n	811278a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8112768:	6839      	ldr	r1, [r7, #0]
 811276a:	6878      	ldr	r0, [r7, #4]
 811276c:	f7ff ff8e 	bl	811268c <ip_reass_remove_oldest_datagram>
 8112770:	4602      	mov	r2, r0
 8112772:	683b      	ldr	r3, [r7, #0]
 8112774:	4293      	cmp	r3, r2
 8112776:	dc03      	bgt.n	8112780 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8112778:	2004      	movs	r0, #4
 811277a:	f001 f973 	bl	8113a64 <memp_malloc>
 811277e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8112780:	68fb      	ldr	r3, [r7, #12]
 8112782:	2b00      	cmp	r3, #0
 8112784:	d101      	bne.n	811278a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8112786:	2300      	movs	r3, #0
 8112788:	e016      	b.n	81127b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 811278a:	2220      	movs	r2, #32
 811278c:	2100      	movs	r1, #0
 811278e:	68f8      	ldr	r0, [r7, #12]
 8112790:	f009 fbc3 	bl	811bf1a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8112794:	68fb      	ldr	r3, [r7, #12]
 8112796:	220f      	movs	r2, #15
 8112798:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 811279a:	4b09      	ldr	r3, [pc, #36]	@ (81127c0 <ip_reass_enqueue_new_datagram+0x70>)
 811279c:	681a      	ldr	r2, [r3, #0]
 811279e:	68fb      	ldr	r3, [r7, #12]
 81127a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 81127a2:	4a07      	ldr	r2, [pc, #28]	@ (81127c0 <ip_reass_enqueue_new_datagram+0x70>)
 81127a4:	68fb      	ldr	r3, [r7, #12]
 81127a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 81127a8:	68fb      	ldr	r3, [r7, #12]
 81127aa:	3308      	adds	r3, #8
 81127ac:	2214      	movs	r2, #20
 81127ae:	6879      	ldr	r1, [r7, #4]
 81127b0:	4618      	mov	r0, r3
 81127b2:	f009 fce4 	bl	811c17e <memcpy>
  return ipr;
 81127b6:	68fb      	ldr	r3, [r7, #12]
}
 81127b8:	4618      	mov	r0, r3
 81127ba:	3710      	adds	r7, #16
 81127bc:	46bd      	mov	sp, r7
 81127be:	bd80      	pop	{r7, pc}
 81127c0:	1000b260 	.word	0x1000b260

081127c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 81127c4:	b580      	push	{r7, lr}
 81127c6:	b082      	sub	sp, #8
 81127c8:	af00      	add	r7, sp, #0
 81127ca:	6078      	str	r0, [r7, #4]
 81127cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 81127ce:	4b10      	ldr	r3, [pc, #64]	@ (8112810 <ip_reass_dequeue_datagram+0x4c>)
 81127d0:	681b      	ldr	r3, [r3, #0]
 81127d2:	687a      	ldr	r2, [r7, #4]
 81127d4:	429a      	cmp	r2, r3
 81127d6:	d104      	bne.n	81127e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 81127d8:	687b      	ldr	r3, [r7, #4]
 81127da:	681b      	ldr	r3, [r3, #0]
 81127dc:	4a0c      	ldr	r2, [pc, #48]	@ (8112810 <ip_reass_dequeue_datagram+0x4c>)
 81127de:	6013      	str	r3, [r2, #0]
 81127e0:	e00d      	b.n	81127fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 81127e2:	683b      	ldr	r3, [r7, #0]
 81127e4:	2b00      	cmp	r3, #0
 81127e6:	d106      	bne.n	81127f6 <ip_reass_dequeue_datagram+0x32>
 81127e8:	4b0a      	ldr	r3, [pc, #40]	@ (8112814 <ip_reass_dequeue_datagram+0x50>)
 81127ea:	f240 1245 	movw	r2, #325	@ 0x145
 81127ee:	490a      	ldr	r1, [pc, #40]	@ (8112818 <ip_reass_dequeue_datagram+0x54>)
 81127f0:	480a      	ldr	r0, [pc, #40]	@ (811281c <ip_reass_dequeue_datagram+0x58>)
 81127f2:	f009 fb13 	bl	811be1c <iprintf>
    prev->next = ipr->next;
 81127f6:	687b      	ldr	r3, [r7, #4]
 81127f8:	681a      	ldr	r2, [r3, #0]
 81127fa:	683b      	ldr	r3, [r7, #0]
 81127fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 81127fe:	6879      	ldr	r1, [r7, #4]
 8112800:	2004      	movs	r0, #4
 8112802:	f001 f9a5 	bl	8113b50 <memp_free>
}
 8112806:	bf00      	nop
 8112808:	3708      	adds	r7, #8
 811280a:	46bd      	mov	sp, r7
 811280c:	bd80      	pop	{r7, pc}
 811280e:	bf00      	nop
 8112810:	1000b260 	.word	0x1000b260
 8112814:	0811d2bc 	.word	0x0811d2bc
 8112818:	0811d3c0 	.word	0x0811d3c0
 811281c:	0811d340 	.word	0x0811d340

08112820 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8112820:	b580      	push	{r7, lr}
 8112822:	b08c      	sub	sp, #48	@ 0x30
 8112824:	af00      	add	r7, sp, #0
 8112826:	60f8      	str	r0, [r7, #12]
 8112828:	60b9      	str	r1, [r7, #8]
 811282a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 811282c:	2300      	movs	r3, #0
 811282e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8112830:	2301      	movs	r3, #1
 8112832:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8112834:	68bb      	ldr	r3, [r7, #8]
 8112836:	685b      	ldr	r3, [r3, #4]
 8112838:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 811283a:	69fb      	ldr	r3, [r7, #28]
 811283c:	885b      	ldrh	r3, [r3, #2]
 811283e:	b29b      	uxth	r3, r3
 8112840:	4618      	mov	r0, r3
 8112842:	f7fe f8a3 	bl	811098c <lwip_htons>
 8112846:	4603      	mov	r3, r0
 8112848:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 811284a:	69fb      	ldr	r3, [r7, #28]
 811284c:	781b      	ldrb	r3, [r3, #0]
 811284e:	f003 030f 	and.w	r3, r3, #15
 8112852:	b2db      	uxtb	r3, r3
 8112854:	009b      	lsls	r3, r3, #2
 8112856:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8112858:	7e7b      	ldrb	r3, [r7, #25]
 811285a:	b29b      	uxth	r3, r3
 811285c:	8b7a      	ldrh	r2, [r7, #26]
 811285e:	429a      	cmp	r2, r3
 8112860:	d202      	bcs.n	8112868 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8112862:	f04f 33ff 	mov.w	r3, #4294967295
 8112866:	e135      	b.n	8112ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8112868:	7e7b      	ldrb	r3, [r7, #25]
 811286a:	b29b      	uxth	r3, r3
 811286c:	8b7a      	ldrh	r2, [r7, #26]
 811286e:	1ad3      	subs	r3, r2, r3
 8112870:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8112872:	69fb      	ldr	r3, [r7, #28]
 8112874:	88db      	ldrh	r3, [r3, #6]
 8112876:	b29b      	uxth	r3, r3
 8112878:	4618      	mov	r0, r3
 811287a:	f7fe f887 	bl	811098c <lwip_htons>
 811287e:	4603      	mov	r3, r0
 8112880:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8112884:	b29b      	uxth	r3, r3
 8112886:	00db      	lsls	r3, r3, #3
 8112888:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 811288a:	68bb      	ldr	r3, [r7, #8]
 811288c:	685b      	ldr	r3, [r3, #4]
 811288e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8112890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112892:	2200      	movs	r2, #0
 8112894:	701a      	strb	r2, [r3, #0]
 8112896:	2200      	movs	r2, #0
 8112898:	705a      	strb	r2, [r3, #1]
 811289a:	2200      	movs	r2, #0
 811289c:	709a      	strb	r2, [r3, #2]
 811289e:	2200      	movs	r2, #0
 81128a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 81128a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128a4:	8afa      	ldrh	r2, [r7, #22]
 81128a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 81128a8:	8afa      	ldrh	r2, [r7, #22]
 81128aa:	8b7b      	ldrh	r3, [r7, #26]
 81128ac:	4413      	add	r3, r2
 81128ae:	b29a      	uxth	r2, r3
 81128b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 81128b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128b6:	88db      	ldrh	r3, [r3, #6]
 81128b8:	b29b      	uxth	r3, r3
 81128ba:	8afa      	ldrh	r2, [r7, #22]
 81128bc:	429a      	cmp	r2, r3
 81128be:	d902      	bls.n	81128c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 81128c0:	f04f 33ff 	mov.w	r3, #4294967295
 81128c4:	e106      	b.n	8112ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 81128c6:	68fb      	ldr	r3, [r7, #12]
 81128c8:	685b      	ldr	r3, [r3, #4]
 81128ca:	627b      	str	r3, [r7, #36]	@ 0x24
 81128cc:	e068      	b.n	81129a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 81128ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81128d0:	685b      	ldr	r3, [r3, #4]
 81128d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 81128d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128d6:	889b      	ldrh	r3, [r3, #4]
 81128d8:	b29a      	uxth	r2, r3
 81128da:	693b      	ldr	r3, [r7, #16]
 81128dc:	889b      	ldrh	r3, [r3, #4]
 81128de:	b29b      	uxth	r3, r3
 81128e0:	429a      	cmp	r2, r3
 81128e2:	d235      	bcs.n	8112950 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 81128e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81128e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 81128ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81128ec:	2b00      	cmp	r3, #0
 81128ee:	d020      	beq.n	8112932 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 81128f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128f2:	889b      	ldrh	r3, [r3, #4]
 81128f4:	b29a      	uxth	r2, r3
 81128f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81128f8:	88db      	ldrh	r3, [r3, #6]
 81128fa:	b29b      	uxth	r3, r3
 81128fc:	429a      	cmp	r2, r3
 81128fe:	d307      	bcc.n	8112910 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8112900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112902:	88db      	ldrh	r3, [r3, #6]
 8112904:	b29a      	uxth	r2, r3
 8112906:	693b      	ldr	r3, [r7, #16]
 8112908:	889b      	ldrh	r3, [r3, #4]
 811290a:	b29b      	uxth	r3, r3
 811290c:	429a      	cmp	r2, r3
 811290e:	d902      	bls.n	8112916 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8112910:	f04f 33ff 	mov.w	r3, #4294967295
 8112914:	e0de      	b.n	8112ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8112916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112918:	68ba      	ldr	r2, [r7, #8]
 811291a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 811291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811291e:	88db      	ldrh	r3, [r3, #6]
 8112920:	b29a      	uxth	r2, r3
 8112922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112924:	889b      	ldrh	r3, [r3, #4]
 8112926:	b29b      	uxth	r3, r3
 8112928:	429a      	cmp	r2, r3
 811292a:	d03d      	beq.n	81129a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 811292c:	2300      	movs	r3, #0
 811292e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8112930:	e03a      	b.n	81129a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8112932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112934:	88db      	ldrh	r3, [r3, #6]
 8112936:	b29a      	uxth	r2, r3
 8112938:	693b      	ldr	r3, [r7, #16]
 811293a:	889b      	ldrh	r3, [r3, #4]
 811293c:	b29b      	uxth	r3, r3
 811293e:	429a      	cmp	r2, r3
 8112940:	d902      	bls.n	8112948 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8112942:	f04f 33ff 	mov.w	r3, #4294967295
 8112946:	e0c5      	b.n	8112ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8112948:	68fb      	ldr	r3, [r7, #12]
 811294a:	68ba      	ldr	r2, [r7, #8]
 811294c:	605a      	str	r2, [r3, #4]
      break;
 811294e:	e02b      	b.n	81129a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8112950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112952:	889b      	ldrh	r3, [r3, #4]
 8112954:	b29a      	uxth	r2, r3
 8112956:	693b      	ldr	r3, [r7, #16]
 8112958:	889b      	ldrh	r3, [r3, #4]
 811295a:	b29b      	uxth	r3, r3
 811295c:	429a      	cmp	r2, r3
 811295e:	d102      	bne.n	8112966 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8112960:	f04f 33ff 	mov.w	r3, #4294967295
 8112964:	e0b6      	b.n	8112ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8112966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112968:	889b      	ldrh	r3, [r3, #4]
 811296a:	b29a      	uxth	r2, r3
 811296c:	693b      	ldr	r3, [r7, #16]
 811296e:	88db      	ldrh	r3, [r3, #6]
 8112970:	b29b      	uxth	r3, r3
 8112972:	429a      	cmp	r2, r3
 8112974:	d202      	bcs.n	811297c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8112976:	f04f 33ff 	mov.w	r3, #4294967295
 811297a:	e0ab      	b.n	8112ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 811297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811297e:	2b00      	cmp	r3, #0
 8112980:	d009      	beq.n	8112996 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8112982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112984:	88db      	ldrh	r3, [r3, #6]
 8112986:	b29a      	uxth	r2, r3
 8112988:	693b      	ldr	r3, [r7, #16]
 811298a:	889b      	ldrh	r3, [r3, #4]
 811298c:	b29b      	uxth	r3, r3
 811298e:	429a      	cmp	r2, r3
 8112990:	d001      	beq.n	8112996 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8112992:	2300      	movs	r3, #0
 8112994:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8112996:	693b      	ldr	r3, [r7, #16]
 8112998:	681b      	ldr	r3, [r3, #0]
 811299a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 811299c:	693b      	ldr	r3, [r7, #16]
 811299e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 81129a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81129a2:	2b00      	cmp	r3, #0
 81129a4:	d193      	bne.n	81128ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 81129a6:	e000      	b.n	81129aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 81129a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 81129aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81129ac:	2b00      	cmp	r3, #0
 81129ae:	d12d      	bne.n	8112a0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 81129b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81129b2:	2b00      	cmp	r3, #0
 81129b4:	d01c      	beq.n	81129f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 81129b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81129b8:	88db      	ldrh	r3, [r3, #6]
 81129ba:	b29a      	uxth	r2, r3
 81129bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81129be:	889b      	ldrh	r3, [r3, #4]
 81129c0:	b29b      	uxth	r3, r3
 81129c2:	429a      	cmp	r2, r3
 81129c4:	d906      	bls.n	81129d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 81129c6:	4b45      	ldr	r3, [pc, #276]	@ (8112adc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81129c8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 81129cc:	4944      	ldr	r1, [pc, #272]	@ (8112ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 81129ce:	4845      	ldr	r0, [pc, #276]	@ (8112ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81129d0:	f009 fa24 	bl	811be1c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 81129d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81129d6:	68ba      	ldr	r2, [r7, #8]
 81129d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 81129da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81129dc:	88db      	ldrh	r3, [r3, #6]
 81129de:	b29a      	uxth	r2, r3
 81129e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81129e2:	889b      	ldrh	r3, [r3, #4]
 81129e4:	b29b      	uxth	r3, r3
 81129e6:	429a      	cmp	r2, r3
 81129e8:	d010      	beq.n	8112a0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 81129ea:	2300      	movs	r3, #0
 81129ec:	623b      	str	r3, [r7, #32]
 81129ee:	e00d      	b.n	8112a0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 81129f0:	68fb      	ldr	r3, [r7, #12]
 81129f2:	685b      	ldr	r3, [r3, #4]
 81129f4:	2b00      	cmp	r3, #0
 81129f6:	d006      	beq.n	8112a06 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 81129f8:	4b38      	ldr	r3, [pc, #224]	@ (8112adc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81129fa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 81129fe:	493a      	ldr	r1, [pc, #232]	@ (8112ae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8112a00:	4838      	ldr	r0, [pc, #224]	@ (8112ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8112a02:	f009 fa0b 	bl	811be1c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8112a06:	68fb      	ldr	r3, [r7, #12]
 8112a08:	68ba      	ldr	r2, [r7, #8]
 8112a0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8112a0c:	687b      	ldr	r3, [r7, #4]
 8112a0e:	2b00      	cmp	r3, #0
 8112a10:	d105      	bne.n	8112a1e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8112a12:	68fb      	ldr	r3, [r7, #12]
 8112a14:	7f9b      	ldrb	r3, [r3, #30]
 8112a16:	f003 0301 	and.w	r3, r3, #1
 8112a1a:	2b00      	cmp	r3, #0
 8112a1c:	d059      	beq.n	8112ad2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8112a1e:	6a3b      	ldr	r3, [r7, #32]
 8112a20:	2b00      	cmp	r3, #0
 8112a22:	d04f      	beq.n	8112ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8112a24:	68fb      	ldr	r3, [r7, #12]
 8112a26:	685b      	ldr	r3, [r3, #4]
 8112a28:	2b00      	cmp	r3, #0
 8112a2a:	d006      	beq.n	8112a3a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8112a2c:	68fb      	ldr	r3, [r7, #12]
 8112a2e:	685b      	ldr	r3, [r3, #4]
 8112a30:	685b      	ldr	r3, [r3, #4]
 8112a32:	889b      	ldrh	r3, [r3, #4]
 8112a34:	b29b      	uxth	r3, r3
 8112a36:	2b00      	cmp	r3, #0
 8112a38:	d002      	beq.n	8112a40 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8112a3a:	2300      	movs	r3, #0
 8112a3c:	623b      	str	r3, [r7, #32]
 8112a3e:	e041      	b.n	8112ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8112a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a42:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8112a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a46:	681b      	ldr	r3, [r3, #0]
 8112a48:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8112a4a:	e012      	b.n	8112a72 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8112a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112a4e:	685b      	ldr	r3, [r3, #4]
 8112a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8112a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112a54:	88db      	ldrh	r3, [r3, #6]
 8112a56:	b29a      	uxth	r2, r3
 8112a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a5a:	889b      	ldrh	r3, [r3, #4]
 8112a5c:	b29b      	uxth	r3, r3
 8112a5e:	429a      	cmp	r2, r3
 8112a60:	d002      	beq.n	8112a68 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8112a62:	2300      	movs	r3, #0
 8112a64:	623b      	str	r3, [r7, #32]
            break;
 8112a66:	e007      	b.n	8112a78 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8112a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8112a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a6e:	681b      	ldr	r3, [r3, #0]
 8112a70:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8112a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112a74:	2b00      	cmp	r3, #0
 8112a76:	d1e9      	bne.n	8112a4c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8112a78:	6a3b      	ldr	r3, [r7, #32]
 8112a7a:	2b00      	cmp	r3, #0
 8112a7c:	d022      	beq.n	8112ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8112a7e:	68fb      	ldr	r3, [r7, #12]
 8112a80:	685b      	ldr	r3, [r3, #4]
 8112a82:	2b00      	cmp	r3, #0
 8112a84:	d106      	bne.n	8112a94 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8112a86:	4b15      	ldr	r3, [pc, #84]	@ (8112adc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8112a88:	f240 12df 	movw	r2, #479	@ 0x1df
 8112a8c:	4917      	ldr	r1, [pc, #92]	@ (8112aec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8112a8e:	4815      	ldr	r0, [pc, #84]	@ (8112ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8112a90:	f009 f9c4 	bl	811be1c <iprintf>
          LWIP_ASSERT("sanity check",
 8112a94:	68fb      	ldr	r3, [r7, #12]
 8112a96:	685b      	ldr	r3, [r3, #4]
 8112a98:	685b      	ldr	r3, [r3, #4]
 8112a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8112a9c:	429a      	cmp	r2, r3
 8112a9e:	d106      	bne.n	8112aae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8112aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8112adc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8112aa2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8112aa6:	4911      	ldr	r1, [pc, #68]	@ (8112aec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8112aa8:	480e      	ldr	r0, [pc, #56]	@ (8112ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8112aaa:	f009 f9b7 	bl	811be1c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8112aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112ab0:	681b      	ldr	r3, [r3, #0]
 8112ab2:	2b00      	cmp	r3, #0
 8112ab4:	d006      	beq.n	8112ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8112ab6:	4b09      	ldr	r3, [pc, #36]	@ (8112adc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8112ab8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8112abc:	490c      	ldr	r1, [pc, #48]	@ (8112af0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8112abe:	4809      	ldr	r0, [pc, #36]	@ (8112ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8112ac0:	f009 f9ac 	bl	811be1c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8112ac4:	6a3b      	ldr	r3, [r7, #32]
 8112ac6:	2b00      	cmp	r3, #0
 8112ac8:	bf14      	ite	ne
 8112aca:	2301      	movne	r3, #1
 8112acc:	2300      	moveq	r3, #0
 8112ace:	b2db      	uxtb	r3, r3
 8112ad0:	e000      	b.n	8112ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8112ad2:	2300      	movs	r3, #0
}
 8112ad4:	4618      	mov	r0, r3
 8112ad6:	3730      	adds	r7, #48	@ 0x30
 8112ad8:	46bd      	mov	sp, r7
 8112ada:	bd80      	pop	{r7, pc}
 8112adc:	0811d2bc 	.word	0x0811d2bc
 8112ae0:	0811d3dc 	.word	0x0811d3dc
 8112ae4:	0811d340 	.word	0x0811d340
 8112ae8:	0811d3fc 	.word	0x0811d3fc
 8112aec:	0811d434 	.word	0x0811d434
 8112af0:	0811d444 	.word	0x0811d444

08112af4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8112af4:	b580      	push	{r7, lr}
 8112af6:	b08e      	sub	sp, #56	@ 0x38
 8112af8:	af00      	add	r7, sp, #0
 8112afa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8112afc:	687b      	ldr	r3, [r7, #4]
 8112afe:	685b      	ldr	r3, [r3, #4]
 8112b00:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8112b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b04:	781b      	ldrb	r3, [r3, #0]
 8112b06:	f003 030f 	and.w	r3, r3, #15
 8112b0a:	b2db      	uxtb	r3, r3
 8112b0c:	009b      	lsls	r3, r3, #2
 8112b0e:	b2db      	uxtb	r3, r3
 8112b10:	2b14      	cmp	r3, #20
 8112b12:	f040 8171 	bne.w	8112df8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8112b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b18:	88db      	ldrh	r3, [r3, #6]
 8112b1a:	b29b      	uxth	r3, r3
 8112b1c:	4618      	mov	r0, r3
 8112b1e:	f7fd ff35 	bl	811098c <lwip_htons>
 8112b22:	4603      	mov	r3, r0
 8112b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8112b28:	b29b      	uxth	r3, r3
 8112b2a:	00db      	lsls	r3, r3, #3
 8112b2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8112b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b30:	885b      	ldrh	r3, [r3, #2]
 8112b32:	b29b      	uxth	r3, r3
 8112b34:	4618      	mov	r0, r3
 8112b36:	f7fd ff29 	bl	811098c <lwip_htons>
 8112b3a:	4603      	mov	r3, r0
 8112b3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8112b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b40:	781b      	ldrb	r3, [r3, #0]
 8112b42:	f003 030f 	and.w	r3, r3, #15
 8112b46:	b2db      	uxtb	r3, r3
 8112b48:	009b      	lsls	r3, r3, #2
 8112b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8112b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8112b52:	b29b      	uxth	r3, r3
 8112b54:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8112b56:	429a      	cmp	r2, r3
 8112b58:	f0c0 8150 	bcc.w	8112dfc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8112b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8112b60:	b29b      	uxth	r3, r3
 8112b62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8112b64:	1ad3      	subs	r3, r2, r3
 8112b66:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8112b68:	6878      	ldr	r0, [r7, #4]
 8112b6a:	f001 ff23 	bl	81149b4 <pbuf_clen>
 8112b6e:	4603      	mov	r3, r0
 8112b70:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8112b72:	4b8c      	ldr	r3, [pc, #560]	@ (8112da4 <ip4_reass+0x2b0>)
 8112b74:	881b      	ldrh	r3, [r3, #0]
 8112b76:	461a      	mov	r2, r3
 8112b78:	8c3b      	ldrh	r3, [r7, #32]
 8112b7a:	4413      	add	r3, r2
 8112b7c:	2b0a      	cmp	r3, #10
 8112b7e:	dd10      	ble.n	8112ba2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8112b80:	8c3b      	ldrh	r3, [r7, #32]
 8112b82:	4619      	mov	r1, r3
 8112b84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8112b86:	f7ff fd81 	bl	811268c <ip_reass_remove_oldest_datagram>
 8112b8a:	4603      	mov	r3, r0
 8112b8c:	2b00      	cmp	r3, #0
 8112b8e:	f000 8137 	beq.w	8112e00 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8112b92:	4b84      	ldr	r3, [pc, #528]	@ (8112da4 <ip4_reass+0x2b0>)
 8112b94:	881b      	ldrh	r3, [r3, #0]
 8112b96:	461a      	mov	r2, r3
 8112b98:	8c3b      	ldrh	r3, [r7, #32]
 8112b9a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8112b9c:	2b0a      	cmp	r3, #10
 8112b9e:	f300 812f 	bgt.w	8112e00 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8112ba2:	4b81      	ldr	r3, [pc, #516]	@ (8112da8 <ip4_reass+0x2b4>)
 8112ba4:	681b      	ldr	r3, [r3, #0]
 8112ba6:	633b      	str	r3, [r7, #48]	@ 0x30
 8112ba8:	e015      	b.n	8112bd6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8112baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112bac:	695a      	ldr	r2, [r3, #20]
 8112bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112bb0:	68db      	ldr	r3, [r3, #12]
 8112bb2:	429a      	cmp	r2, r3
 8112bb4:	d10c      	bne.n	8112bd0 <ip4_reass+0xdc>
 8112bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112bb8:	699a      	ldr	r2, [r3, #24]
 8112bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112bbc:	691b      	ldr	r3, [r3, #16]
 8112bbe:	429a      	cmp	r2, r3
 8112bc0:	d106      	bne.n	8112bd0 <ip4_reass+0xdc>
 8112bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112bc4:	899a      	ldrh	r2, [r3, #12]
 8112bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112bc8:	889b      	ldrh	r3, [r3, #4]
 8112bca:	b29b      	uxth	r3, r3
 8112bcc:	429a      	cmp	r2, r3
 8112bce:	d006      	beq.n	8112bde <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8112bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112bd2:	681b      	ldr	r3, [r3, #0]
 8112bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8112bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112bd8:	2b00      	cmp	r3, #0
 8112bda:	d1e6      	bne.n	8112baa <ip4_reass+0xb6>
 8112bdc:	e000      	b.n	8112be0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8112bde:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8112be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112be2:	2b00      	cmp	r3, #0
 8112be4:	d109      	bne.n	8112bfa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8112be6:	8c3b      	ldrh	r3, [r7, #32]
 8112be8:	4619      	mov	r1, r3
 8112bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8112bec:	f7ff fdb0 	bl	8112750 <ip_reass_enqueue_new_datagram>
 8112bf0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8112bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112bf4:	2b00      	cmp	r3, #0
 8112bf6:	d11c      	bne.n	8112c32 <ip4_reass+0x13e>
      goto nullreturn;
 8112bf8:	e105      	b.n	8112e06 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8112bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112bfc:	88db      	ldrh	r3, [r3, #6]
 8112bfe:	b29b      	uxth	r3, r3
 8112c00:	4618      	mov	r0, r3
 8112c02:	f7fd fec3 	bl	811098c <lwip_htons>
 8112c06:	4603      	mov	r3, r0
 8112c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8112c0c:	2b00      	cmp	r3, #0
 8112c0e:	d110      	bne.n	8112c32 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8112c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112c12:	89db      	ldrh	r3, [r3, #14]
 8112c14:	4618      	mov	r0, r3
 8112c16:	f7fd feb9 	bl	811098c <lwip_htons>
 8112c1a:	4603      	mov	r3, r0
 8112c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8112c20:	2b00      	cmp	r3, #0
 8112c22:	d006      	beq.n	8112c32 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8112c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112c26:	3308      	adds	r3, #8
 8112c28:	2214      	movs	r2, #20
 8112c2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8112c2c:	4618      	mov	r0, r3
 8112c2e:	f009 faa6 	bl	811c17e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8112c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112c34:	88db      	ldrh	r3, [r3, #6]
 8112c36:	b29b      	uxth	r3, r3
 8112c38:	f003 0320 	and.w	r3, r3, #32
 8112c3c:	2b00      	cmp	r3, #0
 8112c3e:	bf0c      	ite	eq
 8112c40:	2301      	moveq	r3, #1
 8112c42:	2300      	movne	r3, #0
 8112c44:	b2db      	uxtb	r3, r3
 8112c46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8112c48:	69fb      	ldr	r3, [r7, #28]
 8112c4a:	2b00      	cmp	r3, #0
 8112c4c:	d00e      	beq.n	8112c6c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8112c4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8112c50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8112c52:	4413      	add	r3, r2
 8112c54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8112c56:	8b7a      	ldrh	r2, [r7, #26]
 8112c58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8112c5a:	429a      	cmp	r2, r3
 8112c5c:	f0c0 80a0 	bcc.w	8112da0 <ip4_reass+0x2ac>
 8112c60:	8b7b      	ldrh	r3, [r7, #26]
 8112c62:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8112c66:	4293      	cmp	r3, r2
 8112c68:	f200 809a 	bhi.w	8112da0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8112c6c:	69fa      	ldr	r2, [r7, #28]
 8112c6e:	6879      	ldr	r1, [r7, #4]
 8112c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112c72:	f7ff fdd5 	bl	8112820 <ip_reass_chain_frag_into_datagram_and_validate>
 8112c76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8112c78:	697b      	ldr	r3, [r7, #20]
 8112c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8112c7e:	f000 809b 	beq.w	8112db8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8112c82:	4b48      	ldr	r3, [pc, #288]	@ (8112da4 <ip4_reass+0x2b0>)
 8112c84:	881a      	ldrh	r2, [r3, #0]
 8112c86:	8c3b      	ldrh	r3, [r7, #32]
 8112c88:	4413      	add	r3, r2
 8112c8a:	b29a      	uxth	r2, r3
 8112c8c:	4b45      	ldr	r3, [pc, #276]	@ (8112da4 <ip4_reass+0x2b0>)
 8112c8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8112c90:	69fb      	ldr	r3, [r7, #28]
 8112c92:	2b00      	cmp	r3, #0
 8112c94:	d00d      	beq.n	8112cb2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8112c96:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8112c98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8112c9a:	4413      	add	r3, r2
 8112c9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8112c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112ca0:	8a7a      	ldrh	r2, [r7, #18]
 8112ca2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8112ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112ca6:	7f9b      	ldrb	r3, [r3, #30]
 8112ca8:	f043 0301 	orr.w	r3, r3, #1
 8112cac:	b2da      	uxtb	r2, r3
 8112cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112cb0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8112cb2:	697b      	ldr	r3, [r7, #20]
 8112cb4:	2b01      	cmp	r3, #1
 8112cb6:	d171      	bne.n	8112d9c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8112cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112cba:	8b9b      	ldrh	r3, [r3, #28]
 8112cbc:	3314      	adds	r3, #20
 8112cbe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8112cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112cc2:	685b      	ldr	r3, [r3, #4]
 8112cc4:	685b      	ldr	r3, [r3, #4]
 8112cc6:	681b      	ldr	r3, [r3, #0]
 8112cc8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8112cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112ccc:	685b      	ldr	r3, [r3, #4]
 8112cce:	685b      	ldr	r3, [r3, #4]
 8112cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8112cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112cd4:	3308      	adds	r3, #8
 8112cd6:	2214      	movs	r2, #20
 8112cd8:	4619      	mov	r1, r3
 8112cda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8112cdc:	f009 fa4f 	bl	811c17e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8112ce0:	8a3b      	ldrh	r3, [r7, #16]
 8112ce2:	4618      	mov	r0, r3
 8112ce4:	f7fd fe52 	bl	811098c <lwip_htons>
 8112ce8:	4603      	mov	r3, r0
 8112cea:	461a      	mov	r2, r3
 8112cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112cee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8112cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112cf2:	2200      	movs	r2, #0
 8112cf4:	719a      	strb	r2, [r3, #6]
 8112cf6:	2200      	movs	r2, #0
 8112cf8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8112cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112cfc:	2200      	movs	r2, #0
 8112cfe:	729a      	strb	r2, [r3, #10]
 8112d00:	2200      	movs	r2, #0
 8112d02:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8112d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112d06:	685b      	ldr	r3, [r3, #4]
 8112d08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8112d0a:	e00d      	b.n	8112d28 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8112d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112d0e:	685b      	ldr	r3, [r3, #4]
 8112d10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8112d12:	2114      	movs	r1, #20
 8112d14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8112d16:	f001 fd39 	bl	811478c <pbuf_remove_header>
      pbuf_cat(p, r);
 8112d1a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8112d1c:	6878      	ldr	r0, [r7, #4]
 8112d1e:	f001 fe89 	bl	8114a34 <pbuf_cat>
      r = iprh->next_pbuf;
 8112d22:	68fb      	ldr	r3, [r7, #12]
 8112d24:	681b      	ldr	r3, [r3, #0]
 8112d26:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8112d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112d2a:	2b00      	cmp	r3, #0
 8112d2c:	d1ee      	bne.n	8112d0c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8112d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8112da8 <ip4_reass+0x2b4>)
 8112d30:	681b      	ldr	r3, [r3, #0]
 8112d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112d34:	429a      	cmp	r2, r3
 8112d36:	d102      	bne.n	8112d3e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8112d38:	2300      	movs	r3, #0
 8112d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8112d3c:	e010      	b.n	8112d60 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8112d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8112da8 <ip4_reass+0x2b4>)
 8112d40:	681b      	ldr	r3, [r3, #0]
 8112d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8112d44:	e007      	b.n	8112d56 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8112d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d48:	681b      	ldr	r3, [r3, #0]
 8112d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112d4c:	429a      	cmp	r2, r3
 8112d4e:	d006      	beq.n	8112d5e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8112d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d52:	681b      	ldr	r3, [r3, #0]
 8112d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8112d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d58:	2b00      	cmp	r3, #0
 8112d5a:	d1f4      	bne.n	8112d46 <ip4_reass+0x252>
 8112d5c:	e000      	b.n	8112d60 <ip4_reass+0x26c>
          break;
 8112d5e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8112d60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8112d62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112d64:	f7ff fd2e 	bl	81127c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8112d68:	6878      	ldr	r0, [r7, #4]
 8112d6a:	f001 fe23 	bl	81149b4 <pbuf_clen>
 8112d6e:	4603      	mov	r3, r0
 8112d70:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8112d72:	4b0c      	ldr	r3, [pc, #48]	@ (8112da4 <ip4_reass+0x2b0>)
 8112d74:	881b      	ldrh	r3, [r3, #0]
 8112d76:	8c3a      	ldrh	r2, [r7, #32]
 8112d78:	429a      	cmp	r2, r3
 8112d7a:	d906      	bls.n	8112d8a <ip4_reass+0x296>
 8112d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8112dac <ip4_reass+0x2b8>)
 8112d7e:	f240 229b 	movw	r2, #667	@ 0x29b
 8112d82:	490b      	ldr	r1, [pc, #44]	@ (8112db0 <ip4_reass+0x2bc>)
 8112d84:	480b      	ldr	r0, [pc, #44]	@ (8112db4 <ip4_reass+0x2c0>)
 8112d86:	f009 f849 	bl	811be1c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8112d8a:	4b06      	ldr	r3, [pc, #24]	@ (8112da4 <ip4_reass+0x2b0>)
 8112d8c:	881a      	ldrh	r2, [r3, #0]
 8112d8e:	8c3b      	ldrh	r3, [r7, #32]
 8112d90:	1ad3      	subs	r3, r2, r3
 8112d92:	b29a      	uxth	r2, r3
 8112d94:	4b03      	ldr	r3, [pc, #12]	@ (8112da4 <ip4_reass+0x2b0>)
 8112d96:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8112d98:	687b      	ldr	r3, [r7, #4]
 8112d9a:	e038      	b.n	8112e0e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8112d9c:	2300      	movs	r3, #0
 8112d9e:	e036      	b.n	8112e0e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8112da0:	bf00      	nop
 8112da2:	e00a      	b.n	8112dba <ip4_reass+0x2c6>
 8112da4:	1000b264 	.word	0x1000b264
 8112da8:	1000b260 	.word	0x1000b260
 8112dac:	0811d2bc 	.word	0x0811d2bc
 8112db0:	0811d468 	.word	0x0811d468
 8112db4:	0811d340 	.word	0x0811d340
    goto nullreturn_ipr;
 8112db8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8112dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112dbc:	2b00      	cmp	r3, #0
 8112dbe:	d106      	bne.n	8112dce <ip4_reass+0x2da>
 8112dc0:	4b15      	ldr	r3, [pc, #84]	@ (8112e18 <ip4_reass+0x324>)
 8112dc2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8112dc6:	4915      	ldr	r1, [pc, #84]	@ (8112e1c <ip4_reass+0x328>)
 8112dc8:	4815      	ldr	r0, [pc, #84]	@ (8112e20 <ip4_reass+0x32c>)
 8112dca:	f009 f827 	bl	811be1c <iprintf>
  if (ipr->p == NULL) {
 8112dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112dd0:	685b      	ldr	r3, [r3, #4]
 8112dd2:	2b00      	cmp	r3, #0
 8112dd4:	d116      	bne.n	8112e04 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8112dd6:	4b13      	ldr	r3, [pc, #76]	@ (8112e24 <ip4_reass+0x330>)
 8112dd8:	681b      	ldr	r3, [r3, #0]
 8112dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112ddc:	429a      	cmp	r2, r3
 8112dde:	d006      	beq.n	8112dee <ip4_reass+0x2fa>
 8112de0:	4b0d      	ldr	r3, [pc, #52]	@ (8112e18 <ip4_reass+0x324>)
 8112de2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8112de6:	4910      	ldr	r1, [pc, #64]	@ (8112e28 <ip4_reass+0x334>)
 8112de8:	480d      	ldr	r0, [pc, #52]	@ (8112e20 <ip4_reass+0x32c>)
 8112dea:	f009 f817 	bl	811be1c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8112dee:	2100      	movs	r1, #0
 8112df0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112df2:	f7ff fce7 	bl	81127c4 <ip_reass_dequeue_datagram>
 8112df6:	e006      	b.n	8112e06 <ip4_reass+0x312>
    goto nullreturn;
 8112df8:	bf00      	nop
 8112dfa:	e004      	b.n	8112e06 <ip4_reass+0x312>
    goto nullreturn;
 8112dfc:	bf00      	nop
 8112dfe:	e002      	b.n	8112e06 <ip4_reass+0x312>
      goto nullreturn;
 8112e00:	bf00      	nop
 8112e02:	e000      	b.n	8112e06 <ip4_reass+0x312>
  }

nullreturn:
 8112e04:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8112e06:	6878      	ldr	r0, [r7, #4]
 8112e08:	f001 fd46 	bl	8114898 <pbuf_free>
  return NULL;
 8112e0c:	2300      	movs	r3, #0
}
 8112e0e:	4618      	mov	r0, r3
 8112e10:	3738      	adds	r7, #56	@ 0x38
 8112e12:	46bd      	mov	sp, r7
 8112e14:	bd80      	pop	{r7, pc}
 8112e16:	bf00      	nop
 8112e18:	0811d2bc 	.word	0x0811d2bc
 8112e1c:	0811d484 	.word	0x0811d484
 8112e20:	0811d340 	.word	0x0811d340
 8112e24:	1000b260 	.word	0x1000b260
 8112e28:	0811d490 	.word	0x0811d490

08112e2c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8112e2c:	b580      	push	{r7, lr}
 8112e2e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8112e30:	2005      	movs	r0, #5
 8112e32:	f000 fe17 	bl	8113a64 <memp_malloc>
 8112e36:	4603      	mov	r3, r0
}
 8112e38:	4618      	mov	r0, r3
 8112e3a:	bd80      	pop	{r7, pc}

08112e3c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8112e3c:	b580      	push	{r7, lr}
 8112e3e:	b082      	sub	sp, #8
 8112e40:	af00      	add	r7, sp, #0
 8112e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8112e44:	687b      	ldr	r3, [r7, #4]
 8112e46:	2b00      	cmp	r3, #0
 8112e48:	d106      	bne.n	8112e58 <ip_frag_free_pbuf_custom_ref+0x1c>
 8112e4a:	4b07      	ldr	r3, [pc, #28]	@ (8112e68 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8112e4c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8112e50:	4906      	ldr	r1, [pc, #24]	@ (8112e6c <ip_frag_free_pbuf_custom_ref+0x30>)
 8112e52:	4807      	ldr	r0, [pc, #28]	@ (8112e70 <ip_frag_free_pbuf_custom_ref+0x34>)
 8112e54:	f008 ffe2 	bl	811be1c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8112e58:	6879      	ldr	r1, [r7, #4]
 8112e5a:	2005      	movs	r0, #5
 8112e5c:	f000 fe78 	bl	8113b50 <memp_free>
}
 8112e60:	bf00      	nop
 8112e62:	3708      	adds	r7, #8
 8112e64:	46bd      	mov	sp, r7
 8112e66:	bd80      	pop	{r7, pc}
 8112e68:	0811d2bc 	.word	0x0811d2bc
 8112e6c:	0811d4b0 	.word	0x0811d4b0
 8112e70:	0811d340 	.word	0x0811d340

08112e74 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8112e74:	b580      	push	{r7, lr}
 8112e76:	b084      	sub	sp, #16
 8112e78:	af00      	add	r7, sp, #0
 8112e7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8112e7c:	687b      	ldr	r3, [r7, #4]
 8112e7e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8112e80:	68fb      	ldr	r3, [r7, #12]
 8112e82:	2b00      	cmp	r3, #0
 8112e84:	d106      	bne.n	8112e94 <ipfrag_free_pbuf_custom+0x20>
 8112e86:	4b11      	ldr	r3, [pc, #68]	@ (8112ecc <ipfrag_free_pbuf_custom+0x58>)
 8112e88:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8112e8c:	4910      	ldr	r1, [pc, #64]	@ (8112ed0 <ipfrag_free_pbuf_custom+0x5c>)
 8112e8e:	4811      	ldr	r0, [pc, #68]	@ (8112ed4 <ipfrag_free_pbuf_custom+0x60>)
 8112e90:	f008 ffc4 	bl	811be1c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8112e94:	68fa      	ldr	r2, [r7, #12]
 8112e96:	687b      	ldr	r3, [r7, #4]
 8112e98:	429a      	cmp	r2, r3
 8112e9a:	d006      	beq.n	8112eaa <ipfrag_free_pbuf_custom+0x36>
 8112e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8112ecc <ipfrag_free_pbuf_custom+0x58>)
 8112e9e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8112ea2:	490d      	ldr	r1, [pc, #52]	@ (8112ed8 <ipfrag_free_pbuf_custom+0x64>)
 8112ea4:	480b      	ldr	r0, [pc, #44]	@ (8112ed4 <ipfrag_free_pbuf_custom+0x60>)
 8112ea6:	f008 ffb9 	bl	811be1c <iprintf>
  if (pcr->original != NULL) {
 8112eaa:	68fb      	ldr	r3, [r7, #12]
 8112eac:	695b      	ldr	r3, [r3, #20]
 8112eae:	2b00      	cmp	r3, #0
 8112eb0:	d004      	beq.n	8112ebc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8112eb2:	68fb      	ldr	r3, [r7, #12]
 8112eb4:	695b      	ldr	r3, [r3, #20]
 8112eb6:	4618      	mov	r0, r3
 8112eb8:	f001 fcee 	bl	8114898 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8112ebc:	68f8      	ldr	r0, [r7, #12]
 8112ebe:	f7ff ffbd 	bl	8112e3c <ip_frag_free_pbuf_custom_ref>
}
 8112ec2:	bf00      	nop
 8112ec4:	3710      	adds	r7, #16
 8112ec6:	46bd      	mov	sp, r7
 8112ec8:	bd80      	pop	{r7, pc}
 8112eca:	bf00      	nop
 8112ecc:	0811d2bc 	.word	0x0811d2bc
 8112ed0:	0811d4bc 	.word	0x0811d4bc
 8112ed4:	0811d340 	.word	0x0811d340
 8112ed8:	0811d4c8 	.word	0x0811d4c8

08112edc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8112edc:	b580      	push	{r7, lr}
 8112ede:	b094      	sub	sp, #80	@ 0x50
 8112ee0:	af02      	add	r7, sp, #8
 8112ee2:	60f8      	str	r0, [r7, #12]
 8112ee4:	60b9      	str	r1, [r7, #8]
 8112ee6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8112ee8:	2300      	movs	r3, #0
 8112eea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8112eee:	68bb      	ldr	r3, [r7, #8]
 8112ef0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8112ef2:	3b14      	subs	r3, #20
 8112ef4:	2b00      	cmp	r3, #0
 8112ef6:	da00      	bge.n	8112efa <ip4_frag+0x1e>
 8112ef8:	3307      	adds	r3, #7
 8112efa:	10db      	asrs	r3, r3, #3
 8112efc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8112efe:	2314      	movs	r3, #20
 8112f00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8112f02:	68fb      	ldr	r3, [r7, #12]
 8112f04:	685b      	ldr	r3, [r3, #4]
 8112f06:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8112f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8112f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112f0e:	781b      	ldrb	r3, [r3, #0]
 8112f10:	f003 030f 	and.w	r3, r3, #15
 8112f14:	b2db      	uxtb	r3, r3
 8112f16:	009b      	lsls	r3, r3, #2
 8112f18:	b2db      	uxtb	r3, r3
 8112f1a:	2b14      	cmp	r3, #20
 8112f1c:	d002      	beq.n	8112f24 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8112f1e:	f06f 0305 	mvn.w	r3, #5
 8112f22:	e110      	b.n	8113146 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8112f24:	68fb      	ldr	r3, [r7, #12]
 8112f26:	895b      	ldrh	r3, [r3, #10]
 8112f28:	2b13      	cmp	r3, #19
 8112f2a:	d809      	bhi.n	8112f40 <ip4_frag+0x64>
 8112f2c:	4b88      	ldr	r3, [pc, #544]	@ (8113150 <ip4_frag+0x274>)
 8112f2e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8112f32:	4988      	ldr	r1, [pc, #544]	@ (8113154 <ip4_frag+0x278>)
 8112f34:	4888      	ldr	r0, [pc, #544]	@ (8113158 <ip4_frag+0x27c>)
 8112f36:	f008 ff71 	bl	811be1c <iprintf>
 8112f3a:	f06f 0305 	mvn.w	r3, #5
 8112f3e:	e102      	b.n	8113146 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8112f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112f42:	88db      	ldrh	r3, [r3, #6]
 8112f44:	b29b      	uxth	r3, r3
 8112f46:	4618      	mov	r0, r3
 8112f48:	f7fd fd20 	bl	811098c <lwip_htons>
 8112f4c:	4603      	mov	r3, r0
 8112f4e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8112f50:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8112f52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8112f56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8112f5a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8112f5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8112f60:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8112f62:	68fb      	ldr	r3, [r7, #12]
 8112f64:	891b      	ldrh	r3, [r3, #8]
 8112f66:	3b14      	subs	r3, #20
 8112f68:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8112f6c:	e0e1      	b.n	8113132 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8112f6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8112f70:	00db      	lsls	r3, r3, #3
 8112f72:	b29b      	uxth	r3, r3
 8112f74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8112f78:	4293      	cmp	r3, r2
 8112f7a:	bf28      	it	cs
 8112f7c:	4613      	movcs	r3, r2
 8112f7e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8112f80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8112f84:	2114      	movs	r1, #20
 8112f86:	200e      	movs	r0, #14
 8112f88:	f001 f9a2 	bl	81142d0 <pbuf_alloc>
 8112f8c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8112f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112f90:	2b00      	cmp	r3, #0
 8112f92:	f000 80d5 	beq.w	8113140 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8112f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112f98:	895b      	ldrh	r3, [r3, #10]
 8112f9a:	2b13      	cmp	r3, #19
 8112f9c:	d806      	bhi.n	8112fac <ip4_frag+0xd0>
 8112f9e:	4b6c      	ldr	r3, [pc, #432]	@ (8113150 <ip4_frag+0x274>)
 8112fa0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8112fa4:	496d      	ldr	r1, [pc, #436]	@ (811315c <ip4_frag+0x280>)
 8112fa6:	486c      	ldr	r0, [pc, #432]	@ (8113158 <ip4_frag+0x27c>)
 8112fa8:	f008 ff38 	bl	811be1c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8112fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112fae:	685b      	ldr	r3, [r3, #4]
 8112fb0:	2214      	movs	r2, #20
 8112fb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8112fb4:	4618      	mov	r0, r3
 8112fb6:	f009 f8e2 	bl	811c17e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8112fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112fbc:	685b      	ldr	r3, [r3, #4]
 8112fbe:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8112fc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8112fc2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8112fc6:	e064      	b.n	8113092 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8112fc8:	68fb      	ldr	r3, [r7, #12]
 8112fca:	895a      	ldrh	r2, [r3, #10]
 8112fcc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8112fce:	1ad3      	subs	r3, r2, r3
 8112fd0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8112fd2:	68fb      	ldr	r3, [r7, #12]
 8112fd4:	895b      	ldrh	r3, [r3, #10]
 8112fd6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8112fd8:	429a      	cmp	r2, r3
 8112fda:	d906      	bls.n	8112fea <ip4_frag+0x10e>
 8112fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8113150 <ip4_frag+0x274>)
 8112fde:	f240 322d 	movw	r2, #813	@ 0x32d
 8112fe2:	495f      	ldr	r1, [pc, #380]	@ (8113160 <ip4_frag+0x284>)
 8112fe4:	485c      	ldr	r0, [pc, #368]	@ (8113158 <ip4_frag+0x27c>)
 8112fe6:	f008 ff19 	bl	811be1c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8112fea:	8bfa      	ldrh	r2, [r7, #30]
 8112fec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8112ff0:	4293      	cmp	r3, r2
 8112ff2:	bf28      	it	cs
 8112ff4:	4613      	movcs	r3, r2
 8112ff6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8112ffa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8112ffe:	2b00      	cmp	r3, #0
 8113000:	d105      	bne.n	811300e <ip4_frag+0x132>
        poff = 0;
 8113002:	2300      	movs	r3, #0
 8113004:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8113006:	68fb      	ldr	r3, [r7, #12]
 8113008:	681b      	ldr	r3, [r3, #0]
 811300a:	60fb      	str	r3, [r7, #12]
        continue;
 811300c:	e041      	b.n	8113092 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 811300e:	f7ff ff0d 	bl	8112e2c <ip_frag_alloc_pbuf_custom_ref>
 8113012:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8113014:	69bb      	ldr	r3, [r7, #24]
 8113016:	2b00      	cmp	r3, #0
 8113018:	d103      	bne.n	8113022 <ip4_frag+0x146>
        pbuf_free(rambuf);
 811301a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811301c:	f001 fc3c 	bl	8114898 <pbuf_free>
        goto memerr;
 8113020:	e08f      	b.n	8113142 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8113022:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8113024:	68fb      	ldr	r3, [r7, #12]
 8113026:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8113028:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811302a:	4413      	add	r3, r2
 811302c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8113030:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8113034:	9201      	str	r2, [sp, #4]
 8113036:	9300      	str	r3, [sp, #0]
 8113038:	4603      	mov	r3, r0
 811303a:	2241      	movs	r2, #65	@ 0x41
 811303c:	2000      	movs	r0, #0
 811303e:	f001 fa73 	bl	8114528 <pbuf_alloced_custom>
 8113042:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8113044:	697b      	ldr	r3, [r7, #20]
 8113046:	2b00      	cmp	r3, #0
 8113048:	d106      	bne.n	8113058 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 811304a:	69b8      	ldr	r0, [r7, #24]
 811304c:	f7ff fef6 	bl	8112e3c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8113050:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8113052:	f001 fc21 	bl	8114898 <pbuf_free>
        goto memerr;
 8113056:	e074      	b.n	8113142 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8113058:	68f8      	ldr	r0, [r7, #12]
 811305a:	f001 fcc3 	bl	81149e4 <pbuf_ref>
      pcr->original = p;
 811305e:	69bb      	ldr	r3, [r7, #24]
 8113060:	68fa      	ldr	r2, [r7, #12]
 8113062:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8113064:	69bb      	ldr	r3, [r7, #24]
 8113066:	4a3f      	ldr	r2, [pc, #252]	@ (8113164 <ip4_frag+0x288>)
 8113068:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 811306a:	6979      	ldr	r1, [r7, #20]
 811306c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811306e:	f001 fce1 	bl	8114a34 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8113072:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8113076:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811307a:	1ad3      	subs	r3, r2, r3
 811307c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8113080:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8113084:	2b00      	cmp	r3, #0
 8113086:	d004      	beq.n	8113092 <ip4_frag+0x1b6>
        poff = 0;
 8113088:	2300      	movs	r3, #0
 811308a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 811308c:	68fb      	ldr	r3, [r7, #12]
 811308e:	681b      	ldr	r3, [r3, #0]
 8113090:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8113092:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8113096:	2b00      	cmp	r3, #0
 8113098:	d196      	bne.n	8112fc8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 811309a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 811309c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 81130a0:	4413      	add	r3, r2
 81130a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 81130a4:	68bb      	ldr	r3, [r7, #8]
 81130a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 81130a8:	f1a3 0213 	sub.w	r2, r3, #19
 81130ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81130b0:	429a      	cmp	r2, r3
 81130b2:	bfcc      	ite	gt
 81130b4:	2301      	movgt	r3, #1
 81130b6:	2300      	movle	r3, #0
 81130b8:	b2db      	uxtb	r3, r3
 81130ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 81130bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 81130c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81130c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 81130c6:	6a3b      	ldr	r3, [r7, #32]
 81130c8:	2b00      	cmp	r3, #0
 81130ca:	d002      	beq.n	81130d2 <ip4_frag+0x1f6>
 81130cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81130ce:	2b00      	cmp	r3, #0
 81130d0:	d003      	beq.n	81130da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 81130d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81130d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 81130d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 81130da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81130dc:	4618      	mov	r0, r3
 81130de:	f7fd fc55 	bl	811098c <lwip_htons>
 81130e2:	4603      	mov	r3, r0
 81130e4:	461a      	mov	r2, r3
 81130e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81130e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 81130ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81130ec:	3314      	adds	r3, #20
 81130ee:	b29b      	uxth	r3, r3
 81130f0:	4618      	mov	r0, r3
 81130f2:	f7fd fc4b 	bl	811098c <lwip_htons>
 81130f6:	4603      	mov	r3, r0
 81130f8:	461a      	mov	r2, r3
 81130fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81130fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 81130fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113100:	2200      	movs	r2, #0
 8113102:	729a      	strb	r2, [r3, #10]
 8113104:	2200      	movs	r2, #0
 8113106:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8113108:	68bb      	ldr	r3, [r7, #8]
 811310a:	695b      	ldr	r3, [r3, #20]
 811310c:	687a      	ldr	r2, [r7, #4]
 811310e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8113110:	68b8      	ldr	r0, [r7, #8]
 8113112:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8113114:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8113116:	f001 fbbf 	bl	8114898 <pbuf_free>
    left = (u16_t)(left - fragsize);
 811311a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811311e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8113120:	1ad3      	subs	r3, r2, r3
 8113122:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8113126:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 811312a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 811312c:	4413      	add	r3, r2
 811312e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8113132:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8113136:	2b00      	cmp	r3, #0
 8113138:	f47f af19 	bne.w	8112f6e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 811313c:	2300      	movs	r3, #0
 811313e:	e002      	b.n	8113146 <ip4_frag+0x26a>
      goto memerr;
 8113140:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8113142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8113146:	4618      	mov	r0, r3
 8113148:	3748      	adds	r7, #72	@ 0x48
 811314a:	46bd      	mov	sp, r7
 811314c:	bd80      	pop	{r7, pc}
 811314e:	bf00      	nop
 8113150:	0811d2bc 	.word	0x0811d2bc
 8113154:	0811d4d4 	.word	0x0811d4d4
 8113158:	0811d340 	.word	0x0811d340
 811315c:	0811d4f0 	.word	0x0811d4f0
 8113160:	0811d510 	.word	0x0811d510
 8113164:	08112e75 	.word	0x08112e75

08113168 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8113168:	b480      	push	{r7}
 811316a:	b083      	sub	sp, #12
 811316c:	af00      	add	r7, sp, #0
 811316e:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 8113170:	4b04      	ldr	r3, [pc, #16]	@ (8113184 <ptr_to_mem+0x1c>)
 8113172:	681a      	ldr	r2, [r3, #0]
 8113174:	687b      	ldr	r3, [r7, #4]
 8113176:	4413      	add	r3, r2
}
 8113178:	4618      	mov	r0, r3
 811317a:	370c      	adds	r7, #12
 811317c:	46bd      	mov	sp, r7
 811317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113182:	4770      	bx	lr
 8113184:	1000b268 	.word	0x1000b268

08113188 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8113188:	b480      	push	{r7}
 811318a:	b083      	sub	sp, #12
 811318c:	af00      	add	r7, sp, #0
 811318e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8113190:	4b04      	ldr	r3, [pc, #16]	@ (81131a4 <mem_to_ptr+0x1c>)
 8113192:	681b      	ldr	r3, [r3, #0]
 8113194:	687a      	ldr	r2, [r7, #4]
 8113196:	1ad3      	subs	r3, r2, r3
}
 8113198:	4618      	mov	r0, r3
 811319a:	370c      	adds	r7, #12
 811319c:	46bd      	mov	sp, r7
 811319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81131a2:	4770      	bx	lr
 81131a4:	1000b268 	.word	0x1000b268

081131a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 81131a8:	b590      	push	{r4, r7, lr}
 81131aa:	b085      	sub	sp, #20
 81131ac:	af00      	add	r7, sp, #0
 81131ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 81131b0:	4b45      	ldr	r3, [pc, #276]	@ (81132c8 <plug_holes+0x120>)
 81131b2:	681b      	ldr	r3, [r3, #0]
 81131b4:	687a      	ldr	r2, [r7, #4]
 81131b6:	429a      	cmp	r2, r3
 81131b8:	d206      	bcs.n	81131c8 <plug_holes+0x20>
 81131ba:	4b44      	ldr	r3, [pc, #272]	@ (81132cc <plug_holes+0x124>)
 81131bc:	f240 12df 	movw	r2, #479	@ 0x1df
 81131c0:	4943      	ldr	r1, [pc, #268]	@ (81132d0 <plug_holes+0x128>)
 81131c2:	4844      	ldr	r0, [pc, #272]	@ (81132d4 <plug_holes+0x12c>)
 81131c4:	f008 fe2a 	bl	811be1c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 81131c8:	4b43      	ldr	r3, [pc, #268]	@ (81132d8 <plug_holes+0x130>)
 81131ca:	681b      	ldr	r3, [r3, #0]
 81131cc:	687a      	ldr	r2, [r7, #4]
 81131ce:	429a      	cmp	r2, r3
 81131d0:	d306      	bcc.n	81131e0 <plug_holes+0x38>
 81131d2:	4b3e      	ldr	r3, [pc, #248]	@ (81132cc <plug_holes+0x124>)
 81131d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81131d8:	4940      	ldr	r1, [pc, #256]	@ (81132dc <plug_holes+0x134>)
 81131da:	483e      	ldr	r0, [pc, #248]	@ (81132d4 <plug_holes+0x12c>)
 81131dc:	f008 fe1e 	bl	811be1c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 81131e0:	687b      	ldr	r3, [r7, #4]
 81131e2:	7a1b      	ldrb	r3, [r3, #8]
 81131e4:	2b00      	cmp	r3, #0
 81131e6:	d006      	beq.n	81131f6 <plug_holes+0x4e>
 81131e8:	4b38      	ldr	r3, [pc, #224]	@ (81132cc <plug_holes+0x124>)
 81131ea:	f240 12e1 	movw	r2, #481	@ 0x1e1
 81131ee:	493c      	ldr	r1, [pc, #240]	@ (81132e0 <plug_holes+0x138>)
 81131f0:	4838      	ldr	r0, [pc, #224]	@ (81132d4 <plug_holes+0x12c>)
 81131f2:	f008 fe13 	bl	811be1c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 81131f6:	687b      	ldr	r3, [r7, #4]
 81131f8:	681b      	ldr	r3, [r3, #0]
 81131fa:	4a3a      	ldr	r2, [pc, #232]	@ (81132e4 <plug_holes+0x13c>)
 81131fc:	4293      	cmp	r3, r2
 81131fe:	d906      	bls.n	811320e <plug_holes+0x66>
 8113200:	4b32      	ldr	r3, [pc, #200]	@ (81132cc <plug_holes+0x124>)
 8113202:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8113206:	4938      	ldr	r1, [pc, #224]	@ (81132e8 <plug_holes+0x140>)
 8113208:	4832      	ldr	r0, [pc, #200]	@ (81132d4 <plug_holes+0x12c>)
 811320a:	f008 fe07 	bl	811be1c <iprintf>

  nmem = ptr_to_mem(mem->next);
 811320e:	687b      	ldr	r3, [r7, #4]
 8113210:	681b      	ldr	r3, [r3, #0]
 8113212:	4618      	mov	r0, r3
 8113214:	f7ff ffa8 	bl	8113168 <ptr_to_mem>
 8113218:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 811321a:	687a      	ldr	r2, [r7, #4]
 811321c:	68fb      	ldr	r3, [r7, #12]
 811321e:	429a      	cmp	r2, r3
 8113220:	d024      	beq.n	811326c <plug_holes+0xc4>
 8113222:	68fb      	ldr	r3, [r7, #12]
 8113224:	7a1b      	ldrb	r3, [r3, #8]
 8113226:	2b00      	cmp	r3, #0
 8113228:	d120      	bne.n	811326c <plug_holes+0xc4>
 811322a:	4b2b      	ldr	r3, [pc, #172]	@ (81132d8 <plug_holes+0x130>)
 811322c:	681b      	ldr	r3, [r3, #0]
 811322e:	68fa      	ldr	r2, [r7, #12]
 8113230:	429a      	cmp	r2, r3
 8113232:	d01b      	beq.n	811326c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8113234:	4b2d      	ldr	r3, [pc, #180]	@ (81132ec <plug_holes+0x144>)
 8113236:	681b      	ldr	r3, [r3, #0]
 8113238:	68fa      	ldr	r2, [r7, #12]
 811323a:	429a      	cmp	r2, r3
 811323c:	d102      	bne.n	8113244 <plug_holes+0x9c>
      lfree = mem;
 811323e:	4a2b      	ldr	r2, [pc, #172]	@ (81132ec <plug_holes+0x144>)
 8113240:	687b      	ldr	r3, [r7, #4]
 8113242:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8113244:	68fb      	ldr	r3, [r7, #12]
 8113246:	681a      	ldr	r2, [r3, #0]
 8113248:	687b      	ldr	r3, [r7, #4]
 811324a:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 811324c:	68fb      	ldr	r3, [r7, #12]
 811324e:	681b      	ldr	r3, [r3, #0]
 8113250:	4a24      	ldr	r2, [pc, #144]	@ (81132e4 <plug_holes+0x13c>)
 8113252:	4293      	cmp	r3, r2
 8113254:	d00a      	beq.n	811326c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8113256:	68fb      	ldr	r3, [r7, #12]
 8113258:	681b      	ldr	r3, [r3, #0]
 811325a:	4618      	mov	r0, r3
 811325c:	f7ff ff84 	bl	8113168 <ptr_to_mem>
 8113260:	4604      	mov	r4, r0
 8113262:	6878      	ldr	r0, [r7, #4]
 8113264:	f7ff ff90 	bl	8113188 <mem_to_ptr>
 8113268:	4603      	mov	r3, r0
 811326a:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 811326c:	687b      	ldr	r3, [r7, #4]
 811326e:	685b      	ldr	r3, [r3, #4]
 8113270:	4618      	mov	r0, r3
 8113272:	f7ff ff79 	bl	8113168 <ptr_to_mem>
 8113276:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8113278:	68ba      	ldr	r2, [r7, #8]
 811327a:	687b      	ldr	r3, [r7, #4]
 811327c:	429a      	cmp	r2, r3
 811327e:	d01f      	beq.n	81132c0 <plug_holes+0x118>
 8113280:	68bb      	ldr	r3, [r7, #8]
 8113282:	7a1b      	ldrb	r3, [r3, #8]
 8113284:	2b00      	cmp	r3, #0
 8113286:	d11b      	bne.n	81132c0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8113288:	4b18      	ldr	r3, [pc, #96]	@ (81132ec <plug_holes+0x144>)
 811328a:	681b      	ldr	r3, [r3, #0]
 811328c:	687a      	ldr	r2, [r7, #4]
 811328e:	429a      	cmp	r2, r3
 8113290:	d102      	bne.n	8113298 <plug_holes+0xf0>
      lfree = pmem;
 8113292:	4a16      	ldr	r2, [pc, #88]	@ (81132ec <plug_holes+0x144>)
 8113294:	68bb      	ldr	r3, [r7, #8]
 8113296:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8113298:	687b      	ldr	r3, [r7, #4]
 811329a:	681a      	ldr	r2, [r3, #0]
 811329c:	68bb      	ldr	r3, [r7, #8]
 811329e:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 81132a0:	687b      	ldr	r3, [r7, #4]
 81132a2:	681b      	ldr	r3, [r3, #0]
 81132a4:	4a0f      	ldr	r2, [pc, #60]	@ (81132e4 <plug_holes+0x13c>)
 81132a6:	4293      	cmp	r3, r2
 81132a8:	d00a      	beq.n	81132c0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 81132aa:	687b      	ldr	r3, [r7, #4]
 81132ac:	681b      	ldr	r3, [r3, #0]
 81132ae:	4618      	mov	r0, r3
 81132b0:	f7ff ff5a 	bl	8113168 <ptr_to_mem>
 81132b4:	4604      	mov	r4, r0
 81132b6:	68b8      	ldr	r0, [r7, #8]
 81132b8:	f7ff ff66 	bl	8113188 <mem_to_ptr>
 81132bc:	4603      	mov	r3, r0
 81132be:	6063      	str	r3, [r4, #4]
    }
  }
}
 81132c0:	bf00      	nop
 81132c2:	3714      	adds	r7, #20
 81132c4:	46bd      	mov	sp, r7
 81132c6:	bd90      	pop	{r4, r7, pc}
 81132c8:	1000b268 	.word	0x1000b268
 81132cc:	0811d520 	.word	0x0811d520
 81132d0:	0811d590 	.word	0x0811d590
 81132d4:	0811d5a8 	.word	0x0811d5a8
 81132d8:	1000b26c 	.word	0x1000b26c
 81132dc:	0811d5d0 	.word	0x0811d5d0
 81132e0:	0811d5ec 	.word	0x0811d5ec
 81132e4:	0001ffe8 	.word	0x0001ffe8
 81132e8:	0811d608 	.word	0x0811d608
 81132ec:	1000b274 	.word	0x1000b274

081132f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 81132f0:	b580      	push	{r7, lr}
 81132f2:	b082      	sub	sp, #8
 81132f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 81132f6:	4b1b      	ldr	r3, [pc, #108]	@ (8113364 <mem_init+0x74>)
 81132f8:	4a1b      	ldr	r2, [pc, #108]	@ (8113368 <mem_init+0x78>)
 81132fa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 81132fc:	4b19      	ldr	r3, [pc, #100]	@ (8113364 <mem_init+0x74>)
 81132fe:	681b      	ldr	r3, [r3, #0]
 8113300:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8113302:	687b      	ldr	r3, [r7, #4]
 8113304:	4a19      	ldr	r2, [pc, #100]	@ (811336c <mem_init+0x7c>)
 8113306:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8113308:	687b      	ldr	r3, [r7, #4]
 811330a:	2200      	movs	r2, #0
 811330c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 811330e:	687b      	ldr	r3, [r7, #4]
 8113310:	2200      	movs	r2, #0
 8113312:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8113314:	4815      	ldr	r0, [pc, #84]	@ (811336c <mem_init+0x7c>)
 8113316:	f7ff ff27 	bl	8113168 <ptr_to_mem>
 811331a:	4603      	mov	r3, r0
 811331c:	4a14      	ldr	r2, [pc, #80]	@ (8113370 <mem_init+0x80>)
 811331e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8113320:	4b13      	ldr	r3, [pc, #76]	@ (8113370 <mem_init+0x80>)
 8113322:	681b      	ldr	r3, [r3, #0]
 8113324:	2201      	movs	r2, #1
 8113326:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8113328:	4b11      	ldr	r3, [pc, #68]	@ (8113370 <mem_init+0x80>)
 811332a:	681b      	ldr	r3, [r3, #0]
 811332c:	4a0f      	ldr	r2, [pc, #60]	@ (811336c <mem_init+0x7c>)
 811332e:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8113330:	4b0f      	ldr	r3, [pc, #60]	@ (8113370 <mem_init+0x80>)
 8113332:	681b      	ldr	r3, [r3, #0]
 8113334:	4a0d      	ldr	r2, [pc, #52]	@ (811336c <mem_init+0x7c>)
 8113336:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8113338:	4b0a      	ldr	r3, [pc, #40]	@ (8113364 <mem_init+0x74>)
 811333a:	681b      	ldr	r3, [r3, #0]
 811333c:	4a0d      	ldr	r2, [pc, #52]	@ (8113374 <mem_init+0x84>)
 811333e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8113340:	480d      	ldr	r0, [pc, #52]	@ (8113378 <mem_init+0x88>)
 8113342:	f001 fdc5 	bl	8114ed0 <sys_mutex_new>
 8113346:	4603      	mov	r3, r0
 8113348:	2b00      	cmp	r3, #0
 811334a:	d006      	beq.n	811335a <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 811334c:	4b0b      	ldr	r3, [pc, #44]	@ (811337c <mem_init+0x8c>)
 811334e:	f240 221f 	movw	r2, #543	@ 0x21f
 8113352:	490b      	ldr	r1, [pc, #44]	@ (8113380 <mem_init+0x90>)
 8113354:	480b      	ldr	r0, [pc, #44]	@ (8113384 <mem_init+0x94>)
 8113356:	f008 fd61 	bl	811be1c <iprintf>
  }
}
 811335a:	bf00      	nop
 811335c:	3708      	adds	r7, #8
 811335e:	46bd      	mov	sp, r7
 8113360:	bd80      	pop	{r7, pc}
 8113362:	bf00      	nop
 8113364:	1000b268 	.word	0x1000b268
 8113368:	10020000 	.word	0x10020000
 811336c:	0001ffe8 	.word	0x0001ffe8
 8113370:	1000b26c 	.word	0x1000b26c
 8113374:	1000b274 	.word	0x1000b274
 8113378:	1000b270 	.word	0x1000b270
 811337c:	0811d520 	.word	0x0811d520
 8113380:	0811d634 	.word	0x0811d634
 8113384:	0811d5a8 	.word	0x0811d5a8

08113388 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8113388:	b580      	push	{r7, lr}
 811338a:	b086      	sub	sp, #24
 811338c:	af00      	add	r7, sp, #0
 811338e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8113390:	6878      	ldr	r0, [r7, #4]
 8113392:	f7ff fef9 	bl	8113188 <mem_to_ptr>
 8113396:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8113398:	687b      	ldr	r3, [r7, #4]
 811339a:	681b      	ldr	r3, [r3, #0]
 811339c:	4618      	mov	r0, r3
 811339e:	f7ff fee3 	bl	8113168 <ptr_to_mem>
 81133a2:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 81133a4:	687b      	ldr	r3, [r7, #4]
 81133a6:	685b      	ldr	r3, [r3, #4]
 81133a8:	4618      	mov	r0, r3
 81133aa:	f7ff fedd 	bl	8113168 <ptr_to_mem>
 81133ae:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 81133b0:	687b      	ldr	r3, [r7, #4]
 81133b2:	681b      	ldr	r3, [r3, #0]
 81133b4:	4a11      	ldr	r2, [pc, #68]	@ (81133fc <mem_link_valid+0x74>)
 81133b6:	4293      	cmp	r3, r2
 81133b8:	d818      	bhi.n	81133ec <mem_link_valid+0x64>
 81133ba:	687b      	ldr	r3, [r7, #4]
 81133bc:	685b      	ldr	r3, [r3, #4]
 81133be:	4a0f      	ldr	r2, [pc, #60]	@ (81133fc <mem_link_valid+0x74>)
 81133c0:	4293      	cmp	r3, r2
 81133c2:	d813      	bhi.n	81133ec <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 81133c4:	687b      	ldr	r3, [r7, #4]
 81133c6:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 81133c8:	697a      	ldr	r2, [r7, #20]
 81133ca:	429a      	cmp	r2, r3
 81133cc:	d004      	beq.n	81133d8 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 81133ce:	68fb      	ldr	r3, [r7, #12]
 81133d0:	681b      	ldr	r3, [r3, #0]
 81133d2:	697a      	ldr	r2, [r7, #20]
 81133d4:	429a      	cmp	r2, r3
 81133d6:	d109      	bne.n	81133ec <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 81133d8:	4b09      	ldr	r3, [pc, #36]	@ (8113400 <mem_link_valid+0x78>)
 81133da:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 81133dc:	693a      	ldr	r2, [r7, #16]
 81133de:	429a      	cmp	r2, r3
 81133e0:	d006      	beq.n	81133f0 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 81133e2:	693b      	ldr	r3, [r7, #16]
 81133e4:	685b      	ldr	r3, [r3, #4]
 81133e6:	697a      	ldr	r2, [r7, #20]
 81133e8:	429a      	cmp	r2, r3
 81133ea:	d001      	beq.n	81133f0 <mem_link_valid+0x68>
    return 0;
 81133ec:	2300      	movs	r3, #0
 81133ee:	e000      	b.n	81133f2 <mem_link_valid+0x6a>
  }
  return 1;
 81133f0:	2301      	movs	r3, #1
}
 81133f2:	4618      	mov	r0, r3
 81133f4:	3718      	adds	r7, #24
 81133f6:	46bd      	mov	sp, r7
 81133f8:	bd80      	pop	{r7, pc}
 81133fa:	bf00      	nop
 81133fc:	0001ffe8 	.word	0x0001ffe8
 8113400:	1000b26c 	.word	0x1000b26c

08113404 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8113404:	b580      	push	{r7, lr}
 8113406:	b088      	sub	sp, #32
 8113408:	af00      	add	r7, sp, #0
 811340a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 811340c:	687b      	ldr	r3, [r7, #4]
 811340e:	2b00      	cmp	r3, #0
 8113410:	d070      	beq.n	81134f4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8113412:	687b      	ldr	r3, [r7, #4]
 8113414:	f003 0303 	and.w	r3, r3, #3
 8113418:	2b00      	cmp	r3, #0
 811341a:	d00d      	beq.n	8113438 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 811341c:	4b37      	ldr	r3, [pc, #220]	@ (81134fc <mem_free+0xf8>)
 811341e:	f240 2273 	movw	r2, #627	@ 0x273
 8113422:	4937      	ldr	r1, [pc, #220]	@ (8113500 <mem_free+0xfc>)
 8113424:	4837      	ldr	r0, [pc, #220]	@ (8113504 <mem_free+0x100>)
 8113426:	f008 fcf9 	bl	811be1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811342a:	f001 fda3 	bl	8114f74 <sys_arch_protect>
 811342e:	60f8      	str	r0, [r7, #12]
 8113430:	68f8      	ldr	r0, [r7, #12]
 8113432:	f001 fdad 	bl	8114f90 <sys_arch_unprotect>
    return;
 8113436:	e05e      	b.n	81134f6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8113438:	687b      	ldr	r3, [r7, #4]
 811343a:	3b0c      	subs	r3, #12
 811343c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 811343e:	4b32      	ldr	r3, [pc, #200]	@ (8113508 <mem_free+0x104>)
 8113440:	681b      	ldr	r3, [r3, #0]
 8113442:	69fa      	ldr	r2, [r7, #28]
 8113444:	429a      	cmp	r2, r3
 8113446:	d306      	bcc.n	8113456 <mem_free+0x52>
 8113448:	687b      	ldr	r3, [r7, #4]
 811344a:	f103 020c 	add.w	r2, r3, #12
 811344e:	4b2f      	ldr	r3, [pc, #188]	@ (811350c <mem_free+0x108>)
 8113450:	681b      	ldr	r3, [r3, #0]
 8113452:	429a      	cmp	r2, r3
 8113454:	d90d      	bls.n	8113472 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8113456:	4b29      	ldr	r3, [pc, #164]	@ (81134fc <mem_free+0xf8>)
 8113458:	f240 227f 	movw	r2, #639	@ 0x27f
 811345c:	492c      	ldr	r1, [pc, #176]	@ (8113510 <mem_free+0x10c>)
 811345e:	4829      	ldr	r0, [pc, #164]	@ (8113504 <mem_free+0x100>)
 8113460:	f008 fcdc 	bl	811be1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8113464:	f001 fd86 	bl	8114f74 <sys_arch_protect>
 8113468:	6138      	str	r0, [r7, #16]
 811346a:	6938      	ldr	r0, [r7, #16]
 811346c:	f001 fd90 	bl	8114f90 <sys_arch_unprotect>
    return;
 8113470:	e041      	b.n	81134f6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8113472:	4828      	ldr	r0, [pc, #160]	@ (8113514 <mem_free+0x110>)
 8113474:	f001 fd42 	bl	8114efc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8113478:	69fb      	ldr	r3, [r7, #28]
 811347a:	7a1b      	ldrb	r3, [r3, #8]
 811347c:	2b00      	cmp	r3, #0
 811347e:	d110      	bne.n	81134a2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8113480:	4b1e      	ldr	r3, [pc, #120]	@ (81134fc <mem_free+0xf8>)
 8113482:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8113486:	4924      	ldr	r1, [pc, #144]	@ (8113518 <mem_free+0x114>)
 8113488:	481e      	ldr	r0, [pc, #120]	@ (8113504 <mem_free+0x100>)
 811348a:	f008 fcc7 	bl	811be1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 811348e:	4821      	ldr	r0, [pc, #132]	@ (8113514 <mem_free+0x110>)
 8113490:	f001 fd43 	bl	8114f1a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8113494:	f001 fd6e 	bl	8114f74 <sys_arch_protect>
 8113498:	6178      	str	r0, [r7, #20]
 811349a:	6978      	ldr	r0, [r7, #20]
 811349c:	f001 fd78 	bl	8114f90 <sys_arch_unprotect>
    return;
 81134a0:	e029      	b.n	81134f6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 81134a2:	69f8      	ldr	r0, [r7, #28]
 81134a4:	f7ff ff70 	bl	8113388 <mem_link_valid>
 81134a8:	4603      	mov	r3, r0
 81134aa:	2b00      	cmp	r3, #0
 81134ac:	d110      	bne.n	81134d0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 81134ae:	4b13      	ldr	r3, [pc, #76]	@ (81134fc <mem_free+0xf8>)
 81134b0:	f240 2295 	movw	r2, #661	@ 0x295
 81134b4:	4919      	ldr	r1, [pc, #100]	@ (811351c <mem_free+0x118>)
 81134b6:	4813      	ldr	r0, [pc, #76]	@ (8113504 <mem_free+0x100>)
 81134b8:	f008 fcb0 	bl	811be1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 81134bc:	4815      	ldr	r0, [pc, #84]	@ (8113514 <mem_free+0x110>)
 81134be:	f001 fd2c 	bl	8114f1a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 81134c2:	f001 fd57 	bl	8114f74 <sys_arch_protect>
 81134c6:	61b8      	str	r0, [r7, #24]
 81134c8:	69b8      	ldr	r0, [r7, #24]
 81134ca:	f001 fd61 	bl	8114f90 <sys_arch_unprotect>
    return;
 81134ce:	e012      	b.n	81134f6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 81134d0:	69fb      	ldr	r3, [r7, #28]
 81134d2:	2200      	movs	r2, #0
 81134d4:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 81134d6:	4b12      	ldr	r3, [pc, #72]	@ (8113520 <mem_free+0x11c>)
 81134d8:	681b      	ldr	r3, [r3, #0]
 81134da:	69fa      	ldr	r2, [r7, #28]
 81134dc:	429a      	cmp	r2, r3
 81134de:	d202      	bcs.n	81134e6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 81134e0:	4a0f      	ldr	r2, [pc, #60]	@ (8113520 <mem_free+0x11c>)
 81134e2:	69fb      	ldr	r3, [r7, #28]
 81134e4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 81134e6:	69f8      	ldr	r0, [r7, #28]
 81134e8:	f7ff fe5e 	bl	81131a8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 81134ec:	4809      	ldr	r0, [pc, #36]	@ (8113514 <mem_free+0x110>)
 81134ee:	f001 fd14 	bl	8114f1a <sys_mutex_unlock>
 81134f2:	e000      	b.n	81134f6 <mem_free+0xf2>
    return;
 81134f4:	bf00      	nop
}
 81134f6:	3720      	adds	r7, #32
 81134f8:	46bd      	mov	sp, r7
 81134fa:	bd80      	pop	{r7, pc}
 81134fc:	0811d520 	.word	0x0811d520
 8113500:	0811d650 	.word	0x0811d650
 8113504:	0811d5a8 	.word	0x0811d5a8
 8113508:	1000b268 	.word	0x1000b268
 811350c:	1000b26c 	.word	0x1000b26c
 8113510:	0811d674 	.word	0x0811d674
 8113514:	1000b270 	.word	0x1000b270
 8113518:	0811d690 	.word	0x0811d690
 811351c:	0811d6b8 	.word	0x0811d6b8
 8113520:	1000b274 	.word	0x1000b274

08113524 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8113524:	b580      	push	{r7, lr}
 8113526:	b08a      	sub	sp, #40	@ 0x28
 8113528:	af00      	add	r7, sp, #0
 811352a:	6078      	str	r0, [r7, #4]
 811352c:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 811352e:	683b      	ldr	r3, [r7, #0]
 8113530:	3303      	adds	r3, #3
 8113532:	f023 0303 	bic.w	r3, r3, #3
 8113536:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8113538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811353a:	2b0b      	cmp	r3, #11
 811353c:	d801      	bhi.n	8113542 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 811353e:	230c      	movs	r3, #12
 8113540:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8113542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113544:	4a6e      	ldr	r2, [pc, #440]	@ (8113700 <mem_trim+0x1dc>)
 8113546:	4293      	cmp	r3, r2
 8113548:	d803      	bhi.n	8113552 <mem_trim+0x2e>
 811354a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811354c:	683b      	ldr	r3, [r7, #0]
 811354e:	429a      	cmp	r2, r3
 8113550:	d201      	bcs.n	8113556 <mem_trim+0x32>
    return NULL;
 8113552:	2300      	movs	r3, #0
 8113554:	e0d0      	b.n	81136f8 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8113556:	4b6b      	ldr	r3, [pc, #428]	@ (8113704 <mem_trim+0x1e0>)
 8113558:	681b      	ldr	r3, [r3, #0]
 811355a:	687a      	ldr	r2, [r7, #4]
 811355c:	429a      	cmp	r2, r3
 811355e:	d304      	bcc.n	811356a <mem_trim+0x46>
 8113560:	4b69      	ldr	r3, [pc, #420]	@ (8113708 <mem_trim+0x1e4>)
 8113562:	681b      	ldr	r3, [r3, #0]
 8113564:	687a      	ldr	r2, [r7, #4]
 8113566:	429a      	cmp	r2, r3
 8113568:	d306      	bcc.n	8113578 <mem_trim+0x54>
 811356a:	4b68      	ldr	r3, [pc, #416]	@ (811370c <mem_trim+0x1e8>)
 811356c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8113570:	4967      	ldr	r1, [pc, #412]	@ (8113710 <mem_trim+0x1ec>)
 8113572:	4868      	ldr	r0, [pc, #416]	@ (8113714 <mem_trim+0x1f0>)
 8113574:	f008 fc52 	bl	811be1c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8113578:	4b62      	ldr	r3, [pc, #392]	@ (8113704 <mem_trim+0x1e0>)
 811357a:	681b      	ldr	r3, [r3, #0]
 811357c:	687a      	ldr	r2, [r7, #4]
 811357e:	429a      	cmp	r2, r3
 8113580:	d304      	bcc.n	811358c <mem_trim+0x68>
 8113582:	4b61      	ldr	r3, [pc, #388]	@ (8113708 <mem_trim+0x1e4>)
 8113584:	681b      	ldr	r3, [r3, #0]
 8113586:	687a      	ldr	r2, [r7, #4]
 8113588:	429a      	cmp	r2, r3
 811358a:	d307      	bcc.n	811359c <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811358c:	f001 fcf2 	bl	8114f74 <sys_arch_protect>
 8113590:	60b8      	str	r0, [r7, #8]
 8113592:	68b8      	ldr	r0, [r7, #8]
 8113594:	f001 fcfc 	bl	8114f90 <sys_arch_unprotect>
    return rmem;
 8113598:	687b      	ldr	r3, [r7, #4]
 811359a:	e0ad      	b.n	81136f8 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 811359c:	687b      	ldr	r3, [r7, #4]
 811359e:	3b0c      	subs	r3, #12
 81135a0:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 81135a2:	6a38      	ldr	r0, [r7, #32]
 81135a4:	f7ff fdf0 	bl	8113188 <mem_to_ptr>
 81135a8:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 81135aa:	6a3b      	ldr	r3, [r7, #32]
 81135ac:	681a      	ldr	r2, [r3, #0]
 81135ae:	69fb      	ldr	r3, [r7, #28]
 81135b0:	1ad3      	subs	r3, r2, r3
 81135b2:	3b0c      	subs	r3, #12
 81135b4:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 81135b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81135b8:	69bb      	ldr	r3, [r7, #24]
 81135ba:	429a      	cmp	r2, r3
 81135bc:	d906      	bls.n	81135cc <mem_trim+0xa8>
 81135be:	4b53      	ldr	r3, [pc, #332]	@ (811370c <mem_trim+0x1e8>)
 81135c0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 81135c4:	4954      	ldr	r1, [pc, #336]	@ (8113718 <mem_trim+0x1f4>)
 81135c6:	4853      	ldr	r0, [pc, #332]	@ (8113714 <mem_trim+0x1f0>)
 81135c8:	f008 fc28 	bl	811be1c <iprintf>
  if (newsize > size) {
 81135cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81135ce:	69bb      	ldr	r3, [r7, #24]
 81135d0:	429a      	cmp	r2, r3
 81135d2:	d901      	bls.n	81135d8 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 81135d4:	2300      	movs	r3, #0
 81135d6:	e08f      	b.n	81136f8 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 81135d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81135da:	69bb      	ldr	r3, [r7, #24]
 81135dc:	429a      	cmp	r2, r3
 81135de:	d101      	bne.n	81135e4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 81135e0:	687b      	ldr	r3, [r7, #4]
 81135e2:	e089      	b.n	81136f8 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 81135e4:	484d      	ldr	r0, [pc, #308]	@ (811371c <mem_trim+0x1f8>)
 81135e6:	f001 fc89 	bl	8114efc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 81135ea:	6a3b      	ldr	r3, [r7, #32]
 81135ec:	681b      	ldr	r3, [r3, #0]
 81135ee:	4618      	mov	r0, r3
 81135f0:	f7ff fdba 	bl	8113168 <ptr_to_mem>
 81135f4:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 81135f6:	697b      	ldr	r3, [r7, #20]
 81135f8:	7a1b      	ldrb	r3, [r3, #8]
 81135fa:	2b00      	cmp	r3, #0
 81135fc:	d13c      	bne.n	8113678 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 81135fe:	6a3b      	ldr	r3, [r7, #32]
 8113600:	681b      	ldr	r3, [r3, #0]
 8113602:	4a3f      	ldr	r2, [pc, #252]	@ (8113700 <mem_trim+0x1dc>)
 8113604:	4293      	cmp	r3, r2
 8113606:	d106      	bne.n	8113616 <mem_trim+0xf2>
 8113608:	4b40      	ldr	r3, [pc, #256]	@ (811370c <mem_trim+0x1e8>)
 811360a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 811360e:	4944      	ldr	r1, [pc, #272]	@ (8113720 <mem_trim+0x1fc>)
 8113610:	4840      	ldr	r0, [pc, #256]	@ (8113714 <mem_trim+0x1f0>)
 8113612:	f008 fc03 	bl	811be1c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8113616:	697b      	ldr	r3, [r7, #20]
 8113618:	681b      	ldr	r3, [r3, #0]
 811361a:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 811361c:	69fa      	ldr	r2, [r7, #28]
 811361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113620:	4413      	add	r3, r2
 8113622:	330c      	adds	r3, #12
 8113624:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8113626:	4b3f      	ldr	r3, [pc, #252]	@ (8113724 <mem_trim+0x200>)
 8113628:	681b      	ldr	r3, [r3, #0]
 811362a:	697a      	ldr	r2, [r7, #20]
 811362c:	429a      	cmp	r2, r3
 811362e:	d105      	bne.n	811363c <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 8113630:	6938      	ldr	r0, [r7, #16]
 8113632:	f7ff fd99 	bl	8113168 <ptr_to_mem>
 8113636:	4603      	mov	r3, r0
 8113638:	4a3a      	ldr	r2, [pc, #232]	@ (8113724 <mem_trim+0x200>)
 811363a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 811363c:	6938      	ldr	r0, [r7, #16]
 811363e:	f7ff fd93 	bl	8113168 <ptr_to_mem>
 8113642:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8113644:	697b      	ldr	r3, [r7, #20]
 8113646:	2200      	movs	r2, #0
 8113648:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 811364a:	697b      	ldr	r3, [r7, #20]
 811364c:	68fa      	ldr	r2, [r7, #12]
 811364e:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8113650:	697b      	ldr	r3, [r7, #20]
 8113652:	69fa      	ldr	r2, [r7, #28]
 8113654:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8113656:	6a3b      	ldr	r3, [r7, #32]
 8113658:	693a      	ldr	r2, [r7, #16]
 811365a:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 811365c:	697b      	ldr	r3, [r7, #20]
 811365e:	681b      	ldr	r3, [r3, #0]
 8113660:	4a27      	ldr	r2, [pc, #156]	@ (8113700 <mem_trim+0x1dc>)
 8113662:	4293      	cmp	r3, r2
 8113664:	d044      	beq.n	81136f0 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8113666:	697b      	ldr	r3, [r7, #20]
 8113668:	681b      	ldr	r3, [r3, #0]
 811366a:	4618      	mov	r0, r3
 811366c:	f7ff fd7c 	bl	8113168 <ptr_to_mem>
 8113670:	4602      	mov	r2, r0
 8113672:	693b      	ldr	r3, [r7, #16]
 8113674:	6053      	str	r3, [r2, #4]
 8113676:	e03b      	b.n	81136f0 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8113678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811367a:	3318      	adds	r3, #24
 811367c:	69ba      	ldr	r2, [r7, #24]
 811367e:	429a      	cmp	r2, r3
 8113680:	d336      	bcc.n	81136f0 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8113682:	69fa      	ldr	r2, [r7, #28]
 8113684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113686:	4413      	add	r3, r2
 8113688:	330c      	adds	r3, #12
 811368a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 811368c:	6a3b      	ldr	r3, [r7, #32]
 811368e:	681b      	ldr	r3, [r3, #0]
 8113690:	4a1b      	ldr	r2, [pc, #108]	@ (8113700 <mem_trim+0x1dc>)
 8113692:	4293      	cmp	r3, r2
 8113694:	d106      	bne.n	81136a4 <mem_trim+0x180>
 8113696:	4b1d      	ldr	r3, [pc, #116]	@ (811370c <mem_trim+0x1e8>)
 8113698:	f240 3216 	movw	r2, #790	@ 0x316
 811369c:	4920      	ldr	r1, [pc, #128]	@ (8113720 <mem_trim+0x1fc>)
 811369e:	481d      	ldr	r0, [pc, #116]	@ (8113714 <mem_trim+0x1f0>)
 81136a0:	f008 fbbc 	bl	811be1c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 81136a4:	6938      	ldr	r0, [r7, #16]
 81136a6:	f7ff fd5f 	bl	8113168 <ptr_to_mem>
 81136aa:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 81136ac:	4b1d      	ldr	r3, [pc, #116]	@ (8113724 <mem_trim+0x200>)
 81136ae:	681b      	ldr	r3, [r3, #0]
 81136b0:	697a      	ldr	r2, [r7, #20]
 81136b2:	429a      	cmp	r2, r3
 81136b4:	d202      	bcs.n	81136bc <mem_trim+0x198>
      lfree = mem2;
 81136b6:	4a1b      	ldr	r2, [pc, #108]	@ (8113724 <mem_trim+0x200>)
 81136b8:	697b      	ldr	r3, [r7, #20]
 81136ba:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 81136bc:	697b      	ldr	r3, [r7, #20]
 81136be:	2200      	movs	r2, #0
 81136c0:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 81136c2:	6a3b      	ldr	r3, [r7, #32]
 81136c4:	681a      	ldr	r2, [r3, #0]
 81136c6:	697b      	ldr	r3, [r7, #20]
 81136c8:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 81136ca:	697b      	ldr	r3, [r7, #20]
 81136cc:	69fa      	ldr	r2, [r7, #28]
 81136ce:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 81136d0:	6a3b      	ldr	r3, [r7, #32]
 81136d2:	693a      	ldr	r2, [r7, #16]
 81136d4:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 81136d6:	697b      	ldr	r3, [r7, #20]
 81136d8:	681b      	ldr	r3, [r3, #0]
 81136da:	4a09      	ldr	r2, [pc, #36]	@ (8113700 <mem_trim+0x1dc>)
 81136dc:	4293      	cmp	r3, r2
 81136de:	d007      	beq.n	81136f0 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 81136e0:	697b      	ldr	r3, [r7, #20]
 81136e2:	681b      	ldr	r3, [r3, #0]
 81136e4:	4618      	mov	r0, r3
 81136e6:	f7ff fd3f 	bl	8113168 <ptr_to_mem>
 81136ea:	4602      	mov	r2, r0
 81136ec:	693b      	ldr	r3, [r7, #16]
 81136ee:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 81136f0:	480a      	ldr	r0, [pc, #40]	@ (811371c <mem_trim+0x1f8>)
 81136f2:	f001 fc12 	bl	8114f1a <sys_mutex_unlock>
  return rmem;
 81136f6:	687b      	ldr	r3, [r7, #4]
}
 81136f8:	4618      	mov	r0, r3
 81136fa:	3728      	adds	r7, #40	@ 0x28
 81136fc:	46bd      	mov	sp, r7
 81136fe:	bd80      	pop	{r7, pc}
 8113700:	0001ffe8 	.word	0x0001ffe8
 8113704:	1000b268 	.word	0x1000b268
 8113708:	1000b26c 	.word	0x1000b26c
 811370c:	0811d520 	.word	0x0811d520
 8113710:	0811d6ec 	.word	0x0811d6ec
 8113714:	0811d5a8 	.word	0x0811d5a8
 8113718:	0811d704 	.word	0x0811d704
 811371c:	1000b270 	.word	0x1000b270
 8113720:	0811d724 	.word	0x0811d724
 8113724:	1000b274 	.word	0x1000b274

08113728 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8113728:	b580      	push	{r7, lr}
 811372a:	b088      	sub	sp, #32
 811372c:	af00      	add	r7, sp, #0
 811372e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8113730:	687b      	ldr	r3, [r7, #4]
 8113732:	2b00      	cmp	r3, #0
 8113734:	d101      	bne.n	811373a <mem_malloc+0x12>
    return NULL;
 8113736:	2300      	movs	r3, #0
 8113738:	e0db      	b.n	81138f2 <mem_malloc+0x1ca>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 811373a:	687b      	ldr	r3, [r7, #4]
 811373c:	3303      	adds	r3, #3
 811373e:	f023 0303 	bic.w	r3, r3, #3
 8113742:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8113744:	69bb      	ldr	r3, [r7, #24]
 8113746:	2b0b      	cmp	r3, #11
 8113748:	d801      	bhi.n	811374e <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 811374a:	230c      	movs	r3, #12
 811374c:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 811374e:	69bb      	ldr	r3, [r7, #24]
 8113750:	4a6a      	ldr	r2, [pc, #424]	@ (81138fc <mem_malloc+0x1d4>)
 8113752:	4293      	cmp	r3, r2
 8113754:	d803      	bhi.n	811375e <mem_malloc+0x36>
 8113756:	69ba      	ldr	r2, [r7, #24]
 8113758:	687b      	ldr	r3, [r7, #4]
 811375a:	429a      	cmp	r2, r3
 811375c:	d201      	bcs.n	8113762 <mem_malloc+0x3a>
    return NULL;
 811375e:	2300      	movs	r3, #0
 8113760:	e0c7      	b.n	81138f2 <mem_malloc+0x1ca>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8113762:	4867      	ldr	r0, [pc, #412]	@ (8113900 <mem_malloc+0x1d8>)
 8113764:	f001 fbca 	bl	8114efc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8113768:	4b66      	ldr	r3, [pc, #408]	@ (8113904 <mem_malloc+0x1dc>)
 811376a:	681b      	ldr	r3, [r3, #0]
 811376c:	4618      	mov	r0, r3
 811376e:	f7ff fd0b 	bl	8113188 <mem_to_ptr>
 8113772:	61f8      	str	r0, [r7, #28]
 8113774:	e0b0      	b.n	81138d8 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8113776:	69f8      	ldr	r0, [r7, #28]
 8113778:	f7ff fcf6 	bl	8113168 <ptr_to_mem>
 811377c:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 811377e:	693b      	ldr	r3, [r7, #16]
 8113780:	7a1b      	ldrb	r3, [r3, #8]
 8113782:	2b00      	cmp	r3, #0
 8113784:	f040 80a2 	bne.w	81138cc <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8113788:	693b      	ldr	r3, [r7, #16]
 811378a:	681a      	ldr	r2, [r3, #0]
 811378c:	69fb      	ldr	r3, [r7, #28]
 811378e:	1ad3      	subs	r3, r2, r3
 8113790:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8113792:	69ba      	ldr	r2, [r7, #24]
 8113794:	429a      	cmp	r2, r3
 8113796:	f200 8099 	bhi.w	81138cc <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 811379a:	693b      	ldr	r3, [r7, #16]
 811379c:	681a      	ldr	r2, [r3, #0]
 811379e:	69fb      	ldr	r3, [r7, #28]
 81137a0:	1ad3      	subs	r3, r2, r3
 81137a2:	f1a3 020c 	sub.w	r2, r3, #12
 81137a6:	69bb      	ldr	r3, [r7, #24]
 81137a8:	3318      	adds	r3, #24
 81137aa:	429a      	cmp	r2, r3
 81137ac:	d331      	bcc.n	8113812 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 81137ae:	69fa      	ldr	r2, [r7, #28]
 81137b0:	69bb      	ldr	r3, [r7, #24]
 81137b2:	4413      	add	r3, r2
 81137b4:	330c      	adds	r3, #12
 81137b6:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 81137b8:	68fb      	ldr	r3, [r7, #12]
 81137ba:	4a50      	ldr	r2, [pc, #320]	@ (81138fc <mem_malloc+0x1d4>)
 81137bc:	4293      	cmp	r3, r2
 81137be:	d106      	bne.n	81137ce <mem_malloc+0xa6>
 81137c0:	4b51      	ldr	r3, [pc, #324]	@ (8113908 <mem_malloc+0x1e0>)
 81137c2:	f240 3287 	movw	r2, #903	@ 0x387
 81137c6:	4951      	ldr	r1, [pc, #324]	@ (811390c <mem_malloc+0x1e4>)
 81137c8:	4851      	ldr	r0, [pc, #324]	@ (8113910 <mem_malloc+0x1e8>)
 81137ca:	f008 fb27 	bl	811be1c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 81137ce:	68f8      	ldr	r0, [r7, #12]
 81137d0:	f7ff fcca 	bl	8113168 <ptr_to_mem>
 81137d4:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 81137d6:	68bb      	ldr	r3, [r7, #8]
 81137d8:	2200      	movs	r2, #0
 81137da:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 81137dc:	693b      	ldr	r3, [r7, #16]
 81137de:	681a      	ldr	r2, [r3, #0]
 81137e0:	68bb      	ldr	r3, [r7, #8]
 81137e2:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 81137e4:	68bb      	ldr	r3, [r7, #8]
 81137e6:	69fa      	ldr	r2, [r7, #28]
 81137e8:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 81137ea:	693b      	ldr	r3, [r7, #16]
 81137ec:	68fa      	ldr	r2, [r7, #12]
 81137ee:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 81137f0:	693b      	ldr	r3, [r7, #16]
 81137f2:	2201      	movs	r2, #1
 81137f4:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 81137f6:	68bb      	ldr	r3, [r7, #8]
 81137f8:	681b      	ldr	r3, [r3, #0]
 81137fa:	4a40      	ldr	r2, [pc, #256]	@ (81138fc <mem_malloc+0x1d4>)
 81137fc:	4293      	cmp	r3, r2
 81137fe:	d00b      	beq.n	8113818 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8113800:	68bb      	ldr	r3, [r7, #8]
 8113802:	681b      	ldr	r3, [r3, #0]
 8113804:	4618      	mov	r0, r3
 8113806:	f7ff fcaf 	bl	8113168 <ptr_to_mem>
 811380a:	4602      	mov	r2, r0
 811380c:	68fb      	ldr	r3, [r7, #12]
 811380e:	6053      	str	r3, [r2, #4]
 8113810:	e002      	b.n	8113818 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8113812:	693b      	ldr	r3, [r7, #16]
 8113814:	2201      	movs	r2, #1
 8113816:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8113818:	4b3a      	ldr	r3, [pc, #232]	@ (8113904 <mem_malloc+0x1dc>)
 811381a:	681b      	ldr	r3, [r3, #0]
 811381c:	693a      	ldr	r2, [r7, #16]
 811381e:	429a      	cmp	r2, r3
 8113820:	d127      	bne.n	8113872 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 8113822:	4b38      	ldr	r3, [pc, #224]	@ (8113904 <mem_malloc+0x1dc>)
 8113824:	681b      	ldr	r3, [r3, #0]
 8113826:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8113828:	e005      	b.n	8113836 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 811382a:	697b      	ldr	r3, [r7, #20]
 811382c:	681b      	ldr	r3, [r3, #0]
 811382e:	4618      	mov	r0, r3
 8113830:	f7ff fc9a 	bl	8113168 <ptr_to_mem>
 8113834:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8113836:	697b      	ldr	r3, [r7, #20]
 8113838:	7a1b      	ldrb	r3, [r3, #8]
 811383a:	2b00      	cmp	r3, #0
 811383c:	d004      	beq.n	8113848 <mem_malloc+0x120>
 811383e:	4b35      	ldr	r3, [pc, #212]	@ (8113914 <mem_malloc+0x1ec>)
 8113840:	681b      	ldr	r3, [r3, #0]
 8113842:	697a      	ldr	r2, [r7, #20]
 8113844:	429a      	cmp	r2, r3
 8113846:	d1f0      	bne.n	811382a <mem_malloc+0x102>
          }
          lfree = cur;
 8113848:	4a2e      	ldr	r2, [pc, #184]	@ (8113904 <mem_malloc+0x1dc>)
 811384a:	697b      	ldr	r3, [r7, #20]
 811384c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 811384e:	4b2d      	ldr	r3, [pc, #180]	@ (8113904 <mem_malloc+0x1dc>)
 8113850:	681a      	ldr	r2, [r3, #0]
 8113852:	4b30      	ldr	r3, [pc, #192]	@ (8113914 <mem_malloc+0x1ec>)
 8113854:	681b      	ldr	r3, [r3, #0]
 8113856:	429a      	cmp	r2, r3
 8113858:	d00b      	beq.n	8113872 <mem_malloc+0x14a>
 811385a:	4b2a      	ldr	r3, [pc, #168]	@ (8113904 <mem_malloc+0x1dc>)
 811385c:	681b      	ldr	r3, [r3, #0]
 811385e:	7a1b      	ldrb	r3, [r3, #8]
 8113860:	2b00      	cmp	r3, #0
 8113862:	d006      	beq.n	8113872 <mem_malloc+0x14a>
 8113864:	4b28      	ldr	r3, [pc, #160]	@ (8113908 <mem_malloc+0x1e0>)
 8113866:	f240 32b5 	movw	r2, #949	@ 0x3b5
 811386a:	492b      	ldr	r1, [pc, #172]	@ (8113918 <mem_malloc+0x1f0>)
 811386c:	4828      	ldr	r0, [pc, #160]	@ (8113910 <mem_malloc+0x1e8>)
 811386e:	f008 fad5 	bl	811be1c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8113872:	4823      	ldr	r0, [pc, #140]	@ (8113900 <mem_malloc+0x1d8>)
 8113874:	f001 fb51 	bl	8114f1a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8113878:	693a      	ldr	r2, [r7, #16]
 811387a:	69bb      	ldr	r3, [r7, #24]
 811387c:	4413      	add	r3, r2
 811387e:	330c      	adds	r3, #12
 8113880:	4a24      	ldr	r2, [pc, #144]	@ (8113914 <mem_malloc+0x1ec>)
 8113882:	6812      	ldr	r2, [r2, #0]
 8113884:	4293      	cmp	r3, r2
 8113886:	d906      	bls.n	8113896 <mem_malloc+0x16e>
 8113888:	4b1f      	ldr	r3, [pc, #124]	@ (8113908 <mem_malloc+0x1e0>)
 811388a:	f240 32b9 	movw	r2, #953	@ 0x3b9
 811388e:	4923      	ldr	r1, [pc, #140]	@ (811391c <mem_malloc+0x1f4>)
 8113890:	481f      	ldr	r0, [pc, #124]	@ (8113910 <mem_malloc+0x1e8>)
 8113892:	f008 fac3 	bl	811be1c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8113896:	693b      	ldr	r3, [r7, #16]
 8113898:	f003 0303 	and.w	r3, r3, #3
 811389c:	2b00      	cmp	r3, #0
 811389e:	d006      	beq.n	81138ae <mem_malloc+0x186>
 81138a0:	4b19      	ldr	r3, [pc, #100]	@ (8113908 <mem_malloc+0x1e0>)
 81138a2:	f240 32bb 	movw	r2, #955	@ 0x3bb
 81138a6:	491e      	ldr	r1, [pc, #120]	@ (8113920 <mem_malloc+0x1f8>)
 81138a8:	4819      	ldr	r0, [pc, #100]	@ (8113910 <mem_malloc+0x1e8>)
 81138aa:	f008 fab7 	bl	811be1c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 81138ae:	693b      	ldr	r3, [r7, #16]
 81138b0:	f003 0303 	and.w	r3, r3, #3
 81138b4:	2b00      	cmp	r3, #0
 81138b6:	d006      	beq.n	81138c6 <mem_malloc+0x19e>
 81138b8:	4b13      	ldr	r3, [pc, #76]	@ (8113908 <mem_malloc+0x1e0>)
 81138ba:	f240 32bd 	movw	r2, #957	@ 0x3bd
 81138be:	4919      	ldr	r1, [pc, #100]	@ (8113924 <mem_malloc+0x1fc>)
 81138c0:	4813      	ldr	r0, [pc, #76]	@ (8113910 <mem_malloc+0x1e8>)
 81138c2:	f008 faab 	bl	811be1c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 81138c6:	693b      	ldr	r3, [r7, #16]
 81138c8:	330c      	adds	r3, #12
 81138ca:	e012      	b.n	81138f2 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
 81138cc:	69f8      	ldr	r0, [r7, #28]
 81138ce:	f7ff fc4b 	bl	8113168 <ptr_to_mem>
 81138d2:	4603      	mov	r3, r0
 81138d4:	681b      	ldr	r3, [r3, #0]
 81138d6:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 81138d8:	69bb      	ldr	r3, [r7, #24]
 81138da:	f5c3 33ff 	rsb	r3, r3, #130560	@ 0x1fe00
 81138de:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 81138e2:	69fa      	ldr	r2, [r7, #28]
 81138e4:	429a      	cmp	r2, r3
 81138e6:	f4ff af46 	bcc.w	8113776 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 81138ea:	4805      	ldr	r0, [pc, #20]	@ (8113900 <mem_malloc+0x1d8>)
 81138ec:	f001 fb15 	bl	8114f1a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 81138f0:	2300      	movs	r3, #0
}
 81138f2:	4618      	mov	r0, r3
 81138f4:	3720      	adds	r7, #32
 81138f6:	46bd      	mov	sp, r7
 81138f8:	bd80      	pop	{r7, pc}
 81138fa:	bf00      	nop
 81138fc:	0001ffe8 	.word	0x0001ffe8
 8113900:	1000b270 	.word	0x1000b270
 8113904:	1000b274 	.word	0x1000b274
 8113908:	0811d520 	.word	0x0811d520
 811390c:	0811d724 	.word	0x0811d724
 8113910:	0811d5a8 	.word	0x0811d5a8
 8113914:	1000b26c 	.word	0x1000b26c
 8113918:	0811d738 	.word	0x0811d738
 811391c:	0811d754 	.word	0x0811d754
 8113920:	0811d784 	.word	0x0811d784
 8113924:	0811d7b4 	.word	0x0811d7b4

08113928 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8113928:	b480      	push	{r7}
 811392a:	b085      	sub	sp, #20
 811392c:	af00      	add	r7, sp, #0
 811392e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8113930:	687b      	ldr	r3, [r7, #4]
 8113932:	689b      	ldr	r3, [r3, #8]
 8113934:	2200      	movs	r2, #0
 8113936:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8113938:	687b      	ldr	r3, [r7, #4]
 811393a:	685b      	ldr	r3, [r3, #4]
 811393c:	3303      	adds	r3, #3
 811393e:	f023 0303 	bic.w	r3, r3, #3
 8113942:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8113944:	2300      	movs	r3, #0
 8113946:	60fb      	str	r3, [r7, #12]
 8113948:	e011      	b.n	811396e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 811394a:	687b      	ldr	r3, [r7, #4]
 811394c:	689b      	ldr	r3, [r3, #8]
 811394e:	681a      	ldr	r2, [r3, #0]
 8113950:	68bb      	ldr	r3, [r7, #8]
 8113952:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8113954:	687b      	ldr	r3, [r7, #4]
 8113956:	689b      	ldr	r3, [r3, #8]
 8113958:	68ba      	ldr	r2, [r7, #8]
 811395a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 811395c:	687b      	ldr	r3, [r7, #4]
 811395e:	881b      	ldrh	r3, [r3, #0]
 8113960:	461a      	mov	r2, r3
 8113962:	68bb      	ldr	r3, [r7, #8]
 8113964:	4413      	add	r3, r2
 8113966:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8113968:	68fb      	ldr	r3, [r7, #12]
 811396a:	3301      	adds	r3, #1
 811396c:	60fb      	str	r3, [r7, #12]
 811396e:	687b      	ldr	r3, [r7, #4]
 8113970:	885b      	ldrh	r3, [r3, #2]
 8113972:	461a      	mov	r2, r3
 8113974:	68fb      	ldr	r3, [r7, #12]
 8113976:	4293      	cmp	r3, r2
 8113978:	dbe7      	blt.n	811394a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 811397a:	bf00      	nop
 811397c:	bf00      	nop
 811397e:	3714      	adds	r7, #20
 8113980:	46bd      	mov	sp, r7
 8113982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113986:	4770      	bx	lr

08113988 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8113988:	b580      	push	{r7, lr}
 811398a:	b082      	sub	sp, #8
 811398c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 811398e:	2300      	movs	r3, #0
 8113990:	80fb      	strh	r3, [r7, #6]
 8113992:	e009      	b.n	81139a8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8113994:	88fb      	ldrh	r3, [r7, #6]
 8113996:	4a08      	ldr	r2, [pc, #32]	@ (81139b8 <memp_init+0x30>)
 8113998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811399c:	4618      	mov	r0, r3
 811399e:	f7ff ffc3 	bl	8113928 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 81139a2:	88fb      	ldrh	r3, [r7, #6]
 81139a4:	3301      	adds	r3, #1
 81139a6:	80fb      	strh	r3, [r7, #6]
 81139a8:	88fb      	ldrh	r3, [r7, #6]
 81139aa:	2b0c      	cmp	r3, #12
 81139ac:	d9f2      	bls.n	8113994 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 81139ae:	bf00      	nop
 81139b0:	bf00      	nop
 81139b2:	3708      	adds	r7, #8
 81139b4:	46bd      	mov	sp, r7
 81139b6:	bd80      	pop	{r7, pc}
 81139b8:	0811fcc0 	.word	0x0811fcc0

081139bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 81139bc:	b580      	push	{r7, lr}
 81139be:	b084      	sub	sp, #16
 81139c0:	af00      	add	r7, sp, #0
 81139c2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 81139c4:	f001 fad6 	bl	8114f74 <sys_arch_protect>
 81139c8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 81139ca:	687b      	ldr	r3, [r7, #4]
 81139cc:	689b      	ldr	r3, [r3, #8]
 81139ce:	681b      	ldr	r3, [r3, #0]
 81139d0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 81139d2:	68bb      	ldr	r3, [r7, #8]
 81139d4:	2b00      	cmp	r3, #0
 81139d6:	d015      	beq.n	8113a04 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 81139d8:	687b      	ldr	r3, [r7, #4]
 81139da:	689b      	ldr	r3, [r3, #8]
 81139dc:	68ba      	ldr	r2, [r7, #8]
 81139de:	6812      	ldr	r2, [r2, #0]
 81139e0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 81139e2:	68bb      	ldr	r3, [r7, #8]
 81139e4:	f003 0303 	and.w	r3, r3, #3
 81139e8:	2b00      	cmp	r3, #0
 81139ea:	d006      	beq.n	81139fa <do_memp_malloc_pool+0x3e>
 81139ec:	4b09      	ldr	r3, [pc, #36]	@ (8113a14 <do_memp_malloc_pool+0x58>)
 81139ee:	f44f 728c 	mov.w	r2, #280	@ 0x118
 81139f2:	4909      	ldr	r1, [pc, #36]	@ (8113a18 <do_memp_malloc_pool+0x5c>)
 81139f4:	4809      	ldr	r0, [pc, #36]	@ (8113a1c <do_memp_malloc_pool+0x60>)
 81139f6:	f008 fa11 	bl	811be1c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 81139fa:	68f8      	ldr	r0, [r7, #12]
 81139fc:	f001 fac8 	bl	8114f90 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8113a00:	68bb      	ldr	r3, [r7, #8]
 8113a02:	e003      	b.n	8113a0c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8113a04:	68f8      	ldr	r0, [r7, #12]
 8113a06:	f001 fac3 	bl	8114f90 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8113a0a:	2300      	movs	r3, #0
}
 8113a0c:	4618      	mov	r0, r3
 8113a0e:	3710      	adds	r7, #16
 8113a10:	46bd      	mov	sp, r7
 8113a12:	bd80      	pop	{r7, pc}
 8113a14:	0811d7d8 	.word	0x0811d7d8
 8113a18:	0811d848 	.word	0x0811d848
 8113a1c:	0811d86c 	.word	0x0811d86c

08113a20 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8113a20:	b580      	push	{r7, lr}
 8113a22:	b082      	sub	sp, #8
 8113a24:	af00      	add	r7, sp, #0
 8113a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8113a28:	687b      	ldr	r3, [r7, #4]
 8113a2a:	2b00      	cmp	r3, #0
 8113a2c:	d106      	bne.n	8113a3c <memp_malloc_pool+0x1c>
 8113a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8113a58 <memp_malloc_pool+0x38>)
 8113a30:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8113a34:	4909      	ldr	r1, [pc, #36]	@ (8113a5c <memp_malloc_pool+0x3c>)
 8113a36:	480a      	ldr	r0, [pc, #40]	@ (8113a60 <memp_malloc_pool+0x40>)
 8113a38:	f008 f9f0 	bl	811be1c <iprintf>
  if (desc == NULL) {
 8113a3c:	687b      	ldr	r3, [r7, #4]
 8113a3e:	2b00      	cmp	r3, #0
 8113a40:	d101      	bne.n	8113a46 <memp_malloc_pool+0x26>
    return NULL;
 8113a42:	2300      	movs	r3, #0
 8113a44:	e003      	b.n	8113a4e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8113a46:	6878      	ldr	r0, [r7, #4]
 8113a48:	f7ff ffb8 	bl	81139bc <do_memp_malloc_pool>
 8113a4c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8113a4e:	4618      	mov	r0, r3
 8113a50:	3708      	adds	r7, #8
 8113a52:	46bd      	mov	sp, r7
 8113a54:	bd80      	pop	{r7, pc}
 8113a56:	bf00      	nop
 8113a58:	0811d7d8 	.word	0x0811d7d8
 8113a5c:	0811d894 	.word	0x0811d894
 8113a60:	0811d86c 	.word	0x0811d86c

08113a64 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8113a64:	b580      	push	{r7, lr}
 8113a66:	b084      	sub	sp, #16
 8113a68:	af00      	add	r7, sp, #0
 8113a6a:	4603      	mov	r3, r0
 8113a6c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8113a6e:	79fb      	ldrb	r3, [r7, #7]
 8113a70:	2b0c      	cmp	r3, #12
 8113a72:	d908      	bls.n	8113a86 <memp_malloc+0x22>
 8113a74:	4b0a      	ldr	r3, [pc, #40]	@ (8113aa0 <memp_malloc+0x3c>)
 8113a76:	f240 1257 	movw	r2, #343	@ 0x157
 8113a7a:	490a      	ldr	r1, [pc, #40]	@ (8113aa4 <memp_malloc+0x40>)
 8113a7c:	480a      	ldr	r0, [pc, #40]	@ (8113aa8 <memp_malloc+0x44>)
 8113a7e:	f008 f9cd 	bl	811be1c <iprintf>
 8113a82:	2300      	movs	r3, #0
 8113a84:	e008      	b.n	8113a98 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8113a86:	79fb      	ldrb	r3, [r7, #7]
 8113a88:	4a08      	ldr	r2, [pc, #32]	@ (8113aac <memp_malloc+0x48>)
 8113a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8113a8e:	4618      	mov	r0, r3
 8113a90:	f7ff ff94 	bl	81139bc <do_memp_malloc_pool>
 8113a94:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8113a96:	68fb      	ldr	r3, [r7, #12]
}
 8113a98:	4618      	mov	r0, r3
 8113a9a:	3710      	adds	r7, #16
 8113a9c:	46bd      	mov	sp, r7
 8113a9e:	bd80      	pop	{r7, pc}
 8113aa0:	0811d7d8 	.word	0x0811d7d8
 8113aa4:	0811d8a8 	.word	0x0811d8a8
 8113aa8:	0811d86c 	.word	0x0811d86c
 8113aac:	0811fcc0 	.word	0x0811fcc0

08113ab0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8113ab0:	b580      	push	{r7, lr}
 8113ab2:	b084      	sub	sp, #16
 8113ab4:	af00      	add	r7, sp, #0
 8113ab6:	6078      	str	r0, [r7, #4]
 8113ab8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8113aba:	683b      	ldr	r3, [r7, #0]
 8113abc:	f003 0303 	and.w	r3, r3, #3
 8113ac0:	2b00      	cmp	r3, #0
 8113ac2:	d006      	beq.n	8113ad2 <do_memp_free_pool+0x22>
 8113ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8113afc <do_memp_free_pool+0x4c>)
 8113ac6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8113aca:	490d      	ldr	r1, [pc, #52]	@ (8113b00 <do_memp_free_pool+0x50>)
 8113acc:	480d      	ldr	r0, [pc, #52]	@ (8113b04 <do_memp_free_pool+0x54>)
 8113ace:	f008 f9a5 	bl	811be1c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8113ad2:	683b      	ldr	r3, [r7, #0]
 8113ad4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8113ad6:	f001 fa4d 	bl	8114f74 <sys_arch_protect>
 8113ada:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8113adc:	687b      	ldr	r3, [r7, #4]
 8113ade:	689b      	ldr	r3, [r3, #8]
 8113ae0:	681a      	ldr	r2, [r3, #0]
 8113ae2:	68fb      	ldr	r3, [r7, #12]
 8113ae4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8113ae6:	687b      	ldr	r3, [r7, #4]
 8113ae8:	689b      	ldr	r3, [r3, #8]
 8113aea:	68fa      	ldr	r2, [r7, #12]
 8113aec:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8113aee:	68b8      	ldr	r0, [r7, #8]
 8113af0:	f001 fa4e 	bl	8114f90 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8113af4:	bf00      	nop
 8113af6:	3710      	adds	r7, #16
 8113af8:	46bd      	mov	sp, r7
 8113afa:	bd80      	pop	{r7, pc}
 8113afc:	0811d7d8 	.word	0x0811d7d8
 8113b00:	0811d8c8 	.word	0x0811d8c8
 8113b04:	0811d86c 	.word	0x0811d86c

08113b08 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8113b08:	b580      	push	{r7, lr}
 8113b0a:	b082      	sub	sp, #8
 8113b0c:	af00      	add	r7, sp, #0
 8113b0e:	6078      	str	r0, [r7, #4]
 8113b10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8113b12:	687b      	ldr	r3, [r7, #4]
 8113b14:	2b00      	cmp	r3, #0
 8113b16:	d106      	bne.n	8113b26 <memp_free_pool+0x1e>
 8113b18:	4b0a      	ldr	r3, [pc, #40]	@ (8113b44 <memp_free_pool+0x3c>)
 8113b1a:	f240 1295 	movw	r2, #405	@ 0x195
 8113b1e:	490a      	ldr	r1, [pc, #40]	@ (8113b48 <memp_free_pool+0x40>)
 8113b20:	480a      	ldr	r0, [pc, #40]	@ (8113b4c <memp_free_pool+0x44>)
 8113b22:	f008 f97b 	bl	811be1c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8113b26:	687b      	ldr	r3, [r7, #4]
 8113b28:	2b00      	cmp	r3, #0
 8113b2a:	d007      	beq.n	8113b3c <memp_free_pool+0x34>
 8113b2c:	683b      	ldr	r3, [r7, #0]
 8113b2e:	2b00      	cmp	r3, #0
 8113b30:	d004      	beq.n	8113b3c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8113b32:	6839      	ldr	r1, [r7, #0]
 8113b34:	6878      	ldr	r0, [r7, #4]
 8113b36:	f7ff ffbb 	bl	8113ab0 <do_memp_free_pool>
 8113b3a:	e000      	b.n	8113b3e <memp_free_pool+0x36>
    return;
 8113b3c:	bf00      	nop
}
 8113b3e:	3708      	adds	r7, #8
 8113b40:	46bd      	mov	sp, r7
 8113b42:	bd80      	pop	{r7, pc}
 8113b44:	0811d7d8 	.word	0x0811d7d8
 8113b48:	0811d894 	.word	0x0811d894
 8113b4c:	0811d86c 	.word	0x0811d86c

08113b50 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8113b50:	b580      	push	{r7, lr}
 8113b52:	b082      	sub	sp, #8
 8113b54:	af00      	add	r7, sp, #0
 8113b56:	4603      	mov	r3, r0
 8113b58:	6039      	str	r1, [r7, #0]
 8113b5a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8113b5c:	79fb      	ldrb	r3, [r7, #7]
 8113b5e:	2b0c      	cmp	r3, #12
 8113b60:	d907      	bls.n	8113b72 <memp_free+0x22>
 8113b62:	4b0c      	ldr	r3, [pc, #48]	@ (8113b94 <memp_free+0x44>)
 8113b64:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8113b68:	490b      	ldr	r1, [pc, #44]	@ (8113b98 <memp_free+0x48>)
 8113b6a:	480c      	ldr	r0, [pc, #48]	@ (8113b9c <memp_free+0x4c>)
 8113b6c:	f008 f956 	bl	811be1c <iprintf>
 8113b70:	e00c      	b.n	8113b8c <memp_free+0x3c>

  if (mem == NULL) {
 8113b72:	683b      	ldr	r3, [r7, #0]
 8113b74:	2b00      	cmp	r3, #0
 8113b76:	d008      	beq.n	8113b8a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8113b78:	79fb      	ldrb	r3, [r7, #7]
 8113b7a:	4a09      	ldr	r2, [pc, #36]	@ (8113ba0 <memp_free+0x50>)
 8113b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8113b80:	6839      	ldr	r1, [r7, #0]
 8113b82:	4618      	mov	r0, r3
 8113b84:	f7ff ff94 	bl	8113ab0 <do_memp_free_pool>
 8113b88:	e000      	b.n	8113b8c <memp_free+0x3c>
    return;
 8113b8a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8113b8c:	3708      	adds	r7, #8
 8113b8e:	46bd      	mov	sp, r7
 8113b90:	bd80      	pop	{r7, pc}
 8113b92:	bf00      	nop
 8113b94:	0811d7d8 	.word	0x0811d7d8
 8113b98:	0811d8e8 	.word	0x0811d8e8
 8113b9c:	0811d86c 	.word	0x0811d86c
 8113ba0:	0811fcc0 	.word	0x0811fcc0

08113ba4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8113ba4:	b480      	push	{r7}
 8113ba6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8113ba8:	bf00      	nop
 8113baa:	46bd      	mov	sp, r7
 8113bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113bb0:	4770      	bx	lr
	...

08113bb4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8113bb4:	b580      	push	{r7, lr}
 8113bb6:	b086      	sub	sp, #24
 8113bb8:	af00      	add	r7, sp, #0
 8113bba:	60f8      	str	r0, [r7, #12]
 8113bbc:	60b9      	str	r1, [r7, #8]
 8113bbe:	607a      	str	r2, [r7, #4]
 8113bc0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8113bc2:	68fb      	ldr	r3, [r7, #12]
 8113bc4:	2b00      	cmp	r3, #0
 8113bc6:	d108      	bne.n	8113bda <netif_add+0x26>
 8113bc8:	4b57      	ldr	r3, [pc, #348]	@ (8113d28 <netif_add+0x174>)
 8113bca:	f240 1227 	movw	r2, #295	@ 0x127
 8113bce:	4957      	ldr	r1, [pc, #348]	@ (8113d2c <netif_add+0x178>)
 8113bd0:	4857      	ldr	r0, [pc, #348]	@ (8113d30 <netif_add+0x17c>)
 8113bd2:	f008 f923 	bl	811be1c <iprintf>
 8113bd6:	2300      	movs	r3, #0
 8113bd8:	e0a2      	b.n	8113d20 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8113bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113bdc:	2b00      	cmp	r3, #0
 8113bde:	d108      	bne.n	8113bf2 <netif_add+0x3e>
 8113be0:	4b51      	ldr	r3, [pc, #324]	@ (8113d28 <netif_add+0x174>)
 8113be2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8113be6:	4953      	ldr	r1, [pc, #332]	@ (8113d34 <netif_add+0x180>)
 8113be8:	4851      	ldr	r0, [pc, #324]	@ (8113d30 <netif_add+0x17c>)
 8113bea:	f008 f917 	bl	811be1c <iprintf>
 8113bee:	2300      	movs	r3, #0
 8113bf0:	e096      	b.n	8113d20 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8113bf2:	68bb      	ldr	r3, [r7, #8]
 8113bf4:	2b00      	cmp	r3, #0
 8113bf6:	d101      	bne.n	8113bfc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8113bf8:	4b4f      	ldr	r3, [pc, #316]	@ (8113d38 <netif_add+0x184>)
 8113bfa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8113bfc:	687b      	ldr	r3, [r7, #4]
 8113bfe:	2b00      	cmp	r3, #0
 8113c00:	d101      	bne.n	8113c06 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8113c02:	4b4d      	ldr	r3, [pc, #308]	@ (8113d38 <netif_add+0x184>)
 8113c04:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8113c06:	683b      	ldr	r3, [r7, #0]
 8113c08:	2b00      	cmp	r3, #0
 8113c0a:	d101      	bne.n	8113c10 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8113c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8113d38 <netif_add+0x184>)
 8113c0e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8113c10:	68fb      	ldr	r3, [r7, #12]
 8113c12:	2200      	movs	r2, #0
 8113c14:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8113c16:	68fb      	ldr	r3, [r7, #12]
 8113c18:	2200      	movs	r2, #0
 8113c1a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8113c1c:	68fb      	ldr	r3, [r7, #12]
 8113c1e:	2200      	movs	r2, #0
 8113c20:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8113c22:	68fb      	ldr	r3, [r7, #12]
 8113c24:	4a45      	ldr	r2, [pc, #276]	@ (8113d3c <netif_add+0x188>)
 8113c26:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8113c28:	68fb      	ldr	r3, [r7, #12]
 8113c2a:	2200      	movs	r2, #0
 8113c2c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8113c2e:	68fb      	ldr	r3, [r7, #12]
 8113c30:	2200      	movs	r2, #0
 8113c32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8113c36:	68fb      	ldr	r3, [r7, #12]
 8113c38:	2200      	movs	r2, #0
 8113c3a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8113c3c:	68fb      	ldr	r3, [r7, #12]
 8113c3e:	6a3a      	ldr	r2, [r7, #32]
 8113c40:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8113c42:	4b3f      	ldr	r3, [pc, #252]	@ (8113d40 <netif_add+0x18c>)
 8113c44:	781a      	ldrb	r2, [r3, #0]
 8113c46:	68fb      	ldr	r3, [r7, #12]
 8113c48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8113c4c:	68fb      	ldr	r3, [r7, #12]
 8113c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8113c50:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8113c52:	683b      	ldr	r3, [r7, #0]
 8113c54:	687a      	ldr	r2, [r7, #4]
 8113c56:	68b9      	ldr	r1, [r7, #8]
 8113c58:	68f8      	ldr	r0, [r7, #12]
 8113c5a:	f000 f913 	bl	8113e84 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8113c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113c60:	68f8      	ldr	r0, [r7, #12]
 8113c62:	4798      	blx	r3
 8113c64:	4603      	mov	r3, r0
 8113c66:	2b00      	cmp	r3, #0
 8113c68:	d001      	beq.n	8113c6e <netif_add+0xba>
    return NULL;
 8113c6a:	2300      	movs	r3, #0
 8113c6c:	e058      	b.n	8113d20 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8113c6e:	68fb      	ldr	r3, [r7, #12]
 8113c70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8113c74:	2bff      	cmp	r3, #255	@ 0xff
 8113c76:	d103      	bne.n	8113c80 <netif_add+0xcc>
        netif->num = 0;
 8113c78:	68fb      	ldr	r3, [r7, #12]
 8113c7a:	2200      	movs	r2, #0
 8113c7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8113c80:	2300      	movs	r3, #0
 8113c82:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8113c84:	4b2f      	ldr	r3, [pc, #188]	@ (8113d44 <netif_add+0x190>)
 8113c86:	681b      	ldr	r3, [r3, #0]
 8113c88:	617b      	str	r3, [r7, #20]
 8113c8a:	e02b      	b.n	8113ce4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8113c8c:	697a      	ldr	r2, [r7, #20]
 8113c8e:	68fb      	ldr	r3, [r7, #12]
 8113c90:	429a      	cmp	r2, r3
 8113c92:	d106      	bne.n	8113ca2 <netif_add+0xee>
 8113c94:	4b24      	ldr	r3, [pc, #144]	@ (8113d28 <netif_add+0x174>)
 8113c96:	f240 128b 	movw	r2, #395	@ 0x18b
 8113c9a:	492b      	ldr	r1, [pc, #172]	@ (8113d48 <netif_add+0x194>)
 8113c9c:	4824      	ldr	r0, [pc, #144]	@ (8113d30 <netif_add+0x17c>)
 8113c9e:	f008 f8bd 	bl	811be1c <iprintf>
        num_netifs++;
 8113ca2:	693b      	ldr	r3, [r7, #16]
 8113ca4:	3301      	adds	r3, #1
 8113ca6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8113ca8:	693b      	ldr	r3, [r7, #16]
 8113caa:	2bff      	cmp	r3, #255	@ 0xff
 8113cac:	dd06      	ble.n	8113cbc <netif_add+0x108>
 8113cae:	4b1e      	ldr	r3, [pc, #120]	@ (8113d28 <netif_add+0x174>)
 8113cb0:	f240 128d 	movw	r2, #397	@ 0x18d
 8113cb4:	4925      	ldr	r1, [pc, #148]	@ (8113d4c <netif_add+0x198>)
 8113cb6:	481e      	ldr	r0, [pc, #120]	@ (8113d30 <netif_add+0x17c>)
 8113cb8:	f008 f8b0 	bl	811be1c <iprintf>
        if (netif2->num == netif->num) {
 8113cbc:	697b      	ldr	r3, [r7, #20]
 8113cbe:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8113cc2:	68fb      	ldr	r3, [r7, #12]
 8113cc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8113cc8:	429a      	cmp	r2, r3
 8113cca:	d108      	bne.n	8113cde <netif_add+0x12a>
          netif->num++;
 8113ccc:	68fb      	ldr	r3, [r7, #12]
 8113cce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8113cd2:	3301      	adds	r3, #1
 8113cd4:	b2da      	uxtb	r2, r3
 8113cd6:	68fb      	ldr	r3, [r7, #12]
 8113cd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8113cdc:	e005      	b.n	8113cea <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8113cde:	697b      	ldr	r3, [r7, #20]
 8113ce0:	681b      	ldr	r3, [r3, #0]
 8113ce2:	617b      	str	r3, [r7, #20]
 8113ce4:	697b      	ldr	r3, [r7, #20]
 8113ce6:	2b00      	cmp	r3, #0
 8113ce8:	d1d0      	bne.n	8113c8c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8113cea:	697b      	ldr	r3, [r7, #20]
 8113cec:	2b00      	cmp	r3, #0
 8113cee:	d1be      	bne.n	8113c6e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8113cf0:	68fb      	ldr	r3, [r7, #12]
 8113cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8113cf6:	2bfe      	cmp	r3, #254	@ 0xfe
 8113cf8:	d103      	bne.n	8113d02 <netif_add+0x14e>
    netif_num = 0;
 8113cfa:	4b11      	ldr	r3, [pc, #68]	@ (8113d40 <netif_add+0x18c>)
 8113cfc:	2200      	movs	r2, #0
 8113cfe:	701a      	strb	r2, [r3, #0]
 8113d00:	e006      	b.n	8113d10 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8113d02:	68fb      	ldr	r3, [r7, #12]
 8113d04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8113d08:	3301      	adds	r3, #1
 8113d0a:	b2da      	uxtb	r2, r3
 8113d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8113d40 <netif_add+0x18c>)
 8113d0e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8113d10:	4b0c      	ldr	r3, [pc, #48]	@ (8113d44 <netif_add+0x190>)
 8113d12:	681a      	ldr	r2, [r3, #0]
 8113d14:	68fb      	ldr	r3, [r7, #12]
 8113d16:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8113d18:	4a0a      	ldr	r2, [pc, #40]	@ (8113d44 <netif_add+0x190>)
 8113d1a:	68fb      	ldr	r3, [r7, #12]
 8113d1c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8113d1e:	68fb      	ldr	r3, [r7, #12]
}
 8113d20:	4618      	mov	r0, r3
 8113d22:	3718      	adds	r7, #24
 8113d24:	46bd      	mov	sp, r7
 8113d26:	bd80      	pop	{r7, pc}
 8113d28:	0811d904 	.word	0x0811d904
 8113d2c:	0811d9d4 	.word	0x0811d9d4
 8113d30:	0811d990 	.word	0x0811d990
 8113d34:	0811d9f0 	.word	0x0811d9f0
 8113d38:	0811fc20 	.word	0x0811fc20
 8113d3c:	0811415f 	.word	0x0811415f
 8113d40:	10011d0c 	.word	0x10011d0c
 8113d44:	10011d04 	.word	0x10011d04
 8113d48:	0811da14 	.word	0x0811da14
 8113d4c:	0811da28 	.word	0x0811da28

08113d50 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8113d50:	b580      	push	{r7, lr}
 8113d52:	b082      	sub	sp, #8
 8113d54:	af00      	add	r7, sp, #0
 8113d56:	6078      	str	r0, [r7, #4]
 8113d58:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8113d5a:	6839      	ldr	r1, [r7, #0]
 8113d5c:	6878      	ldr	r0, [r7, #4]
 8113d5e:	f002 fe4f 	bl	8116a00 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8113d62:	6839      	ldr	r1, [r7, #0]
 8113d64:	6878      	ldr	r0, [r7, #4]
 8113d66:	f007 fd59 	bl	811b81c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8113d6a:	bf00      	nop
 8113d6c:	3708      	adds	r7, #8
 8113d6e:	46bd      	mov	sp, r7
 8113d70:	bd80      	pop	{r7, pc}
	...

08113d74 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8113d74:	b580      	push	{r7, lr}
 8113d76:	b086      	sub	sp, #24
 8113d78:	af00      	add	r7, sp, #0
 8113d7a:	60f8      	str	r0, [r7, #12]
 8113d7c:	60b9      	str	r1, [r7, #8]
 8113d7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8113d80:	68bb      	ldr	r3, [r7, #8]
 8113d82:	2b00      	cmp	r3, #0
 8113d84:	d106      	bne.n	8113d94 <netif_do_set_ipaddr+0x20>
 8113d86:	4b1d      	ldr	r3, [pc, #116]	@ (8113dfc <netif_do_set_ipaddr+0x88>)
 8113d88:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8113d8c:	491c      	ldr	r1, [pc, #112]	@ (8113e00 <netif_do_set_ipaddr+0x8c>)
 8113d8e:	481d      	ldr	r0, [pc, #116]	@ (8113e04 <netif_do_set_ipaddr+0x90>)
 8113d90:	f008 f844 	bl	811be1c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8113d94:	687b      	ldr	r3, [r7, #4]
 8113d96:	2b00      	cmp	r3, #0
 8113d98:	d106      	bne.n	8113da8 <netif_do_set_ipaddr+0x34>
 8113d9a:	4b18      	ldr	r3, [pc, #96]	@ (8113dfc <netif_do_set_ipaddr+0x88>)
 8113d9c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8113da0:	4917      	ldr	r1, [pc, #92]	@ (8113e00 <netif_do_set_ipaddr+0x8c>)
 8113da2:	4818      	ldr	r0, [pc, #96]	@ (8113e04 <netif_do_set_ipaddr+0x90>)
 8113da4:	f008 f83a 	bl	811be1c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8113da8:	68bb      	ldr	r3, [r7, #8]
 8113daa:	681a      	ldr	r2, [r3, #0]
 8113dac:	68fb      	ldr	r3, [r7, #12]
 8113dae:	3304      	adds	r3, #4
 8113db0:	681b      	ldr	r3, [r3, #0]
 8113db2:	429a      	cmp	r2, r3
 8113db4:	d01c      	beq.n	8113df0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8113db6:	68bb      	ldr	r3, [r7, #8]
 8113db8:	681b      	ldr	r3, [r3, #0]
 8113dba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8113dbc:	68fb      	ldr	r3, [r7, #12]
 8113dbe:	3304      	adds	r3, #4
 8113dc0:	681a      	ldr	r2, [r3, #0]
 8113dc2:	687b      	ldr	r3, [r7, #4]
 8113dc4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8113dc6:	f107 0314 	add.w	r3, r7, #20
 8113dca:	4619      	mov	r1, r3
 8113dcc:	6878      	ldr	r0, [r7, #4]
 8113dce:	f7ff ffbf 	bl	8113d50 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8113dd2:	68bb      	ldr	r3, [r7, #8]
 8113dd4:	2b00      	cmp	r3, #0
 8113dd6:	d002      	beq.n	8113dde <netif_do_set_ipaddr+0x6a>
 8113dd8:	68bb      	ldr	r3, [r7, #8]
 8113dda:	681b      	ldr	r3, [r3, #0]
 8113ddc:	e000      	b.n	8113de0 <netif_do_set_ipaddr+0x6c>
 8113dde:	2300      	movs	r3, #0
 8113de0:	68fa      	ldr	r2, [r7, #12]
 8113de2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8113de4:	2101      	movs	r1, #1
 8113de6:	68f8      	ldr	r0, [r7, #12]
 8113de8:	f000 f8d2 	bl	8113f90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8113dec:	2301      	movs	r3, #1
 8113dee:	e000      	b.n	8113df2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8113df0:	2300      	movs	r3, #0
}
 8113df2:	4618      	mov	r0, r3
 8113df4:	3718      	adds	r7, #24
 8113df6:	46bd      	mov	sp, r7
 8113df8:	bd80      	pop	{r7, pc}
 8113dfa:	bf00      	nop
 8113dfc:	0811d904 	.word	0x0811d904
 8113e00:	0811da58 	.word	0x0811da58
 8113e04:	0811d990 	.word	0x0811d990

08113e08 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8113e08:	b480      	push	{r7}
 8113e0a:	b085      	sub	sp, #20
 8113e0c:	af00      	add	r7, sp, #0
 8113e0e:	60f8      	str	r0, [r7, #12]
 8113e10:	60b9      	str	r1, [r7, #8]
 8113e12:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8113e14:	68bb      	ldr	r3, [r7, #8]
 8113e16:	681a      	ldr	r2, [r3, #0]
 8113e18:	68fb      	ldr	r3, [r7, #12]
 8113e1a:	3308      	adds	r3, #8
 8113e1c:	681b      	ldr	r3, [r3, #0]
 8113e1e:	429a      	cmp	r2, r3
 8113e20:	d00a      	beq.n	8113e38 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8113e22:	68bb      	ldr	r3, [r7, #8]
 8113e24:	2b00      	cmp	r3, #0
 8113e26:	d002      	beq.n	8113e2e <netif_do_set_netmask+0x26>
 8113e28:	68bb      	ldr	r3, [r7, #8]
 8113e2a:	681b      	ldr	r3, [r3, #0]
 8113e2c:	e000      	b.n	8113e30 <netif_do_set_netmask+0x28>
 8113e2e:	2300      	movs	r3, #0
 8113e30:	68fa      	ldr	r2, [r7, #12]
 8113e32:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8113e34:	2301      	movs	r3, #1
 8113e36:	e000      	b.n	8113e3a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8113e38:	2300      	movs	r3, #0
}
 8113e3a:	4618      	mov	r0, r3
 8113e3c:	3714      	adds	r7, #20
 8113e3e:	46bd      	mov	sp, r7
 8113e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113e44:	4770      	bx	lr

08113e46 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8113e46:	b480      	push	{r7}
 8113e48:	b085      	sub	sp, #20
 8113e4a:	af00      	add	r7, sp, #0
 8113e4c:	60f8      	str	r0, [r7, #12]
 8113e4e:	60b9      	str	r1, [r7, #8]
 8113e50:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8113e52:	68bb      	ldr	r3, [r7, #8]
 8113e54:	681a      	ldr	r2, [r3, #0]
 8113e56:	68fb      	ldr	r3, [r7, #12]
 8113e58:	330c      	adds	r3, #12
 8113e5a:	681b      	ldr	r3, [r3, #0]
 8113e5c:	429a      	cmp	r2, r3
 8113e5e:	d00a      	beq.n	8113e76 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8113e60:	68bb      	ldr	r3, [r7, #8]
 8113e62:	2b00      	cmp	r3, #0
 8113e64:	d002      	beq.n	8113e6c <netif_do_set_gw+0x26>
 8113e66:	68bb      	ldr	r3, [r7, #8]
 8113e68:	681b      	ldr	r3, [r3, #0]
 8113e6a:	e000      	b.n	8113e6e <netif_do_set_gw+0x28>
 8113e6c:	2300      	movs	r3, #0
 8113e6e:	68fa      	ldr	r2, [r7, #12]
 8113e70:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8113e72:	2301      	movs	r3, #1
 8113e74:	e000      	b.n	8113e78 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8113e76:	2300      	movs	r3, #0
}
 8113e78:	4618      	mov	r0, r3
 8113e7a:	3714      	adds	r7, #20
 8113e7c:	46bd      	mov	sp, r7
 8113e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113e82:	4770      	bx	lr

08113e84 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8113e84:	b580      	push	{r7, lr}
 8113e86:	b088      	sub	sp, #32
 8113e88:	af00      	add	r7, sp, #0
 8113e8a:	60f8      	str	r0, [r7, #12]
 8113e8c:	60b9      	str	r1, [r7, #8]
 8113e8e:	607a      	str	r2, [r7, #4]
 8113e90:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8113e92:	2300      	movs	r3, #0
 8113e94:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8113e96:	2300      	movs	r3, #0
 8113e98:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8113e9a:	68bb      	ldr	r3, [r7, #8]
 8113e9c:	2b00      	cmp	r3, #0
 8113e9e:	d101      	bne.n	8113ea4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8113ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8113f14 <netif_set_addr+0x90>)
 8113ea2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8113ea4:	687b      	ldr	r3, [r7, #4]
 8113ea6:	2b00      	cmp	r3, #0
 8113ea8:	d101      	bne.n	8113eae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8113eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8113f14 <netif_set_addr+0x90>)
 8113eac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8113eae:	683b      	ldr	r3, [r7, #0]
 8113eb0:	2b00      	cmp	r3, #0
 8113eb2:	d101      	bne.n	8113eb8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8113eb4:	4b17      	ldr	r3, [pc, #92]	@ (8113f14 <netif_set_addr+0x90>)
 8113eb6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8113eb8:	68bb      	ldr	r3, [r7, #8]
 8113eba:	2b00      	cmp	r3, #0
 8113ebc:	d003      	beq.n	8113ec6 <netif_set_addr+0x42>
 8113ebe:	68bb      	ldr	r3, [r7, #8]
 8113ec0:	681b      	ldr	r3, [r3, #0]
 8113ec2:	2b00      	cmp	r3, #0
 8113ec4:	d101      	bne.n	8113eca <netif_set_addr+0x46>
 8113ec6:	2301      	movs	r3, #1
 8113ec8:	e000      	b.n	8113ecc <netif_set_addr+0x48>
 8113eca:	2300      	movs	r3, #0
 8113ecc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8113ece:	697b      	ldr	r3, [r7, #20]
 8113ed0:	2b00      	cmp	r3, #0
 8113ed2:	d006      	beq.n	8113ee2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8113ed4:	f107 0310 	add.w	r3, r7, #16
 8113ed8:	461a      	mov	r2, r3
 8113eda:	68b9      	ldr	r1, [r7, #8]
 8113edc:	68f8      	ldr	r0, [r7, #12]
 8113ede:	f7ff ff49 	bl	8113d74 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8113ee2:	69fa      	ldr	r2, [r7, #28]
 8113ee4:	6879      	ldr	r1, [r7, #4]
 8113ee6:	68f8      	ldr	r0, [r7, #12]
 8113ee8:	f7ff ff8e 	bl	8113e08 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8113eec:	69ba      	ldr	r2, [r7, #24]
 8113eee:	6839      	ldr	r1, [r7, #0]
 8113ef0:	68f8      	ldr	r0, [r7, #12]
 8113ef2:	f7ff ffa8 	bl	8113e46 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8113ef6:	697b      	ldr	r3, [r7, #20]
 8113ef8:	2b00      	cmp	r3, #0
 8113efa:	d106      	bne.n	8113f0a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8113efc:	f107 0310 	add.w	r3, r7, #16
 8113f00:	461a      	mov	r2, r3
 8113f02:	68b9      	ldr	r1, [r7, #8]
 8113f04:	68f8      	ldr	r0, [r7, #12]
 8113f06:	f7ff ff35 	bl	8113d74 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8113f0a:	bf00      	nop
 8113f0c:	3720      	adds	r7, #32
 8113f0e:	46bd      	mov	sp, r7
 8113f10:	bd80      	pop	{r7, pc}
 8113f12:	bf00      	nop
 8113f14:	0811fc20 	.word	0x0811fc20

08113f18 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8113f18:	b480      	push	{r7}
 8113f1a:	b083      	sub	sp, #12
 8113f1c:	af00      	add	r7, sp, #0
 8113f1e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8113f20:	4a04      	ldr	r2, [pc, #16]	@ (8113f34 <netif_set_default+0x1c>)
 8113f22:	687b      	ldr	r3, [r7, #4]
 8113f24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8113f26:	bf00      	nop
 8113f28:	370c      	adds	r7, #12
 8113f2a:	46bd      	mov	sp, r7
 8113f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113f30:	4770      	bx	lr
 8113f32:	bf00      	nop
 8113f34:	10011d08 	.word	0x10011d08

08113f38 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8113f38:	b580      	push	{r7, lr}
 8113f3a:	b082      	sub	sp, #8
 8113f3c:	af00      	add	r7, sp, #0
 8113f3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8113f40:	687b      	ldr	r3, [r7, #4]
 8113f42:	2b00      	cmp	r3, #0
 8113f44:	d107      	bne.n	8113f56 <netif_set_up+0x1e>
 8113f46:	4b0f      	ldr	r3, [pc, #60]	@ (8113f84 <netif_set_up+0x4c>)
 8113f48:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8113f4c:	490e      	ldr	r1, [pc, #56]	@ (8113f88 <netif_set_up+0x50>)
 8113f4e:	480f      	ldr	r0, [pc, #60]	@ (8113f8c <netif_set_up+0x54>)
 8113f50:	f007 ff64 	bl	811be1c <iprintf>
 8113f54:	e013      	b.n	8113f7e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8113f56:	687b      	ldr	r3, [r7, #4]
 8113f58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113f5c:	f003 0301 	and.w	r3, r3, #1
 8113f60:	2b00      	cmp	r3, #0
 8113f62:	d10c      	bne.n	8113f7e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8113f64:	687b      	ldr	r3, [r7, #4]
 8113f66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113f6a:	f043 0301 	orr.w	r3, r3, #1
 8113f6e:	b2da      	uxtb	r2, r3
 8113f70:	687b      	ldr	r3, [r7, #4]
 8113f72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8113f76:	2103      	movs	r1, #3
 8113f78:	6878      	ldr	r0, [r7, #4]
 8113f7a:	f000 f809 	bl	8113f90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8113f7e:	3708      	adds	r7, #8
 8113f80:	46bd      	mov	sp, r7
 8113f82:	bd80      	pop	{r7, pc}
 8113f84:	0811d904 	.word	0x0811d904
 8113f88:	0811dac8 	.word	0x0811dac8
 8113f8c:	0811d990 	.word	0x0811d990

08113f90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8113f90:	b580      	push	{r7, lr}
 8113f92:	b082      	sub	sp, #8
 8113f94:	af00      	add	r7, sp, #0
 8113f96:	6078      	str	r0, [r7, #4]
 8113f98:	460b      	mov	r3, r1
 8113f9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8113f9c:	687b      	ldr	r3, [r7, #4]
 8113f9e:	2b00      	cmp	r3, #0
 8113fa0:	d106      	bne.n	8113fb0 <netif_issue_reports+0x20>
 8113fa2:	4b18      	ldr	r3, [pc, #96]	@ (8114004 <netif_issue_reports+0x74>)
 8113fa4:	f240 326d 	movw	r2, #877	@ 0x36d
 8113fa8:	4917      	ldr	r1, [pc, #92]	@ (8114008 <netif_issue_reports+0x78>)
 8113faa:	4818      	ldr	r0, [pc, #96]	@ (811400c <netif_issue_reports+0x7c>)
 8113fac:	f007 ff36 	bl	811be1c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8113fb0:	687b      	ldr	r3, [r7, #4]
 8113fb2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113fb6:	f003 0304 	and.w	r3, r3, #4
 8113fba:	2b00      	cmp	r3, #0
 8113fbc:	d01e      	beq.n	8113ffc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8113fbe:	687b      	ldr	r3, [r7, #4]
 8113fc0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113fc4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8113fc8:	2b00      	cmp	r3, #0
 8113fca:	d017      	beq.n	8113ffc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8113fcc:	78fb      	ldrb	r3, [r7, #3]
 8113fce:	f003 0301 	and.w	r3, r3, #1
 8113fd2:	2b00      	cmp	r3, #0
 8113fd4:	d013      	beq.n	8113ffe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8113fd6:	687b      	ldr	r3, [r7, #4]
 8113fd8:	3304      	adds	r3, #4
 8113fda:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8113fdc:	2b00      	cmp	r3, #0
 8113fde:	d00e      	beq.n	8113ffe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8113fe0:	687b      	ldr	r3, [r7, #4]
 8113fe2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113fe6:	f003 0308 	and.w	r3, r3, #8
 8113fea:	2b00      	cmp	r3, #0
 8113fec:	d007      	beq.n	8113ffe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8113fee:	687b      	ldr	r3, [r7, #4]
 8113ff0:	3304      	adds	r3, #4
 8113ff2:	4619      	mov	r1, r3
 8113ff4:	6878      	ldr	r0, [r7, #4]
 8113ff6:	f7fd fc31 	bl	811185c <etharp_request>
 8113ffa:	e000      	b.n	8113ffe <netif_issue_reports+0x6e>
    return;
 8113ffc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8113ffe:	3708      	adds	r7, #8
 8114000:	46bd      	mov	sp, r7
 8114002:	bd80      	pop	{r7, pc}
 8114004:	0811d904 	.word	0x0811d904
 8114008:	0811dae4 	.word	0x0811dae4
 811400c:	0811d990 	.word	0x0811d990

08114010 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8114010:	b580      	push	{r7, lr}
 8114012:	b082      	sub	sp, #8
 8114014:	af00      	add	r7, sp, #0
 8114016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8114018:	687b      	ldr	r3, [r7, #4]
 811401a:	2b00      	cmp	r3, #0
 811401c:	d107      	bne.n	811402e <netif_set_down+0x1e>
 811401e:	4b12      	ldr	r3, [pc, #72]	@ (8114068 <netif_set_down+0x58>)
 8114020:	f240 329b 	movw	r2, #923	@ 0x39b
 8114024:	4911      	ldr	r1, [pc, #68]	@ (811406c <netif_set_down+0x5c>)
 8114026:	4812      	ldr	r0, [pc, #72]	@ (8114070 <netif_set_down+0x60>)
 8114028:	f007 fef8 	bl	811be1c <iprintf>
 811402c:	e019      	b.n	8114062 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 811402e:	687b      	ldr	r3, [r7, #4]
 8114030:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114034:	f003 0301 	and.w	r3, r3, #1
 8114038:	2b00      	cmp	r3, #0
 811403a:	d012      	beq.n	8114062 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 811403c:	687b      	ldr	r3, [r7, #4]
 811403e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114042:	f023 0301 	bic.w	r3, r3, #1
 8114046:	b2da      	uxtb	r2, r3
 8114048:	687b      	ldr	r3, [r7, #4]
 811404a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 811404e:	687b      	ldr	r3, [r7, #4]
 8114050:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114054:	f003 0308 	and.w	r3, r3, #8
 8114058:	2b00      	cmp	r3, #0
 811405a:	d002      	beq.n	8114062 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 811405c:	6878      	ldr	r0, [r7, #4]
 811405e:	f7fc ffbb 	bl	8110fd8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8114062:	3708      	adds	r7, #8
 8114064:	46bd      	mov	sp, r7
 8114066:	bd80      	pop	{r7, pc}
 8114068:	0811d904 	.word	0x0811d904
 811406c:	0811db08 	.word	0x0811db08
 8114070:	0811d990 	.word	0x0811d990

08114074 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8114074:	b580      	push	{r7, lr}
 8114076:	b082      	sub	sp, #8
 8114078:	af00      	add	r7, sp, #0
 811407a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 811407c:	687b      	ldr	r3, [r7, #4]
 811407e:	2b00      	cmp	r3, #0
 8114080:	d107      	bne.n	8114092 <netif_set_link_up+0x1e>
 8114082:	4b13      	ldr	r3, [pc, #76]	@ (81140d0 <netif_set_link_up+0x5c>)
 8114084:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8114088:	4912      	ldr	r1, [pc, #72]	@ (81140d4 <netif_set_link_up+0x60>)
 811408a:	4813      	ldr	r0, [pc, #76]	@ (81140d8 <netif_set_link_up+0x64>)
 811408c:	f007 fec6 	bl	811be1c <iprintf>
 8114090:	e01b      	b.n	81140ca <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8114092:	687b      	ldr	r3, [r7, #4]
 8114094:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114098:	f003 0304 	and.w	r3, r3, #4
 811409c:	2b00      	cmp	r3, #0
 811409e:	d114      	bne.n	81140ca <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 81140a0:	687b      	ldr	r3, [r7, #4]
 81140a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81140a6:	f043 0304 	orr.w	r3, r3, #4
 81140aa:	b2da      	uxtb	r2, r3
 81140ac:	687b      	ldr	r3, [r7, #4]
 81140ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 81140b2:	2103      	movs	r1, #3
 81140b4:	6878      	ldr	r0, [r7, #4]
 81140b6:	f7ff ff6b 	bl	8113f90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 81140ba:	687b      	ldr	r3, [r7, #4]
 81140bc:	69db      	ldr	r3, [r3, #28]
 81140be:	2b00      	cmp	r3, #0
 81140c0:	d003      	beq.n	81140ca <netif_set_link_up+0x56>
 81140c2:	687b      	ldr	r3, [r7, #4]
 81140c4:	69db      	ldr	r3, [r3, #28]
 81140c6:	6878      	ldr	r0, [r7, #4]
 81140c8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 81140ca:	3708      	adds	r7, #8
 81140cc:	46bd      	mov	sp, r7
 81140ce:	bd80      	pop	{r7, pc}
 81140d0:	0811d904 	.word	0x0811d904
 81140d4:	0811db28 	.word	0x0811db28
 81140d8:	0811d990 	.word	0x0811d990

081140dc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 81140dc:	b580      	push	{r7, lr}
 81140de:	b082      	sub	sp, #8
 81140e0:	af00      	add	r7, sp, #0
 81140e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 81140e4:	687b      	ldr	r3, [r7, #4]
 81140e6:	2b00      	cmp	r3, #0
 81140e8:	d107      	bne.n	81140fa <netif_set_link_down+0x1e>
 81140ea:	4b11      	ldr	r3, [pc, #68]	@ (8114130 <netif_set_link_down+0x54>)
 81140ec:	f240 4206 	movw	r2, #1030	@ 0x406
 81140f0:	4910      	ldr	r1, [pc, #64]	@ (8114134 <netif_set_link_down+0x58>)
 81140f2:	4811      	ldr	r0, [pc, #68]	@ (8114138 <netif_set_link_down+0x5c>)
 81140f4:	f007 fe92 	bl	811be1c <iprintf>
 81140f8:	e017      	b.n	811412a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 81140fa:	687b      	ldr	r3, [r7, #4]
 81140fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114100:	f003 0304 	and.w	r3, r3, #4
 8114104:	2b00      	cmp	r3, #0
 8114106:	d010      	beq.n	811412a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8114108:	687b      	ldr	r3, [r7, #4]
 811410a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811410e:	f023 0304 	bic.w	r3, r3, #4
 8114112:	b2da      	uxtb	r2, r3
 8114114:	687b      	ldr	r3, [r7, #4]
 8114116:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 811411a:	687b      	ldr	r3, [r7, #4]
 811411c:	69db      	ldr	r3, [r3, #28]
 811411e:	2b00      	cmp	r3, #0
 8114120:	d003      	beq.n	811412a <netif_set_link_down+0x4e>
 8114122:	687b      	ldr	r3, [r7, #4]
 8114124:	69db      	ldr	r3, [r3, #28]
 8114126:	6878      	ldr	r0, [r7, #4]
 8114128:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811412a:	3708      	adds	r7, #8
 811412c:	46bd      	mov	sp, r7
 811412e:	bd80      	pop	{r7, pc}
 8114130:	0811d904 	.word	0x0811d904
 8114134:	0811db4c 	.word	0x0811db4c
 8114138:	0811d990 	.word	0x0811d990

0811413c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 811413c:	b480      	push	{r7}
 811413e:	b083      	sub	sp, #12
 8114140:	af00      	add	r7, sp, #0
 8114142:	6078      	str	r0, [r7, #4]
 8114144:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8114146:	687b      	ldr	r3, [r7, #4]
 8114148:	2b00      	cmp	r3, #0
 811414a:	d002      	beq.n	8114152 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 811414c:	687b      	ldr	r3, [r7, #4]
 811414e:	683a      	ldr	r2, [r7, #0]
 8114150:	61da      	str	r2, [r3, #28]
  }
}
 8114152:	bf00      	nop
 8114154:	370c      	adds	r7, #12
 8114156:	46bd      	mov	sp, r7
 8114158:	f85d 7b04 	ldr.w	r7, [sp], #4
 811415c:	4770      	bx	lr

0811415e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 811415e:	b480      	push	{r7}
 8114160:	b085      	sub	sp, #20
 8114162:	af00      	add	r7, sp, #0
 8114164:	60f8      	str	r0, [r7, #12]
 8114166:	60b9      	str	r1, [r7, #8]
 8114168:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 811416a:	f06f 030b 	mvn.w	r3, #11
}
 811416e:	4618      	mov	r0, r3
 8114170:	3714      	adds	r7, #20
 8114172:	46bd      	mov	sp, r7
 8114174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114178:	4770      	bx	lr
	...

0811417c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 811417c:	b480      	push	{r7}
 811417e:	b085      	sub	sp, #20
 8114180:	af00      	add	r7, sp, #0
 8114182:	4603      	mov	r3, r0
 8114184:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8114186:	79fb      	ldrb	r3, [r7, #7]
 8114188:	2b00      	cmp	r3, #0
 811418a:	d013      	beq.n	81141b4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 811418c:	4b0d      	ldr	r3, [pc, #52]	@ (81141c4 <netif_get_by_index+0x48>)
 811418e:	681b      	ldr	r3, [r3, #0]
 8114190:	60fb      	str	r3, [r7, #12]
 8114192:	e00c      	b.n	81141ae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8114194:	68fb      	ldr	r3, [r7, #12]
 8114196:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811419a:	3301      	adds	r3, #1
 811419c:	b2db      	uxtb	r3, r3
 811419e:	79fa      	ldrb	r2, [r7, #7]
 81141a0:	429a      	cmp	r2, r3
 81141a2:	d101      	bne.n	81141a8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 81141a4:	68fb      	ldr	r3, [r7, #12]
 81141a6:	e006      	b.n	81141b6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 81141a8:	68fb      	ldr	r3, [r7, #12]
 81141aa:	681b      	ldr	r3, [r3, #0]
 81141ac:	60fb      	str	r3, [r7, #12]
 81141ae:	68fb      	ldr	r3, [r7, #12]
 81141b0:	2b00      	cmp	r3, #0
 81141b2:	d1ef      	bne.n	8114194 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 81141b4:	2300      	movs	r3, #0
}
 81141b6:	4618      	mov	r0, r3
 81141b8:	3714      	adds	r7, #20
 81141ba:	46bd      	mov	sp, r7
 81141bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81141c0:	4770      	bx	lr
 81141c2:	bf00      	nop
 81141c4:	10011d04 	.word	0x10011d04

081141c8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 81141c8:	b580      	push	{r7, lr}
 81141ca:	b082      	sub	sp, #8
 81141cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 81141ce:	f000 fed1 	bl	8114f74 <sys_arch_protect>
 81141d2:	6038      	str	r0, [r7, #0]
 81141d4:	4b0d      	ldr	r3, [pc, #52]	@ (811420c <pbuf_free_ooseq+0x44>)
 81141d6:	2200      	movs	r2, #0
 81141d8:	701a      	strb	r2, [r3, #0]
 81141da:	6838      	ldr	r0, [r7, #0]
 81141dc:	f000 fed8 	bl	8114f90 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 81141e0:	4b0b      	ldr	r3, [pc, #44]	@ (8114210 <pbuf_free_ooseq+0x48>)
 81141e2:	681b      	ldr	r3, [r3, #0]
 81141e4:	607b      	str	r3, [r7, #4]
 81141e6:	e00a      	b.n	81141fe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 81141e8:	687b      	ldr	r3, [r7, #4]
 81141ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81141ec:	2b00      	cmp	r3, #0
 81141ee:	d003      	beq.n	81141f8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 81141f0:	6878      	ldr	r0, [r7, #4]
 81141f2:	f002 fc43 	bl	8116a7c <tcp_free_ooseq>
      return;
 81141f6:	e005      	b.n	8114204 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 81141f8:	687b      	ldr	r3, [r7, #4]
 81141fa:	68db      	ldr	r3, [r3, #12]
 81141fc:	607b      	str	r3, [r7, #4]
 81141fe:	687b      	ldr	r3, [r7, #4]
 8114200:	2b00      	cmp	r3, #0
 8114202:	d1f1      	bne.n	81141e8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8114204:	3708      	adds	r7, #8
 8114206:	46bd      	mov	sp, r7
 8114208:	bd80      	pop	{r7, pc}
 811420a:	bf00      	nop
 811420c:	10011d0d 	.word	0x10011d0d
 8114210:	10011d20 	.word	0x10011d20

08114214 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8114214:	b580      	push	{r7, lr}
 8114216:	b082      	sub	sp, #8
 8114218:	af00      	add	r7, sp, #0
 811421a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 811421c:	f7ff ffd4 	bl	81141c8 <pbuf_free_ooseq>
}
 8114220:	bf00      	nop
 8114222:	3708      	adds	r7, #8
 8114224:	46bd      	mov	sp, r7
 8114226:	bd80      	pop	{r7, pc}

08114228 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8114228:	b580      	push	{r7, lr}
 811422a:	b082      	sub	sp, #8
 811422c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 811422e:	f000 fea1 	bl	8114f74 <sys_arch_protect>
 8114232:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8114234:	4b0f      	ldr	r3, [pc, #60]	@ (8114274 <pbuf_pool_is_empty+0x4c>)
 8114236:	781b      	ldrb	r3, [r3, #0]
 8114238:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 811423a:	4b0e      	ldr	r3, [pc, #56]	@ (8114274 <pbuf_pool_is_empty+0x4c>)
 811423c:	2201      	movs	r2, #1
 811423e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8114240:	6878      	ldr	r0, [r7, #4]
 8114242:	f000 fea5 	bl	8114f90 <sys_arch_unprotect>

  if (!queued) {
 8114246:	78fb      	ldrb	r3, [r7, #3]
 8114248:	2b00      	cmp	r3, #0
 811424a:	d10f      	bne.n	811426c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 811424c:	2100      	movs	r1, #0
 811424e:	480a      	ldr	r0, [pc, #40]	@ (8114278 <pbuf_pool_is_empty+0x50>)
 8114250:	f006 ff32 	bl	811b0b8 <tcpip_try_callback>
 8114254:	4603      	mov	r3, r0
 8114256:	2b00      	cmp	r3, #0
 8114258:	d008      	beq.n	811426c <pbuf_pool_is_empty+0x44>
 811425a:	f000 fe8b 	bl	8114f74 <sys_arch_protect>
 811425e:	6078      	str	r0, [r7, #4]
 8114260:	4b04      	ldr	r3, [pc, #16]	@ (8114274 <pbuf_pool_is_empty+0x4c>)
 8114262:	2200      	movs	r2, #0
 8114264:	701a      	strb	r2, [r3, #0]
 8114266:	6878      	ldr	r0, [r7, #4]
 8114268:	f000 fe92 	bl	8114f90 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 811426c:	bf00      	nop
 811426e:	3708      	adds	r7, #8
 8114270:	46bd      	mov	sp, r7
 8114272:	bd80      	pop	{r7, pc}
 8114274:	10011d0d 	.word	0x10011d0d
 8114278:	08114215 	.word	0x08114215

0811427c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 811427c:	b480      	push	{r7}
 811427e:	b085      	sub	sp, #20
 8114280:	af00      	add	r7, sp, #0
 8114282:	60f8      	str	r0, [r7, #12]
 8114284:	60b9      	str	r1, [r7, #8]
 8114286:	4611      	mov	r1, r2
 8114288:	461a      	mov	r2, r3
 811428a:	460b      	mov	r3, r1
 811428c:	80fb      	strh	r3, [r7, #6]
 811428e:	4613      	mov	r3, r2
 8114290:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8114292:	68fb      	ldr	r3, [r7, #12]
 8114294:	2200      	movs	r2, #0
 8114296:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8114298:	68fb      	ldr	r3, [r7, #12]
 811429a:	68ba      	ldr	r2, [r7, #8]
 811429c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 811429e:	68fb      	ldr	r3, [r7, #12]
 81142a0:	88fa      	ldrh	r2, [r7, #6]
 81142a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 81142a4:	68fb      	ldr	r3, [r7, #12]
 81142a6:	88ba      	ldrh	r2, [r7, #4]
 81142a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 81142aa:	8b3b      	ldrh	r3, [r7, #24]
 81142ac:	b2da      	uxtb	r2, r3
 81142ae:	68fb      	ldr	r3, [r7, #12]
 81142b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 81142b2:	68fb      	ldr	r3, [r7, #12]
 81142b4:	7f3a      	ldrb	r2, [r7, #28]
 81142b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 81142b8:	68fb      	ldr	r3, [r7, #12]
 81142ba:	2201      	movs	r2, #1
 81142bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 81142be:	68fb      	ldr	r3, [r7, #12]
 81142c0:	2200      	movs	r2, #0
 81142c2:	73da      	strb	r2, [r3, #15]
}
 81142c4:	bf00      	nop
 81142c6:	3714      	adds	r7, #20
 81142c8:	46bd      	mov	sp, r7
 81142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81142ce:	4770      	bx	lr

081142d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 81142d0:	b580      	push	{r7, lr}
 81142d2:	b08c      	sub	sp, #48	@ 0x30
 81142d4:	af02      	add	r7, sp, #8
 81142d6:	4603      	mov	r3, r0
 81142d8:	71fb      	strb	r3, [r7, #7]
 81142da:	460b      	mov	r3, r1
 81142dc:	80bb      	strh	r3, [r7, #4]
 81142de:	4613      	mov	r3, r2
 81142e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 81142e2:	79fb      	ldrb	r3, [r7, #7]
 81142e4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 81142e6:	887b      	ldrh	r3, [r7, #2]
 81142e8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 81142ec:	f000 8082 	beq.w	81143f4 <pbuf_alloc+0x124>
 81142f0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 81142f4:	f300 80c9 	bgt.w	811448a <pbuf_alloc+0x1ba>
 81142f8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 81142fc:	d010      	beq.n	8114320 <pbuf_alloc+0x50>
 81142fe:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8114302:	f300 80c2 	bgt.w	811448a <pbuf_alloc+0x1ba>
 8114306:	2b01      	cmp	r3, #1
 8114308:	d002      	beq.n	8114310 <pbuf_alloc+0x40>
 811430a:	2b41      	cmp	r3, #65	@ 0x41
 811430c:	f040 80bd 	bne.w	811448a <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8114310:	887a      	ldrh	r2, [r7, #2]
 8114312:	88bb      	ldrh	r3, [r7, #4]
 8114314:	4619      	mov	r1, r3
 8114316:	2000      	movs	r0, #0
 8114318:	f000 f8d2 	bl	81144c0 <pbuf_alloc_reference>
 811431c:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 811431e:	e0be      	b.n	811449e <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8114320:	2300      	movs	r3, #0
 8114322:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8114324:	2300      	movs	r3, #0
 8114326:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8114328:	88bb      	ldrh	r3, [r7, #4]
 811432a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 811432c:	200c      	movs	r0, #12
 811432e:	f7ff fb99 	bl	8113a64 <memp_malloc>
 8114332:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8114334:	693b      	ldr	r3, [r7, #16]
 8114336:	2b00      	cmp	r3, #0
 8114338:	d109      	bne.n	811434e <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 811433a:	f7ff ff75 	bl	8114228 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 811433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114340:	2b00      	cmp	r3, #0
 8114342:	d002      	beq.n	811434a <pbuf_alloc+0x7a>
            pbuf_free(p);
 8114344:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8114346:	f000 faa7 	bl	8114898 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 811434a:	2300      	movs	r3, #0
 811434c:	e0a8      	b.n	81144a0 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 811434e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8114350:	3303      	adds	r3, #3
 8114352:	b29b      	uxth	r3, r3
 8114354:	f023 0303 	bic.w	r3, r3, #3
 8114358:	b29b      	uxth	r3, r3
 811435a:	f5c3 63bd 	rsb	r3, r3, #1512	@ 0x5e8
 811435e:	3304      	adds	r3, #4
 8114360:	b29b      	uxth	r3, r3
 8114362:	8b7a      	ldrh	r2, [r7, #26]
 8114364:	4293      	cmp	r3, r2
 8114366:	bf28      	it	cs
 8114368:	4613      	movcs	r3, r2
 811436a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 811436c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811436e:	3310      	adds	r3, #16
 8114370:	693a      	ldr	r2, [r7, #16]
 8114372:	4413      	add	r3, r2
 8114374:	3303      	adds	r3, #3
 8114376:	f023 0303 	bic.w	r3, r3, #3
 811437a:	4618      	mov	r0, r3
 811437c:	89f9      	ldrh	r1, [r7, #14]
 811437e:	8b7a      	ldrh	r2, [r7, #26]
 8114380:	2300      	movs	r3, #0
 8114382:	9301      	str	r3, [sp, #4]
 8114384:	887b      	ldrh	r3, [r7, #2]
 8114386:	9300      	str	r3, [sp, #0]
 8114388:	460b      	mov	r3, r1
 811438a:	4601      	mov	r1, r0
 811438c:	6938      	ldr	r0, [r7, #16]
 811438e:	f7ff ff75 	bl	811427c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8114392:	693b      	ldr	r3, [r7, #16]
 8114394:	685b      	ldr	r3, [r3, #4]
 8114396:	f003 0303 	and.w	r3, r3, #3
 811439a:	2b00      	cmp	r3, #0
 811439c:	d006      	beq.n	81143ac <pbuf_alloc+0xdc>
 811439e:	4b42      	ldr	r3, [pc, #264]	@ (81144a8 <pbuf_alloc+0x1d8>)
 81143a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81143a4:	4941      	ldr	r1, [pc, #260]	@ (81144ac <pbuf_alloc+0x1dc>)
 81143a6:	4842      	ldr	r0, [pc, #264]	@ (81144b0 <pbuf_alloc+0x1e0>)
 81143a8:	f007 fd38 	bl	811be1c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 81143ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81143ae:	3303      	adds	r3, #3
 81143b0:	f023 0303 	bic.w	r3, r3, #3
 81143b4:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 81143b8:	4293      	cmp	r3, r2
 81143ba:	d106      	bne.n	81143ca <pbuf_alloc+0xfa>
 81143bc:	4b3a      	ldr	r3, [pc, #232]	@ (81144a8 <pbuf_alloc+0x1d8>)
 81143be:	f44f 7281 	mov.w	r2, #258	@ 0x102
 81143c2:	493c      	ldr	r1, [pc, #240]	@ (81144b4 <pbuf_alloc+0x1e4>)
 81143c4:	483a      	ldr	r0, [pc, #232]	@ (81144b0 <pbuf_alloc+0x1e0>)
 81143c6:	f007 fd29 	bl	811be1c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 81143ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81143cc:	2b00      	cmp	r3, #0
 81143ce:	d102      	bne.n	81143d6 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 81143d0:	693b      	ldr	r3, [r7, #16]
 81143d2:	627b      	str	r3, [r7, #36]	@ 0x24
 81143d4:	e002      	b.n	81143dc <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 81143d6:	69fb      	ldr	r3, [r7, #28]
 81143d8:	693a      	ldr	r2, [r7, #16]
 81143da:	601a      	str	r2, [r3, #0]
        }
        last = q;
 81143dc:	693b      	ldr	r3, [r7, #16]
 81143de:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 81143e0:	8b7a      	ldrh	r2, [r7, #26]
 81143e2:	89fb      	ldrh	r3, [r7, #14]
 81143e4:	1ad3      	subs	r3, r2, r3
 81143e6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 81143e8:	2300      	movs	r3, #0
 81143ea:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 81143ec:	8b7b      	ldrh	r3, [r7, #26]
 81143ee:	2b00      	cmp	r3, #0
 81143f0:	d19c      	bne.n	811432c <pbuf_alloc+0x5c>
      break;
 81143f2:	e054      	b.n	811449e <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 81143f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81143f6:	3303      	adds	r3, #3
 81143f8:	b29b      	uxth	r3, r3
 81143fa:	f023 0303 	bic.w	r3, r3, #3
 81143fe:	b29a      	uxth	r2, r3
 8114400:	88bb      	ldrh	r3, [r7, #4]
 8114402:	3303      	adds	r3, #3
 8114404:	b29b      	uxth	r3, r3
 8114406:	f023 0303 	bic.w	r3, r3, #3
 811440a:	b29b      	uxth	r3, r3
 811440c:	4413      	add	r3, r2
 811440e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8114410:	8b3b      	ldrh	r3, [r7, #24]
 8114412:	3310      	adds	r3, #16
 8114414:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8114416:	8b3a      	ldrh	r2, [r7, #24]
 8114418:	88bb      	ldrh	r3, [r7, #4]
 811441a:	3303      	adds	r3, #3
 811441c:	f023 0303 	bic.w	r3, r3, #3
 8114420:	429a      	cmp	r2, r3
 8114422:	d306      	bcc.n	8114432 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8114424:	88bb      	ldrh	r3, [r7, #4]
 8114426:	3303      	adds	r3, #3
 8114428:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 811442c:	697a      	ldr	r2, [r7, #20]
 811442e:	429a      	cmp	r2, r3
 8114430:	d201      	bcs.n	8114436 <pbuf_alloc+0x166>
        return NULL;
 8114432:	2300      	movs	r3, #0
 8114434:	e034      	b.n	81144a0 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8114436:	6978      	ldr	r0, [r7, #20]
 8114438:	f7ff f976 	bl	8113728 <mem_malloc>
 811443c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 811443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114440:	2b00      	cmp	r3, #0
 8114442:	d101      	bne.n	8114448 <pbuf_alloc+0x178>
        return NULL;
 8114444:	2300      	movs	r3, #0
 8114446:	e02b      	b.n	81144a0 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8114448:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811444a:	3310      	adds	r3, #16
 811444c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811444e:	4413      	add	r3, r2
 8114450:	3303      	adds	r3, #3
 8114452:	f023 0303 	bic.w	r3, r3, #3
 8114456:	4618      	mov	r0, r3
 8114458:	88b9      	ldrh	r1, [r7, #4]
 811445a:	88ba      	ldrh	r2, [r7, #4]
 811445c:	2300      	movs	r3, #0
 811445e:	9301      	str	r3, [sp, #4]
 8114460:	887b      	ldrh	r3, [r7, #2]
 8114462:	9300      	str	r3, [sp, #0]
 8114464:	460b      	mov	r3, r1
 8114466:	4601      	mov	r1, r0
 8114468:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811446a:	f7ff ff07 	bl	811427c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 811446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114470:	685b      	ldr	r3, [r3, #4]
 8114472:	f003 0303 	and.w	r3, r3, #3
 8114476:	2b00      	cmp	r3, #0
 8114478:	d010      	beq.n	811449c <pbuf_alloc+0x1cc>
 811447a:	4b0b      	ldr	r3, [pc, #44]	@ (81144a8 <pbuf_alloc+0x1d8>)
 811447c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8114480:	490d      	ldr	r1, [pc, #52]	@ (81144b8 <pbuf_alloc+0x1e8>)
 8114482:	480b      	ldr	r0, [pc, #44]	@ (81144b0 <pbuf_alloc+0x1e0>)
 8114484:	f007 fcca 	bl	811be1c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8114488:	e008      	b.n	811449c <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 811448a:	4b07      	ldr	r3, [pc, #28]	@ (81144a8 <pbuf_alloc+0x1d8>)
 811448c:	f240 1227 	movw	r2, #295	@ 0x127
 8114490:	490a      	ldr	r1, [pc, #40]	@ (81144bc <pbuf_alloc+0x1ec>)
 8114492:	4807      	ldr	r0, [pc, #28]	@ (81144b0 <pbuf_alloc+0x1e0>)
 8114494:	f007 fcc2 	bl	811be1c <iprintf>
      return NULL;
 8114498:	2300      	movs	r3, #0
 811449a:	e001      	b.n	81144a0 <pbuf_alloc+0x1d0>
      break;
 811449c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 811449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81144a0:	4618      	mov	r0, r3
 81144a2:	3728      	adds	r7, #40	@ 0x28
 81144a4:	46bd      	mov	sp, r7
 81144a6:	bd80      	pop	{r7, pc}
 81144a8:	0811db70 	.word	0x0811db70
 81144ac:	0811dbe0 	.word	0x0811dbe0
 81144b0:	0811dc10 	.word	0x0811dc10
 81144b4:	0811dc38 	.word	0x0811dc38
 81144b8:	0811dc6c 	.word	0x0811dc6c
 81144bc:	0811dc98 	.word	0x0811dc98

081144c0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 81144c0:	b580      	push	{r7, lr}
 81144c2:	b086      	sub	sp, #24
 81144c4:	af02      	add	r7, sp, #8
 81144c6:	6078      	str	r0, [r7, #4]
 81144c8:	460b      	mov	r3, r1
 81144ca:	807b      	strh	r3, [r7, #2]
 81144cc:	4613      	mov	r3, r2
 81144ce:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 81144d0:	883b      	ldrh	r3, [r7, #0]
 81144d2:	2b41      	cmp	r3, #65	@ 0x41
 81144d4:	d009      	beq.n	81144ea <pbuf_alloc_reference+0x2a>
 81144d6:	883b      	ldrh	r3, [r7, #0]
 81144d8:	2b01      	cmp	r3, #1
 81144da:	d006      	beq.n	81144ea <pbuf_alloc_reference+0x2a>
 81144dc:	4b0f      	ldr	r3, [pc, #60]	@ (811451c <pbuf_alloc_reference+0x5c>)
 81144de:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 81144e2:	490f      	ldr	r1, [pc, #60]	@ (8114520 <pbuf_alloc_reference+0x60>)
 81144e4:	480f      	ldr	r0, [pc, #60]	@ (8114524 <pbuf_alloc_reference+0x64>)
 81144e6:	f007 fc99 	bl	811be1c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 81144ea:	200b      	movs	r0, #11
 81144ec:	f7ff faba 	bl	8113a64 <memp_malloc>
 81144f0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 81144f2:	68fb      	ldr	r3, [r7, #12]
 81144f4:	2b00      	cmp	r3, #0
 81144f6:	d101      	bne.n	81144fc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 81144f8:	2300      	movs	r3, #0
 81144fa:	e00b      	b.n	8114514 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 81144fc:	8879      	ldrh	r1, [r7, #2]
 81144fe:	887a      	ldrh	r2, [r7, #2]
 8114500:	2300      	movs	r3, #0
 8114502:	9301      	str	r3, [sp, #4]
 8114504:	883b      	ldrh	r3, [r7, #0]
 8114506:	9300      	str	r3, [sp, #0]
 8114508:	460b      	mov	r3, r1
 811450a:	6879      	ldr	r1, [r7, #4]
 811450c:	68f8      	ldr	r0, [r7, #12]
 811450e:	f7ff feb5 	bl	811427c <pbuf_init_alloced_pbuf>
  return p;
 8114512:	68fb      	ldr	r3, [r7, #12]
}
 8114514:	4618      	mov	r0, r3
 8114516:	3710      	adds	r7, #16
 8114518:	46bd      	mov	sp, r7
 811451a:	bd80      	pop	{r7, pc}
 811451c:	0811db70 	.word	0x0811db70
 8114520:	0811dcb4 	.word	0x0811dcb4
 8114524:	0811dc10 	.word	0x0811dc10

08114528 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8114528:	b580      	push	{r7, lr}
 811452a:	b088      	sub	sp, #32
 811452c:	af02      	add	r7, sp, #8
 811452e:	607b      	str	r3, [r7, #4]
 8114530:	4603      	mov	r3, r0
 8114532:	73fb      	strb	r3, [r7, #15]
 8114534:	460b      	mov	r3, r1
 8114536:	81bb      	strh	r3, [r7, #12]
 8114538:	4613      	mov	r3, r2
 811453a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 811453c:	7bfb      	ldrb	r3, [r7, #15]
 811453e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8114540:	8a7b      	ldrh	r3, [r7, #18]
 8114542:	3303      	adds	r3, #3
 8114544:	f023 0203 	bic.w	r2, r3, #3
 8114548:	89bb      	ldrh	r3, [r7, #12]
 811454a:	441a      	add	r2, r3
 811454c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811454e:	429a      	cmp	r2, r3
 8114550:	d901      	bls.n	8114556 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8114552:	2300      	movs	r3, #0
 8114554:	e018      	b.n	8114588 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8114556:	6a3b      	ldr	r3, [r7, #32]
 8114558:	2b00      	cmp	r3, #0
 811455a:	d007      	beq.n	811456c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 811455c:	8a7b      	ldrh	r3, [r7, #18]
 811455e:	3303      	adds	r3, #3
 8114560:	f023 0303 	bic.w	r3, r3, #3
 8114564:	6a3a      	ldr	r2, [r7, #32]
 8114566:	4413      	add	r3, r2
 8114568:	617b      	str	r3, [r7, #20]
 811456a:	e001      	b.n	8114570 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 811456c:	2300      	movs	r3, #0
 811456e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8114570:	6878      	ldr	r0, [r7, #4]
 8114572:	89b9      	ldrh	r1, [r7, #12]
 8114574:	89ba      	ldrh	r2, [r7, #12]
 8114576:	2302      	movs	r3, #2
 8114578:	9301      	str	r3, [sp, #4]
 811457a:	897b      	ldrh	r3, [r7, #10]
 811457c:	9300      	str	r3, [sp, #0]
 811457e:	460b      	mov	r3, r1
 8114580:	6979      	ldr	r1, [r7, #20]
 8114582:	f7ff fe7b 	bl	811427c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8114586:	687b      	ldr	r3, [r7, #4]
}
 8114588:	4618      	mov	r0, r3
 811458a:	3718      	adds	r7, #24
 811458c:	46bd      	mov	sp, r7
 811458e:	bd80      	pop	{r7, pc}

08114590 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8114590:	b580      	push	{r7, lr}
 8114592:	b084      	sub	sp, #16
 8114594:	af00      	add	r7, sp, #0
 8114596:	6078      	str	r0, [r7, #4]
 8114598:	460b      	mov	r3, r1
 811459a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 811459c:	687b      	ldr	r3, [r7, #4]
 811459e:	2b00      	cmp	r3, #0
 81145a0:	d106      	bne.n	81145b0 <pbuf_realloc+0x20>
 81145a2:	4b39      	ldr	r3, [pc, #228]	@ (8114688 <pbuf_realloc+0xf8>)
 81145a4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 81145a8:	4938      	ldr	r1, [pc, #224]	@ (811468c <pbuf_realloc+0xfc>)
 81145aa:	4839      	ldr	r0, [pc, #228]	@ (8114690 <pbuf_realloc+0x100>)
 81145ac:	f007 fc36 	bl	811be1c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 81145b0:	687b      	ldr	r3, [r7, #4]
 81145b2:	891b      	ldrh	r3, [r3, #8]
 81145b4:	887a      	ldrh	r2, [r7, #2]
 81145b6:	429a      	cmp	r2, r3
 81145b8:	d261      	bcs.n	811467e <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 81145ba:	687b      	ldr	r3, [r7, #4]
 81145bc:	891a      	ldrh	r2, [r3, #8]
 81145be:	887b      	ldrh	r3, [r7, #2]
 81145c0:	1ad3      	subs	r3, r2, r3
 81145c2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 81145c4:	887b      	ldrh	r3, [r7, #2]
 81145c6:	817b      	strh	r3, [r7, #10]
  q = p;
 81145c8:	687b      	ldr	r3, [r7, #4]
 81145ca:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 81145cc:	e018      	b.n	8114600 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 81145ce:	68fb      	ldr	r3, [r7, #12]
 81145d0:	895b      	ldrh	r3, [r3, #10]
 81145d2:	897a      	ldrh	r2, [r7, #10]
 81145d4:	1ad3      	subs	r3, r2, r3
 81145d6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 81145d8:	68fb      	ldr	r3, [r7, #12]
 81145da:	891a      	ldrh	r2, [r3, #8]
 81145dc:	893b      	ldrh	r3, [r7, #8]
 81145de:	1ad3      	subs	r3, r2, r3
 81145e0:	b29a      	uxth	r2, r3
 81145e2:	68fb      	ldr	r3, [r7, #12]
 81145e4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 81145e6:	68fb      	ldr	r3, [r7, #12]
 81145e8:	681b      	ldr	r3, [r3, #0]
 81145ea:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 81145ec:	68fb      	ldr	r3, [r7, #12]
 81145ee:	2b00      	cmp	r3, #0
 81145f0:	d106      	bne.n	8114600 <pbuf_realloc+0x70>
 81145f2:	4b25      	ldr	r3, [pc, #148]	@ (8114688 <pbuf_realloc+0xf8>)
 81145f4:	f240 12af 	movw	r2, #431	@ 0x1af
 81145f8:	4926      	ldr	r1, [pc, #152]	@ (8114694 <pbuf_realloc+0x104>)
 81145fa:	4825      	ldr	r0, [pc, #148]	@ (8114690 <pbuf_realloc+0x100>)
 81145fc:	f007 fc0e 	bl	811be1c <iprintf>
  while (rem_len > q->len) {
 8114600:	68fb      	ldr	r3, [r7, #12]
 8114602:	895b      	ldrh	r3, [r3, #10]
 8114604:	897a      	ldrh	r2, [r7, #10]
 8114606:	429a      	cmp	r2, r3
 8114608:	d8e1      	bhi.n	81145ce <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 811460a:	68fb      	ldr	r3, [r7, #12]
 811460c:	7b1b      	ldrb	r3, [r3, #12]
 811460e:	f003 030f 	and.w	r3, r3, #15
 8114612:	2b00      	cmp	r3, #0
 8114614:	d11f      	bne.n	8114656 <pbuf_realloc+0xc6>
 8114616:	68fb      	ldr	r3, [r7, #12]
 8114618:	895b      	ldrh	r3, [r3, #10]
 811461a:	897a      	ldrh	r2, [r7, #10]
 811461c:	429a      	cmp	r2, r3
 811461e:	d01a      	beq.n	8114656 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8114620:	68fb      	ldr	r3, [r7, #12]
 8114622:	7b5b      	ldrb	r3, [r3, #13]
 8114624:	f003 0302 	and.w	r3, r3, #2
 8114628:	2b00      	cmp	r3, #0
 811462a:	d114      	bne.n	8114656 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 811462c:	68fb      	ldr	r3, [r7, #12]
 811462e:	685a      	ldr	r2, [r3, #4]
 8114630:	68fb      	ldr	r3, [r7, #12]
 8114632:	1ad2      	subs	r2, r2, r3
 8114634:	897b      	ldrh	r3, [r7, #10]
 8114636:	4413      	add	r3, r2
 8114638:	4619      	mov	r1, r3
 811463a:	68f8      	ldr	r0, [r7, #12]
 811463c:	f7fe ff72 	bl	8113524 <mem_trim>
 8114640:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8114642:	68fb      	ldr	r3, [r7, #12]
 8114644:	2b00      	cmp	r3, #0
 8114646:	d106      	bne.n	8114656 <pbuf_realloc+0xc6>
 8114648:	4b0f      	ldr	r3, [pc, #60]	@ (8114688 <pbuf_realloc+0xf8>)
 811464a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 811464e:	4912      	ldr	r1, [pc, #72]	@ (8114698 <pbuf_realloc+0x108>)
 8114650:	480f      	ldr	r0, [pc, #60]	@ (8114690 <pbuf_realloc+0x100>)
 8114652:	f007 fbe3 	bl	811be1c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8114656:	68fb      	ldr	r3, [r7, #12]
 8114658:	897a      	ldrh	r2, [r7, #10]
 811465a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 811465c:	68fb      	ldr	r3, [r7, #12]
 811465e:	895a      	ldrh	r2, [r3, #10]
 8114660:	68fb      	ldr	r3, [r7, #12]
 8114662:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8114664:	68fb      	ldr	r3, [r7, #12]
 8114666:	681b      	ldr	r3, [r3, #0]
 8114668:	2b00      	cmp	r3, #0
 811466a:	d004      	beq.n	8114676 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 811466c:	68fb      	ldr	r3, [r7, #12]
 811466e:	681b      	ldr	r3, [r3, #0]
 8114670:	4618      	mov	r0, r3
 8114672:	f000 f911 	bl	8114898 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8114676:	68fb      	ldr	r3, [r7, #12]
 8114678:	2200      	movs	r2, #0
 811467a:	601a      	str	r2, [r3, #0]
 811467c:	e000      	b.n	8114680 <pbuf_realloc+0xf0>
    return;
 811467e:	bf00      	nop

}
 8114680:	3710      	adds	r7, #16
 8114682:	46bd      	mov	sp, r7
 8114684:	bd80      	pop	{r7, pc}
 8114686:	bf00      	nop
 8114688:	0811db70 	.word	0x0811db70
 811468c:	0811dcc8 	.word	0x0811dcc8
 8114690:	0811dc10 	.word	0x0811dc10
 8114694:	0811dce0 	.word	0x0811dce0
 8114698:	0811dcf8 	.word	0x0811dcf8

0811469c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 811469c:	b580      	push	{r7, lr}
 811469e:	b086      	sub	sp, #24
 81146a0:	af00      	add	r7, sp, #0
 81146a2:	60f8      	str	r0, [r7, #12]
 81146a4:	60b9      	str	r1, [r7, #8]
 81146a6:	4613      	mov	r3, r2
 81146a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 81146aa:	68fb      	ldr	r3, [r7, #12]
 81146ac:	2b00      	cmp	r3, #0
 81146ae:	d106      	bne.n	81146be <pbuf_add_header_impl+0x22>
 81146b0:	4b2b      	ldr	r3, [pc, #172]	@ (8114760 <pbuf_add_header_impl+0xc4>)
 81146b2:	f240 12df 	movw	r2, #479	@ 0x1df
 81146b6:	492b      	ldr	r1, [pc, #172]	@ (8114764 <pbuf_add_header_impl+0xc8>)
 81146b8:	482b      	ldr	r0, [pc, #172]	@ (8114768 <pbuf_add_header_impl+0xcc>)
 81146ba:	f007 fbaf 	bl	811be1c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 81146be:	68fb      	ldr	r3, [r7, #12]
 81146c0:	2b00      	cmp	r3, #0
 81146c2:	d003      	beq.n	81146cc <pbuf_add_header_impl+0x30>
 81146c4:	68bb      	ldr	r3, [r7, #8]
 81146c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81146ca:	d301      	bcc.n	81146d0 <pbuf_add_header_impl+0x34>
    return 1;
 81146cc:	2301      	movs	r3, #1
 81146ce:	e043      	b.n	8114758 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 81146d0:	68bb      	ldr	r3, [r7, #8]
 81146d2:	2b00      	cmp	r3, #0
 81146d4:	d101      	bne.n	81146da <pbuf_add_header_impl+0x3e>
    return 0;
 81146d6:	2300      	movs	r3, #0
 81146d8:	e03e      	b.n	8114758 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 81146da:	68bb      	ldr	r3, [r7, #8]
 81146dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 81146de:	68fb      	ldr	r3, [r7, #12]
 81146e0:	891a      	ldrh	r2, [r3, #8]
 81146e2:	8a7b      	ldrh	r3, [r7, #18]
 81146e4:	4413      	add	r3, r2
 81146e6:	b29b      	uxth	r3, r3
 81146e8:	8a7a      	ldrh	r2, [r7, #18]
 81146ea:	429a      	cmp	r2, r3
 81146ec:	d901      	bls.n	81146f2 <pbuf_add_header_impl+0x56>
    return 1;
 81146ee:	2301      	movs	r3, #1
 81146f0:	e032      	b.n	8114758 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 81146f2:	68fb      	ldr	r3, [r7, #12]
 81146f4:	7b1b      	ldrb	r3, [r3, #12]
 81146f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 81146f8:	8a3b      	ldrh	r3, [r7, #16]
 81146fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81146fe:	2b00      	cmp	r3, #0
 8114700:	d00c      	beq.n	811471c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8114702:	68fb      	ldr	r3, [r7, #12]
 8114704:	685a      	ldr	r2, [r3, #4]
 8114706:	68bb      	ldr	r3, [r7, #8]
 8114708:	425b      	negs	r3, r3
 811470a:	4413      	add	r3, r2
 811470c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 811470e:	68fb      	ldr	r3, [r7, #12]
 8114710:	3310      	adds	r3, #16
 8114712:	697a      	ldr	r2, [r7, #20]
 8114714:	429a      	cmp	r2, r3
 8114716:	d20d      	bcs.n	8114734 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8114718:	2301      	movs	r3, #1
 811471a:	e01d      	b.n	8114758 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 811471c:	79fb      	ldrb	r3, [r7, #7]
 811471e:	2b00      	cmp	r3, #0
 8114720:	d006      	beq.n	8114730 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8114722:	68fb      	ldr	r3, [r7, #12]
 8114724:	685a      	ldr	r2, [r3, #4]
 8114726:	68bb      	ldr	r3, [r7, #8]
 8114728:	425b      	negs	r3, r3
 811472a:	4413      	add	r3, r2
 811472c:	617b      	str	r3, [r7, #20]
 811472e:	e001      	b.n	8114734 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8114730:	2301      	movs	r3, #1
 8114732:	e011      	b.n	8114758 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8114734:	68fb      	ldr	r3, [r7, #12]
 8114736:	697a      	ldr	r2, [r7, #20]
 8114738:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 811473a:	68fb      	ldr	r3, [r7, #12]
 811473c:	895a      	ldrh	r2, [r3, #10]
 811473e:	8a7b      	ldrh	r3, [r7, #18]
 8114740:	4413      	add	r3, r2
 8114742:	b29a      	uxth	r2, r3
 8114744:	68fb      	ldr	r3, [r7, #12]
 8114746:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8114748:	68fb      	ldr	r3, [r7, #12]
 811474a:	891a      	ldrh	r2, [r3, #8]
 811474c:	8a7b      	ldrh	r3, [r7, #18]
 811474e:	4413      	add	r3, r2
 8114750:	b29a      	uxth	r2, r3
 8114752:	68fb      	ldr	r3, [r7, #12]
 8114754:	811a      	strh	r2, [r3, #8]


  return 0;
 8114756:	2300      	movs	r3, #0
}
 8114758:	4618      	mov	r0, r3
 811475a:	3718      	adds	r7, #24
 811475c:	46bd      	mov	sp, r7
 811475e:	bd80      	pop	{r7, pc}
 8114760:	0811db70 	.word	0x0811db70
 8114764:	0811dd14 	.word	0x0811dd14
 8114768:	0811dc10 	.word	0x0811dc10

0811476c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 811476c:	b580      	push	{r7, lr}
 811476e:	b082      	sub	sp, #8
 8114770:	af00      	add	r7, sp, #0
 8114772:	6078      	str	r0, [r7, #4]
 8114774:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8114776:	2200      	movs	r2, #0
 8114778:	6839      	ldr	r1, [r7, #0]
 811477a:	6878      	ldr	r0, [r7, #4]
 811477c:	f7ff ff8e 	bl	811469c <pbuf_add_header_impl>
 8114780:	4603      	mov	r3, r0
}
 8114782:	4618      	mov	r0, r3
 8114784:	3708      	adds	r7, #8
 8114786:	46bd      	mov	sp, r7
 8114788:	bd80      	pop	{r7, pc}
	...

0811478c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 811478c:	b580      	push	{r7, lr}
 811478e:	b084      	sub	sp, #16
 8114790:	af00      	add	r7, sp, #0
 8114792:	6078      	str	r0, [r7, #4]
 8114794:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8114796:	687b      	ldr	r3, [r7, #4]
 8114798:	2b00      	cmp	r3, #0
 811479a:	d106      	bne.n	81147aa <pbuf_remove_header+0x1e>
 811479c:	4b20      	ldr	r3, [pc, #128]	@ (8114820 <pbuf_remove_header+0x94>)
 811479e:	f240 224b 	movw	r2, #587	@ 0x24b
 81147a2:	4920      	ldr	r1, [pc, #128]	@ (8114824 <pbuf_remove_header+0x98>)
 81147a4:	4820      	ldr	r0, [pc, #128]	@ (8114828 <pbuf_remove_header+0x9c>)
 81147a6:	f007 fb39 	bl	811be1c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 81147aa:	687b      	ldr	r3, [r7, #4]
 81147ac:	2b00      	cmp	r3, #0
 81147ae:	d003      	beq.n	81147b8 <pbuf_remove_header+0x2c>
 81147b0:	683b      	ldr	r3, [r7, #0]
 81147b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81147b6:	d301      	bcc.n	81147bc <pbuf_remove_header+0x30>
    return 1;
 81147b8:	2301      	movs	r3, #1
 81147ba:	e02c      	b.n	8114816 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 81147bc:	683b      	ldr	r3, [r7, #0]
 81147be:	2b00      	cmp	r3, #0
 81147c0:	d101      	bne.n	81147c6 <pbuf_remove_header+0x3a>
    return 0;
 81147c2:	2300      	movs	r3, #0
 81147c4:	e027      	b.n	8114816 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 81147c6:	683b      	ldr	r3, [r7, #0]
 81147c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 81147ca:	687b      	ldr	r3, [r7, #4]
 81147cc:	895b      	ldrh	r3, [r3, #10]
 81147ce:	89fa      	ldrh	r2, [r7, #14]
 81147d0:	429a      	cmp	r2, r3
 81147d2:	d908      	bls.n	81147e6 <pbuf_remove_header+0x5a>
 81147d4:	4b12      	ldr	r3, [pc, #72]	@ (8114820 <pbuf_remove_header+0x94>)
 81147d6:	f240 2255 	movw	r2, #597	@ 0x255
 81147da:	4914      	ldr	r1, [pc, #80]	@ (811482c <pbuf_remove_header+0xa0>)
 81147dc:	4812      	ldr	r0, [pc, #72]	@ (8114828 <pbuf_remove_header+0x9c>)
 81147de:	f007 fb1d 	bl	811be1c <iprintf>
 81147e2:	2301      	movs	r3, #1
 81147e4:	e017      	b.n	8114816 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 81147e6:	687b      	ldr	r3, [r7, #4]
 81147e8:	685b      	ldr	r3, [r3, #4]
 81147ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 81147ec:	687b      	ldr	r3, [r7, #4]
 81147ee:	685a      	ldr	r2, [r3, #4]
 81147f0:	683b      	ldr	r3, [r7, #0]
 81147f2:	441a      	add	r2, r3
 81147f4:	687b      	ldr	r3, [r7, #4]
 81147f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 81147f8:	687b      	ldr	r3, [r7, #4]
 81147fa:	895a      	ldrh	r2, [r3, #10]
 81147fc:	89fb      	ldrh	r3, [r7, #14]
 81147fe:	1ad3      	subs	r3, r2, r3
 8114800:	b29a      	uxth	r2, r3
 8114802:	687b      	ldr	r3, [r7, #4]
 8114804:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8114806:	687b      	ldr	r3, [r7, #4]
 8114808:	891a      	ldrh	r2, [r3, #8]
 811480a:	89fb      	ldrh	r3, [r7, #14]
 811480c:	1ad3      	subs	r3, r2, r3
 811480e:	b29a      	uxth	r2, r3
 8114810:	687b      	ldr	r3, [r7, #4]
 8114812:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8114814:	2300      	movs	r3, #0
}
 8114816:	4618      	mov	r0, r3
 8114818:	3710      	adds	r7, #16
 811481a:	46bd      	mov	sp, r7
 811481c:	bd80      	pop	{r7, pc}
 811481e:	bf00      	nop
 8114820:	0811db70 	.word	0x0811db70
 8114824:	0811dd14 	.word	0x0811dd14
 8114828:	0811dc10 	.word	0x0811dc10
 811482c:	0811dd20 	.word	0x0811dd20

08114830 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8114830:	b580      	push	{r7, lr}
 8114832:	b082      	sub	sp, #8
 8114834:	af00      	add	r7, sp, #0
 8114836:	6078      	str	r0, [r7, #4]
 8114838:	460b      	mov	r3, r1
 811483a:	807b      	strh	r3, [r7, #2]
 811483c:	4613      	mov	r3, r2
 811483e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8114840:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8114844:	2b00      	cmp	r3, #0
 8114846:	da08      	bge.n	811485a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8114848:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811484c:	425b      	negs	r3, r3
 811484e:	4619      	mov	r1, r3
 8114850:	6878      	ldr	r0, [r7, #4]
 8114852:	f7ff ff9b 	bl	811478c <pbuf_remove_header>
 8114856:	4603      	mov	r3, r0
 8114858:	e007      	b.n	811486a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 811485a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811485e:	787a      	ldrb	r2, [r7, #1]
 8114860:	4619      	mov	r1, r3
 8114862:	6878      	ldr	r0, [r7, #4]
 8114864:	f7ff ff1a 	bl	811469c <pbuf_add_header_impl>
 8114868:	4603      	mov	r3, r0
  }
}
 811486a:	4618      	mov	r0, r3
 811486c:	3708      	adds	r7, #8
 811486e:	46bd      	mov	sp, r7
 8114870:	bd80      	pop	{r7, pc}

08114872 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8114872:	b580      	push	{r7, lr}
 8114874:	b082      	sub	sp, #8
 8114876:	af00      	add	r7, sp, #0
 8114878:	6078      	str	r0, [r7, #4]
 811487a:	460b      	mov	r3, r1
 811487c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 811487e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8114882:	2201      	movs	r2, #1
 8114884:	4619      	mov	r1, r3
 8114886:	6878      	ldr	r0, [r7, #4]
 8114888:	f7ff ffd2 	bl	8114830 <pbuf_header_impl>
 811488c:	4603      	mov	r3, r0
}
 811488e:	4618      	mov	r0, r3
 8114890:	3708      	adds	r7, #8
 8114892:	46bd      	mov	sp, r7
 8114894:	bd80      	pop	{r7, pc}
	...

08114898 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8114898:	b580      	push	{r7, lr}
 811489a:	b088      	sub	sp, #32
 811489c:	af00      	add	r7, sp, #0
 811489e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 81148a0:	687b      	ldr	r3, [r7, #4]
 81148a2:	2b00      	cmp	r3, #0
 81148a4:	d10b      	bne.n	81148be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 81148a6:	687b      	ldr	r3, [r7, #4]
 81148a8:	2b00      	cmp	r3, #0
 81148aa:	d106      	bne.n	81148ba <pbuf_free+0x22>
 81148ac:	4b3b      	ldr	r3, [pc, #236]	@ (811499c <pbuf_free+0x104>)
 81148ae:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 81148b2:	493b      	ldr	r1, [pc, #236]	@ (81149a0 <pbuf_free+0x108>)
 81148b4:	483b      	ldr	r0, [pc, #236]	@ (81149a4 <pbuf_free+0x10c>)
 81148b6:	f007 fab1 	bl	811be1c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 81148ba:	2300      	movs	r3, #0
 81148bc:	e069      	b.n	8114992 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 81148be:	2300      	movs	r3, #0
 81148c0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 81148c2:	e062      	b.n	811498a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 81148c4:	f000 fb56 	bl	8114f74 <sys_arch_protect>
 81148c8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 81148ca:	687b      	ldr	r3, [r7, #4]
 81148cc:	7b9b      	ldrb	r3, [r3, #14]
 81148ce:	2b00      	cmp	r3, #0
 81148d0:	d106      	bne.n	81148e0 <pbuf_free+0x48>
 81148d2:	4b32      	ldr	r3, [pc, #200]	@ (811499c <pbuf_free+0x104>)
 81148d4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 81148d8:	4933      	ldr	r1, [pc, #204]	@ (81149a8 <pbuf_free+0x110>)
 81148da:	4832      	ldr	r0, [pc, #200]	@ (81149a4 <pbuf_free+0x10c>)
 81148dc:	f007 fa9e 	bl	811be1c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 81148e0:	687b      	ldr	r3, [r7, #4]
 81148e2:	7b9b      	ldrb	r3, [r3, #14]
 81148e4:	3b01      	subs	r3, #1
 81148e6:	b2da      	uxtb	r2, r3
 81148e8:	687b      	ldr	r3, [r7, #4]
 81148ea:	739a      	strb	r2, [r3, #14]
 81148ec:	687b      	ldr	r3, [r7, #4]
 81148ee:	7b9b      	ldrb	r3, [r3, #14]
 81148f0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 81148f2:	69b8      	ldr	r0, [r7, #24]
 81148f4:	f000 fb4c 	bl	8114f90 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 81148f8:	7dfb      	ldrb	r3, [r7, #23]
 81148fa:	2b00      	cmp	r3, #0
 81148fc:	d143      	bne.n	8114986 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 81148fe:	687b      	ldr	r3, [r7, #4]
 8114900:	681b      	ldr	r3, [r3, #0]
 8114902:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8114904:	687b      	ldr	r3, [r7, #4]
 8114906:	7b1b      	ldrb	r3, [r3, #12]
 8114908:	f003 030f 	and.w	r3, r3, #15
 811490c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 811490e:	687b      	ldr	r3, [r7, #4]
 8114910:	7b5b      	ldrb	r3, [r3, #13]
 8114912:	f003 0302 	and.w	r3, r3, #2
 8114916:	2b00      	cmp	r3, #0
 8114918:	d011      	beq.n	811493e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 811491a:	687b      	ldr	r3, [r7, #4]
 811491c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 811491e:	68bb      	ldr	r3, [r7, #8]
 8114920:	691b      	ldr	r3, [r3, #16]
 8114922:	2b00      	cmp	r3, #0
 8114924:	d106      	bne.n	8114934 <pbuf_free+0x9c>
 8114926:	4b1d      	ldr	r3, [pc, #116]	@ (811499c <pbuf_free+0x104>)
 8114928:	f240 22ff 	movw	r2, #767	@ 0x2ff
 811492c:	491f      	ldr	r1, [pc, #124]	@ (81149ac <pbuf_free+0x114>)
 811492e:	481d      	ldr	r0, [pc, #116]	@ (81149a4 <pbuf_free+0x10c>)
 8114930:	f007 fa74 	bl	811be1c <iprintf>
        pc->custom_free_function(p);
 8114934:	68bb      	ldr	r3, [r7, #8]
 8114936:	691b      	ldr	r3, [r3, #16]
 8114938:	6878      	ldr	r0, [r7, #4]
 811493a:	4798      	blx	r3
 811493c:	e01d      	b.n	811497a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 811493e:	7bfb      	ldrb	r3, [r7, #15]
 8114940:	2b02      	cmp	r3, #2
 8114942:	d104      	bne.n	811494e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8114944:	6879      	ldr	r1, [r7, #4]
 8114946:	200c      	movs	r0, #12
 8114948:	f7ff f902 	bl	8113b50 <memp_free>
 811494c:	e015      	b.n	811497a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 811494e:	7bfb      	ldrb	r3, [r7, #15]
 8114950:	2b01      	cmp	r3, #1
 8114952:	d104      	bne.n	811495e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8114954:	6879      	ldr	r1, [r7, #4]
 8114956:	200b      	movs	r0, #11
 8114958:	f7ff f8fa 	bl	8113b50 <memp_free>
 811495c:	e00d      	b.n	811497a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 811495e:	7bfb      	ldrb	r3, [r7, #15]
 8114960:	2b00      	cmp	r3, #0
 8114962:	d103      	bne.n	811496c <pbuf_free+0xd4>
          mem_free(p);
 8114964:	6878      	ldr	r0, [r7, #4]
 8114966:	f7fe fd4d 	bl	8113404 <mem_free>
 811496a:	e006      	b.n	811497a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 811496c:	4b0b      	ldr	r3, [pc, #44]	@ (811499c <pbuf_free+0x104>)
 811496e:	f240 320f 	movw	r2, #783	@ 0x30f
 8114972:	490f      	ldr	r1, [pc, #60]	@ (81149b0 <pbuf_free+0x118>)
 8114974:	480b      	ldr	r0, [pc, #44]	@ (81149a4 <pbuf_free+0x10c>)
 8114976:	f007 fa51 	bl	811be1c <iprintf>
        }
      }
      count++;
 811497a:	7ffb      	ldrb	r3, [r7, #31]
 811497c:	3301      	adds	r3, #1
 811497e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8114980:	693b      	ldr	r3, [r7, #16]
 8114982:	607b      	str	r3, [r7, #4]
 8114984:	e001      	b.n	811498a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8114986:	2300      	movs	r3, #0
 8114988:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 811498a:	687b      	ldr	r3, [r7, #4]
 811498c:	2b00      	cmp	r3, #0
 811498e:	d199      	bne.n	81148c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8114990:	7ffb      	ldrb	r3, [r7, #31]
}
 8114992:	4618      	mov	r0, r3
 8114994:	3720      	adds	r7, #32
 8114996:	46bd      	mov	sp, r7
 8114998:	bd80      	pop	{r7, pc}
 811499a:	bf00      	nop
 811499c:	0811db70 	.word	0x0811db70
 81149a0:	0811dd14 	.word	0x0811dd14
 81149a4:	0811dc10 	.word	0x0811dc10
 81149a8:	0811dd40 	.word	0x0811dd40
 81149ac:	0811dd58 	.word	0x0811dd58
 81149b0:	0811dd7c 	.word	0x0811dd7c

081149b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 81149b4:	b480      	push	{r7}
 81149b6:	b085      	sub	sp, #20
 81149b8:	af00      	add	r7, sp, #0
 81149ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 81149bc:	2300      	movs	r3, #0
 81149be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 81149c0:	e005      	b.n	81149ce <pbuf_clen+0x1a>
    ++len;
 81149c2:	89fb      	ldrh	r3, [r7, #14]
 81149c4:	3301      	adds	r3, #1
 81149c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 81149c8:	687b      	ldr	r3, [r7, #4]
 81149ca:	681b      	ldr	r3, [r3, #0]
 81149cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 81149ce:	687b      	ldr	r3, [r7, #4]
 81149d0:	2b00      	cmp	r3, #0
 81149d2:	d1f6      	bne.n	81149c2 <pbuf_clen+0xe>
  }
  return len;
 81149d4:	89fb      	ldrh	r3, [r7, #14]
}
 81149d6:	4618      	mov	r0, r3
 81149d8:	3714      	adds	r7, #20
 81149da:	46bd      	mov	sp, r7
 81149dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81149e0:	4770      	bx	lr
	...

081149e4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 81149e4:	b580      	push	{r7, lr}
 81149e6:	b084      	sub	sp, #16
 81149e8:	af00      	add	r7, sp, #0
 81149ea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 81149ec:	687b      	ldr	r3, [r7, #4]
 81149ee:	2b00      	cmp	r3, #0
 81149f0:	d016      	beq.n	8114a20 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 81149f2:	f000 fabf 	bl	8114f74 <sys_arch_protect>
 81149f6:	60f8      	str	r0, [r7, #12]
 81149f8:	687b      	ldr	r3, [r7, #4]
 81149fa:	7b9b      	ldrb	r3, [r3, #14]
 81149fc:	3301      	adds	r3, #1
 81149fe:	b2da      	uxtb	r2, r3
 8114a00:	687b      	ldr	r3, [r7, #4]
 8114a02:	739a      	strb	r2, [r3, #14]
 8114a04:	68f8      	ldr	r0, [r7, #12]
 8114a06:	f000 fac3 	bl	8114f90 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8114a0a:	687b      	ldr	r3, [r7, #4]
 8114a0c:	7b9b      	ldrb	r3, [r3, #14]
 8114a0e:	2b00      	cmp	r3, #0
 8114a10:	d106      	bne.n	8114a20 <pbuf_ref+0x3c>
 8114a12:	4b05      	ldr	r3, [pc, #20]	@ (8114a28 <pbuf_ref+0x44>)
 8114a14:	f240 3242 	movw	r2, #834	@ 0x342
 8114a18:	4904      	ldr	r1, [pc, #16]	@ (8114a2c <pbuf_ref+0x48>)
 8114a1a:	4805      	ldr	r0, [pc, #20]	@ (8114a30 <pbuf_ref+0x4c>)
 8114a1c:	f007 f9fe 	bl	811be1c <iprintf>
  }
}
 8114a20:	bf00      	nop
 8114a22:	3710      	adds	r7, #16
 8114a24:	46bd      	mov	sp, r7
 8114a26:	bd80      	pop	{r7, pc}
 8114a28:	0811db70 	.word	0x0811db70
 8114a2c:	0811dd90 	.word	0x0811dd90
 8114a30:	0811dc10 	.word	0x0811dc10

08114a34 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8114a34:	b580      	push	{r7, lr}
 8114a36:	b084      	sub	sp, #16
 8114a38:	af00      	add	r7, sp, #0
 8114a3a:	6078      	str	r0, [r7, #4]
 8114a3c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8114a3e:	687b      	ldr	r3, [r7, #4]
 8114a40:	2b00      	cmp	r3, #0
 8114a42:	d002      	beq.n	8114a4a <pbuf_cat+0x16>
 8114a44:	683b      	ldr	r3, [r7, #0]
 8114a46:	2b00      	cmp	r3, #0
 8114a48:	d107      	bne.n	8114a5a <pbuf_cat+0x26>
 8114a4a:	4b20      	ldr	r3, [pc, #128]	@ (8114acc <pbuf_cat+0x98>)
 8114a4c:	f240 3259 	movw	r2, #857	@ 0x359
 8114a50:	491f      	ldr	r1, [pc, #124]	@ (8114ad0 <pbuf_cat+0x9c>)
 8114a52:	4820      	ldr	r0, [pc, #128]	@ (8114ad4 <pbuf_cat+0xa0>)
 8114a54:	f007 f9e2 	bl	811be1c <iprintf>
 8114a58:	e034      	b.n	8114ac4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8114a5a:	687b      	ldr	r3, [r7, #4]
 8114a5c:	60fb      	str	r3, [r7, #12]
 8114a5e:	e00a      	b.n	8114a76 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8114a60:	68fb      	ldr	r3, [r7, #12]
 8114a62:	891a      	ldrh	r2, [r3, #8]
 8114a64:	683b      	ldr	r3, [r7, #0]
 8114a66:	891b      	ldrh	r3, [r3, #8]
 8114a68:	4413      	add	r3, r2
 8114a6a:	b29a      	uxth	r2, r3
 8114a6c:	68fb      	ldr	r3, [r7, #12]
 8114a6e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8114a70:	68fb      	ldr	r3, [r7, #12]
 8114a72:	681b      	ldr	r3, [r3, #0]
 8114a74:	60fb      	str	r3, [r7, #12]
 8114a76:	68fb      	ldr	r3, [r7, #12]
 8114a78:	681b      	ldr	r3, [r3, #0]
 8114a7a:	2b00      	cmp	r3, #0
 8114a7c:	d1f0      	bne.n	8114a60 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8114a7e:	68fb      	ldr	r3, [r7, #12]
 8114a80:	891a      	ldrh	r2, [r3, #8]
 8114a82:	68fb      	ldr	r3, [r7, #12]
 8114a84:	895b      	ldrh	r3, [r3, #10]
 8114a86:	429a      	cmp	r2, r3
 8114a88:	d006      	beq.n	8114a98 <pbuf_cat+0x64>
 8114a8a:	4b10      	ldr	r3, [pc, #64]	@ (8114acc <pbuf_cat+0x98>)
 8114a8c:	f240 3262 	movw	r2, #866	@ 0x362
 8114a90:	4911      	ldr	r1, [pc, #68]	@ (8114ad8 <pbuf_cat+0xa4>)
 8114a92:	4810      	ldr	r0, [pc, #64]	@ (8114ad4 <pbuf_cat+0xa0>)
 8114a94:	f007 f9c2 	bl	811be1c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8114a98:	68fb      	ldr	r3, [r7, #12]
 8114a9a:	681b      	ldr	r3, [r3, #0]
 8114a9c:	2b00      	cmp	r3, #0
 8114a9e:	d006      	beq.n	8114aae <pbuf_cat+0x7a>
 8114aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8114acc <pbuf_cat+0x98>)
 8114aa2:	f240 3263 	movw	r2, #867	@ 0x363
 8114aa6:	490d      	ldr	r1, [pc, #52]	@ (8114adc <pbuf_cat+0xa8>)
 8114aa8:	480a      	ldr	r0, [pc, #40]	@ (8114ad4 <pbuf_cat+0xa0>)
 8114aaa:	f007 f9b7 	bl	811be1c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8114aae:	68fb      	ldr	r3, [r7, #12]
 8114ab0:	891a      	ldrh	r2, [r3, #8]
 8114ab2:	683b      	ldr	r3, [r7, #0]
 8114ab4:	891b      	ldrh	r3, [r3, #8]
 8114ab6:	4413      	add	r3, r2
 8114ab8:	b29a      	uxth	r2, r3
 8114aba:	68fb      	ldr	r3, [r7, #12]
 8114abc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8114abe:	68fb      	ldr	r3, [r7, #12]
 8114ac0:	683a      	ldr	r2, [r7, #0]
 8114ac2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8114ac4:	3710      	adds	r7, #16
 8114ac6:	46bd      	mov	sp, r7
 8114ac8:	bd80      	pop	{r7, pc}
 8114aca:	bf00      	nop
 8114acc:	0811db70 	.word	0x0811db70
 8114ad0:	0811dda4 	.word	0x0811dda4
 8114ad4:	0811dc10 	.word	0x0811dc10
 8114ad8:	0811dddc 	.word	0x0811dddc
 8114adc:	0811de0c 	.word	0x0811de0c

08114ae0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8114ae0:	b580      	push	{r7, lr}
 8114ae2:	b086      	sub	sp, #24
 8114ae4:	af00      	add	r7, sp, #0
 8114ae6:	6078      	str	r0, [r7, #4]
 8114ae8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8114aea:	2300      	movs	r3, #0
 8114aec:	617b      	str	r3, [r7, #20]
 8114aee:	2300      	movs	r3, #0
 8114af0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8114af2:	687b      	ldr	r3, [r7, #4]
 8114af4:	2b00      	cmp	r3, #0
 8114af6:	d008      	beq.n	8114b0a <pbuf_copy+0x2a>
 8114af8:	683b      	ldr	r3, [r7, #0]
 8114afa:	2b00      	cmp	r3, #0
 8114afc:	d005      	beq.n	8114b0a <pbuf_copy+0x2a>
 8114afe:	687b      	ldr	r3, [r7, #4]
 8114b00:	891a      	ldrh	r2, [r3, #8]
 8114b02:	683b      	ldr	r3, [r7, #0]
 8114b04:	891b      	ldrh	r3, [r3, #8]
 8114b06:	429a      	cmp	r2, r3
 8114b08:	d209      	bcs.n	8114b1e <pbuf_copy+0x3e>
 8114b0a:	4b57      	ldr	r3, [pc, #348]	@ (8114c68 <pbuf_copy+0x188>)
 8114b0c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8114b10:	4956      	ldr	r1, [pc, #344]	@ (8114c6c <pbuf_copy+0x18c>)
 8114b12:	4857      	ldr	r0, [pc, #348]	@ (8114c70 <pbuf_copy+0x190>)
 8114b14:	f007 f982 	bl	811be1c <iprintf>
 8114b18:	f06f 030f 	mvn.w	r3, #15
 8114b1c:	e09f      	b.n	8114c5e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8114b1e:	687b      	ldr	r3, [r7, #4]
 8114b20:	895b      	ldrh	r3, [r3, #10]
 8114b22:	461a      	mov	r2, r3
 8114b24:	697b      	ldr	r3, [r7, #20]
 8114b26:	1ad2      	subs	r2, r2, r3
 8114b28:	683b      	ldr	r3, [r7, #0]
 8114b2a:	895b      	ldrh	r3, [r3, #10]
 8114b2c:	4619      	mov	r1, r3
 8114b2e:	693b      	ldr	r3, [r7, #16]
 8114b30:	1acb      	subs	r3, r1, r3
 8114b32:	429a      	cmp	r2, r3
 8114b34:	d306      	bcc.n	8114b44 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8114b36:	683b      	ldr	r3, [r7, #0]
 8114b38:	895b      	ldrh	r3, [r3, #10]
 8114b3a:	461a      	mov	r2, r3
 8114b3c:	693b      	ldr	r3, [r7, #16]
 8114b3e:	1ad3      	subs	r3, r2, r3
 8114b40:	60fb      	str	r3, [r7, #12]
 8114b42:	e005      	b.n	8114b50 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8114b44:	687b      	ldr	r3, [r7, #4]
 8114b46:	895b      	ldrh	r3, [r3, #10]
 8114b48:	461a      	mov	r2, r3
 8114b4a:	697b      	ldr	r3, [r7, #20]
 8114b4c:	1ad3      	subs	r3, r2, r3
 8114b4e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8114b50:	687b      	ldr	r3, [r7, #4]
 8114b52:	685a      	ldr	r2, [r3, #4]
 8114b54:	697b      	ldr	r3, [r7, #20]
 8114b56:	18d0      	adds	r0, r2, r3
 8114b58:	683b      	ldr	r3, [r7, #0]
 8114b5a:	685a      	ldr	r2, [r3, #4]
 8114b5c:	693b      	ldr	r3, [r7, #16]
 8114b5e:	4413      	add	r3, r2
 8114b60:	68fa      	ldr	r2, [r7, #12]
 8114b62:	4619      	mov	r1, r3
 8114b64:	f007 fb0b 	bl	811c17e <memcpy>
    offset_to += len;
 8114b68:	697a      	ldr	r2, [r7, #20]
 8114b6a:	68fb      	ldr	r3, [r7, #12]
 8114b6c:	4413      	add	r3, r2
 8114b6e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8114b70:	693a      	ldr	r2, [r7, #16]
 8114b72:	68fb      	ldr	r3, [r7, #12]
 8114b74:	4413      	add	r3, r2
 8114b76:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8114b78:	687b      	ldr	r3, [r7, #4]
 8114b7a:	895b      	ldrh	r3, [r3, #10]
 8114b7c:	461a      	mov	r2, r3
 8114b7e:	697b      	ldr	r3, [r7, #20]
 8114b80:	4293      	cmp	r3, r2
 8114b82:	d906      	bls.n	8114b92 <pbuf_copy+0xb2>
 8114b84:	4b38      	ldr	r3, [pc, #224]	@ (8114c68 <pbuf_copy+0x188>)
 8114b86:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8114b8a:	493a      	ldr	r1, [pc, #232]	@ (8114c74 <pbuf_copy+0x194>)
 8114b8c:	4838      	ldr	r0, [pc, #224]	@ (8114c70 <pbuf_copy+0x190>)
 8114b8e:	f007 f945 	bl	811be1c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8114b92:	683b      	ldr	r3, [r7, #0]
 8114b94:	895b      	ldrh	r3, [r3, #10]
 8114b96:	461a      	mov	r2, r3
 8114b98:	693b      	ldr	r3, [r7, #16]
 8114b9a:	4293      	cmp	r3, r2
 8114b9c:	d906      	bls.n	8114bac <pbuf_copy+0xcc>
 8114b9e:	4b32      	ldr	r3, [pc, #200]	@ (8114c68 <pbuf_copy+0x188>)
 8114ba0:	f240 32da 	movw	r2, #986	@ 0x3da
 8114ba4:	4934      	ldr	r1, [pc, #208]	@ (8114c78 <pbuf_copy+0x198>)
 8114ba6:	4832      	ldr	r0, [pc, #200]	@ (8114c70 <pbuf_copy+0x190>)
 8114ba8:	f007 f938 	bl	811be1c <iprintf>
    if (offset_from >= p_from->len) {
 8114bac:	683b      	ldr	r3, [r7, #0]
 8114bae:	895b      	ldrh	r3, [r3, #10]
 8114bb0:	461a      	mov	r2, r3
 8114bb2:	693b      	ldr	r3, [r7, #16]
 8114bb4:	4293      	cmp	r3, r2
 8114bb6:	d304      	bcc.n	8114bc2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8114bb8:	2300      	movs	r3, #0
 8114bba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8114bbc:	683b      	ldr	r3, [r7, #0]
 8114bbe:	681b      	ldr	r3, [r3, #0]
 8114bc0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8114bc2:	687b      	ldr	r3, [r7, #4]
 8114bc4:	895b      	ldrh	r3, [r3, #10]
 8114bc6:	461a      	mov	r2, r3
 8114bc8:	697b      	ldr	r3, [r7, #20]
 8114bca:	4293      	cmp	r3, r2
 8114bcc:	d114      	bne.n	8114bf8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8114bce:	2300      	movs	r3, #0
 8114bd0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8114bd2:	687b      	ldr	r3, [r7, #4]
 8114bd4:	681b      	ldr	r3, [r3, #0]
 8114bd6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8114bd8:	687b      	ldr	r3, [r7, #4]
 8114bda:	2b00      	cmp	r3, #0
 8114bdc:	d10c      	bne.n	8114bf8 <pbuf_copy+0x118>
 8114bde:	683b      	ldr	r3, [r7, #0]
 8114be0:	2b00      	cmp	r3, #0
 8114be2:	d009      	beq.n	8114bf8 <pbuf_copy+0x118>
 8114be4:	4b20      	ldr	r3, [pc, #128]	@ (8114c68 <pbuf_copy+0x188>)
 8114be6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8114bea:	4924      	ldr	r1, [pc, #144]	@ (8114c7c <pbuf_copy+0x19c>)
 8114bec:	4820      	ldr	r0, [pc, #128]	@ (8114c70 <pbuf_copy+0x190>)
 8114bee:	f007 f915 	bl	811be1c <iprintf>
 8114bf2:	f06f 030f 	mvn.w	r3, #15
 8114bf6:	e032      	b.n	8114c5e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8114bf8:	683b      	ldr	r3, [r7, #0]
 8114bfa:	2b00      	cmp	r3, #0
 8114bfc:	d013      	beq.n	8114c26 <pbuf_copy+0x146>
 8114bfe:	683b      	ldr	r3, [r7, #0]
 8114c00:	895a      	ldrh	r2, [r3, #10]
 8114c02:	683b      	ldr	r3, [r7, #0]
 8114c04:	891b      	ldrh	r3, [r3, #8]
 8114c06:	429a      	cmp	r2, r3
 8114c08:	d10d      	bne.n	8114c26 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8114c0a:	683b      	ldr	r3, [r7, #0]
 8114c0c:	681b      	ldr	r3, [r3, #0]
 8114c0e:	2b00      	cmp	r3, #0
 8114c10:	d009      	beq.n	8114c26 <pbuf_copy+0x146>
 8114c12:	4b15      	ldr	r3, [pc, #84]	@ (8114c68 <pbuf_copy+0x188>)
 8114c14:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8114c18:	4919      	ldr	r1, [pc, #100]	@ (8114c80 <pbuf_copy+0x1a0>)
 8114c1a:	4815      	ldr	r0, [pc, #84]	@ (8114c70 <pbuf_copy+0x190>)
 8114c1c:	f007 f8fe 	bl	811be1c <iprintf>
 8114c20:	f06f 0305 	mvn.w	r3, #5
 8114c24:	e01b      	b.n	8114c5e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8114c26:	687b      	ldr	r3, [r7, #4]
 8114c28:	2b00      	cmp	r3, #0
 8114c2a:	d013      	beq.n	8114c54 <pbuf_copy+0x174>
 8114c2c:	687b      	ldr	r3, [r7, #4]
 8114c2e:	895a      	ldrh	r2, [r3, #10]
 8114c30:	687b      	ldr	r3, [r7, #4]
 8114c32:	891b      	ldrh	r3, [r3, #8]
 8114c34:	429a      	cmp	r2, r3
 8114c36:	d10d      	bne.n	8114c54 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8114c38:	687b      	ldr	r3, [r7, #4]
 8114c3a:	681b      	ldr	r3, [r3, #0]
 8114c3c:	2b00      	cmp	r3, #0
 8114c3e:	d009      	beq.n	8114c54 <pbuf_copy+0x174>
 8114c40:	4b09      	ldr	r3, [pc, #36]	@ (8114c68 <pbuf_copy+0x188>)
 8114c42:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8114c46:	490e      	ldr	r1, [pc, #56]	@ (8114c80 <pbuf_copy+0x1a0>)
 8114c48:	4809      	ldr	r0, [pc, #36]	@ (8114c70 <pbuf_copy+0x190>)
 8114c4a:	f007 f8e7 	bl	811be1c <iprintf>
 8114c4e:	f06f 0305 	mvn.w	r3, #5
 8114c52:	e004      	b.n	8114c5e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8114c54:	683b      	ldr	r3, [r7, #0]
 8114c56:	2b00      	cmp	r3, #0
 8114c58:	f47f af61 	bne.w	8114b1e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8114c5c:	2300      	movs	r3, #0
}
 8114c5e:	4618      	mov	r0, r3
 8114c60:	3718      	adds	r7, #24
 8114c62:	46bd      	mov	sp, r7
 8114c64:	bd80      	pop	{r7, pc}
 8114c66:	bf00      	nop
 8114c68:	0811db70 	.word	0x0811db70
 8114c6c:	0811de58 	.word	0x0811de58
 8114c70:	0811dc10 	.word	0x0811dc10
 8114c74:	0811de88 	.word	0x0811de88
 8114c78:	0811dea0 	.word	0x0811dea0
 8114c7c:	0811debc 	.word	0x0811debc
 8114c80:	0811decc 	.word	0x0811decc

08114c84 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8114c84:	b580      	push	{r7, lr}
 8114c86:	b088      	sub	sp, #32
 8114c88:	af00      	add	r7, sp, #0
 8114c8a:	60f8      	str	r0, [r7, #12]
 8114c8c:	60b9      	str	r1, [r7, #8]
 8114c8e:	4611      	mov	r1, r2
 8114c90:	461a      	mov	r2, r3
 8114c92:	460b      	mov	r3, r1
 8114c94:	80fb      	strh	r3, [r7, #6]
 8114c96:	4613      	mov	r3, r2
 8114c98:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8114c9a:	2300      	movs	r3, #0
 8114c9c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8114c9e:	2300      	movs	r3, #0
 8114ca0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8114ca2:	68fb      	ldr	r3, [r7, #12]
 8114ca4:	2b00      	cmp	r3, #0
 8114ca6:	d108      	bne.n	8114cba <pbuf_copy_partial+0x36>
 8114ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8114d58 <pbuf_copy_partial+0xd4>)
 8114caa:	f240 420a 	movw	r2, #1034	@ 0x40a
 8114cae:	492b      	ldr	r1, [pc, #172]	@ (8114d5c <pbuf_copy_partial+0xd8>)
 8114cb0:	482b      	ldr	r0, [pc, #172]	@ (8114d60 <pbuf_copy_partial+0xdc>)
 8114cb2:	f007 f8b3 	bl	811be1c <iprintf>
 8114cb6:	2300      	movs	r3, #0
 8114cb8:	e04a      	b.n	8114d50 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8114cba:	68bb      	ldr	r3, [r7, #8]
 8114cbc:	2b00      	cmp	r3, #0
 8114cbe:	d108      	bne.n	8114cd2 <pbuf_copy_partial+0x4e>
 8114cc0:	4b25      	ldr	r3, [pc, #148]	@ (8114d58 <pbuf_copy_partial+0xd4>)
 8114cc2:	f240 420b 	movw	r2, #1035	@ 0x40b
 8114cc6:	4927      	ldr	r1, [pc, #156]	@ (8114d64 <pbuf_copy_partial+0xe0>)
 8114cc8:	4825      	ldr	r0, [pc, #148]	@ (8114d60 <pbuf_copy_partial+0xdc>)
 8114cca:	f007 f8a7 	bl	811be1c <iprintf>
 8114cce:	2300      	movs	r3, #0
 8114cd0:	e03e      	b.n	8114d50 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8114cd2:	68fb      	ldr	r3, [r7, #12]
 8114cd4:	61fb      	str	r3, [r7, #28]
 8114cd6:	e034      	b.n	8114d42 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8114cd8:	88bb      	ldrh	r3, [r7, #4]
 8114cda:	2b00      	cmp	r3, #0
 8114cdc:	d00a      	beq.n	8114cf4 <pbuf_copy_partial+0x70>
 8114cde:	69fb      	ldr	r3, [r7, #28]
 8114ce0:	895b      	ldrh	r3, [r3, #10]
 8114ce2:	88ba      	ldrh	r2, [r7, #4]
 8114ce4:	429a      	cmp	r2, r3
 8114ce6:	d305      	bcc.n	8114cf4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8114ce8:	69fb      	ldr	r3, [r7, #28]
 8114cea:	895b      	ldrh	r3, [r3, #10]
 8114cec:	88ba      	ldrh	r2, [r7, #4]
 8114cee:	1ad3      	subs	r3, r2, r3
 8114cf0:	80bb      	strh	r3, [r7, #4]
 8114cf2:	e023      	b.n	8114d3c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8114cf4:	69fb      	ldr	r3, [r7, #28]
 8114cf6:	895a      	ldrh	r2, [r3, #10]
 8114cf8:	88bb      	ldrh	r3, [r7, #4]
 8114cfa:	1ad3      	subs	r3, r2, r3
 8114cfc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8114cfe:	8b3a      	ldrh	r2, [r7, #24]
 8114d00:	88fb      	ldrh	r3, [r7, #6]
 8114d02:	429a      	cmp	r2, r3
 8114d04:	d901      	bls.n	8114d0a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8114d06:	88fb      	ldrh	r3, [r7, #6]
 8114d08:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8114d0a:	8b7b      	ldrh	r3, [r7, #26]
 8114d0c:	68ba      	ldr	r2, [r7, #8]
 8114d0e:	18d0      	adds	r0, r2, r3
 8114d10:	69fb      	ldr	r3, [r7, #28]
 8114d12:	685a      	ldr	r2, [r3, #4]
 8114d14:	88bb      	ldrh	r3, [r7, #4]
 8114d16:	4413      	add	r3, r2
 8114d18:	8b3a      	ldrh	r2, [r7, #24]
 8114d1a:	4619      	mov	r1, r3
 8114d1c:	f007 fa2f 	bl	811c17e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8114d20:	8afa      	ldrh	r2, [r7, #22]
 8114d22:	8b3b      	ldrh	r3, [r7, #24]
 8114d24:	4413      	add	r3, r2
 8114d26:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8114d28:	8b7a      	ldrh	r2, [r7, #26]
 8114d2a:	8b3b      	ldrh	r3, [r7, #24]
 8114d2c:	4413      	add	r3, r2
 8114d2e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8114d30:	88fa      	ldrh	r2, [r7, #6]
 8114d32:	8b3b      	ldrh	r3, [r7, #24]
 8114d34:	1ad3      	subs	r3, r2, r3
 8114d36:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8114d38:	2300      	movs	r3, #0
 8114d3a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8114d3c:	69fb      	ldr	r3, [r7, #28]
 8114d3e:	681b      	ldr	r3, [r3, #0]
 8114d40:	61fb      	str	r3, [r7, #28]
 8114d42:	88fb      	ldrh	r3, [r7, #6]
 8114d44:	2b00      	cmp	r3, #0
 8114d46:	d002      	beq.n	8114d4e <pbuf_copy_partial+0xca>
 8114d48:	69fb      	ldr	r3, [r7, #28]
 8114d4a:	2b00      	cmp	r3, #0
 8114d4c:	d1c4      	bne.n	8114cd8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8114d4e:	8afb      	ldrh	r3, [r7, #22]
}
 8114d50:	4618      	mov	r0, r3
 8114d52:	3720      	adds	r7, #32
 8114d54:	46bd      	mov	sp, r7
 8114d56:	bd80      	pop	{r7, pc}
 8114d58:	0811db70 	.word	0x0811db70
 8114d5c:	0811def8 	.word	0x0811def8
 8114d60:	0811dc10 	.word	0x0811dc10
 8114d64:	0811df18 	.word	0x0811df18

08114d68 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8114d68:	b580      	push	{r7, lr}
 8114d6a:	b084      	sub	sp, #16
 8114d6c:	af00      	add	r7, sp, #0
 8114d6e:	4603      	mov	r3, r0
 8114d70:	603a      	str	r2, [r7, #0]
 8114d72:	71fb      	strb	r3, [r7, #7]
 8114d74:	460b      	mov	r3, r1
 8114d76:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8114d78:	683b      	ldr	r3, [r7, #0]
 8114d7a:	8919      	ldrh	r1, [r3, #8]
 8114d7c:	88ba      	ldrh	r2, [r7, #4]
 8114d7e:	79fb      	ldrb	r3, [r7, #7]
 8114d80:	4618      	mov	r0, r3
 8114d82:	f7ff faa5 	bl	81142d0 <pbuf_alloc>
 8114d86:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8114d88:	68fb      	ldr	r3, [r7, #12]
 8114d8a:	2b00      	cmp	r3, #0
 8114d8c:	d101      	bne.n	8114d92 <pbuf_clone+0x2a>
    return NULL;
 8114d8e:	2300      	movs	r3, #0
 8114d90:	e011      	b.n	8114db6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8114d92:	6839      	ldr	r1, [r7, #0]
 8114d94:	68f8      	ldr	r0, [r7, #12]
 8114d96:	f7ff fea3 	bl	8114ae0 <pbuf_copy>
 8114d9a:	4603      	mov	r3, r0
 8114d9c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8114d9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8114da2:	2b00      	cmp	r3, #0
 8114da4:	d006      	beq.n	8114db4 <pbuf_clone+0x4c>
 8114da6:	4b06      	ldr	r3, [pc, #24]	@ (8114dc0 <pbuf_clone+0x58>)
 8114da8:	f240 5224 	movw	r2, #1316	@ 0x524
 8114dac:	4905      	ldr	r1, [pc, #20]	@ (8114dc4 <pbuf_clone+0x5c>)
 8114dae:	4806      	ldr	r0, [pc, #24]	@ (8114dc8 <pbuf_clone+0x60>)
 8114db0:	f007 f834 	bl	811be1c <iprintf>
  return q;
 8114db4:	68fb      	ldr	r3, [r7, #12]
}
 8114db6:	4618      	mov	r0, r3
 8114db8:	3710      	adds	r7, #16
 8114dba:	46bd      	mov	sp, r7
 8114dbc:	bd80      	pop	{r7, pc}
 8114dbe:	bf00      	nop
 8114dc0:	0811db70 	.word	0x0811db70
 8114dc4:	0811e024 	.word	0x0811e024
 8114dc8:	0811dc10 	.word	0x0811dc10

08114dcc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8114dcc:	b580      	push	{r7, lr}
 8114dce:	b082      	sub	sp, #8
 8114dd0:	af00      	add	r7, sp, #0
 8114dd2:	6078      	str	r0, [r7, #4]
 8114dd4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8114dd6:	683b      	ldr	r3, [r7, #0]
 8114dd8:	2200      	movs	r2, #0
 8114dda:	2104      	movs	r1, #4
 8114ddc:	4618      	mov	r0, r3
 8114dde:	f7f7 fd1f 	bl	810c820 <osMessageQueueNew>
 8114de2:	4602      	mov	r2, r0
 8114de4:	687b      	ldr	r3, [r7, #4]
 8114de6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8114de8:	687b      	ldr	r3, [r7, #4]
 8114dea:	681b      	ldr	r3, [r3, #0]
 8114dec:	2b00      	cmp	r3, #0
 8114dee:	d102      	bne.n	8114df6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8114df0:	f04f 33ff 	mov.w	r3, #4294967295
 8114df4:	e000      	b.n	8114df8 <sys_mbox_new+0x2c>

  return ERR_OK;
 8114df6:	2300      	movs	r3, #0
}
 8114df8:	4618      	mov	r0, r3
 8114dfa:	3708      	adds	r7, #8
 8114dfc:	46bd      	mov	sp, r7
 8114dfe:	bd80      	pop	{r7, pc}

08114e00 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8114e00:	b580      	push	{r7, lr}
 8114e02:	b084      	sub	sp, #16
 8114e04:	af00      	add	r7, sp, #0
 8114e06:	6078      	str	r0, [r7, #4]
 8114e08:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8114e0a:	687b      	ldr	r3, [r7, #4]
 8114e0c:	6818      	ldr	r0, [r3, #0]
 8114e0e:	4639      	mov	r1, r7
 8114e10:	2300      	movs	r3, #0
 8114e12:	2200      	movs	r2, #0
 8114e14:	f7f7 fd78 	bl	810c908 <osMessageQueuePut>
 8114e18:	4603      	mov	r3, r0
 8114e1a:	2b00      	cmp	r3, #0
 8114e1c:	d102      	bne.n	8114e24 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8114e1e:	2300      	movs	r3, #0
 8114e20:	73fb      	strb	r3, [r7, #15]
 8114e22:	e001      	b.n	8114e28 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8114e24:	23ff      	movs	r3, #255	@ 0xff
 8114e26:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8114e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8114e2c:	4618      	mov	r0, r3
 8114e2e:	3710      	adds	r7, #16
 8114e30:	46bd      	mov	sp, r7
 8114e32:	bd80      	pop	{r7, pc}

08114e34 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8114e34:	b580      	push	{r7, lr}
 8114e36:	b086      	sub	sp, #24
 8114e38:	af00      	add	r7, sp, #0
 8114e3a:	60f8      	str	r0, [r7, #12]
 8114e3c:	60b9      	str	r1, [r7, #8]
 8114e3e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8114e40:	f7f7 f9fe 	bl	810c240 <osKernelGetTickCount>
 8114e44:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8114e46:	687b      	ldr	r3, [r7, #4]
 8114e48:	2b00      	cmp	r3, #0
 8114e4a:	d013      	beq.n	8114e74 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8114e4c:	68fb      	ldr	r3, [r7, #12]
 8114e4e:	6818      	ldr	r0, [r3, #0]
 8114e50:	687b      	ldr	r3, [r7, #4]
 8114e52:	2200      	movs	r2, #0
 8114e54:	68b9      	ldr	r1, [r7, #8]
 8114e56:	f7f7 fdb7 	bl	810c9c8 <osMessageQueueGet>
 8114e5a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8114e5c:	693b      	ldr	r3, [r7, #16]
 8114e5e:	2b00      	cmp	r3, #0
 8114e60:	d105      	bne.n	8114e6e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8114e62:	f7f7 f9ed 	bl	810c240 <osKernelGetTickCount>
 8114e66:	4602      	mov	r2, r0
 8114e68:	697b      	ldr	r3, [r7, #20]
 8114e6a:	1ad3      	subs	r3, r2, r3
 8114e6c:	e00f      	b.n	8114e8e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8114e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8114e72:	e00c      	b.n	8114e8e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8114e74:	68fb      	ldr	r3, [r7, #12]
 8114e76:	6818      	ldr	r0, [r3, #0]
 8114e78:	f04f 33ff 	mov.w	r3, #4294967295
 8114e7c:	2200      	movs	r2, #0
 8114e7e:	68b9      	ldr	r1, [r7, #8]
 8114e80:	f7f7 fda2 	bl	810c9c8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8114e84:	f7f7 f9dc 	bl	810c240 <osKernelGetTickCount>
 8114e88:	4602      	mov	r2, r0
 8114e8a:	697b      	ldr	r3, [r7, #20]
 8114e8c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8114e8e:	4618      	mov	r0, r3
 8114e90:	3718      	adds	r7, #24
 8114e92:	46bd      	mov	sp, r7
 8114e94:	bd80      	pop	{r7, pc}

08114e96 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8114e96:	b480      	push	{r7}
 8114e98:	b083      	sub	sp, #12
 8114e9a:	af00      	add	r7, sp, #0
 8114e9c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8114e9e:	687b      	ldr	r3, [r7, #4]
 8114ea0:	681b      	ldr	r3, [r3, #0]
 8114ea2:	2b00      	cmp	r3, #0
 8114ea4:	d101      	bne.n	8114eaa <sys_mbox_valid+0x14>
    return 0;
 8114ea6:	2300      	movs	r3, #0
 8114ea8:	e000      	b.n	8114eac <sys_mbox_valid+0x16>
  else
    return 1;
 8114eaa:	2301      	movs	r3, #1
}
 8114eac:	4618      	mov	r0, r3
 8114eae:	370c      	adds	r7, #12
 8114eb0:	46bd      	mov	sp, r7
 8114eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114eb6:	4770      	bx	lr

08114eb8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8114eb8:	b580      	push	{r7, lr}
 8114eba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8114ebc:	2000      	movs	r0, #0
 8114ebe:	f7f7 fa81 	bl	810c3c4 <osMutexNew>
 8114ec2:	4603      	mov	r3, r0
 8114ec4:	4a01      	ldr	r2, [pc, #4]	@ (8114ecc <sys_init+0x14>)
 8114ec6:	6013      	str	r3, [r2, #0]
#endif
}
 8114ec8:	bf00      	nop
 8114eca:	bd80      	pop	{r7, pc}
 8114ecc:	10011d10 	.word	0x10011d10

08114ed0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8114ed0:	b580      	push	{r7, lr}
 8114ed2:	b082      	sub	sp, #8
 8114ed4:	af00      	add	r7, sp, #0
 8114ed6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8114ed8:	2000      	movs	r0, #0
 8114eda:	f7f7 fa73 	bl	810c3c4 <osMutexNew>
 8114ede:	4602      	mov	r2, r0
 8114ee0:	687b      	ldr	r3, [r7, #4]
 8114ee2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8114ee4:	687b      	ldr	r3, [r7, #4]
 8114ee6:	681b      	ldr	r3, [r3, #0]
 8114ee8:	2b00      	cmp	r3, #0
 8114eea:	d102      	bne.n	8114ef2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8114eec:	f04f 33ff 	mov.w	r3, #4294967295
 8114ef0:	e000      	b.n	8114ef4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8114ef2:	2300      	movs	r3, #0
}
 8114ef4:	4618      	mov	r0, r3
 8114ef6:	3708      	adds	r7, #8
 8114ef8:	46bd      	mov	sp, r7
 8114efa:	bd80      	pop	{r7, pc}

08114efc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8114efc:	b580      	push	{r7, lr}
 8114efe:	b082      	sub	sp, #8
 8114f00:	af00      	add	r7, sp, #0
 8114f02:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8114f04:	687b      	ldr	r3, [r7, #4]
 8114f06:	681b      	ldr	r3, [r3, #0]
 8114f08:	f04f 31ff 	mov.w	r1, #4294967295
 8114f0c:	4618      	mov	r0, r3
 8114f0e:	f7f7 fadf 	bl	810c4d0 <osMutexAcquire>
#endif
}
 8114f12:	bf00      	nop
 8114f14:	3708      	adds	r7, #8
 8114f16:	46bd      	mov	sp, r7
 8114f18:	bd80      	pop	{r7, pc}

08114f1a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8114f1a:	b580      	push	{r7, lr}
 8114f1c:	b082      	sub	sp, #8
 8114f1e:	af00      	add	r7, sp, #0
 8114f20:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8114f22:	687b      	ldr	r3, [r7, #4]
 8114f24:	681b      	ldr	r3, [r3, #0]
 8114f26:	4618      	mov	r0, r3
 8114f28:	f7f7 fb1d 	bl	810c566 <osMutexRelease>
}
 8114f2c:	bf00      	nop
 8114f2e:	3708      	adds	r7, #8
 8114f30:	46bd      	mov	sp, r7
 8114f32:	bd80      	pop	{r7, pc}

08114f34 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8114f34:	b580      	push	{r7, lr}
 8114f36:	b08e      	sub	sp, #56	@ 0x38
 8114f38:	af00      	add	r7, sp, #0
 8114f3a:	60f8      	str	r0, [r7, #12]
 8114f3c:	60b9      	str	r1, [r7, #8]
 8114f3e:	607a      	str	r2, [r7, #4]
 8114f40:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8114f42:	f107 0314 	add.w	r3, r7, #20
 8114f46:	2224      	movs	r2, #36	@ 0x24
 8114f48:	2100      	movs	r1, #0
 8114f4a:	4618      	mov	r0, r3
 8114f4c:	f006 ffe5 	bl	811bf1a <memset>
 8114f50:	68fb      	ldr	r3, [r7, #12]
 8114f52:	617b      	str	r3, [r7, #20]
 8114f54:	683b      	ldr	r3, [r7, #0]
 8114f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8114f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8114f5c:	f107 0314 	add.w	r3, r7, #20
 8114f60:	461a      	mov	r2, r3
 8114f62:	6879      	ldr	r1, [r7, #4]
 8114f64:	68b8      	ldr	r0, [r7, #8]
 8114f66:	f7f7 f980 	bl	810c26a <osThreadNew>
 8114f6a:	4603      	mov	r3, r0
#endif
}
 8114f6c:	4618      	mov	r0, r3
 8114f6e:	3738      	adds	r7, #56	@ 0x38
 8114f70:	46bd      	mov	sp, r7
 8114f72:	bd80      	pop	{r7, pc}

08114f74 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8114f74:	b580      	push	{r7, lr}
 8114f76:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8114f78:	4b04      	ldr	r3, [pc, #16]	@ (8114f8c <sys_arch_protect+0x18>)
 8114f7a:	681b      	ldr	r3, [r3, #0]
 8114f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8114f80:	4618      	mov	r0, r3
 8114f82:	f7f7 faa5 	bl	810c4d0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8114f86:	2301      	movs	r3, #1
}
 8114f88:	4618      	mov	r0, r3
 8114f8a:	bd80      	pop	{r7, pc}
 8114f8c:	10011d10 	.word	0x10011d10

08114f90 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8114f90:	b580      	push	{r7, lr}
 8114f92:	b082      	sub	sp, #8
 8114f94:	af00      	add	r7, sp, #0
 8114f96:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8114f98:	4b04      	ldr	r3, [pc, #16]	@ (8114fac <sys_arch_unprotect+0x1c>)
 8114f9a:	681b      	ldr	r3, [r3, #0]
 8114f9c:	4618      	mov	r0, r3
 8114f9e:	f7f7 fae2 	bl	810c566 <osMutexRelease>
}
 8114fa2:	bf00      	nop
 8114fa4:	3708      	adds	r7, #8
 8114fa6:	46bd      	mov	sp, r7
 8114fa8:	bd80      	pop	{r7, pc}
 8114faa:	bf00      	nop
 8114fac:	10011d10 	.word	0x10011d10

08114fb0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8114fb0:	b580      	push	{r7, lr}
 8114fb2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8114fb4:	f006 fe32 	bl	811bc1c <rand>
 8114fb8:	4603      	mov	r3, r0
 8114fba:	b29b      	uxth	r3, r3
 8114fbc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8114fc0:	b29b      	uxth	r3, r3
 8114fc2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8114fc6:	b29a      	uxth	r2, r3
 8114fc8:	4b01      	ldr	r3, [pc, #4]	@ (8114fd0 <tcp_init+0x20>)
 8114fca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8114fcc:	bf00      	nop
 8114fce:	bd80      	pop	{r7, pc}
 8114fd0:	10000028 	.word	0x10000028

08114fd4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8114fd4:	b580      	push	{r7, lr}
 8114fd6:	b082      	sub	sp, #8
 8114fd8:	af00      	add	r7, sp, #0
 8114fda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8114fdc:	687b      	ldr	r3, [r7, #4]
 8114fde:	7d1b      	ldrb	r3, [r3, #20]
 8114fe0:	2b01      	cmp	r3, #1
 8114fe2:	d105      	bne.n	8114ff0 <tcp_free+0x1c>
 8114fe4:	4b06      	ldr	r3, [pc, #24]	@ (8115000 <tcp_free+0x2c>)
 8114fe6:	22d4      	movs	r2, #212	@ 0xd4
 8114fe8:	4906      	ldr	r1, [pc, #24]	@ (8115004 <tcp_free+0x30>)
 8114fea:	4807      	ldr	r0, [pc, #28]	@ (8115008 <tcp_free+0x34>)
 8114fec:	f006 ff16 	bl	811be1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8114ff0:	6879      	ldr	r1, [r7, #4]
 8114ff2:	2001      	movs	r0, #1
 8114ff4:	f7fe fdac 	bl	8113b50 <memp_free>
}
 8114ff8:	bf00      	nop
 8114ffa:	3708      	adds	r7, #8
 8114ffc:	46bd      	mov	sp, r7
 8114ffe:	bd80      	pop	{r7, pc}
 8115000:	0811e0b0 	.word	0x0811e0b0
 8115004:	0811e120 	.word	0x0811e120
 8115008:	0811e134 	.word	0x0811e134

0811500c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 811500c:	b580      	push	{r7, lr}
 811500e:	b082      	sub	sp, #8
 8115010:	af00      	add	r7, sp, #0
 8115012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8115014:	687b      	ldr	r3, [r7, #4]
 8115016:	7d1b      	ldrb	r3, [r3, #20]
 8115018:	2b01      	cmp	r3, #1
 811501a:	d105      	bne.n	8115028 <tcp_free_listen+0x1c>
 811501c:	4b06      	ldr	r3, [pc, #24]	@ (8115038 <tcp_free_listen+0x2c>)
 811501e:	22df      	movs	r2, #223	@ 0xdf
 8115020:	4906      	ldr	r1, [pc, #24]	@ (811503c <tcp_free_listen+0x30>)
 8115022:	4807      	ldr	r0, [pc, #28]	@ (8115040 <tcp_free_listen+0x34>)
 8115024:	f006 fefa 	bl	811be1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8115028:	6879      	ldr	r1, [r7, #4]
 811502a:	2002      	movs	r0, #2
 811502c:	f7fe fd90 	bl	8113b50 <memp_free>
}
 8115030:	bf00      	nop
 8115032:	3708      	adds	r7, #8
 8115034:	46bd      	mov	sp, r7
 8115036:	bd80      	pop	{r7, pc}
 8115038:	0811e0b0 	.word	0x0811e0b0
 811503c:	0811e15c 	.word	0x0811e15c
 8115040:	0811e134 	.word	0x0811e134

08115044 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8115044:	b580      	push	{r7, lr}
 8115046:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8115048:	f001 f804 	bl	8116054 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 811504c:	4b07      	ldr	r3, [pc, #28]	@ (811506c <tcp_tmr+0x28>)
 811504e:	781b      	ldrb	r3, [r3, #0]
 8115050:	3301      	adds	r3, #1
 8115052:	b2da      	uxtb	r2, r3
 8115054:	4b05      	ldr	r3, [pc, #20]	@ (811506c <tcp_tmr+0x28>)
 8115056:	701a      	strb	r2, [r3, #0]
 8115058:	4b04      	ldr	r3, [pc, #16]	@ (811506c <tcp_tmr+0x28>)
 811505a:	781b      	ldrb	r3, [r3, #0]
 811505c:	f003 0301 	and.w	r3, r3, #1
 8115060:	2b00      	cmp	r3, #0
 8115062:	d001      	beq.n	8115068 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8115064:	f000 fcb4 	bl	81159d0 <tcp_slowtmr>
  }
}
 8115068:	bf00      	nop
 811506a:	bd80      	pop	{r7, pc}
 811506c:	10011d29 	.word	0x10011d29

08115070 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8115070:	b580      	push	{r7, lr}
 8115072:	b084      	sub	sp, #16
 8115074:	af00      	add	r7, sp, #0
 8115076:	6078      	str	r0, [r7, #4]
 8115078:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 811507a:	683b      	ldr	r3, [r7, #0]
 811507c:	2b00      	cmp	r3, #0
 811507e:	d105      	bne.n	811508c <tcp_remove_listener+0x1c>
 8115080:	4b0d      	ldr	r3, [pc, #52]	@ (81150b8 <tcp_remove_listener+0x48>)
 8115082:	22ff      	movs	r2, #255	@ 0xff
 8115084:	490d      	ldr	r1, [pc, #52]	@ (81150bc <tcp_remove_listener+0x4c>)
 8115086:	480e      	ldr	r0, [pc, #56]	@ (81150c0 <tcp_remove_listener+0x50>)
 8115088:	f006 fec8 	bl	811be1c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 811508c:	687b      	ldr	r3, [r7, #4]
 811508e:	60fb      	str	r3, [r7, #12]
 8115090:	e00a      	b.n	81150a8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8115092:	68fb      	ldr	r3, [r7, #12]
 8115094:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8115096:	683a      	ldr	r2, [r7, #0]
 8115098:	429a      	cmp	r2, r3
 811509a:	d102      	bne.n	81150a2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 811509c:	68fb      	ldr	r3, [r7, #12]
 811509e:	2200      	movs	r2, #0
 81150a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 81150a2:	68fb      	ldr	r3, [r7, #12]
 81150a4:	68db      	ldr	r3, [r3, #12]
 81150a6:	60fb      	str	r3, [r7, #12]
 81150a8:	68fb      	ldr	r3, [r7, #12]
 81150aa:	2b00      	cmp	r3, #0
 81150ac:	d1f1      	bne.n	8115092 <tcp_remove_listener+0x22>
    }
  }
}
 81150ae:	bf00      	nop
 81150b0:	bf00      	nop
 81150b2:	3710      	adds	r7, #16
 81150b4:	46bd      	mov	sp, r7
 81150b6:	bd80      	pop	{r7, pc}
 81150b8:	0811e0b0 	.word	0x0811e0b0
 81150bc:	0811e178 	.word	0x0811e178
 81150c0:	0811e134 	.word	0x0811e134

081150c4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 81150c4:	b580      	push	{r7, lr}
 81150c6:	b084      	sub	sp, #16
 81150c8:	af00      	add	r7, sp, #0
 81150ca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 81150cc:	687b      	ldr	r3, [r7, #4]
 81150ce:	2b00      	cmp	r3, #0
 81150d0:	d106      	bne.n	81150e0 <tcp_listen_closed+0x1c>
 81150d2:	4b14      	ldr	r3, [pc, #80]	@ (8115124 <tcp_listen_closed+0x60>)
 81150d4:	f240 1211 	movw	r2, #273	@ 0x111
 81150d8:	4913      	ldr	r1, [pc, #76]	@ (8115128 <tcp_listen_closed+0x64>)
 81150da:	4814      	ldr	r0, [pc, #80]	@ (811512c <tcp_listen_closed+0x68>)
 81150dc:	f006 fe9e 	bl	811be1c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 81150e0:	687b      	ldr	r3, [r7, #4]
 81150e2:	7d1b      	ldrb	r3, [r3, #20]
 81150e4:	2b01      	cmp	r3, #1
 81150e6:	d006      	beq.n	81150f6 <tcp_listen_closed+0x32>
 81150e8:	4b0e      	ldr	r3, [pc, #56]	@ (8115124 <tcp_listen_closed+0x60>)
 81150ea:	f44f 7289 	mov.w	r2, #274	@ 0x112
 81150ee:	4910      	ldr	r1, [pc, #64]	@ (8115130 <tcp_listen_closed+0x6c>)
 81150f0:	480e      	ldr	r0, [pc, #56]	@ (811512c <tcp_listen_closed+0x68>)
 81150f2:	f006 fe93 	bl	811be1c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 81150f6:	2301      	movs	r3, #1
 81150f8:	60fb      	str	r3, [r7, #12]
 81150fa:	e00b      	b.n	8115114 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 81150fc:	4a0d      	ldr	r2, [pc, #52]	@ (8115134 <tcp_listen_closed+0x70>)
 81150fe:	68fb      	ldr	r3, [r7, #12]
 8115100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8115104:	681b      	ldr	r3, [r3, #0]
 8115106:	6879      	ldr	r1, [r7, #4]
 8115108:	4618      	mov	r0, r3
 811510a:	f7ff ffb1 	bl	8115070 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811510e:	68fb      	ldr	r3, [r7, #12]
 8115110:	3301      	adds	r3, #1
 8115112:	60fb      	str	r3, [r7, #12]
 8115114:	68fb      	ldr	r3, [r7, #12]
 8115116:	2b03      	cmp	r3, #3
 8115118:	d9f0      	bls.n	81150fc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 811511a:	bf00      	nop
 811511c:	bf00      	nop
 811511e:	3710      	adds	r7, #16
 8115120:	46bd      	mov	sp, r7
 8115122:	bd80      	pop	{r7, pc}
 8115124:	0811e0b0 	.word	0x0811e0b0
 8115128:	0811e1a0 	.word	0x0811e1a0
 811512c:	0811e134 	.word	0x0811e134
 8115130:	0811e1ac 	.word	0x0811e1ac
 8115134:	0811fd0c 	.word	0x0811fd0c

08115138 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8115138:	b5b0      	push	{r4, r5, r7, lr}
 811513a:	b088      	sub	sp, #32
 811513c:	af04      	add	r7, sp, #16
 811513e:	6078      	str	r0, [r7, #4]
 8115140:	460b      	mov	r3, r1
 8115142:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8115144:	687b      	ldr	r3, [r7, #4]
 8115146:	2b00      	cmp	r3, #0
 8115148:	d106      	bne.n	8115158 <tcp_close_shutdown+0x20>
 811514a:	4b63      	ldr	r3, [pc, #396]	@ (81152d8 <tcp_close_shutdown+0x1a0>)
 811514c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8115150:	4962      	ldr	r1, [pc, #392]	@ (81152dc <tcp_close_shutdown+0x1a4>)
 8115152:	4863      	ldr	r0, [pc, #396]	@ (81152e0 <tcp_close_shutdown+0x1a8>)
 8115154:	f006 fe62 	bl	811be1c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8115158:	78fb      	ldrb	r3, [r7, #3]
 811515a:	2b00      	cmp	r3, #0
 811515c:	d067      	beq.n	811522e <tcp_close_shutdown+0xf6>
 811515e:	687b      	ldr	r3, [r7, #4]
 8115160:	7d1b      	ldrb	r3, [r3, #20]
 8115162:	2b04      	cmp	r3, #4
 8115164:	d003      	beq.n	811516e <tcp_close_shutdown+0x36>
 8115166:	687b      	ldr	r3, [r7, #4]
 8115168:	7d1b      	ldrb	r3, [r3, #20]
 811516a:	2b07      	cmp	r3, #7
 811516c:	d15f      	bne.n	811522e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 811516e:	687b      	ldr	r3, [r7, #4]
 8115170:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8115172:	2b00      	cmp	r3, #0
 8115174:	d105      	bne.n	8115182 <tcp_close_shutdown+0x4a>
 8115176:	687b      	ldr	r3, [r7, #4]
 8115178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811517a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811517e:	4293      	cmp	r3, r2
 8115180:	d055      	beq.n	811522e <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8115182:	687b      	ldr	r3, [r7, #4]
 8115184:	8b5b      	ldrh	r3, [r3, #26]
 8115186:	f003 0310 	and.w	r3, r3, #16
 811518a:	2b00      	cmp	r3, #0
 811518c:	d106      	bne.n	811519c <tcp_close_shutdown+0x64>
 811518e:	4b52      	ldr	r3, [pc, #328]	@ (81152d8 <tcp_close_shutdown+0x1a0>)
 8115190:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8115194:	4953      	ldr	r1, [pc, #332]	@ (81152e4 <tcp_close_shutdown+0x1ac>)
 8115196:	4852      	ldr	r0, [pc, #328]	@ (81152e0 <tcp_close_shutdown+0x1a8>)
 8115198:	f006 fe40 	bl	811be1c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 811519c:	687b      	ldr	r3, [r7, #4]
 811519e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 81151a0:	687b      	ldr	r3, [r7, #4]
 81151a2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 81151a4:	687d      	ldr	r5, [r7, #4]
 81151a6:	687b      	ldr	r3, [r7, #4]
 81151a8:	3304      	adds	r3, #4
 81151aa:	687a      	ldr	r2, [r7, #4]
 81151ac:	8ad2      	ldrh	r2, [r2, #22]
 81151ae:	6879      	ldr	r1, [r7, #4]
 81151b0:	8b09      	ldrh	r1, [r1, #24]
 81151b2:	9102      	str	r1, [sp, #8]
 81151b4:	9201      	str	r2, [sp, #4]
 81151b6:	9300      	str	r3, [sp, #0]
 81151b8:	462b      	mov	r3, r5
 81151ba:	4622      	mov	r2, r4
 81151bc:	4601      	mov	r1, r0
 81151be:	6878      	ldr	r0, [r7, #4]
 81151c0:	f005 fcc4 	bl	811ab4c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 81151c4:	6878      	ldr	r0, [r7, #4]
 81151c6:	f001 faa5 	bl	8116714 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 81151ca:	4b47      	ldr	r3, [pc, #284]	@ (81152e8 <tcp_close_shutdown+0x1b0>)
 81151cc:	681b      	ldr	r3, [r3, #0]
 81151ce:	687a      	ldr	r2, [r7, #4]
 81151d0:	429a      	cmp	r2, r3
 81151d2:	d105      	bne.n	81151e0 <tcp_close_shutdown+0xa8>
 81151d4:	4b44      	ldr	r3, [pc, #272]	@ (81152e8 <tcp_close_shutdown+0x1b0>)
 81151d6:	681b      	ldr	r3, [r3, #0]
 81151d8:	68db      	ldr	r3, [r3, #12]
 81151da:	4a43      	ldr	r2, [pc, #268]	@ (81152e8 <tcp_close_shutdown+0x1b0>)
 81151dc:	6013      	str	r3, [r2, #0]
 81151de:	e013      	b.n	8115208 <tcp_close_shutdown+0xd0>
 81151e0:	4b41      	ldr	r3, [pc, #260]	@ (81152e8 <tcp_close_shutdown+0x1b0>)
 81151e2:	681b      	ldr	r3, [r3, #0]
 81151e4:	60fb      	str	r3, [r7, #12]
 81151e6:	e00c      	b.n	8115202 <tcp_close_shutdown+0xca>
 81151e8:	68fb      	ldr	r3, [r7, #12]
 81151ea:	68db      	ldr	r3, [r3, #12]
 81151ec:	687a      	ldr	r2, [r7, #4]
 81151ee:	429a      	cmp	r2, r3
 81151f0:	d104      	bne.n	81151fc <tcp_close_shutdown+0xc4>
 81151f2:	687b      	ldr	r3, [r7, #4]
 81151f4:	68da      	ldr	r2, [r3, #12]
 81151f6:	68fb      	ldr	r3, [r7, #12]
 81151f8:	60da      	str	r2, [r3, #12]
 81151fa:	e005      	b.n	8115208 <tcp_close_shutdown+0xd0>
 81151fc:	68fb      	ldr	r3, [r7, #12]
 81151fe:	68db      	ldr	r3, [r3, #12]
 8115200:	60fb      	str	r3, [r7, #12]
 8115202:	68fb      	ldr	r3, [r7, #12]
 8115204:	2b00      	cmp	r3, #0
 8115206:	d1ef      	bne.n	81151e8 <tcp_close_shutdown+0xb0>
 8115208:	687b      	ldr	r3, [r7, #4]
 811520a:	2200      	movs	r2, #0
 811520c:	60da      	str	r2, [r3, #12]
 811520e:	4b37      	ldr	r3, [pc, #220]	@ (81152ec <tcp_close_shutdown+0x1b4>)
 8115210:	2201      	movs	r2, #1
 8115212:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8115214:	4b36      	ldr	r3, [pc, #216]	@ (81152f0 <tcp_close_shutdown+0x1b8>)
 8115216:	681b      	ldr	r3, [r3, #0]
 8115218:	687a      	ldr	r2, [r7, #4]
 811521a:	429a      	cmp	r2, r3
 811521c:	d102      	bne.n	8115224 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 811521e:	f003 ff3b 	bl	8119098 <tcp_trigger_input_pcb_close>
 8115222:	e002      	b.n	811522a <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8115224:	6878      	ldr	r0, [r7, #4]
 8115226:	f7ff fed5 	bl	8114fd4 <tcp_free>
      }
      return ERR_OK;
 811522a:	2300      	movs	r3, #0
 811522c:	e050      	b.n	81152d0 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 811522e:	687b      	ldr	r3, [r7, #4]
 8115230:	7d1b      	ldrb	r3, [r3, #20]
 8115232:	2b02      	cmp	r3, #2
 8115234:	d03b      	beq.n	81152ae <tcp_close_shutdown+0x176>
 8115236:	2b02      	cmp	r3, #2
 8115238:	dc44      	bgt.n	81152c4 <tcp_close_shutdown+0x18c>
 811523a:	2b00      	cmp	r3, #0
 811523c:	d002      	beq.n	8115244 <tcp_close_shutdown+0x10c>
 811523e:	2b01      	cmp	r3, #1
 8115240:	d02a      	beq.n	8115298 <tcp_close_shutdown+0x160>
 8115242:	e03f      	b.n	81152c4 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8115244:	687b      	ldr	r3, [r7, #4]
 8115246:	8adb      	ldrh	r3, [r3, #22]
 8115248:	2b00      	cmp	r3, #0
 811524a:	d021      	beq.n	8115290 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 811524c:	4b29      	ldr	r3, [pc, #164]	@ (81152f4 <tcp_close_shutdown+0x1bc>)
 811524e:	681b      	ldr	r3, [r3, #0]
 8115250:	687a      	ldr	r2, [r7, #4]
 8115252:	429a      	cmp	r2, r3
 8115254:	d105      	bne.n	8115262 <tcp_close_shutdown+0x12a>
 8115256:	4b27      	ldr	r3, [pc, #156]	@ (81152f4 <tcp_close_shutdown+0x1bc>)
 8115258:	681b      	ldr	r3, [r3, #0]
 811525a:	68db      	ldr	r3, [r3, #12]
 811525c:	4a25      	ldr	r2, [pc, #148]	@ (81152f4 <tcp_close_shutdown+0x1bc>)
 811525e:	6013      	str	r3, [r2, #0]
 8115260:	e013      	b.n	811528a <tcp_close_shutdown+0x152>
 8115262:	4b24      	ldr	r3, [pc, #144]	@ (81152f4 <tcp_close_shutdown+0x1bc>)
 8115264:	681b      	ldr	r3, [r3, #0]
 8115266:	60bb      	str	r3, [r7, #8]
 8115268:	e00c      	b.n	8115284 <tcp_close_shutdown+0x14c>
 811526a:	68bb      	ldr	r3, [r7, #8]
 811526c:	68db      	ldr	r3, [r3, #12]
 811526e:	687a      	ldr	r2, [r7, #4]
 8115270:	429a      	cmp	r2, r3
 8115272:	d104      	bne.n	811527e <tcp_close_shutdown+0x146>
 8115274:	687b      	ldr	r3, [r7, #4]
 8115276:	68da      	ldr	r2, [r3, #12]
 8115278:	68bb      	ldr	r3, [r7, #8]
 811527a:	60da      	str	r2, [r3, #12]
 811527c:	e005      	b.n	811528a <tcp_close_shutdown+0x152>
 811527e:	68bb      	ldr	r3, [r7, #8]
 8115280:	68db      	ldr	r3, [r3, #12]
 8115282:	60bb      	str	r3, [r7, #8]
 8115284:	68bb      	ldr	r3, [r7, #8]
 8115286:	2b00      	cmp	r3, #0
 8115288:	d1ef      	bne.n	811526a <tcp_close_shutdown+0x132>
 811528a:	687b      	ldr	r3, [r7, #4]
 811528c:	2200      	movs	r2, #0
 811528e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8115290:	6878      	ldr	r0, [r7, #4]
 8115292:	f7ff fe9f 	bl	8114fd4 <tcp_free>
      break;
 8115296:	e01a      	b.n	81152ce <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8115298:	6878      	ldr	r0, [r7, #4]
 811529a:	f7ff ff13 	bl	81150c4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 811529e:	6879      	ldr	r1, [r7, #4]
 81152a0:	4815      	ldr	r0, [pc, #84]	@ (81152f8 <tcp_close_shutdown+0x1c0>)
 81152a2:	f001 fa87 	bl	81167b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 81152a6:	6878      	ldr	r0, [r7, #4]
 81152a8:	f7ff feb0 	bl	811500c <tcp_free_listen>
      break;
 81152ac:	e00f      	b.n	81152ce <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 81152ae:	6879      	ldr	r1, [r7, #4]
 81152b0:	480d      	ldr	r0, [pc, #52]	@ (81152e8 <tcp_close_shutdown+0x1b0>)
 81152b2:	f001 fa7f 	bl	81167b4 <tcp_pcb_remove>
 81152b6:	4b0d      	ldr	r3, [pc, #52]	@ (81152ec <tcp_close_shutdown+0x1b4>)
 81152b8:	2201      	movs	r2, #1
 81152ba:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 81152bc:	6878      	ldr	r0, [r7, #4]
 81152be:	f7ff fe89 	bl	8114fd4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 81152c2:	e004      	b.n	81152ce <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 81152c4:	6878      	ldr	r0, [r7, #4]
 81152c6:	f000 f819 	bl	81152fc <tcp_close_shutdown_fin>
 81152ca:	4603      	mov	r3, r0
 81152cc:	e000      	b.n	81152d0 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 81152ce:	2300      	movs	r3, #0
}
 81152d0:	4618      	mov	r0, r3
 81152d2:	3710      	adds	r7, #16
 81152d4:	46bd      	mov	sp, r7
 81152d6:	bdb0      	pop	{r4, r5, r7, pc}
 81152d8:	0811e0b0 	.word	0x0811e0b0
 81152dc:	0811e1c4 	.word	0x0811e1c4
 81152e0:	0811e134 	.word	0x0811e134
 81152e4:	0811e1e4 	.word	0x0811e1e4
 81152e8:	10011d20 	.word	0x10011d20
 81152ec:	10011d28 	.word	0x10011d28
 81152f0:	10011d60 	.word	0x10011d60
 81152f4:	10011d18 	.word	0x10011d18
 81152f8:	10011d1c 	.word	0x10011d1c

081152fc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 81152fc:	b580      	push	{r7, lr}
 81152fe:	b084      	sub	sp, #16
 8115300:	af00      	add	r7, sp, #0
 8115302:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8115304:	687b      	ldr	r3, [r7, #4]
 8115306:	2b00      	cmp	r3, #0
 8115308:	d106      	bne.n	8115318 <tcp_close_shutdown_fin+0x1c>
 811530a:	4b2e      	ldr	r3, [pc, #184]	@ (81153c4 <tcp_close_shutdown_fin+0xc8>)
 811530c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8115310:	492d      	ldr	r1, [pc, #180]	@ (81153c8 <tcp_close_shutdown_fin+0xcc>)
 8115312:	482e      	ldr	r0, [pc, #184]	@ (81153cc <tcp_close_shutdown_fin+0xd0>)
 8115314:	f006 fd82 	bl	811be1c <iprintf>

  switch (pcb->state) {
 8115318:	687b      	ldr	r3, [r7, #4]
 811531a:	7d1b      	ldrb	r3, [r3, #20]
 811531c:	2b07      	cmp	r3, #7
 811531e:	d020      	beq.n	8115362 <tcp_close_shutdown_fin+0x66>
 8115320:	2b07      	cmp	r3, #7
 8115322:	dc2b      	bgt.n	811537c <tcp_close_shutdown_fin+0x80>
 8115324:	2b03      	cmp	r3, #3
 8115326:	d002      	beq.n	811532e <tcp_close_shutdown_fin+0x32>
 8115328:	2b04      	cmp	r3, #4
 811532a:	d00d      	beq.n	8115348 <tcp_close_shutdown_fin+0x4c>
 811532c:	e026      	b.n	811537c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 811532e:	6878      	ldr	r0, [r7, #4]
 8115330:	f004 fd1a 	bl	8119d68 <tcp_send_fin>
 8115334:	4603      	mov	r3, r0
 8115336:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8115338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811533c:	2b00      	cmp	r3, #0
 811533e:	d11f      	bne.n	8115380 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8115340:	687b      	ldr	r3, [r7, #4]
 8115342:	2205      	movs	r2, #5
 8115344:	751a      	strb	r2, [r3, #20]
      }
      break;
 8115346:	e01b      	b.n	8115380 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8115348:	6878      	ldr	r0, [r7, #4]
 811534a:	f004 fd0d 	bl	8119d68 <tcp_send_fin>
 811534e:	4603      	mov	r3, r0
 8115350:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8115352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8115356:	2b00      	cmp	r3, #0
 8115358:	d114      	bne.n	8115384 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 811535a:	687b      	ldr	r3, [r7, #4]
 811535c:	2205      	movs	r2, #5
 811535e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8115360:	e010      	b.n	8115384 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8115362:	6878      	ldr	r0, [r7, #4]
 8115364:	f004 fd00 	bl	8119d68 <tcp_send_fin>
 8115368:	4603      	mov	r3, r0
 811536a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811536c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8115370:	2b00      	cmp	r3, #0
 8115372:	d109      	bne.n	8115388 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8115374:	687b      	ldr	r3, [r7, #4]
 8115376:	2209      	movs	r2, #9
 8115378:	751a      	strb	r2, [r3, #20]
      }
      break;
 811537a:	e005      	b.n	8115388 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 811537c:	2300      	movs	r3, #0
 811537e:	e01c      	b.n	81153ba <tcp_close_shutdown_fin+0xbe>
      break;
 8115380:	bf00      	nop
 8115382:	e002      	b.n	811538a <tcp_close_shutdown_fin+0x8e>
      break;
 8115384:	bf00      	nop
 8115386:	e000      	b.n	811538a <tcp_close_shutdown_fin+0x8e>
      break;
 8115388:	bf00      	nop
  }

  if (err == ERR_OK) {
 811538a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811538e:	2b00      	cmp	r3, #0
 8115390:	d103      	bne.n	811539a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8115392:	6878      	ldr	r0, [r7, #4]
 8115394:	f004 fe26 	bl	8119fe4 <tcp_output>
 8115398:	e00d      	b.n	81153b6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 811539a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81153a2:	d108      	bne.n	81153b6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 81153a4:	687b      	ldr	r3, [r7, #4]
 81153a6:	8b5b      	ldrh	r3, [r3, #26]
 81153a8:	f043 0308 	orr.w	r3, r3, #8
 81153ac:	b29a      	uxth	r2, r3
 81153ae:	687b      	ldr	r3, [r7, #4]
 81153b0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 81153b2:	2300      	movs	r3, #0
 81153b4:	e001      	b.n	81153ba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 81153b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 81153ba:	4618      	mov	r0, r3
 81153bc:	3710      	adds	r7, #16
 81153be:	46bd      	mov	sp, r7
 81153c0:	bd80      	pop	{r7, pc}
 81153c2:	bf00      	nop
 81153c4:	0811e0b0 	.word	0x0811e0b0
 81153c8:	0811e1a0 	.word	0x0811e1a0
 81153cc:	0811e134 	.word	0x0811e134

081153d0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 81153d0:	b580      	push	{r7, lr}
 81153d2:	b082      	sub	sp, #8
 81153d4:	af00      	add	r7, sp, #0
 81153d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 81153d8:	687b      	ldr	r3, [r7, #4]
 81153da:	2b00      	cmp	r3, #0
 81153dc:	d109      	bne.n	81153f2 <tcp_close+0x22>
 81153de:	4b0f      	ldr	r3, [pc, #60]	@ (811541c <tcp_close+0x4c>)
 81153e0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 81153e4:	490e      	ldr	r1, [pc, #56]	@ (8115420 <tcp_close+0x50>)
 81153e6:	480f      	ldr	r0, [pc, #60]	@ (8115424 <tcp_close+0x54>)
 81153e8:	f006 fd18 	bl	811be1c <iprintf>
 81153ec:	f06f 030f 	mvn.w	r3, #15
 81153f0:	e00f      	b.n	8115412 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 81153f2:	687b      	ldr	r3, [r7, #4]
 81153f4:	7d1b      	ldrb	r3, [r3, #20]
 81153f6:	2b01      	cmp	r3, #1
 81153f8:	d006      	beq.n	8115408 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 81153fa:	687b      	ldr	r3, [r7, #4]
 81153fc:	8b5b      	ldrh	r3, [r3, #26]
 81153fe:	f043 0310 	orr.w	r3, r3, #16
 8115402:	b29a      	uxth	r2, r3
 8115404:	687b      	ldr	r3, [r7, #4]
 8115406:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8115408:	2101      	movs	r1, #1
 811540a:	6878      	ldr	r0, [r7, #4]
 811540c:	f7ff fe94 	bl	8115138 <tcp_close_shutdown>
 8115410:	4603      	mov	r3, r0
}
 8115412:	4618      	mov	r0, r3
 8115414:	3708      	adds	r7, #8
 8115416:	46bd      	mov	sp, r7
 8115418:	bd80      	pop	{r7, pc}
 811541a:	bf00      	nop
 811541c:	0811e0b0 	.word	0x0811e0b0
 8115420:	0811e200 	.word	0x0811e200
 8115424:	0811e134 	.word	0x0811e134

08115428 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8115428:	b580      	push	{r7, lr}
 811542a:	b08e      	sub	sp, #56	@ 0x38
 811542c:	af04      	add	r7, sp, #16
 811542e:	6078      	str	r0, [r7, #4]
 8115430:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8115432:	687b      	ldr	r3, [r7, #4]
 8115434:	2b00      	cmp	r3, #0
 8115436:	d107      	bne.n	8115448 <tcp_abandon+0x20>
 8115438:	4b52      	ldr	r3, [pc, #328]	@ (8115584 <tcp_abandon+0x15c>)
 811543a:	f240 223d 	movw	r2, #573	@ 0x23d
 811543e:	4952      	ldr	r1, [pc, #328]	@ (8115588 <tcp_abandon+0x160>)
 8115440:	4852      	ldr	r0, [pc, #328]	@ (811558c <tcp_abandon+0x164>)
 8115442:	f006 fceb 	bl	811be1c <iprintf>
 8115446:	e099      	b.n	811557c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8115448:	687b      	ldr	r3, [r7, #4]
 811544a:	7d1b      	ldrb	r3, [r3, #20]
 811544c:	2b01      	cmp	r3, #1
 811544e:	d106      	bne.n	811545e <tcp_abandon+0x36>
 8115450:	4b4c      	ldr	r3, [pc, #304]	@ (8115584 <tcp_abandon+0x15c>)
 8115452:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8115456:	494e      	ldr	r1, [pc, #312]	@ (8115590 <tcp_abandon+0x168>)
 8115458:	484c      	ldr	r0, [pc, #304]	@ (811558c <tcp_abandon+0x164>)
 811545a:	f006 fcdf 	bl	811be1c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 811545e:	687b      	ldr	r3, [r7, #4]
 8115460:	7d1b      	ldrb	r3, [r3, #20]
 8115462:	2b0a      	cmp	r3, #10
 8115464:	d107      	bne.n	8115476 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8115466:	6879      	ldr	r1, [r7, #4]
 8115468:	484a      	ldr	r0, [pc, #296]	@ (8115594 <tcp_abandon+0x16c>)
 811546a:	f001 f9a3 	bl	81167b4 <tcp_pcb_remove>
    tcp_free(pcb);
 811546e:	6878      	ldr	r0, [r7, #4]
 8115470:	f7ff fdb0 	bl	8114fd4 <tcp_free>
 8115474:	e082      	b.n	811557c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8115476:	2300      	movs	r3, #0
 8115478:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 811547a:	2300      	movs	r3, #0
 811547c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 811547e:	687b      	ldr	r3, [r7, #4]
 8115480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8115482:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8115484:	687b      	ldr	r3, [r7, #4]
 8115486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8115488:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 811548a:	687b      	ldr	r3, [r7, #4]
 811548c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8115490:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8115492:	687b      	ldr	r3, [r7, #4]
 8115494:	691b      	ldr	r3, [r3, #16]
 8115496:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8115498:	687b      	ldr	r3, [r7, #4]
 811549a:	7d1b      	ldrb	r3, [r3, #20]
 811549c:	2b00      	cmp	r3, #0
 811549e:	d126      	bne.n	81154ee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 81154a0:	687b      	ldr	r3, [r7, #4]
 81154a2:	8adb      	ldrh	r3, [r3, #22]
 81154a4:	2b00      	cmp	r3, #0
 81154a6:	d02e      	beq.n	8115506 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 81154a8:	4b3b      	ldr	r3, [pc, #236]	@ (8115598 <tcp_abandon+0x170>)
 81154aa:	681b      	ldr	r3, [r3, #0]
 81154ac:	687a      	ldr	r2, [r7, #4]
 81154ae:	429a      	cmp	r2, r3
 81154b0:	d105      	bne.n	81154be <tcp_abandon+0x96>
 81154b2:	4b39      	ldr	r3, [pc, #228]	@ (8115598 <tcp_abandon+0x170>)
 81154b4:	681b      	ldr	r3, [r3, #0]
 81154b6:	68db      	ldr	r3, [r3, #12]
 81154b8:	4a37      	ldr	r2, [pc, #220]	@ (8115598 <tcp_abandon+0x170>)
 81154ba:	6013      	str	r3, [r2, #0]
 81154bc:	e013      	b.n	81154e6 <tcp_abandon+0xbe>
 81154be:	4b36      	ldr	r3, [pc, #216]	@ (8115598 <tcp_abandon+0x170>)
 81154c0:	681b      	ldr	r3, [r3, #0]
 81154c2:	61fb      	str	r3, [r7, #28]
 81154c4:	e00c      	b.n	81154e0 <tcp_abandon+0xb8>
 81154c6:	69fb      	ldr	r3, [r7, #28]
 81154c8:	68db      	ldr	r3, [r3, #12]
 81154ca:	687a      	ldr	r2, [r7, #4]
 81154cc:	429a      	cmp	r2, r3
 81154ce:	d104      	bne.n	81154da <tcp_abandon+0xb2>
 81154d0:	687b      	ldr	r3, [r7, #4]
 81154d2:	68da      	ldr	r2, [r3, #12]
 81154d4:	69fb      	ldr	r3, [r7, #28]
 81154d6:	60da      	str	r2, [r3, #12]
 81154d8:	e005      	b.n	81154e6 <tcp_abandon+0xbe>
 81154da:	69fb      	ldr	r3, [r7, #28]
 81154dc:	68db      	ldr	r3, [r3, #12]
 81154de:	61fb      	str	r3, [r7, #28]
 81154e0:	69fb      	ldr	r3, [r7, #28]
 81154e2:	2b00      	cmp	r3, #0
 81154e4:	d1ef      	bne.n	81154c6 <tcp_abandon+0x9e>
 81154e6:	687b      	ldr	r3, [r7, #4]
 81154e8:	2200      	movs	r2, #0
 81154ea:	60da      	str	r2, [r3, #12]
 81154ec:	e00b      	b.n	8115506 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 81154ee:	683b      	ldr	r3, [r7, #0]
 81154f0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 81154f2:	687b      	ldr	r3, [r7, #4]
 81154f4:	8adb      	ldrh	r3, [r3, #22]
 81154f6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 81154f8:	6879      	ldr	r1, [r7, #4]
 81154fa:	4828      	ldr	r0, [pc, #160]	@ (811559c <tcp_abandon+0x174>)
 81154fc:	f001 f95a 	bl	81167b4 <tcp_pcb_remove>
 8115500:	4b27      	ldr	r3, [pc, #156]	@ (81155a0 <tcp_abandon+0x178>)
 8115502:	2201      	movs	r2, #1
 8115504:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8115506:	687b      	ldr	r3, [r7, #4]
 8115508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811550a:	2b00      	cmp	r3, #0
 811550c:	d004      	beq.n	8115518 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 811550e:	687b      	ldr	r3, [r7, #4]
 8115510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8115512:	4618      	mov	r0, r3
 8115514:	f000 fe80 	bl	8116218 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8115518:	687b      	ldr	r3, [r7, #4]
 811551a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811551c:	2b00      	cmp	r3, #0
 811551e:	d004      	beq.n	811552a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8115520:	687b      	ldr	r3, [r7, #4]
 8115522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8115524:	4618      	mov	r0, r3
 8115526:	f000 fe77 	bl	8116218 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811552a:	687b      	ldr	r3, [r7, #4]
 811552c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811552e:	2b00      	cmp	r3, #0
 8115530:	d004      	beq.n	811553c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8115532:	687b      	ldr	r3, [r7, #4]
 8115534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8115536:	4618      	mov	r0, r3
 8115538:	f000 fe6e 	bl	8116218 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 811553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811553e:	2b00      	cmp	r3, #0
 8115540:	d00e      	beq.n	8115560 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8115542:	6879      	ldr	r1, [r7, #4]
 8115544:	687b      	ldr	r3, [r7, #4]
 8115546:	3304      	adds	r3, #4
 8115548:	687a      	ldr	r2, [r7, #4]
 811554a:	8b12      	ldrh	r2, [r2, #24]
 811554c:	9202      	str	r2, [sp, #8]
 811554e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8115550:	9201      	str	r2, [sp, #4]
 8115552:	9300      	str	r3, [sp, #0]
 8115554:	460b      	mov	r3, r1
 8115556:	697a      	ldr	r2, [r7, #20]
 8115558:	69b9      	ldr	r1, [r7, #24]
 811555a:	6878      	ldr	r0, [r7, #4]
 811555c:	f005 faf6 	bl	811ab4c <tcp_rst>
    }
    last_state = pcb->state;
 8115560:	687b      	ldr	r3, [r7, #4]
 8115562:	7d1b      	ldrb	r3, [r3, #20]
 8115564:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8115566:	6878      	ldr	r0, [r7, #4]
 8115568:	f7ff fd34 	bl	8114fd4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 811556c:	693b      	ldr	r3, [r7, #16]
 811556e:	2b00      	cmp	r3, #0
 8115570:	d004      	beq.n	811557c <tcp_abandon+0x154>
 8115572:	693b      	ldr	r3, [r7, #16]
 8115574:	f06f 010c 	mvn.w	r1, #12
 8115578:	68f8      	ldr	r0, [r7, #12]
 811557a:	4798      	blx	r3
  }
}
 811557c:	3728      	adds	r7, #40	@ 0x28
 811557e:	46bd      	mov	sp, r7
 8115580:	bd80      	pop	{r7, pc}
 8115582:	bf00      	nop
 8115584:	0811e0b0 	.word	0x0811e0b0
 8115588:	0811e234 	.word	0x0811e234
 811558c:	0811e134 	.word	0x0811e134
 8115590:	0811e250 	.word	0x0811e250
 8115594:	10011d24 	.word	0x10011d24
 8115598:	10011d18 	.word	0x10011d18
 811559c:	10011d20 	.word	0x10011d20
 81155a0:	10011d28 	.word	0x10011d28

081155a4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 81155a4:	b580      	push	{r7, lr}
 81155a6:	b082      	sub	sp, #8
 81155a8:	af00      	add	r7, sp, #0
 81155aa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 81155ac:	2101      	movs	r1, #1
 81155ae:	6878      	ldr	r0, [r7, #4]
 81155b0:	f7ff ff3a 	bl	8115428 <tcp_abandon>
}
 81155b4:	bf00      	nop
 81155b6:	3708      	adds	r7, #8
 81155b8:	46bd      	mov	sp, r7
 81155ba:	bd80      	pop	{r7, pc}

081155bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 81155bc:	b580      	push	{r7, lr}
 81155be:	b084      	sub	sp, #16
 81155c0:	af00      	add	r7, sp, #0
 81155c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 81155c4:	687b      	ldr	r3, [r7, #4]
 81155c6:	2b00      	cmp	r3, #0
 81155c8:	d106      	bne.n	81155d8 <tcp_update_rcv_ann_wnd+0x1c>
 81155ca:	4b25      	ldr	r3, [pc, #148]	@ (8115660 <tcp_update_rcv_ann_wnd+0xa4>)
 81155cc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 81155d0:	4924      	ldr	r1, [pc, #144]	@ (8115664 <tcp_update_rcv_ann_wnd+0xa8>)
 81155d2:	4825      	ldr	r0, [pc, #148]	@ (8115668 <tcp_update_rcv_ann_wnd+0xac>)
 81155d4:	f006 fc22 	bl	811be1c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 81155d8:	687b      	ldr	r3, [r7, #4]
 81155da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81155dc:	687a      	ldr	r2, [r7, #4]
 81155de:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 81155e0:	4413      	add	r3, r2
 81155e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 81155e4:	687b      	ldr	r3, [r7, #4]
 81155e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81155e8:	687a      	ldr	r2, [r7, #4]
 81155ea:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 81155ec:	f640 3168 	movw	r1, #2920	@ 0xb68
 81155f0:	428a      	cmp	r2, r1
 81155f2:	bf28      	it	cs
 81155f4:	460a      	movcs	r2, r1
 81155f6:	b292      	uxth	r2, r2
 81155f8:	4413      	add	r3, r2
 81155fa:	68fa      	ldr	r2, [r7, #12]
 81155fc:	1ad3      	subs	r3, r2, r3
 81155fe:	2b00      	cmp	r3, #0
 8115600:	db08      	blt.n	8115614 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8115602:	687b      	ldr	r3, [r7, #4]
 8115604:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8115606:	687b      	ldr	r3, [r7, #4]
 8115608:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 811560a:	687b      	ldr	r3, [r7, #4]
 811560c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811560e:	68fa      	ldr	r2, [r7, #12]
 8115610:	1ad3      	subs	r3, r2, r3
 8115612:	e020      	b.n	8115656 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8115614:	687b      	ldr	r3, [r7, #4]
 8115616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8115618:	687b      	ldr	r3, [r7, #4]
 811561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811561c:	1ad3      	subs	r3, r2, r3
 811561e:	2b00      	cmp	r3, #0
 8115620:	dd03      	ble.n	811562a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8115622:	687b      	ldr	r3, [r7, #4]
 8115624:	2200      	movs	r2, #0
 8115626:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8115628:	e014      	b.n	8115654 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 811562a:	687b      	ldr	r3, [r7, #4]
 811562c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811562e:	687b      	ldr	r3, [r7, #4]
 8115630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8115632:	1ad3      	subs	r3, r2, r3
 8115634:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8115636:	68bb      	ldr	r3, [r7, #8]
 8115638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811563c:	d306      	bcc.n	811564c <tcp_update_rcv_ann_wnd+0x90>
 811563e:	4b08      	ldr	r3, [pc, #32]	@ (8115660 <tcp_update_rcv_ann_wnd+0xa4>)
 8115640:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8115644:	4909      	ldr	r1, [pc, #36]	@ (811566c <tcp_update_rcv_ann_wnd+0xb0>)
 8115646:	4808      	ldr	r0, [pc, #32]	@ (8115668 <tcp_update_rcv_ann_wnd+0xac>)
 8115648:	f006 fbe8 	bl	811be1c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 811564c:	68bb      	ldr	r3, [r7, #8]
 811564e:	b29a      	uxth	r2, r3
 8115650:	687b      	ldr	r3, [r7, #4]
 8115652:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8115654:	2300      	movs	r3, #0
  }
}
 8115656:	4618      	mov	r0, r3
 8115658:	3710      	adds	r7, #16
 811565a:	46bd      	mov	sp, r7
 811565c:	bd80      	pop	{r7, pc}
 811565e:	bf00      	nop
 8115660:	0811e0b0 	.word	0x0811e0b0
 8115664:	0811e34c 	.word	0x0811e34c
 8115668:	0811e134 	.word	0x0811e134
 811566c:	0811e370 	.word	0x0811e370

08115670 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8115670:	b580      	push	{r7, lr}
 8115672:	b084      	sub	sp, #16
 8115674:	af00      	add	r7, sp, #0
 8115676:	6078      	str	r0, [r7, #4]
 8115678:	460b      	mov	r3, r1
 811567a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 811567c:	687b      	ldr	r3, [r7, #4]
 811567e:	2b00      	cmp	r3, #0
 8115680:	d107      	bne.n	8115692 <tcp_recved+0x22>
 8115682:	4b20      	ldr	r3, [pc, #128]	@ (8115704 <tcp_recved+0x94>)
 8115684:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8115688:	491f      	ldr	r1, [pc, #124]	@ (8115708 <tcp_recved+0x98>)
 811568a:	4820      	ldr	r0, [pc, #128]	@ (811570c <tcp_recved+0x9c>)
 811568c:	f006 fbc6 	bl	811be1c <iprintf>
 8115690:	e034      	b.n	81156fc <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8115692:	687b      	ldr	r3, [r7, #4]
 8115694:	7d1b      	ldrb	r3, [r3, #20]
 8115696:	2b01      	cmp	r3, #1
 8115698:	d106      	bne.n	81156a8 <tcp_recved+0x38>
 811569a:	4b1a      	ldr	r3, [pc, #104]	@ (8115704 <tcp_recved+0x94>)
 811569c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 81156a0:	491b      	ldr	r1, [pc, #108]	@ (8115710 <tcp_recved+0xa0>)
 81156a2:	481a      	ldr	r0, [pc, #104]	@ (811570c <tcp_recved+0x9c>)
 81156a4:	f006 fbba 	bl	811be1c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 81156a8:	687b      	ldr	r3, [r7, #4]
 81156aa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81156ac:	887b      	ldrh	r3, [r7, #2]
 81156ae:	4413      	add	r3, r2
 81156b0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 81156b2:	89fb      	ldrh	r3, [r7, #14]
 81156b4:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81156b8:	4293      	cmp	r3, r2
 81156ba:	d804      	bhi.n	81156c6 <tcp_recved+0x56>
 81156bc:	687b      	ldr	r3, [r7, #4]
 81156be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81156c0:	89fa      	ldrh	r2, [r7, #14]
 81156c2:	429a      	cmp	r2, r3
 81156c4:	d204      	bcs.n	81156d0 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 81156c6:	687b      	ldr	r3, [r7, #4]
 81156c8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81156cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 81156ce:	e002      	b.n	81156d6 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 81156d0:	687b      	ldr	r3, [r7, #4]
 81156d2:	89fa      	ldrh	r2, [r7, #14]
 81156d4:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 81156d6:	6878      	ldr	r0, [r7, #4]
 81156d8:	f7ff ff70 	bl	81155bc <tcp_update_rcv_ann_wnd>
 81156dc:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 81156de:	68bb      	ldr	r3, [r7, #8]
 81156e0:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 81156e4:	4293      	cmp	r3, r2
 81156e6:	d909      	bls.n	81156fc <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 81156e8:	687b      	ldr	r3, [r7, #4]
 81156ea:	8b5b      	ldrh	r3, [r3, #26]
 81156ec:	f043 0302 	orr.w	r3, r3, #2
 81156f0:	b29a      	uxth	r2, r3
 81156f2:	687b      	ldr	r3, [r7, #4]
 81156f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 81156f6:	6878      	ldr	r0, [r7, #4]
 81156f8:	f004 fc74 	bl	8119fe4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 81156fc:	3710      	adds	r7, #16
 81156fe:	46bd      	mov	sp, r7
 8115700:	bd80      	pop	{r7, pc}
 8115702:	bf00      	nop
 8115704:	0811e0b0 	.word	0x0811e0b0
 8115708:	0811e38c 	.word	0x0811e38c
 811570c:	0811e134 	.word	0x0811e134
 8115710:	0811e3a4 	.word	0x0811e3a4

08115714 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8115714:	b480      	push	{r7}
 8115716:	b083      	sub	sp, #12
 8115718:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 811571a:	2300      	movs	r3, #0
 811571c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 811571e:	4b1e      	ldr	r3, [pc, #120]	@ (8115798 <tcp_new_port+0x84>)
 8115720:	881b      	ldrh	r3, [r3, #0]
 8115722:	3301      	adds	r3, #1
 8115724:	b29a      	uxth	r2, r3
 8115726:	4b1c      	ldr	r3, [pc, #112]	@ (8115798 <tcp_new_port+0x84>)
 8115728:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 811572a:	4b1b      	ldr	r3, [pc, #108]	@ (8115798 <tcp_new_port+0x84>)
 811572c:	881b      	ldrh	r3, [r3, #0]
 811572e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8115732:	4293      	cmp	r3, r2
 8115734:	d103      	bne.n	811573e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8115736:	4b18      	ldr	r3, [pc, #96]	@ (8115798 <tcp_new_port+0x84>)
 8115738:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 811573c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811573e:	2300      	movs	r3, #0
 8115740:	71fb      	strb	r3, [r7, #7]
 8115742:	e01e      	b.n	8115782 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8115744:	79fb      	ldrb	r3, [r7, #7]
 8115746:	4a15      	ldr	r2, [pc, #84]	@ (811579c <tcp_new_port+0x88>)
 8115748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811574c:	681b      	ldr	r3, [r3, #0]
 811574e:	603b      	str	r3, [r7, #0]
 8115750:	e011      	b.n	8115776 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8115752:	683b      	ldr	r3, [r7, #0]
 8115754:	8ada      	ldrh	r2, [r3, #22]
 8115756:	4b10      	ldr	r3, [pc, #64]	@ (8115798 <tcp_new_port+0x84>)
 8115758:	881b      	ldrh	r3, [r3, #0]
 811575a:	429a      	cmp	r2, r3
 811575c:	d108      	bne.n	8115770 <tcp_new_port+0x5c>
        n++;
 811575e:	88bb      	ldrh	r3, [r7, #4]
 8115760:	3301      	adds	r3, #1
 8115762:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8115764:	88bb      	ldrh	r3, [r7, #4]
 8115766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 811576a:	d3d8      	bcc.n	811571e <tcp_new_port+0xa>
          return 0;
 811576c:	2300      	movs	r3, #0
 811576e:	e00d      	b.n	811578c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8115770:	683b      	ldr	r3, [r7, #0]
 8115772:	68db      	ldr	r3, [r3, #12]
 8115774:	603b      	str	r3, [r7, #0]
 8115776:	683b      	ldr	r3, [r7, #0]
 8115778:	2b00      	cmp	r3, #0
 811577a:	d1ea      	bne.n	8115752 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811577c:	79fb      	ldrb	r3, [r7, #7]
 811577e:	3301      	adds	r3, #1
 8115780:	71fb      	strb	r3, [r7, #7]
 8115782:	79fb      	ldrb	r3, [r7, #7]
 8115784:	2b03      	cmp	r3, #3
 8115786:	d9dd      	bls.n	8115744 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8115788:	4b03      	ldr	r3, [pc, #12]	@ (8115798 <tcp_new_port+0x84>)
 811578a:	881b      	ldrh	r3, [r3, #0]
}
 811578c:	4618      	mov	r0, r3
 811578e:	370c      	adds	r7, #12
 8115790:	46bd      	mov	sp, r7
 8115792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115796:	4770      	bx	lr
 8115798:	10000028 	.word	0x10000028
 811579c:	0811fd0c 	.word	0x0811fd0c

081157a0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 81157a0:	b580      	push	{r7, lr}
 81157a2:	b08a      	sub	sp, #40	@ 0x28
 81157a4:	af00      	add	r7, sp, #0
 81157a6:	60f8      	str	r0, [r7, #12]
 81157a8:	60b9      	str	r1, [r7, #8]
 81157aa:	603b      	str	r3, [r7, #0]
 81157ac:	4613      	mov	r3, r2
 81157ae:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 81157b0:	2300      	movs	r3, #0
 81157b2:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 81157b4:	68fb      	ldr	r3, [r7, #12]
 81157b6:	2b00      	cmp	r3, #0
 81157b8:	d109      	bne.n	81157ce <tcp_connect+0x2e>
 81157ba:	4b7d      	ldr	r3, [pc, #500]	@ (81159b0 <tcp_connect+0x210>)
 81157bc:	f240 4235 	movw	r2, #1077	@ 0x435
 81157c0:	497c      	ldr	r1, [pc, #496]	@ (81159b4 <tcp_connect+0x214>)
 81157c2:	487d      	ldr	r0, [pc, #500]	@ (81159b8 <tcp_connect+0x218>)
 81157c4:	f006 fb2a 	bl	811be1c <iprintf>
 81157c8:	f06f 030f 	mvn.w	r3, #15
 81157cc:	e0ec      	b.n	81159a8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 81157ce:	68bb      	ldr	r3, [r7, #8]
 81157d0:	2b00      	cmp	r3, #0
 81157d2:	d109      	bne.n	81157e8 <tcp_connect+0x48>
 81157d4:	4b76      	ldr	r3, [pc, #472]	@ (81159b0 <tcp_connect+0x210>)
 81157d6:	f240 4236 	movw	r2, #1078	@ 0x436
 81157da:	4978      	ldr	r1, [pc, #480]	@ (81159bc <tcp_connect+0x21c>)
 81157dc:	4876      	ldr	r0, [pc, #472]	@ (81159b8 <tcp_connect+0x218>)
 81157de:	f006 fb1d 	bl	811be1c <iprintf>
 81157e2:	f06f 030f 	mvn.w	r3, #15
 81157e6:	e0df      	b.n	81159a8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 81157e8:	68fb      	ldr	r3, [r7, #12]
 81157ea:	7d1b      	ldrb	r3, [r3, #20]
 81157ec:	2b00      	cmp	r3, #0
 81157ee:	d009      	beq.n	8115804 <tcp_connect+0x64>
 81157f0:	4b6f      	ldr	r3, [pc, #444]	@ (81159b0 <tcp_connect+0x210>)
 81157f2:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 81157f6:	4972      	ldr	r1, [pc, #456]	@ (81159c0 <tcp_connect+0x220>)
 81157f8:	486f      	ldr	r0, [pc, #444]	@ (81159b8 <tcp_connect+0x218>)
 81157fa:	f006 fb0f 	bl	811be1c <iprintf>
 81157fe:	f06f 0309 	mvn.w	r3, #9
 8115802:	e0d1      	b.n	81159a8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8115804:	68bb      	ldr	r3, [r7, #8]
 8115806:	2b00      	cmp	r3, #0
 8115808:	d002      	beq.n	8115810 <tcp_connect+0x70>
 811580a:	68bb      	ldr	r3, [r7, #8]
 811580c:	681b      	ldr	r3, [r3, #0]
 811580e:	e000      	b.n	8115812 <tcp_connect+0x72>
 8115810:	2300      	movs	r3, #0
 8115812:	68fa      	ldr	r2, [r7, #12]
 8115814:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8115816:	68fb      	ldr	r3, [r7, #12]
 8115818:	88fa      	ldrh	r2, [r7, #6]
 811581a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 811581c:	68fb      	ldr	r3, [r7, #12]
 811581e:	7a1b      	ldrb	r3, [r3, #8]
 8115820:	2b00      	cmp	r3, #0
 8115822:	d006      	beq.n	8115832 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8115824:	68fb      	ldr	r3, [r7, #12]
 8115826:	7a1b      	ldrb	r3, [r3, #8]
 8115828:	4618      	mov	r0, r3
 811582a:	f7fe fca7 	bl	811417c <netif_get_by_index>
 811582e:	6278      	str	r0, [r7, #36]	@ 0x24
 8115830:	e005      	b.n	811583e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8115832:	68fb      	ldr	r3, [r7, #12]
 8115834:	3304      	adds	r3, #4
 8115836:	4618      	mov	r0, r3
 8115838:	f7fc fb80 	bl	8111f3c <ip4_route>
 811583c:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 811583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115840:	2b00      	cmp	r3, #0
 8115842:	d102      	bne.n	811584a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8115844:	f06f 0303 	mvn.w	r3, #3
 8115848:	e0ae      	b.n	81159a8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 811584a:	68fb      	ldr	r3, [r7, #12]
 811584c:	2b00      	cmp	r3, #0
 811584e:	d003      	beq.n	8115858 <tcp_connect+0xb8>
 8115850:	68fb      	ldr	r3, [r7, #12]
 8115852:	681b      	ldr	r3, [r3, #0]
 8115854:	2b00      	cmp	r3, #0
 8115856:	d111      	bne.n	811587c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8115858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811585a:	2b00      	cmp	r3, #0
 811585c:	d002      	beq.n	8115864 <tcp_connect+0xc4>
 811585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115860:	3304      	adds	r3, #4
 8115862:	e000      	b.n	8115866 <tcp_connect+0xc6>
 8115864:	2300      	movs	r3, #0
 8115866:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8115868:	69fb      	ldr	r3, [r7, #28]
 811586a:	2b00      	cmp	r3, #0
 811586c:	d102      	bne.n	8115874 <tcp_connect+0xd4>
      return ERR_RTE;
 811586e:	f06f 0303 	mvn.w	r3, #3
 8115872:	e099      	b.n	81159a8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8115874:	69fb      	ldr	r3, [r7, #28]
 8115876:	681a      	ldr	r2, [r3, #0]
 8115878:	68fb      	ldr	r3, [r7, #12]
 811587a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 811587c:	68fb      	ldr	r3, [r7, #12]
 811587e:	8adb      	ldrh	r3, [r3, #22]
 8115880:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8115882:	68fb      	ldr	r3, [r7, #12]
 8115884:	8adb      	ldrh	r3, [r3, #22]
 8115886:	2b00      	cmp	r3, #0
 8115888:	d10c      	bne.n	81158a4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 811588a:	f7ff ff43 	bl	8115714 <tcp_new_port>
 811588e:	4603      	mov	r3, r0
 8115890:	461a      	mov	r2, r3
 8115892:	68fb      	ldr	r3, [r7, #12]
 8115894:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8115896:	68fb      	ldr	r3, [r7, #12]
 8115898:	8adb      	ldrh	r3, [r3, #22]
 811589a:	2b00      	cmp	r3, #0
 811589c:	d102      	bne.n	81158a4 <tcp_connect+0x104>
      return ERR_BUF;
 811589e:	f06f 0301 	mvn.w	r3, #1
 81158a2:	e081      	b.n	81159a8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 81158a4:	68f8      	ldr	r0, [r7, #12]
 81158a6:	f001 f819 	bl	81168dc <tcp_next_iss>
 81158aa:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 81158ac:	68fb      	ldr	r3, [r7, #12]
 81158ae:	2200      	movs	r2, #0
 81158b0:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 81158b2:	68fb      	ldr	r3, [r7, #12]
 81158b4:	697a      	ldr	r2, [r7, #20]
 81158b6:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 81158b8:	697b      	ldr	r3, [r7, #20]
 81158ba:	1e5a      	subs	r2, r3, #1
 81158bc:	68fb      	ldr	r3, [r7, #12]
 81158be:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 81158c0:	697b      	ldr	r3, [r7, #20]
 81158c2:	1e5a      	subs	r2, r3, #1
 81158c4:	68fb      	ldr	r3, [r7, #12]
 81158c6:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 81158c8:	697b      	ldr	r3, [r7, #20]
 81158ca:	1e5a      	subs	r2, r3, #1
 81158cc:	68fb      	ldr	r3, [r7, #12]
 81158ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 81158d0:	68fb      	ldr	r3, [r7, #12]
 81158d2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81158d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 81158d8:	68fb      	ldr	r3, [r7, #12]
 81158da:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 81158dc:	68fb      	ldr	r3, [r7, #12]
 81158de:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 81158e0:	68fb      	ldr	r3, [r7, #12]
 81158e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81158e4:	68fb      	ldr	r3, [r7, #12]
 81158e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 81158e8:	68fb      	ldr	r3, [r7, #12]
 81158ea:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81158ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 81158f2:	68fb      	ldr	r3, [r7, #12]
 81158f4:	f44f 7206 	mov.w	r2, #536	@ 0x218
 81158f8:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 81158fa:	68fb      	ldr	r3, [r7, #12]
 81158fc:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 81158fe:	68fb      	ldr	r3, [r7, #12]
 8115900:	3304      	adds	r3, #4
 8115902:	461a      	mov	r2, r3
 8115904:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8115906:	f001 f80f 	bl	8116928 <tcp_eff_send_mss_netif>
 811590a:	4603      	mov	r3, r0
 811590c:	461a      	mov	r2, r3
 811590e:	68fb      	ldr	r3, [r7, #12]
 8115910:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8115912:	68fb      	ldr	r3, [r7, #12]
 8115914:	2201      	movs	r2, #1
 8115916:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 811591a:	68fb      	ldr	r3, [r7, #12]
 811591c:	683a      	ldr	r2, [r7, #0]
 811591e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8115922:	2102      	movs	r1, #2
 8115924:	68f8      	ldr	r0, [r7, #12]
 8115926:	f004 fa6f 	bl	8119e08 <tcp_enqueue_flags>
 811592a:	4603      	mov	r3, r0
 811592c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 811592e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8115932:	2b00      	cmp	r3, #0
 8115934:	d136      	bne.n	81159a4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8115936:	68fb      	ldr	r3, [r7, #12]
 8115938:	2202      	movs	r2, #2
 811593a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 811593c:	8b7b      	ldrh	r3, [r7, #26]
 811593e:	2b00      	cmp	r3, #0
 8115940:	d021      	beq.n	8115986 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8115942:	4b20      	ldr	r3, [pc, #128]	@ (81159c4 <tcp_connect+0x224>)
 8115944:	681b      	ldr	r3, [r3, #0]
 8115946:	68fa      	ldr	r2, [r7, #12]
 8115948:	429a      	cmp	r2, r3
 811594a:	d105      	bne.n	8115958 <tcp_connect+0x1b8>
 811594c:	4b1d      	ldr	r3, [pc, #116]	@ (81159c4 <tcp_connect+0x224>)
 811594e:	681b      	ldr	r3, [r3, #0]
 8115950:	68db      	ldr	r3, [r3, #12]
 8115952:	4a1c      	ldr	r2, [pc, #112]	@ (81159c4 <tcp_connect+0x224>)
 8115954:	6013      	str	r3, [r2, #0]
 8115956:	e013      	b.n	8115980 <tcp_connect+0x1e0>
 8115958:	4b1a      	ldr	r3, [pc, #104]	@ (81159c4 <tcp_connect+0x224>)
 811595a:	681b      	ldr	r3, [r3, #0]
 811595c:	623b      	str	r3, [r7, #32]
 811595e:	e00c      	b.n	811597a <tcp_connect+0x1da>
 8115960:	6a3b      	ldr	r3, [r7, #32]
 8115962:	68db      	ldr	r3, [r3, #12]
 8115964:	68fa      	ldr	r2, [r7, #12]
 8115966:	429a      	cmp	r2, r3
 8115968:	d104      	bne.n	8115974 <tcp_connect+0x1d4>
 811596a:	68fb      	ldr	r3, [r7, #12]
 811596c:	68da      	ldr	r2, [r3, #12]
 811596e:	6a3b      	ldr	r3, [r7, #32]
 8115970:	60da      	str	r2, [r3, #12]
 8115972:	e005      	b.n	8115980 <tcp_connect+0x1e0>
 8115974:	6a3b      	ldr	r3, [r7, #32]
 8115976:	68db      	ldr	r3, [r3, #12]
 8115978:	623b      	str	r3, [r7, #32]
 811597a:	6a3b      	ldr	r3, [r7, #32]
 811597c:	2b00      	cmp	r3, #0
 811597e:	d1ef      	bne.n	8115960 <tcp_connect+0x1c0>
 8115980:	68fb      	ldr	r3, [r7, #12]
 8115982:	2200      	movs	r2, #0
 8115984:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8115986:	4b10      	ldr	r3, [pc, #64]	@ (81159c8 <tcp_connect+0x228>)
 8115988:	681a      	ldr	r2, [r3, #0]
 811598a:	68fb      	ldr	r3, [r7, #12]
 811598c:	60da      	str	r2, [r3, #12]
 811598e:	4a0e      	ldr	r2, [pc, #56]	@ (81159c8 <tcp_connect+0x228>)
 8115990:	68fb      	ldr	r3, [r7, #12]
 8115992:	6013      	str	r3, [r2, #0]
 8115994:	f005 fc3e 	bl	811b214 <tcp_timer_needed>
 8115998:	4b0c      	ldr	r3, [pc, #48]	@ (81159cc <tcp_connect+0x22c>)
 811599a:	2201      	movs	r2, #1
 811599c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 811599e:	68f8      	ldr	r0, [r7, #12]
 81159a0:	f004 fb20 	bl	8119fe4 <tcp_output>
  }
  return ret;
 81159a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 81159a8:	4618      	mov	r0, r3
 81159aa:	3728      	adds	r7, #40	@ 0x28
 81159ac:	46bd      	mov	sp, r7
 81159ae:	bd80      	pop	{r7, pc}
 81159b0:	0811e0b0 	.word	0x0811e0b0
 81159b4:	0811e3cc 	.word	0x0811e3cc
 81159b8:	0811e134 	.word	0x0811e134
 81159bc:	0811e3e8 	.word	0x0811e3e8
 81159c0:	0811e404 	.word	0x0811e404
 81159c4:	10011d18 	.word	0x10011d18
 81159c8:	10011d20 	.word	0x10011d20
 81159cc:	10011d28 	.word	0x10011d28

081159d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 81159d0:	b5b0      	push	{r4, r5, r7, lr}
 81159d2:	b090      	sub	sp, #64	@ 0x40
 81159d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 81159d6:	2300      	movs	r3, #0
 81159d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 81159dc:	4b95      	ldr	r3, [pc, #596]	@ (8115c34 <tcp_slowtmr+0x264>)
 81159de:	681b      	ldr	r3, [r3, #0]
 81159e0:	3301      	adds	r3, #1
 81159e2:	4a94      	ldr	r2, [pc, #592]	@ (8115c34 <tcp_slowtmr+0x264>)
 81159e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 81159e6:	4b94      	ldr	r3, [pc, #592]	@ (8115c38 <tcp_slowtmr+0x268>)
 81159e8:	781b      	ldrb	r3, [r3, #0]
 81159ea:	3301      	adds	r3, #1
 81159ec:	b2da      	uxtb	r2, r3
 81159ee:	4b92      	ldr	r3, [pc, #584]	@ (8115c38 <tcp_slowtmr+0x268>)
 81159f0:	701a      	strb	r2, [r3, #0]
 81159f2:	e000      	b.n	81159f6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 81159f4:	bf00      	nop
  prev = NULL;
 81159f6:	2300      	movs	r3, #0
 81159f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 81159fa:	4b90      	ldr	r3, [pc, #576]	@ (8115c3c <tcp_slowtmr+0x26c>)
 81159fc:	681b      	ldr	r3, [r3, #0]
 81159fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8115a00:	e29f      	b.n	8115f42 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8115a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a04:	7d1b      	ldrb	r3, [r3, #20]
 8115a06:	2b00      	cmp	r3, #0
 8115a08:	d106      	bne.n	8115a18 <tcp_slowtmr+0x48>
 8115a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8115c40 <tcp_slowtmr+0x270>)
 8115a0c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8115a10:	498c      	ldr	r1, [pc, #560]	@ (8115c44 <tcp_slowtmr+0x274>)
 8115a12:	488d      	ldr	r0, [pc, #564]	@ (8115c48 <tcp_slowtmr+0x278>)
 8115a14:	f006 fa02 	bl	811be1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8115a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a1a:	7d1b      	ldrb	r3, [r3, #20]
 8115a1c:	2b01      	cmp	r3, #1
 8115a1e:	d106      	bne.n	8115a2e <tcp_slowtmr+0x5e>
 8115a20:	4b87      	ldr	r3, [pc, #540]	@ (8115c40 <tcp_slowtmr+0x270>)
 8115a22:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8115a26:	4989      	ldr	r1, [pc, #548]	@ (8115c4c <tcp_slowtmr+0x27c>)
 8115a28:	4887      	ldr	r0, [pc, #540]	@ (8115c48 <tcp_slowtmr+0x278>)
 8115a2a:	f006 f9f7 	bl	811be1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8115a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a30:	7d1b      	ldrb	r3, [r3, #20]
 8115a32:	2b0a      	cmp	r3, #10
 8115a34:	d106      	bne.n	8115a44 <tcp_slowtmr+0x74>
 8115a36:	4b82      	ldr	r3, [pc, #520]	@ (8115c40 <tcp_slowtmr+0x270>)
 8115a38:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8115a3c:	4984      	ldr	r1, [pc, #528]	@ (8115c50 <tcp_slowtmr+0x280>)
 8115a3e:	4882      	ldr	r0, [pc, #520]	@ (8115c48 <tcp_slowtmr+0x278>)
 8115a40:	f006 f9ec 	bl	811be1c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8115a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a46:	7f9a      	ldrb	r2, [r3, #30]
 8115a48:	4b7b      	ldr	r3, [pc, #492]	@ (8115c38 <tcp_slowtmr+0x268>)
 8115a4a:	781b      	ldrb	r3, [r3, #0]
 8115a4c:	429a      	cmp	r2, r3
 8115a4e:	d105      	bne.n	8115a5c <tcp_slowtmr+0x8c>
      prev = pcb;
 8115a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a52:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8115a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a56:	68db      	ldr	r3, [r3, #12]
 8115a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8115a5a:	e272      	b.n	8115f42 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8115a5c:	4b76      	ldr	r3, [pc, #472]	@ (8115c38 <tcp_slowtmr+0x268>)
 8115a5e:	781a      	ldrb	r2, [r3, #0]
 8115a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a62:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8115a64:	2300      	movs	r3, #0
 8115a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8115a6a:	2300      	movs	r3, #0
 8115a6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8115a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a72:	7d1b      	ldrb	r3, [r3, #20]
 8115a74:	2b02      	cmp	r3, #2
 8115a76:	d10a      	bne.n	8115a8e <tcp_slowtmr+0xbe>
 8115a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8115a7e:	2b05      	cmp	r3, #5
 8115a80:	d905      	bls.n	8115a8e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8115a82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115a86:	3301      	adds	r3, #1
 8115a88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8115a8c:	e11e      	b.n	8115ccc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8115a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8115a94:	2b0b      	cmp	r3, #11
 8115a96:	d905      	bls.n	8115aa4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8115a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115a9c:	3301      	adds	r3, #1
 8115a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8115aa2:	e113      	b.n	8115ccc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8115aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115aa6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8115aaa:	2b00      	cmp	r3, #0
 8115aac:	d075      	beq.n	8115b9a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8115aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8115ab2:	2b00      	cmp	r3, #0
 8115ab4:	d006      	beq.n	8115ac4 <tcp_slowtmr+0xf4>
 8115ab6:	4b62      	ldr	r3, [pc, #392]	@ (8115c40 <tcp_slowtmr+0x270>)
 8115ab8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8115abc:	4965      	ldr	r1, [pc, #404]	@ (8115c54 <tcp_slowtmr+0x284>)
 8115abe:	4862      	ldr	r0, [pc, #392]	@ (8115c48 <tcp_slowtmr+0x278>)
 8115ac0:	f006 f9ac 	bl	811be1c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8115ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8115ac8:	2b00      	cmp	r3, #0
 8115aca:	d106      	bne.n	8115ada <tcp_slowtmr+0x10a>
 8115acc:	4b5c      	ldr	r3, [pc, #368]	@ (8115c40 <tcp_slowtmr+0x270>)
 8115ace:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8115ad2:	4961      	ldr	r1, [pc, #388]	@ (8115c58 <tcp_slowtmr+0x288>)
 8115ad4:	485c      	ldr	r0, [pc, #368]	@ (8115c48 <tcp_slowtmr+0x278>)
 8115ad6:	f006 f9a1 	bl	811be1c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8115ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115adc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8115ae0:	2b0b      	cmp	r3, #11
 8115ae2:	d905      	bls.n	8115af0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8115ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115ae8:	3301      	adds	r3, #1
 8115aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8115aee:	e0ed      	b.n	8115ccc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8115af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115af2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8115af6:	3b01      	subs	r3, #1
 8115af8:	4a58      	ldr	r2, [pc, #352]	@ (8115c5c <tcp_slowtmr+0x28c>)
 8115afa:	5cd3      	ldrb	r3, [r2, r3]
 8115afc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8115afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b00:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8115b04:	7c7a      	ldrb	r2, [r7, #17]
 8115b06:	429a      	cmp	r2, r3
 8115b08:	d907      	bls.n	8115b1a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8115b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b0c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8115b10:	3301      	adds	r3, #1
 8115b12:	b2da      	uxtb	r2, r3
 8115b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b16:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8115b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b1c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8115b20:	7c7a      	ldrb	r2, [r7, #17]
 8115b22:	429a      	cmp	r2, r3
 8115b24:	f200 80d2 	bhi.w	8115ccc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8115b28:	2301      	movs	r3, #1
 8115b2a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8115b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8115b32:	2b00      	cmp	r3, #0
 8115b34:	d108      	bne.n	8115b48 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8115b36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115b38:	f005 f8fc 	bl	811ad34 <tcp_zero_window_probe>
 8115b3c:	4603      	mov	r3, r0
 8115b3e:	2b00      	cmp	r3, #0
 8115b40:	d014      	beq.n	8115b6c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8115b42:	2300      	movs	r3, #0
 8115b44:	623b      	str	r3, [r7, #32]
 8115b46:	e011      	b.n	8115b6c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8115b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8115b4e:	4619      	mov	r1, r3
 8115b50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115b52:	f003 ffc1 	bl	8119ad8 <tcp_split_unsent_seg>
 8115b56:	4603      	mov	r3, r0
 8115b58:	2b00      	cmp	r3, #0
 8115b5a:	d107      	bne.n	8115b6c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8115b5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115b5e:	f004 fa41 	bl	8119fe4 <tcp_output>
 8115b62:	4603      	mov	r3, r0
 8115b64:	2b00      	cmp	r3, #0
 8115b66:	d101      	bne.n	8115b6c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8115b68:	2300      	movs	r3, #0
 8115b6a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8115b6c:	6a3b      	ldr	r3, [r7, #32]
 8115b6e:	2b00      	cmp	r3, #0
 8115b70:	f000 80ac 	beq.w	8115ccc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8115b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b76:	2200      	movs	r2, #0
 8115b78:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8115b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b7e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8115b82:	2b06      	cmp	r3, #6
 8115b84:	f200 80a2 	bhi.w	8115ccc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8115b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b8a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8115b8e:	3301      	adds	r3, #1
 8115b90:	b2da      	uxtb	r2, r3
 8115b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b94:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8115b98:	e098      	b.n	8115ccc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8115b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8115ba0:	2b00      	cmp	r3, #0
 8115ba2:	db0f      	blt.n	8115bc4 <tcp_slowtmr+0x1f4>
 8115ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ba6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8115baa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8115bae:	4293      	cmp	r3, r2
 8115bb0:	d008      	beq.n	8115bc4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8115bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8115bb8:	b29b      	uxth	r3, r3
 8115bba:	3301      	adds	r3, #1
 8115bbc:	b29b      	uxth	r3, r3
 8115bbe:	b21a      	sxth	r2, r3
 8115bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bc2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8115bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bc6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8115bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bcc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8115bd0:	429a      	cmp	r2, r3
 8115bd2:	db7b      	blt.n	8115ccc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8115bd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115bd6:	f004 fcf9 	bl	811a5cc <tcp_rexmit_rto_prepare>
 8115bda:	4603      	mov	r3, r0
 8115bdc:	2b00      	cmp	r3, #0
 8115bde:	d007      	beq.n	8115bf0 <tcp_slowtmr+0x220>
 8115be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8115be4:	2b00      	cmp	r3, #0
 8115be6:	d171      	bne.n	8115ccc <tcp_slowtmr+0x2fc>
 8115be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8115bec:	2b00      	cmp	r3, #0
 8115bee:	d06d      	beq.n	8115ccc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8115bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bf2:	7d1b      	ldrb	r3, [r3, #20]
 8115bf4:	2b02      	cmp	r3, #2
 8115bf6:	d03a      	beq.n	8115c6e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8115bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8115bfe:	2b0c      	cmp	r3, #12
 8115c00:	bf28      	it	cs
 8115c02:	230c      	movcs	r3, #12
 8115c04:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8115c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8115c0c:	10db      	asrs	r3, r3, #3
 8115c0e:	b21b      	sxth	r3, r3
 8115c10:	461a      	mov	r2, r3
 8115c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8115c18:	4413      	add	r3, r2
 8115c1a:	7efa      	ldrb	r2, [r7, #27]
 8115c1c:	4910      	ldr	r1, [pc, #64]	@ (8115c60 <tcp_slowtmr+0x290>)
 8115c1e:	5c8a      	ldrb	r2, [r1, r2]
 8115c20:	4093      	lsls	r3, r2
 8115c22:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8115c24:	697b      	ldr	r3, [r7, #20]
 8115c26:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8115c2a:	4293      	cmp	r3, r2
 8115c2c:	dc1a      	bgt.n	8115c64 <tcp_slowtmr+0x294>
 8115c2e:	697b      	ldr	r3, [r7, #20]
 8115c30:	b21a      	sxth	r2, r3
 8115c32:	e019      	b.n	8115c68 <tcp_slowtmr+0x298>
 8115c34:	10011d14 	.word	0x10011d14
 8115c38:	10011d2a 	.word	0x10011d2a
 8115c3c:	10011d20 	.word	0x10011d20
 8115c40:	0811e0b0 	.word	0x0811e0b0
 8115c44:	0811e434 	.word	0x0811e434
 8115c48:	0811e134 	.word	0x0811e134
 8115c4c:	0811e460 	.word	0x0811e460
 8115c50:	0811e48c 	.word	0x0811e48c
 8115c54:	0811e4bc 	.word	0x0811e4bc
 8115c58:	0811e4f0 	.word	0x0811e4f0
 8115c5c:	0811fd04 	.word	0x0811fd04
 8115c60:	0811fcf4 	.word	0x0811fcf4
 8115c64:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8115c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8115c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c70:	2200      	movs	r2, #0
 8115c72:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8115c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8115c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8115c80:	4293      	cmp	r3, r2
 8115c82:	bf28      	it	cs
 8115c84:	4613      	movcs	r3, r2
 8115c86:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8115c88:	8a7b      	ldrh	r3, [r7, #18]
 8115c8a:	085b      	lsrs	r3, r3, #1
 8115c8c:	b29a      	uxth	r2, r3
 8115c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c90:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8115c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8115c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8115c9e:	005b      	lsls	r3, r3, #1
 8115ca0:	b29b      	uxth	r3, r3
 8115ca2:	429a      	cmp	r2, r3
 8115ca4:	d206      	bcs.n	8115cb4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8115ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ca8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8115caa:	005b      	lsls	r3, r3, #1
 8115cac:	b29a      	uxth	r2, r3
 8115cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cb0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8115cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cb6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8115cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8115cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cc0:	2200      	movs	r2, #0
 8115cc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8115cc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115cc8:	f004 fcf0 	bl	811a6ac <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8115ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cce:	7d1b      	ldrb	r3, [r3, #20]
 8115cd0:	2b06      	cmp	r3, #6
 8115cd2:	d111      	bne.n	8115cf8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8115cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cd6:	8b5b      	ldrh	r3, [r3, #26]
 8115cd8:	f003 0310 	and.w	r3, r3, #16
 8115cdc:	2b00      	cmp	r3, #0
 8115cde:	d00b      	beq.n	8115cf8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115ce0:	4b9d      	ldr	r3, [pc, #628]	@ (8115f58 <tcp_slowtmr+0x588>)
 8115ce2:	681a      	ldr	r2, [r3, #0]
 8115ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ce6:	6a1b      	ldr	r3, [r3, #32]
 8115ce8:	1ad3      	subs	r3, r2, r3
 8115cea:	2b28      	cmp	r3, #40	@ 0x28
 8115cec:	d904      	bls.n	8115cf8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8115cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115cf2:	3301      	adds	r3, #1
 8115cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8115cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cfa:	7a5b      	ldrb	r3, [r3, #9]
 8115cfc:	f003 0308 	and.w	r3, r3, #8
 8115d00:	2b00      	cmp	r3, #0
 8115d02:	d04c      	beq.n	8115d9e <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8115d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d06:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8115d08:	2b04      	cmp	r3, #4
 8115d0a:	d003      	beq.n	8115d14 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8115d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d0e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8115d10:	2b07      	cmp	r3, #7
 8115d12:	d144      	bne.n	8115d9e <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115d14:	4b90      	ldr	r3, [pc, #576]	@ (8115f58 <tcp_slowtmr+0x588>)
 8115d16:	681a      	ldr	r2, [r3, #0]
 8115d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d1a:	6a1b      	ldr	r3, [r3, #32]
 8115d1c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8115d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8115d24:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8115d28:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8115d2c:	498b      	ldr	r1, [pc, #556]	@ (8115f5c <tcp_slowtmr+0x58c>)
 8115d2e:	fba1 1303 	umull	r1, r3, r1, r3
 8115d32:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115d34:	429a      	cmp	r2, r3
 8115d36:	d90a      	bls.n	8115d4e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8115d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115d3c:	3301      	adds	r3, #1
 8115d3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8115d42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8115d46:	3301      	adds	r3, #1
 8115d48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8115d4c:	e027      	b.n	8115d9e <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115d4e:	4b82      	ldr	r3, [pc, #520]	@ (8115f58 <tcp_slowtmr+0x588>)
 8115d50:	681a      	ldr	r2, [r3, #0]
 8115d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d54:	6a1b      	ldr	r3, [r3, #32]
 8115d56:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8115d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d5a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8115d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d60:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8115d64:	4618      	mov	r0, r3
 8115d66:	4b7e      	ldr	r3, [pc, #504]	@ (8115f60 <tcp_slowtmr+0x590>)
 8115d68:	fb00 f303 	mul.w	r3, r0, r3
 8115d6c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8115d6e:	497b      	ldr	r1, [pc, #492]	@ (8115f5c <tcp_slowtmr+0x58c>)
 8115d70:	fba1 1303 	umull	r1, r3, r1, r3
 8115d74:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115d76:	429a      	cmp	r2, r3
 8115d78:	d911      	bls.n	8115d9e <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8115d7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115d7c:	f004 ff9a 	bl	811acb4 <tcp_keepalive>
 8115d80:	4603      	mov	r3, r0
 8115d82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8115d86:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8115d8a:	2b00      	cmp	r3, #0
 8115d8c:	d107      	bne.n	8115d9e <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8115d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d90:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8115d94:	3301      	adds	r3, #1
 8115d96:	b2da      	uxtb	r2, r3
 8115d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d9a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8115d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8115da2:	2b00      	cmp	r3, #0
 8115da4:	d011      	beq.n	8115dca <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8115da6:	4b6c      	ldr	r3, [pc, #432]	@ (8115f58 <tcp_slowtmr+0x588>)
 8115da8:	681a      	ldr	r2, [r3, #0]
 8115daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dac:	6a1b      	ldr	r3, [r3, #32]
 8115dae:	1ad2      	subs	r2, r2, r3
 8115db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115db2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8115db6:	4619      	mov	r1, r3
 8115db8:	460b      	mov	r3, r1
 8115dba:	005b      	lsls	r3, r3, #1
 8115dbc:	440b      	add	r3, r1
 8115dbe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8115dc0:	429a      	cmp	r2, r3
 8115dc2:	d302      	bcc.n	8115dca <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8115dc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115dc6:	f000 fe59 	bl	8116a7c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8115dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dcc:	7d1b      	ldrb	r3, [r3, #20]
 8115dce:	2b03      	cmp	r3, #3
 8115dd0:	d10b      	bne.n	8115dea <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115dd2:	4b61      	ldr	r3, [pc, #388]	@ (8115f58 <tcp_slowtmr+0x588>)
 8115dd4:	681a      	ldr	r2, [r3, #0]
 8115dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dd8:	6a1b      	ldr	r3, [r3, #32]
 8115dda:	1ad3      	subs	r3, r2, r3
 8115ddc:	2b28      	cmp	r3, #40	@ 0x28
 8115dde:	d904      	bls.n	8115dea <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8115de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115de4:	3301      	adds	r3, #1
 8115de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8115dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dec:	7d1b      	ldrb	r3, [r3, #20]
 8115dee:	2b09      	cmp	r3, #9
 8115df0:	d10b      	bne.n	8115e0a <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8115df2:	4b59      	ldr	r3, [pc, #356]	@ (8115f58 <tcp_slowtmr+0x588>)
 8115df4:	681a      	ldr	r2, [r3, #0]
 8115df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115df8:	6a1b      	ldr	r3, [r3, #32]
 8115dfa:	1ad3      	subs	r3, r2, r3
 8115dfc:	2bf0      	cmp	r3, #240	@ 0xf0
 8115dfe:	d904      	bls.n	8115e0a <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8115e00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115e04:	3301      	adds	r3, #1
 8115e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8115e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115e0e:	2b00      	cmp	r3, #0
 8115e10:	d060      	beq.n	8115ed4 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8115e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8115e18:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8115e1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115e1c:	f000 fc7a 	bl	8116714 <tcp_pcb_purge>
      if (prev != NULL) {
 8115e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115e22:	2b00      	cmp	r3, #0
 8115e24:	d010      	beq.n	8115e48 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8115e26:	4b4f      	ldr	r3, [pc, #316]	@ (8115f64 <tcp_slowtmr+0x594>)
 8115e28:	681b      	ldr	r3, [r3, #0]
 8115e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115e2c:	429a      	cmp	r2, r3
 8115e2e:	d106      	bne.n	8115e3e <tcp_slowtmr+0x46e>
 8115e30:	4b4d      	ldr	r3, [pc, #308]	@ (8115f68 <tcp_slowtmr+0x598>)
 8115e32:	f240 526d 	movw	r2, #1389	@ 0x56d
 8115e36:	494d      	ldr	r1, [pc, #308]	@ (8115f6c <tcp_slowtmr+0x59c>)
 8115e38:	484d      	ldr	r0, [pc, #308]	@ (8115f70 <tcp_slowtmr+0x5a0>)
 8115e3a:	f005 ffef 	bl	811be1c <iprintf>
        prev->next = pcb->next;
 8115e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e40:	68da      	ldr	r2, [r3, #12]
 8115e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115e44:	60da      	str	r2, [r3, #12]
 8115e46:	e00f      	b.n	8115e68 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8115e48:	4b46      	ldr	r3, [pc, #280]	@ (8115f64 <tcp_slowtmr+0x594>)
 8115e4a:	681b      	ldr	r3, [r3, #0]
 8115e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115e4e:	429a      	cmp	r2, r3
 8115e50:	d006      	beq.n	8115e60 <tcp_slowtmr+0x490>
 8115e52:	4b45      	ldr	r3, [pc, #276]	@ (8115f68 <tcp_slowtmr+0x598>)
 8115e54:	f240 5271 	movw	r2, #1393	@ 0x571
 8115e58:	4946      	ldr	r1, [pc, #280]	@ (8115f74 <tcp_slowtmr+0x5a4>)
 8115e5a:	4845      	ldr	r0, [pc, #276]	@ (8115f70 <tcp_slowtmr+0x5a0>)
 8115e5c:	f005 ffde 	bl	811be1c <iprintf>
        tcp_active_pcbs = pcb->next;
 8115e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e62:	68db      	ldr	r3, [r3, #12]
 8115e64:	4a3f      	ldr	r2, [pc, #252]	@ (8115f64 <tcp_slowtmr+0x594>)
 8115e66:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8115e68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8115e6c:	2b00      	cmp	r3, #0
 8115e6e:	d013      	beq.n	8115e98 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8115e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e72:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8115e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e76:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8115e78:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8115e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e7c:	3304      	adds	r3, #4
 8115e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115e80:	8ad2      	ldrh	r2, [r2, #22]
 8115e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8115e84:	8b09      	ldrh	r1, [r1, #24]
 8115e86:	9102      	str	r1, [sp, #8]
 8115e88:	9201      	str	r2, [sp, #4]
 8115e8a:	9300      	str	r3, [sp, #0]
 8115e8c:	462b      	mov	r3, r5
 8115e8e:	4622      	mov	r2, r4
 8115e90:	4601      	mov	r1, r0
 8115e92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115e94:	f004 fe5a 	bl	811ab4c <tcp_rst>
      err_arg = pcb->callback_arg;
 8115e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e9a:	691b      	ldr	r3, [r3, #16]
 8115e9c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8115e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ea0:	7d1b      	ldrb	r3, [r3, #20]
 8115ea2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8115ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ea6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8115ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115eaa:	68db      	ldr	r3, [r3, #12]
 8115eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8115eae:	6838      	ldr	r0, [r7, #0]
 8115eb0:	f7ff f890 	bl	8114fd4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8115eb4:	4b30      	ldr	r3, [pc, #192]	@ (8115f78 <tcp_slowtmr+0x5a8>)
 8115eb6:	2200      	movs	r2, #0
 8115eb8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8115eba:	68fb      	ldr	r3, [r7, #12]
 8115ebc:	2b00      	cmp	r3, #0
 8115ebe:	d004      	beq.n	8115eca <tcp_slowtmr+0x4fa>
 8115ec0:	68fb      	ldr	r3, [r7, #12]
 8115ec2:	f06f 010c 	mvn.w	r1, #12
 8115ec6:	68b8      	ldr	r0, [r7, #8]
 8115ec8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8115eca:	4b2b      	ldr	r3, [pc, #172]	@ (8115f78 <tcp_slowtmr+0x5a8>)
 8115ecc:	781b      	ldrb	r3, [r3, #0]
 8115ece:	2b00      	cmp	r3, #0
 8115ed0:	d037      	beq.n	8115f42 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8115ed2:	e590      	b.n	81159f6 <tcp_slowtmr+0x26>
      prev = pcb;
 8115ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8115ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115eda:	68db      	ldr	r3, [r3, #12]
 8115edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8115ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115ee0:	7f1b      	ldrb	r3, [r3, #28]
 8115ee2:	3301      	adds	r3, #1
 8115ee4:	b2da      	uxtb	r2, r3
 8115ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115ee8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8115eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115eec:	7f1a      	ldrb	r2, [r3, #28]
 8115eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115ef0:	7f5b      	ldrb	r3, [r3, #29]
 8115ef2:	429a      	cmp	r2, r3
 8115ef4:	d325      	bcc.n	8115f42 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8115ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115ef8:	2200      	movs	r2, #0
 8115efa:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8115efc:	4b1e      	ldr	r3, [pc, #120]	@ (8115f78 <tcp_slowtmr+0x5a8>)
 8115efe:	2200      	movs	r2, #0
 8115f00:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8115f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8115f08:	2b00      	cmp	r3, #0
 8115f0a:	d00b      	beq.n	8115f24 <tcp_slowtmr+0x554>
 8115f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8115f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8115f14:	6912      	ldr	r2, [r2, #16]
 8115f16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8115f18:	4610      	mov	r0, r2
 8115f1a:	4798      	blx	r3
 8115f1c:	4603      	mov	r3, r0
 8115f1e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8115f22:	e002      	b.n	8115f2a <tcp_slowtmr+0x55a>
 8115f24:	2300      	movs	r3, #0
 8115f26:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8115f2a:	4b13      	ldr	r3, [pc, #76]	@ (8115f78 <tcp_slowtmr+0x5a8>)
 8115f2c:	781b      	ldrb	r3, [r3, #0]
 8115f2e:	2b00      	cmp	r3, #0
 8115f30:	f47f ad60 	bne.w	81159f4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8115f34:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8115f38:	2b00      	cmp	r3, #0
 8115f3a:	d102      	bne.n	8115f42 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8115f3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8115f3e:	f004 f851 	bl	8119fe4 <tcp_output>
  while (pcb != NULL) {
 8115f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115f44:	2b00      	cmp	r3, #0
 8115f46:	f47f ad5c 	bne.w	8115a02 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8115f4a:	2300      	movs	r3, #0
 8115f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8115f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8115f7c <tcp_slowtmr+0x5ac>)
 8115f50:	681b      	ldr	r3, [r3, #0]
 8115f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8115f54:	e067      	b.n	8116026 <tcp_slowtmr+0x656>
 8115f56:	bf00      	nop
 8115f58:	10011d14 	.word	0x10011d14
 8115f5c:	10624dd3 	.word	0x10624dd3
 8115f60:	000124f8 	.word	0x000124f8
 8115f64:	10011d20 	.word	0x10011d20
 8115f68:	0811e0b0 	.word	0x0811e0b0
 8115f6c:	0811e528 	.word	0x0811e528
 8115f70:	0811e134 	.word	0x0811e134
 8115f74:	0811e554 	.word	0x0811e554
 8115f78:	10011d28 	.word	0x10011d28
 8115f7c:	10011d24 	.word	0x10011d24
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8115f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115f82:	7d1b      	ldrb	r3, [r3, #20]
 8115f84:	2b0a      	cmp	r3, #10
 8115f86:	d006      	beq.n	8115f96 <tcp_slowtmr+0x5c6>
 8115f88:	4b2b      	ldr	r3, [pc, #172]	@ (8116038 <tcp_slowtmr+0x668>)
 8115f8a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8115f8e:	492b      	ldr	r1, [pc, #172]	@ (811603c <tcp_slowtmr+0x66c>)
 8115f90:	482b      	ldr	r0, [pc, #172]	@ (8116040 <tcp_slowtmr+0x670>)
 8115f92:	f005 ff43 	bl	811be1c <iprintf>
    pcb_remove = 0;
 8115f96:	2300      	movs	r3, #0
 8115f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8115f9c:	4b29      	ldr	r3, [pc, #164]	@ (8116044 <tcp_slowtmr+0x674>)
 8115f9e:	681a      	ldr	r2, [r3, #0]
 8115fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115fa2:	6a1b      	ldr	r3, [r3, #32]
 8115fa4:	1ad3      	subs	r3, r2, r3
 8115fa6:	2bf0      	cmp	r3, #240	@ 0xf0
 8115fa8:	d904      	bls.n	8115fb4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8115faa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115fae:	3301      	adds	r3, #1
 8115fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8115fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115fb8:	2b00      	cmp	r3, #0
 8115fba:	d02f      	beq.n	811601c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8115fbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115fbe:	f000 fba9 	bl	8116714 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8115fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115fc4:	2b00      	cmp	r3, #0
 8115fc6:	d010      	beq.n	8115fea <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8115fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8116048 <tcp_slowtmr+0x678>)
 8115fca:	681b      	ldr	r3, [r3, #0]
 8115fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115fce:	429a      	cmp	r2, r3
 8115fd0:	d106      	bne.n	8115fe0 <tcp_slowtmr+0x610>
 8115fd2:	4b19      	ldr	r3, [pc, #100]	@ (8116038 <tcp_slowtmr+0x668>)
 8115fd4:	f240 52af 	movw	r2, #1455	@ 0x5af
 8115fd8:	491c      	ldr	r1, [pc, #112]	@ (811604c <tcp_slowtmr+0x67c>)
 8115fda:	4819      	ldr	r0, [pc, #100]	@ (8116040 <tcp_slowtmr+0x670>)
 8115fdc:	f005 ff1e 	bl	811be1c <iprintf>
        prev->next = pcb->next;
 8115fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115fe2:	68da      	ldr	r2, [r3, #12]
 8115fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115fe6:	60da      	str	r2, [r3, #12]
 8115fe8:	e00f      	b.n	811600a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8115fea:	4b17      	ldr	r3, [pc, #92]	@ (8116048 <tcp_slowtmr+0x678>)
 8115fec:	681b      	ldr	r3, [r3, #0]
 8115fee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115ff0:	429a      	cmp	r2, r3
 8115ff2:	d006      	beq.n	8116002 <tcp_slowtmr+0x632>
 8115ff4:	4b10      	ldr	r3, [pc, #64]	@ (8116038 <tcp_slowtmr+0x668>)
 8115ff6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8115ffa:	4915      	ldr	r1, [pc, #84]	@ (8116050 <tcp_slowtmr+0x680>)
 8115ffc:	4810      	ldr	r0, [pc, #64]	@ (8116040 <tcp_slowtmr+0x670>)
 8115ffe:	f005 ff0d 	bl	811be1c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8116002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116004:	68db      	ldr	r3, [r3, #12]
 8116006:	4a10      	ldr	r2, [pc, #64]	@ (8116048 <tcp_slowtmr+0x678>)
 8116008:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 811600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811600c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 811600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116010:	68db      	ldr	r3, [r3, #12]
 8116012:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8116014:	69f8      	ldr	r0, [r7, #28]
 8116016:	f7fe ffdd 	bl	8114fd4 <tcp_free>
 811601a:	e004      	b.n	8116026 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 811601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811601e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8116020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116022:	68db      	ldr	r3, [r3, #12]
 8116024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8116026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116028:	2b00      	cmp	r3, #0
 811602a:	d1a9      	bne.n	8115f80 <tcp_slowtmr+0x5b0>
    }
  }
}
 811602c:	bf00      	nop
 811602e:	bf00      	nop
 8116030:	3730      	adds	r7, #48	@ 0x30
 8116032:	46bd      	mov	sp, r7
 8116034:	bdb0      	pop	{r4, r5, r7, pc}
 8116036:	bf00      	nop
 8116038:	0811e0b0 	.word	0x0811e0b0
 811603c:	0811e580 	.word	0x0811e580
 8116040:	0811e134 	.word	0x0811e134
 8116044:	10011d14 	.word	0x10011d14
 8116048:	10011d24 	.word	0x10011d24
 811604c:	0811e5b0 	.word	0x0811e5b0
 8116050:	0811e5d8 	.word	0x0811e5d8

08116054 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8116054:	b580      	push	{r7, lr}
 8116056:	b082      	sub	sp, #8
 8116058:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 811605a:	4b2d      	ldr	r3, [pc, #180]	@ (8116110 <tcp_fasttmr+0xbc>)
 811605c:	781b      	ldrb	r3, [r3, #0]
 811605e:	3301      	adds	r3, #1
 8116060:	b2da      	uxtb	r2, r3
 8116062:	4b2b      	ldr	r3, [pc, #172]	@ (8116110 <tcp_fasttmr+0xbc>)
 8116064:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8116066:	4b2b      	ldr	r3, [pc, #172]	@ (8116114 <tcp_fasttmr+0xc0>)
 8116068:	681b      	ldr	r3, [r3, #0]
 811606a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811606c:	e048      	b.n	8116100 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 811606e:	687b      	ldr	r3, [r7, #4]
 8116070:	7f9a      	ldrb	r2, [r3, #30]
 8116072:	4b27      	ldr	r3, [pc, #156]	@ (8116110 <tcp_fasttmr+0xbc>)
 8116074:	781b      	ldrb	r3, [r3, #0]
 8116076:	429a      	cmp	r2, r3
 8116078:	d03f      	beq.n	81160fa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 811607a:	4b25      	ldr	r3, [pc, #148]	@ (8116110 <tcp_fasttmr+0xbc>)
 811607c:	781a      	ldrb	r2, [r3, #0]
 811607e:	687b      	ldr	r3, [r7, #4]
 8116080:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8116082:	687b      	ldr	r3, [r7, #4]
 8116084:	8b5b      	ldrh	r3, [r3, #26]
 8116086:	f003 0301 	and.w	r3, r3, #1
 811608a:	2b00      	cmp	r3, #0
 811608c:	d010      	beq.n	81160b0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 811608e:	687b      	ldr	r3, [r7, #4]
 8116090:	8b5b      	ldrh	r3, [r3, #26]
 8116092:	f043 0302 	orr.w	r3, r3, #2
 8116096:	b29a      	uxth	r2, r3
 8116098:	687b      	ldr	r3, [r7, #4]
 811609a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 811609c:	6878      	ldr	r0, [r7, #4]
 811609e:	f003 ffa1 	bl	8119fe4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81160a2:	687b      	ldr	r3, [r7, #4]
 81160a4:	8b5b      	ldrh	r3, [r3, #26]
 81160a6:	f023 0303 	bic.w	r3, r3, #3
 81160aa:	b29a      	uxth	r2, r3
 81160ac:	687b      	ldr	r3, [r7, #4]
 81160ae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 81160b0:	687b      	ldr	r3, [r7, #4]
 81160b2:	8b5b      	ldrh	r3, [r3, #26]
 81160b4:	f003 0308 	and.w	r3, r3, #8
 81160b8:	2b00      	cmp	r3, #0
 81160ba:	d009      	beq.n	81160d0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 81160bc:	687b      	ldr	r3, [r7, #4]
 81160be:	8b5b      	ldrh	r3, [r3, #26]
 81160c0:	f023 0308 	bic.w	r3, r3, #8
 81160c4:	b29a      	uxth	r2, r3
 81160c6:	687b      	ldr	r3, [r7, #4]
 81160c8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 81160ca:	6878      	ldr	r0, [r7, #4]
 81160cc:	f7ff f916 	bl	81152fc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 81160d0:	687b      	ldr	r3, [r7, #4]
 81160d2:	68db      	ldr	r3, [r3, #12]
 81160d4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 81160d6:	687b      	ldr	r3, [r7, #4]
 81160d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81160da:	2b00      	cmp	r3, #0
 81160dc:	d00a      	beq.n	81160f4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 81160de:	4b0e      	ldr	r3, [pc, #56]	@ (8116118 <tcp_fasttmr+0xc4>)
 81160e0:	2200      	movs	r2, #0
 81160e2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 81160e4:	6878      	ldr	r0, [r7, #4]
 81160e6:	f000 f819 	bl	811611c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 81160ea:	4b0b      	ldr	r3, [pc, #44]	@ (8116118 <tcp_fasttmr+0xc4>)
 81160ec:	781b      	ldrb	r3, [r3, #0]
 81160ee:	2b00      	cmp	r3, #0
 81160f0:	d000      	beq.n	81160f4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 81160f2:	e7b8      	b.n	8116066 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 81160f4:	683b      	ldr	r3, [r7, #0]
 81160f6:	607b      	str	r3, [r7, #4]
 81160f8:	e002      	b.n	8116100 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 81160fa:	687b      	ldr	r3, [r7, #4]
 81160fc:	68db      	ldr	r3, [r3, #12]
 81160fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8116100:	687b      	ldr	r3, [r7, #4]
 8116102:	2b00      	cmp	r3, #0
 8116104:	d1b3      	bne.n	811606e <tcp_fasttmr+0x1a>
    }
  }
}
 8116106:	bf00      	nop
 8116108:	bf00      	nop
 811610a:	3708      	adds	r7, #8
 811610c:	46bd      	mov	sp, r7
 811610e:	bd80      	pop	{r7, pc}
 8116110:	10011d2a 	.word	0x10011d2a
 8116114:	10011d20 	.word	0x10011d20
 8116118:	10011d28 	.word	0x10011d28

0811611c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 811611c:	b590      	push	{r4, r7, lr}
 811611e:	b085      	sub	sp, #20
 8116120:	af00      	add	r7, sp, #0
 8116122:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8116124:	687b      	ldr	r3, [r7, #4]
 8116126:	2b00      	cmp	r3, #0
 8116128:	d109      	bne.n	811613e <tcp_process_refused_data+0x22>
 811612a:	4b38      	ldr	r3, [pc, #224]	@ (811620c <tcp_process_refused_data+0xf0>)
 811612c:	f240 6209 	movw	r2, #1545	@ 0x609
 8116130:	4937      	ldr	r1, [pc, #220]	@ (8116210 <tcp_process_refused_data+0xf4>)
 8116132:	4838      	ldr	r0, [pc, #224]	@ (8116214 <tcp_process_refused_data+0xf8>)
 8116134:	f005 fe72 	bl	811be1c <iprintf>
 8116138:	f06f 030f 	mvn.w	r3, #15
 811613c:	e061      	b.n	8116202 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 811613e:	687b      	ldr	r3, [r7, #4]
 8116140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8116142:	7b5b      	ldrb	r3, [r3, #13]
 8116144:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8116146:	687b      	ldr	r3, [r7, #4]
 8116148:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811614a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 811614c:	687b      	ldr	r3, [r7, #4]
 811614e:	2200      	movs	r2, #0
 8116150:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8116152:	687b      	ldr	r3, [r7, #4]
 8116154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8116158:	2b00      	cmp	r3, #0
 811615a:	d00b      	beq.n	8116174 <tcp_process_refused_data+0x58>
 811615c:	687b      	ldr	r3, [r7, #4]
 811615e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8116162:	687b      	ldr	r3, [r7, #4]
 8116164:	6918      	ldr	r0, [r3, #16]
 8116166:	2300      	movs	r3, #0
 8116168:	68ba      	ldr	r2, [r7, #8]
 811616a:	6879      	ldr	r1, [r7, #4]
 811616c:	47a0      	blx	r4
 811616e:	4603      	mov	r3, r0
 8116170:	73fb      	strb	r3, [r7, #15]
 8116172:	e007      	b.n	8116184 <tcp_process_refused_data+0x68>
 8116174:	2300      	movs	r3, #0
 8116176:	68ba      	ldr	r2, [r7, #8]
 8116178:	6879      	ldr	r1, [r7, #4]
 811617a:	2000      	movs	r0, #0
 811617c:	f000 f8a6 	bl	81162cc <tcp_recv_null>
 8116180:	4603      	mov	r3, r0
 8116182:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8116184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8116188:	2b00      	cmp	r3, #0
 811618a:	d12b      	bne.n	81161e4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 811618c:	7bbb      	ldrb	r3, [r7, #14]
 811618e:	f003 0320 	and.w	r3, r3, #32
 8116192:	2b00      	cmp	r3, #0
 8116194:	d034      	beq.n	8116200 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8116196:	687b      	ldr	r3, [r7, #4]
 8116198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811619a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811619e:	4293      	cmp	r3, r2
 81161a0:	d005      	beq.n	81161ae <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 81161a2:	687b      	ldr	r3, [r7, #4]
 81161a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81161a6:	3301      	adds	r3, #1
 81161a8:	b29a      	uxth	r2, r3
 81161aa:	687b      	ldr	r3, [r7, #4]
 81161ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 81161ae:	687b      	ldr	r3, [r7, #4]
 81161b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81161b4:	2b00      	cmp	r3, #0
 81161b6:	d00b      	beq.n	81161d0 <tcp_process_refused_data+0xb4>
 81161b8:	687b      	ldr	r3, [r7, #4]
 81161ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 81161be:	687b      	ldr	r3, [r7, #4]
 81161c0:	6918      	ldr	r0, [r3, #16]
 81161c2:	2300      	movs	r3, #0
 81161c4:	2200      	movs	r2, #0
 81161c6:	6879      	ldr	r1, [r7, #4]
 81161c8:	47a0      	blx	r4
 81161ca:	4603      	mov	r3, r0
 81161cc:	73fb      	strb	r3, [r7, #15]
 81161ce:	e001      	b.n	81161d4 <tcp_process_refused_data+0xb8>
 81161d0:	2300      	movs	r3, #0
 81161d2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 81161d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81161d8:	f113 0f0d 	cmn.w	r3, #13
 81161dc:	d110      	bne.n	8116200 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 81161de:	f06f 030c 	mvn.w	r3, #12
 81161e2:	e00e      	b.n	8116202 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 81161e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81161e8:	f113 0f0d 	cmn.w	r3, #13
 81161ec:	d102      	bne.n	81161f4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 81161ee:	f06f 030c 	mvn.w	r3, #12
 81161f2:	e006      	b.n	8116202 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 81161f4:	687b      	ldr	r3, [r7, #4]
 81161f6:	68ba      	ldr	r2, [r7, #8]
 81161f8:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 81161fa:	f06f 0304 	mvn.w	r3, #4
 81161fe:	e000      	b.n	8116202 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8116200:	2300      	movs	r3, #0
}
 8116202:	4618      	mov	r0, r3
 8116204:	3714      	adds	r7, #20
 8116206:	46bd      	mov	sp, r7
 8116208:	bd90      	pop	{r4, r7, pc}
 811620a:	bf00      	nop
 811620c:	0811e0b0 	.word	0x0811e0b0
 8116210:	0811e600 	.word	0x0811e600
 8116214:	0811e134 	.word	0x0811e134

08116218 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8116218:	b580      	push	{r7, lr}
 811621a:	b084      	sub	sp, #16
 811621c:	af00      	add	r7, sp, #0
 811621e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8116220:	e007      	b.n	8116232 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8116222:	687b      	ldr	r3, [r7, #4]
 8116224:	681b      	ldr	r3, [r3, #0]
 8116226:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8116228:	6878      	ldr	r0, [r7, #4]
 811622a:	f000 f80a 	bl	8116242 <tcp_seg_free>
    seg = next;
 811622e:	68fb      	ldr	r3, [r7, #12]
 8116230:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8116232:	687b      	ldr	r3, [r7, #4]
 8116234:	2b00      	cmp	r3, #0
 8116236:	d1f4      	bne.n	8116222 <tcp_segs_free+0xa>
  }
}
 8116238:	bf00      	nop
 811623a:	bf00      	nop
 811623c:	3710      	adds	r7, #16
 811623e:	46bd      	mov	sp, r7
 8116240:	bd80      	pop	{r7, pc}

08116242 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8116242:	b580      	push	{r7, lr}
 8116244:	b082      	sub	sp, #8
 8116246:	af00      	add	r7, sp, #0
 8116248:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 811624a:	687b      	ldr	r3, [r7, #4]
 811624c:	2b00      	cmp	r3, #0
 811624e:	d00c      	beq.n	811626a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8116250:	687b      	ldr	r3, [r7, #4]
 8116252:	685b      	ldr	r3, [r3, #4]
 8116254:	2b00      	cmp	r3, #0
 8116256:	d004      	beq.n	8116262 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8116258:	687b      	ldr	r3, [r7, #4]
 811625a:	685b      	ldr	r3, [r3, #4]
 811625c:	4618      	mov	r0, r3
 811625e:	f7fe fb1b 	bl	8114898 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8116262:	6879      	ldr	r1, [r7, #4]
 8116264:	2003      	movs	r0, #3
 8116266:	f7fd fc73 	bl	8113b50 <memp_free>
  }
}
 811626a:	bf00      	nop
 811626c:	3708      	adds	r7, #8
 811626e:	46bd      	mov	sp, r7
 8116270:	bd80      	pop	{r7, pc}
	...

08116274 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8116274:	b580      	push	{r7, lr}
 8116276:	b084      	sub	sp, #16
 8116278:	af00      	add	r7, sp, #0
 811627a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 811627c:	687b      	ldr	r3, [r7, #4]
 811627e:	2b00      	cmp	r3, #0
 8116280:	d106      	bne.n	8116290 <tcp_seg_copy+0x1c>
 8116282:	4b0f      	ldr	r3, [pc, #60]	@ (81162c0 <tcp_seg_copy+0x4c>)
 8116284:	f240 6282 	movw	r2, #1666	@ 0x682
 8116288:	490e      	ldr	r1, [pc, #56]	@ (81162c4 <tcp_seg_copy+0x50>)
 811628a:	480f      	ldr	r0, [pc, #60]	@ (81162c8 <tcp_seg_copy+0x54>)
 811628c:	f005 fdc6 	bl	811be1c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8116290:	2003      	movs	r0, #3
 8116292:	f7fd fbe7 	bl	8113a64 <memp_malloc>
 8116296:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8116298:	68fb      	ldr	r3, [r7, #12]
 811629a:	2b00      	cmp	r3, #0
 811629c:	d101      	bne.n	81162a2 <tcp_seg_copy+0x2e>
    return NULL;
 811629e:	2300      	movs	r3, #0
 81162a0:	e00a      	b.n	81162b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 81162a2:	2210      	movs	r2, #16
 81162a4:	6879      	ldr	r1, [r7, #4]
 81162a6:	68f8      	ldr	r0, [r7, #12]
 81162a8:	f005 ff69 	bl	811c17e <memcpy>
  pbuf_ref(cseg->p);
 81162ac:	68fb      	ldr	r3, [r7, #12]
 81162ae:	685b      	ldr	r3, [r3, #4]
 81162b0:	4618      	mov	r0, r3
 81162b2:	f7fe fb97 	bl	81149e4 <pbuf_ref>
  return cseg;
 81162b6:	68fb      	ldr	r3, [r7, #12]
}
 81162b8:	4618      	mov	r0, r3
 81162ba:	3710      	adds	r7, #16
 81162bc:	46bd      	mov	sp, r7
 81162be:	bd80      	pop	{r7, pc}
 81162c0:	0811e0b0 	.word	0x0811e0b0
 81162c4:	0811e644 	.word	0x0811e644
 81162c8:	0811e134 	.word	0x0811e134

081162cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 81162cc:	b580      	push	{r7, lr}
 81162ce:	b084      	sub	sp, #16
 81162d0:	af00      	add	r7, sp, #0
 81162d2:	60f8      	str	r0, [r7, #12]
 81162d4:	60b9      	str	r1, [r7, #8]
 81162d6:	607a      	str	r2, [r7, #4]
 81162d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 81162da:	68bb      	ldr	r3, [r7, #8]
 81162dc:	2b00      	cmp	r3, #0
 81162de:	d109      	bne.n	81162f4 <tcp_recv_null+0x28>
 81162e0:	4b12      	ldr	r3, [pc, #72]	@ (811632c <tcp_recv_null+0x60>)
 81162e2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 81162e6:	4912      	ldr	r1, [pc, #72]	@ (8116330 <tcp_recv_null+0x64>)
 81162e8:	4812      	ldr	r0, [pc, #72]	@ (8116334 <tcp_recv_null+0x68>)
 81162ea:	f005 fd97 	bl	811be1c <iprintf>
 81162ee:	f06f 030f 	mvn.w	r3, #15
 81162f2:	e016      	b.n	8116322 <tcp_recv_null+0x56>

  if (p != NULL) {
 81162f4:	687b      	ldr	r3, [r7, #4]
 81162f6:	2b00      	cmp	r3, #0
 81162f8:	d009      	beq.n	811630e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 81162fa:	687b      	ldr	r3, [r7, #4]
 81162fc:	891b      	ldrh	r3, [r3, #8]
 81162fe:	4619      	mov	r1, r3
 8116300:	68b8      	ldr	r0, [r7, #8]
 8116302:	f7ff f9b5 	bl	8115670 <tcp_recved>
    pbuf_free(p);
 8116306:	6878      	ldr	r0, [r7, #4]
 8116308:	f7fe fac6 	bl	8114898 <pbuf_free>
 811630c:	e008      	b.n	8116320 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 811630e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8116312:	2b00      	cmp	r3, #0
 8116314:	d104      	bne.n	8116320 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8116316:	68b8      	ldr	r0, [r7, #8]
 8116318:	f7ff f85a 	bl	81153d0 <tcp_close>
 811631c:	4603      	mov	r3, r0
 811631e:	e000      	b.n	8116322 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8116320:	2300      	movs	r3, #0
}
 8116322:	4618      	mov	r0, r3
 8116324:	3710      	adds	r7, #16
 8116326:	46bd      	mov	sp, r7
 8116328:	bd80      	pop	{r7, pc}
 811632a:	bf00      	nop
 811632c:	0811e0b0 	.word	0x0811e0b0
 8116330:	0811e660 	.word	0x0811e660
 8116334:	0811e134 	.word	0x0811e134

08116338 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8116338:	b580      	push	{r7, lr}
 811633a:	b086      	sub	sp, #24
 811633c:	af00      	add	r7, sp, #0
 811633e:	4603      	mov	r3, r0
 8116340:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8116342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8116346:	2b00      	cmp	r3, #0
 8116348:	db01      	blt.n	811634e <tcp_kill_prio+0x16>
 811634a:	79fb      	ldrb	r3, [r7, #7]
 811634c:	e000      	b.n	8116350 <tcp_kill_prio+0x18>
 811634e:	237f      	movs	r3, #127	@ 0x7f
 8116350:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8116352:	7afb      	ldrb	r3, [r7, #11]
 8116354:	2b00      	cmp	r3, #0
 8116356:	d034      	beq.n	81163c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8116358:	7afb      	ldrb	r3, [r7, #11]
 811635a:	3b01      	subs	r3, #1
 811635c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 811635e:	2300      	movs	r3, #0
 8116360:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8116362:	2300      	movs	r3, #0
 8116364:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8116366:	4b19      	ldr	r3, [pc, #100]	@ (81163cc <tcp_kill_prio+0x94>)
 8116368:	681b      	ldr	r3, [r3, #0]
 811636a:	617b      	str	r3, [r7, #20]
 811636c:	e01f      	b.n	81163ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 811636e:	697b      	ldr	r3, [r7, #20]
 8116370:	7d5b      	ldrb	r3, [r3, #21]
 8116372:	7afa      	ldrb	r2, [r7, #11]
 8116374:	429a      	cmp	r2, r3
 8116376:	d80c      	bhi.n	8116392 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8116378:	697b      	ldr	r3, [r7, #20]
 811637a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 811637c:	7afa      	ldrb	r2, [r7, #11]
 811637e:	429a      	cmp	r2, r3
 8116380:	d112      	bne.n	81163a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8116382:	4b13      	ldr	r3, [pc, #76]	@ (81163d0 <tcp_kill_prio+0x98>)
 8116384:	681a      	ldr	r2, [r3, #0]
 8116386:	697b      	ldr	r3, [r7, #20]
 8116388:	6a1b      	ldr	r3, [r3, #32]
 811638a:	1ad3      	subs	r3, r2, r3
 811638c:	68fa      	ldr	r2, [r7, #12]
 811638e:	429a      	cmp	r2, r3
 8116390:	d80a      	bhi.n	81163a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8116392:	4b0f      	ldr	r3, [pc, #60]	@ (81163d0 <tcp_kill_prio+0x98>)
 8116394:	681a      	ldr	r2, [r3, #0]
 8116396:	697b      	ldr	r3, [r7, #20]
 8116398:	6a1b      	ldr	r3, [r3, #32]
 811639a:	1ad3      	subs	r3, r2, r3
 811639c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 811639e:	697b      	ldr	r3, [r7, #20]
 81163a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 81163a2:	697b      	ldr	r3, [r7, #20]
 81163a4:	7d5b      	ldrb	r3, [r3, #21]
 81163a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 81163a8:	697b      	ldr	r3, [r7, #20]
 81163aa:	68db      	ldr	r3, [r3, #12]
 81163ac:	617b      	str	r3, [r7, #20]
 81163ae:	697b      	ldr	r3, [r7, #20]
 81163b0:	2b00      	cmp	r3, #0
 81163b2:	d1dc      	bne.n	811636e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 81163b4:	693b      	ldr	r3, [r7, #16]
 81163b6:	2b00      	cmp	r3, #0
 81163b8:	d004      	beq.n	81163c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 81163ba:	6938      	ldr	r0, [r7, #16]
 81163bc:	f7ff f8f2 	bl	81155a4 <tcp_abort>
 81163c0:	e000      	b.n	81163c4 <tcp_kill_prio+0x8c>
    return;
 81163c2:	bf00      	nop
  }
}
 81163c4:	3718      	adds	r7, #24
 81163c6:	46bd      	mov	sp, r7
 81163c8:	bd80      	pop	{r7, pc}
 81163ca:	bf00      	nop
 81163cc:	10011d20 	.word	0x10011d20
 81163d0:	10011d14 	.word	0x10011d14

081163d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 81163d4:	b580      	push	{r7, lr}
 81163d6:	b086      	sub	sp, #24
 81163d8:	af00      	add	r7, sp, #0
 81163da:	4603      	mov	r3, r0
 81163dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 81163de:	79fb      	ldrb	r3, [r7, #7]
 81163e0:	2b08      	cmp	r3, #8
 81163e2:	d009      	beq.n	81163f8 <tcp_kill_state+0x24>
 81163e4:	79fb      	ldrb	r3, [r7, #7]
 81163e6:	2b09      	cmp	r3, #9
 81163e8:	d006      	beq.n	81163f8 <tcp_kill_state+0x24>
 81163ea:	4b1a      	ldr	r3, [pc, #104]	@ (8116454 <tcp_kill_state+0x80>)
 81163ec:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 81163f0:	4919      	ldr	r1, [pc, #100]	@ (8116458 <tcp_kill_state+0x84>)
 81163f2:	481a      	ldr	r0, [pc, #104]	@ (811645c <tcp_kill_state+0x88>)
 81163f4:	f005 fd12 	bl	811be1c <iprintf>

  inactivity = 0;
 81163f8:	2300      	movs	r3, #0
 81163fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 81163fc:	2300      	movs	r3, #0
 81163fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8116400:	4b17      	ldr	r3, [pc, #92]	@ (8116460 <tcp_kill_state+0x8c>)
 8116402:	681b      	ldr	r3, [r3, #0]
 8116404:	617b      	str	r3, [r7, #20]
 8116406:	e017      	b.n	8116438 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8116408:	697b      	ldr	r3, [r7, #20]
 811640a:	7d1b      	ldrb	r3, [r3, #20]
 811640c:	79fa      	ldrb	r2, [r7, #7]
 811640e:	429a      	cmp	r2, r3
 8116410:	d10f      	bne.n	8116432 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8116412:	4b14      	ldr	r3, [pc, #80]	@ (8116464 <tcp_kill_state+0x90>)
 8116414:	681a      	ldr	r2, [r3, #0]
 8116416:	697b      	ldr	r3, [r7, #20]
 8116418:	6a1b      	ldr	r3, [r3, #32]
 811641a:	1ad3      	subs	r3, r2, r3
 811641c:	68fa      	ldr	r2, [r7, #12]
 811641e:	429a      	cmp	r2, r3
 8116420:	d807      	bhi.n	8116432 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8116422:	4b10      	ldr	r3, [pc, #64]	@ (8116464 <tcp_kill_state+0x90>)
 8116424:	681a      	ldr	r2, [r3, #0]
 8116426:	697b      	ldr	r3, [r7, #20]
 8116428:	6a1b      	ldr	r3, [r3, #32]
 811642a:	1ad3      	subs	r3, r2, r3
 811642c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 811642e:	697b      	ldr	r3, [r7, #20]
 8116430:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8116432:	697b      	ldr	r3, [r7, #20]
 8116434:	68db      	ldr	r3, [r3, #12]
 8116436:	617b      	str	r3, [r7, #20]
 8116438:	697b      	ldr	r3, [r7, #20]
 811643a:	2b00      	cmp	r3, #0
 811643c:	d1e4      	bne.n	8116408 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 811643e:	693b      	ldr	r3, [r7, #16]
 8116440:	2b00      	cmp	r3, #0
 8116442:	d003      	beq.n	811644c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8116444:	2100      	movs	r1, #0
 8116446:	6938      	ldr	r0, [r7, #16]
 8116448:	f7fe ffee 	bl	8115428 <tcp_abandon>
  }
}
 811644c:	bf00      	nop
 811644e:	3718      	adds	r7, #24
 8116450:	46bd      	mov	sp, r7
 8116452:	bd80      	pop	{r7, pc}
 8116454:	0811e0b0 	.word	0x0811e0b0
 8116458:	0811e67c 	.word	0x0811e67c
 811645c:	0811e134 	.word	0x0811e134
 8116460:	10011d20 	.word	0x10011d20
 8116464:	10011d14 	.word	0x10011d14

08116468 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8116468:	b580      	push	{r7, lr}
 811646a:	b084      	sub	sp, #16
 811646c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 811646e:	2300      	movs	r3, #0
 8116470:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8116472:	2300      	movs	r3, #0
 8116474:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8116476:	4b12      	ldr	r3, [pc, #72]	@ (81164c0 <tcp_kill_timewait+0x58>)
 8116478:	681b      	ldr	r3, [r3, #0]
 811647a:	60fb      	str	r3, [r7, #12]
 811647c:	e012      	b.n	81164a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811647e:	4b11      	ldr	r3, [pc, #68]	@ (81164c4 <tcp_kill_timewait+0x5c>)
 8116480:	681a      	ldr	r2, [r3, #0]
 8116482:	68fb      	ldr	r3, [r7, #12]
 8116484:	6a1b      	ldr	r3, [r3, #32]
 8116486:	1ad3      	subs	r3, r2, r3
 8116488:	687a      	ldr	r2, [r7, #4]
 811648a:	429a      	cmp	r2, r3
 811648c:	d807      	bhi.n	811649e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 811648e:	4b0d      	ldr	r3, [pc, #52]	@ (81164c4 <tcp_kill_timewait+0x5c>)
 8116490:	681a      	ldr	r2, [r3, #0]
 8116492:	68fb      	ldr	r3, [r7, #12]
 8116494:	6a1b      	ldr	r3, [r3, #32]
 8116496:	1ad3      	subs	r3, r2, r3
 8116498:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 811649a:	68fb      	ldr	r3, [r7, #12]
 811649c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811649e:	68fb      	ldr	r3, [r7, #12]
 81164a0:	68db      	ldr	r3, [r3, #12]
 81164a2:	60fb      	str	r3, [r7, #12]
 81164a4:	68fb      	ldr	r3, [r7, #12]
 81164a6:	2b00      	cmp	r3, #0
 81164a8:	d1e9      	bne.n	811647e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 81164aa:	68bb      	ldr	r3, [r7, #8]
 81164ac:	2b00      	cmp	r3, #0
 81164ae:	d002      	beq.n	81164b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 81164b0:	68b8      	ldr	r0, [r7, #8]
 81164b2:	f7ff f877 	bl	81155a4 <tcp_abort>
  }
}
 81164b6:	bf00      	nop
 81164b8:	3710      	adds	r7, #16
 81164ba:	46bd      	mov	sp, r7
 81164bc:	bd80      	pop	{r7, pc}
 81164be:	bf00      	nop
 81164c0:	10011d24 	.word	0x10011d24
 81164c4:	10011d14 	.word	0x10011d14

081164c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 81164c8:	b580      	push	{r7, lr}
 81164ca:	b082      	sub	sp, #8
 81164cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 81164ce:	4b10      	ldr	r3, [pc, #64]	@ (8116510 <tcp_handle_closepend+0x48>)
 81164d0:	681b      	ldr	r3, [r3, #0]
 81164d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 81164d4:	e014      	b.n	8116500 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 81164d6:	687b      	ldr	r3, [r7, #4]
 81164d8:	68db      	ldr	r3, [r3, #12]
 81164da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 81164dc:	687b      	ldr	r3, [r7, #4]
 81164de:	8b5b      	ldrh	r3, [r3, #26]
 81164e0:	f003 0308 	and.w	r3, r3, #8
 81164e4:	2b00      	cmp	r3, #0
 81164e6:	d009      	beq.n	81164fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 81164e8:	687b      	ldr	r3, [r7, #4]
 81164ea:	8b5b      	ldrh	r3, [r3, #26]
 81164ec:	f023 0308 	bic.w	r3, r3, #8
 81164f0:	b29a      	uxth	r2, r3
 81164f2:	687b      	ldr	r3, [r7, #4]
 81164f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 81164f6:	6878      	ldr	r0, [r7, #4]
 81164f8:	f7fe ff00 	bl	81152fc <tcp_close_shutdown_fin>
    }
    pcb = next;
 81164fc:	683b      	ldr	r3, [r7, #0]
 81164fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8116500:	687b      	ldr	r3, [r7, #4]
 8116502:	2b00      	cmp	r3, #0
 8116504:	d1e7      	bne.n	81164d6 <tcp_handle_closepend+0xe>
  }
}
 8116506:	bf00      	nop
 8116508:	bf00      	nop
 811650a:	3708      	adds	r7, #8
 811650c:	46bd      	mov	sp, r7
 811650e:	bd80      	pop	{r7, pc}
 8116510:	10011d20 	.word	0x10011d20

08116514 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8116514:	b580      	push	{r7, lr}
 8116516:	b084      	sub	sp, #16
 8116518:	af00      	add	r7, sp, #0
 811651a:	4603      	mov	r3, r0
 811651c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811651e:	2001      	movs	r0, #1
 8116520:	f7fd faa0 	bl	8113a64 <memp_malloc>
 8116524:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8116526:	68fb      	ldr	r3, [r7, #12]
 8116528:	2b00      	cmp	r3, #0
 811652a:	d126      	bne.n	811657a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 811652c:	f7ff ffcc 	bl	81164c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8116530:	f7ff ff9a 	bl	8116468 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8116534:	2001      	movs	r0, #1
 8116536:	f7fd fa95 	bl	8113a64 <memp_malloc>
 811653a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 811653c:	68fb      	ldr	r3, [r7, #12]
 811653e:	2b00      	cmp	r3, #0
 8116540:	d11b      	bne.n	811657a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8116542:	2009      	movs	r0, #9
 8116544:	f7ff ff46 	bl	81163d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8116548:	2001      	movs	r0, #1
 811654a:	f7fd fa8b 	bl	8113a64 <memp_malloc>
 811654e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8116550:	68fb      	ldr	r3, [r7, #12]
 8116552:	2b00      	cmp	r3, #0
 8116554:	d111      	bne.n	811657a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8116556:	2008      	movs	r0, #8
 8116558:	f7ff ff3c 	bl	81163d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811655c:	2001      	movs	r0, #1
 811655e:	f7fd fa81 	bl	8113a64 <memp_malloc>
 8116562:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8116564:	68fb      	ldr	r3, [r7, #12]
 8116566:	2b00      	cmp	r3, #0
 8116568:	d107      	bne.n	811657a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 811656a:	79fb      	ldrb	r3, [r7, #7]
 811656c:	4618      	mov	r0, r3
 811656e:	f7ff fee3 	bl	8116338 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8116572:	2001      	movs	r0, #1
 8116574:	f7fd fa76 	bl	8113a64 <memp_malloc>
 8116578:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 811657a:	68fb      	ldr	r3, [r7, #12]
 811657c:	2b00      	cmp	r3, #0
 811657e:	d03f      	beq.n	8116600 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8116580:	229c      	movs	r2, #156	@ 0x9c
 8116582:	2100      	movs	r1, #0
 8116584:	68f8      	ldr	r0, [r7, #12]
 8116586:	f005 fcc8 	bl	811bf1a <memset>
    pcb->prio = prio;
 811658a:	68fb      	ldr	r3, [r7, #12]
 811658c:	79fa      	ldrb	r2, [r7, #7]
 811658e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8116590:	68fb      	ldr	r3, [r7, #12]
 8116592:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8116596:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 811659a:	68fb      	ldr	r3, [r7, #12]
 811659c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81165a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 81165a2:	68fb      	ldr	r3, [r7, #12]
 81165a4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 81165a6:	68fb      	ldr	r3, [r7, #12]
 81165a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 81165aa:	68fb      	ldr	r3, [r7, #12]
 81165ac:	22ff      	movs	r2, #255	@ 0xff
 81165ae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 81165b0:	68fb      	ldr	r3, [r7, #12]
 81165b2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 81165b6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 81165b8:	68fb      	ldr	r3, [r7, #12]
 81165ba:	2206      	movs	r2, #6
 81165bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 81165c0:	68fb      	ldr	r3, [r7, #12]
 81165c2:	2206      	movs	r2, #6
 81165c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 81165c6:	68fb      	ldr	r3, [r7, #12]
 81165c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81165cc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 81165ce:	68fb      	ldr	r3, [r7, #12]
 81165d0:	2201      	movs	r2, #1
 81165d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 81165d6:	4b0d      	ldr	r3, [pc, #52]	@ (811660c <tcp_alloc+0xf8>)
 81165d8:	681a      	ldr	r2, [r3, #0]
 81165da:	68fb      	ldr	r3, [r7, #12]
 81165dc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 81165de:	4b0c      	ldr	r3, [pc, #48]	@ (8116610 <tcp_alloc+0xfc>)
 81165e0:	781a      	ldrb	r2, [r3, #0]
 81165e2:	68fb      	ldr	r3, [r7, #12]
 81165e4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 81165e6:	68fb      	ldr	r3, [r7, #12]
 81165e8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81165ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 81165f0:	68fb      	ldr	r3, [r7, #12]
 81165f2:	4a08      	ldr	r2, [pc, #32]	@ (8116614 <tcp_alloc+0x100>)
 81165f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 81165f8:	68fb      	ldr	r3, [r7, #12]
 81165fa:	4a07      	ldr	r2, [pc, #28]	@ (8116618 <tcp_alloc+0x104>)
 81165fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8116600:	68fb      	ldr	r3, [r7, #12]
}
 8116602:	4618      	mov	r0, r3
 8116604:	3710      	adds	r7, #16
 8116606:	46bd      	mov	sp, r7
 8116608:	bd80      	pop	{r7, pc}
 811660a:	bf00      	nop
 811660c:	10011d14 	.word	0x10011d14
 8116610:	10011d2a 	.word	0x10011d2a
 8116614:	081162cd 	.word	0x081162cd
 8116618:	006ddd00 	.word	0x006ddd00

0811661c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 811661c:	b580      	push	{r7, lr}
 811661e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8116620:	2040      	movs	r0, #64	@ 0x40
 8116622:	f7ff ff77 	bl	8116514 <tcp_alloc>
 8116626:	4603      	mov	r3, r0
}
 8116628:	4618      	mov	r0, r3
 811662a:	bd80      	pop	{r7, pc}

0811662c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 811662c:	b580      	push	{r7, lr}
 811662e:	b082      	sub	sp, #8
 8116630:	af00      	add	r7, sp, #0
 8116632:	6078      	str	r0, [r7, #4]
 8116634:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8116636:	687b      	ldr	r3, [r7, #4]
 8116638:	2b00      	cmp	r3, #0
 811663a:	d00e      	beq.n	811665a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 811663c:	687b      	ldr	r3, [r7, #4]
 811663e:	7d1b      	ldrb	r3, [r3, #20]
 8116640:	2b01      	cmp	r3, #1
 8116642:	d106      	bne.n	8116652 <tcp_recv+0x26>
 8116644:	4b07      	ldr	r3, [pc, #28]	@ (8116664 <tcp_recv+0x38>)
 8116646:	f240 72df 	movw	r2, #2015	@ 0x7df
 811664a:	4907      	ldr	r1, [pc, #28]	@ (8116668 <tcp_recv+0x3c>)
 811664c:	4807      	ldr	r0, [pc, #28]	@ (811666c <tcp_recv+0x40>)
 811664e:	f005 fbe5 	bl	811be1c <iprintf>
    pcb->recv = recv;
 8116652:	687b      	ldr	r3, [r7, #4]
 8116654:	683a      	ldr	r2, [r7, #0]
 8116656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 811665a:	bf00      	nop
 811665c:	3708      	adds	r7, #8
 811665e:	46bd      	mov	sp, r7
 8116660:	bd80      	pop	{r7, pc}
 8116662:	bf00      	nop
 8116664:	0811e0b0 	.word	0x0811e0b0
 8116668:	0811e68c 	.word	0x0811e68c
 811666c:	0811e134 	.word	0x0811e134

08116670 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8116670:	b580      	push	{r7, lr}
 8116672:	b082      	sub	sp, #8
 8116674:	af00      	add	r7, sp, #0
 8116676:	6078      	str	r0, [r7, #4]
 8116678:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 811667a:	687b      	ldr	r3, [r7, #4]
 811667c:	2b00      	cmp	r3, #0
 811667e:	d00e      	beq.n	811669e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8116680:	687b      	ldr	r3, [r7, #4]
 8116682:	7d1b      	ldrb	r3, [r3, #20]
 8116684:	2b01      	cmp	r3, #1
 8116686:	d106      	bne.n	8116696 <tcp_sent+0x26>
 8116688:	4b07      	ldr	r3, [pc, #28]	@ (81166a8 <tcp_sent+0x38>)
 811668a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 811668e:	4907      	ldr	r1, [pc, #28]	@ (81166ac <tcp_sent+0x3c>)
 8116690:	4807      	ldr	r0, [pc, #28]	@ (81166b0 <tcp_sent+0x40>)
 8116692:	f005 fbc3 	bl	811be1c <iprintf>
    pcb->sent = sent;
 8116696:	687b      	ldr	r3, [r7, #4]
 8116698:	683a      	ldr	r2, [r7, #0]
 811669a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 811669e:	bf00      	nop
 81166a0:	3708      	adds	r7, #8
 81166a2:	46bd      	mov	sp, r7
 81166a4:	bd80      	pop	{r7, pc}
 81166a6:	bf00      	nop
 81166a8:	0811e0b0 	.word	0x0811e0b0
 81166ac:	0811e6b4 	.word	0x0811e6b4
 81166b0:	0811e134 	.word	0x0811e134

081166b4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 81166b4:	b580      	push	{r7, lr}
 81166b6:	b084      	sub	sp, #16
 81166b8:	af00      	add	r7, sp, #0
 81166ba:	60f8      	str	r0, [r7, #12]
 81166bc:	60b9      	str	r1, [r7, #8]
 81166be:	4613      	mov	r3, r2
 81166c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 81166c2:	68fb      	ldr	r3, [r7, #12]
 81166c4:	2b00      	cmp	r3, #0
 81166c6:	d107      	bne.n	81166d8 <tcp_poll+0x24>
 81166c8:	4b0e      	ldr	r3, [pc, #56]	@ (8116704 <tcp_poll+0x50>)
 81166ca:	f640 023d 	movw	r2, #2109	@ 0x83d
 81166ce:	490e      	ldr	r1, [pc, #56]	@ (8116708 <tcp_poll+0x54>)
 81166d0:	480e      	ldr	r0, [pc, #56]	@ (811670c <tcp_poll+0x58>)
 81166d2:	f005 fba3 	bl	811be1c <iprintf>
 81166d6:	e011      	b.n	81166fc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 81166d8:	68fb      	ldr	r3, [r7, #12]
 81166da:	7d1b      	ldrb	r3, [r3, #20]
 81166dc:	2b01      	cmp	r3, #1
 81166de:	d106      	bne.n	81166ee <tcp_poll+0x3a>
 81166e0:	4b08      	ldr	r3, [pc, #32]	@ (8116704 <tcp_poll+0x50>)
 81166e2:	f640 023e 	movw	r2, #2110	@ 0x83e
 81166e6:	490a      	ldr	r1, [pc, #40]	@ (8116710 <tcp_poll+0x5c>)
 81166e8:	4808      	ldr	r0, [pc, #32]	@ (811670c <tcp_poll+0x58>)
 81166ea:	f005 fb97 	bl	811be1c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 81166ee:	68fb      	ldr	r3, [r7, #12]
 81166f0:	68ba      	ldr	r2, [r7, #8]
 81166f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 81166f6:	68fb      	ldr	r3, [r7, #12]
 81166f8:	79fa      	ldrb	r2, [r7, #7]
 81166fa:	775a      	strb	r2, [r3, #29]
}
 81166fc:	3710      	adds	r7, #16
 81166fe:	46bd      	mov	sp, r7
 8116700:	bd80      	pop	{r7, pc}
 8116702:	bf00      	nop
 8116704:	0811e0b0 	.word	0x0811e0b0
 8116708:	0811e704 	.word	0x0811e704
 811670c:	0811e134 	.word	0x0811e134
 8116710:	0811e71c 	.word	0x0811e71c

08116714 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8116714:	b580      	push	{r7, lr}
 8116716:	b082      	sub	sp, #8
 8116718:	af00      	add	r7, sp, #0
 811671a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 811671c:	687b      	ldr	r3, [r7, #4]
 811671e:	2b00      	cmp	r3, #0
 8116720:	d107      	bne.n	8116732 <tcp_pcb_purge+0x1e>
 8116722:	4b21      	ldr	r3, [pc, #132]	@ (81167a8 <tcp_pcb_purge+0x94>)
 8116724:	f640 0251 	movw	r2, #2129	@ 0x851
 8116728:	4920      	ldr	r1, [pc, #128]	@ (81167ac <tcp_pcb_purge+0x98>)
 811672a:	4821      	ldr	r0, [pc, #132]	@ (81167b0 <tcp_pcb_purge+0x9c>)
 811672c:	f005 fb76 	bl	811be1c <iprintf>
 8116730:	e037      	b.n	81167a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8116732:	687b      	ldr	r3, [r7, #4]
 8116734:	7d1b      	ldrb	r3, [r3, #20]
 8116736:	2b00      	cmp	r3, #0
 8116738:	d033      	beq.n	81167a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 811673a:	687b      	ldr	r3, [r7, #4]
 811673c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 811673e:	2b0a      	cmp	r3, #10
 8116740:	d02f      	beq.n	81167a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8116742:	687b      	ldr	r3, [r7, #4]
 8116744:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8116746:	2b01      	cmp	r3, #1
 8116748:	d02b      	beq.n	81167a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 811674a:	687b      	ldr	r3, [r7, #4]
 811674c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811674e:	2b00      	cmp	r3, #0
 8116750:	d007      	beq.n	8116762 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8116752:	687b      	ldr	r3, [r7, #4]
 8116754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8116756:	4618      	mov	r0, r3
 8116758:	f7fe f89e 	bl	8114898 <pbuf_free>
      pcb->refused_data = NULL;
 811675c:	687b      	ldr	r3, [r7, #4]
 811675e:	2200      	movs	r2, #0
 8116760:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8116762:	687b      	ldr	r3, [r7, #4]
 8116764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8116766:	2b00      	cmp	r3, #0
 8116768:	d002      	beq.n	8116770 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 811676a:	6878      	ldr	r0, [r7, #4]
 811676c:	f000 f986 	bl	8116a7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8116770:	687b      	ldr	r3, [r7, #4]
 8116772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8116776:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8116778:	687b      	ldr	r3, [r7, #4]
 811677a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811677c:	4618      	mov	r0, r3
 811677e:	f7ff fd4b 	bl	8116218 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8116782:	687b      	ldr	r3, [r7, #4]
 8116784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8116786:	4618      	mov	r0, r3
 8116788:	f7ff fd46 	bl	8116218 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 811678c:	687b      	ldr	r3, [r7, #4]
 811678e:	2200      	movs	r2, #0
 8116790:	66da      	str	r2, [r3, #108]	@ 0x6c
 8116792:	687b      	ldr	r3, [r7, #4]
 8116794:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8116796:	687b      	ldr	r3, [r7, #4]
 8116798:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 811679a:	687b      	ldr	r3, [r7, #4]
 811679c:	2200      	movs	r2, #0
 811679e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 81167a2:	3708      	adds	r7, #8
 81167a4:	46bd      	mov	sp, r7
 81167a6:	bd80      	pop	{r7, pc}
 81167a8:	0811e0b0 	.word	0x0811e0b0
 81167ac:	0811e73c 	.word	0x0811e73c
 81167b0:	0811e134 	.word	0x0811e134

081167b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 81167b4:	b580      	push	{r7, lr}
 81167b6:	b084      	sub	sp, #16
 81167b8:	af00      	add	r7, sp, #0
 81167ba:	6078      	str	r0, [r7, #4]
 81167bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 81167be:	683b      	ldr	r3, [r7, #0]
 81167c0:	2b00      	cmp	r3, #0
 81167c2:	d106      	bne.n	81167d2 <tcp_pcb_remove+0x1e>
 81167c4:	4b3e      	ldr	r3, [pc, #248]	@ (81168c0 <tcp_pcb_remove+0x10c>)
 81167c6:	f640 0283 	movw	r2, #2179	@ 0x883
 81167ca:	493e      	ldr	r1, [pc, #248]	@ (81168c4 <tcp_pcb_remove+0x110>)
 81167cc:	483e      	ldr	r0, [pc, #248]	@ (81168c8 <tcp_pcb_remove+0x114>)
 81167ce:	f005 fb25 	bl	811be1c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 81167d2:	687b      	ldr	r3, [r7, #4]
 81167d4:	2b00      	cmp	r3, #0
 81167d6:	d106      	bne.n	81167e6 <tcp_pcb_remove+0x32>
 81167d8:	4b39      	ldr	r3, [pc, #228]	@ (81168c0 <tcp_pcb_remove+0x10c>)
 81167da:	f640 0284 	movw	r2, #2180	@ 0x884
 81167de:	493b      	ldr	r1, [pc, #236]	@ (81168cc <tcp_pcb_remove+0x118>)
 81167e0:	4839      	ldr	r0, [pc, #228]	@ (81168c8 <tcp_pcb_remove+0x114>)
 81167e2:	f005 fb1b 	bl	811be1c <iprintf>

  TCP_RMV(pcblist, pcb);
 81167e6:	687b      	ldr	r3, [r7, #4]
 81167e8:	681b      	ldr	r3, [r3, #0]
 81167ea:	683a      	ldr	r2, [r7, #0]
 81167ec:	429a      	cmp	r2, r3
 81167ee:	d105      	bne.n	81167fc <tcp_pcb_remove+0x48>
 81167f0:	687b      	ldr	r3, [r7, #4]
 81167f2:	681b      	ldr	r3, [r3, #0]
 81167f4:	68da      	ldr	r2, [r3, #12]
 81167f6:	687b      	ldr	r3, [r7, #4]
 81167f8:	601a      	str	r2, [r3, #0]
 81167fa:	e013      	b.n	8116824 <tcp_pcb_remove+0x70>
 81167fc:	687b      	ldr	r3, [r7, #4]
 81167fe:	681b      	ldr	r3, [r3, #0]
 8116800:	60fb      	str	r3, [r7, #12]
 8116802:	e00c      	b.n	811681e <tcp_pcb_remove+0x6a>
 8116804:	68fb      	ldr	r3, [r7, #12]
 8116806:	68db      	ldr	r3, [r3, #12]
 8116808:	683a      	ldr	r2, [r7, #0]
 811680a:	429a      	cmp	r2, r3
 811680c:	d104      	bne.n	8116818 <tcp_pcb_remove+0x64>
 811680e:	683b      	ldr	r3, [r7, #0]
 8116810:	68da      	ldr	r2, [r3, #12]
 8116812:	68fb      	ldr	r3, [r7, #12]
 8116814:	60da      	str	r2, [r3, #12]
 8116816:	e005      	b.n	8116824 <tcp_pcb_remove+0x70>
 8116818:	68fb      	ldr	r3, [r7, #12]
 811681a:	68db      	ldr	r3, [r3, #12]
 811681c:	60fb      	str	r3, [r7, #12]
 811681e:	68fb      	ldr	r3, [r7, #12]
 8116820:	2b00      	cmp	r3, #0
 8116822:	d1ef      	bne.n	8116804 <tcp_pcb_remove+0x50>
 8116824:	683b      	ldr	r3, [r7, #0]
 8116826:	2200      	movs	r2, #0
 8116828:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 811682a:	6838      	ldr	r0, [r7, #0]
 811682c:	f7ff ff72 	bl	8116714 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8116830:	683b      	ldr	r3, [r7, #0]
 8116832:	7d1b      	ldrb	r3, [r3, #20]
 8116834:	2b0a      	cmp	r3, #10
 8116836:	d013      	beq.n	8116860 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8116838:	683b      	ldr	r3, [r7, #0]
 811683a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 811683c:	2b01      	cmp	r3, #1
 811683e:	d00f      	beq.n	8116860 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8116840:	683b      	ldr	r3, [r7, #0]
 8116842:	8b5b      	ldrh	r3, [r3, #26]
 8116844:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8116848:	2b00      	cmp	r3, #0
 811684a:	d009      	beq.n	8116860 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 811684c:	683b      	ldr	r3, [r7, #0]
 811684e:	8b5b      	ldrh	r3, [r3, #26]
 8116850:	f043 0302 	orr.w	r3, r3, #2
 8116854:	b29a      	uxth	r2, r3
 8116856:	683b      	ldr	r3, [r7, #0]
 8116858:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811685a:	6838      	ldr	r0, [r7, #0]
 811685c:	f003 fbc2 	bl	8119fe4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8116860:	683b      	ldr	r3, [r7, #0]
 8116862:	7d1b      	ldrb	r3, [r3, #20]
 8116864:	2b01      	cmp	r3, #1
 8116866:	d020      	beq.n	81168aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8116868:	683b      	ldr	r3, [r7, #0]
 811686a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811686c:	2b00      	cmp	r3, #0
 811686e:	d006      	beq.n	811687e <tcp_pcb_remove+0xca>
 8116870:	4b13      	ldr	r3, [pc, #76]	@ (81168c0 <tcp_pcb_remove+0x10c>)
 8116872:	f640 0293 	movw	r2, #2195	@ 0x893
 8116876:	4916      	ldr	r1, [pc, #88]	@ (81168d0 <tcp_pcb_remove+0x11c>)
 8116878:	4813      	ldr	r0, [pc, #76]	@ (81168c8 <tcp_pcb_remove+0x114>)
 811687a:	f005 facf 	bl	811be1c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 811687e:	683b      	ldr	r3, [r7, #0]
 8116880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8116882:	2b00      	cmp	r3, #0
 8116884:	d006      	beq.n	8116894 <tcp_pcb_remove+0xe0>
 8116886:	4b0e      	ldr	r3, [pc, #56]	@ (81168c0 <tcp_pcb_remove+0x10c>)
 8116888:	f640 0294 	movw	r2, #2196	@ 0x894
 811688c:	4911      	ldr	r1, [pc, #68]	@ (81168d4 <tcp_pcb_remove+0x120>)
 811688e:	480e      	ldr	r0, [pc, #56]	@ (81168c8 <tcp_pcb_remove+0x114>)
 8116890:	f005 fac4 	bl	811be1c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8116894:	683b      	ldr	r3, [r7, #0]
 8116896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8116898:	2b00      	cmp	r3, #0
 811689a:	d006      	beq.n	81168aa <tcp_pcb_remove+0xf6>
 811689c:	4b08      	ldr	r3, [pc, #32]	@ (81168c0 <tcp_pcb_remove+0x10c>)
 811689e:	f640 0296 	movw	r2, #2198	@ 0x896
 81168a2:	490d      	ldr	r1, [pc, #52]	@ (81168d8 <tcp_pcb_remove+0x124>)
 81168a4:	4808      	ldr	r0, [pc, #32]	@ (81168c8 <tcp_pcb_remove+0x114>)
 81168a6:	f005 fab9 	bl	811be1c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 81168aa:	683b      	ldr	r3, [r7, #0]
 81168ac:	2200      	movs	r2, #0
 81168ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 81168b0:	683b      	ldr	r3, [r7, #0]
 81168b2:	2200      	movs	r2, #0
 81168b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 81168b6:	bf00      	nop
 81168b8:	3710      	adds	r7, #16
 81168ba:	46bd      	mov	sp, r7
 81168bc:	bd80      	pop	{r7, pc}
 81168be:	bf00      	nop
 81168c0:	0811e0b0 	.word	0x0811e0b0
 81168c4:	0811e758 	.word	0x0811e758
 81168c8:	0811e134 	.word	0x0811e134
 81168cc:	0811e774 	.word	0x0811e774
 81168d0:	0811e794 	.word	0x0811e794
 81168d4:	0811e7ac 	.word	0x0811e7ac
 81168d8:	0811e7c8 	.word	0x0811e7c8

081168dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 81168dc:	b580      	push	{r7, lr}
 81168de:	b082      	sub	sp, #8
 81168e0:	af00      	add	r7, sp, #0
 81168e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 81168e4:	687b      	ldr	r3, [r7, #4]
 81168e6:	2b00      	cmp	r3, #0
 81168e8:	d106      	bne.n	81168f8 <tcp_next_iss+0x1c>
 81168ea:	4b0a      	ldr	r3, [pc, #40]	@ (8116914 <tcp_next_iss+0x38>)
 81168ec:	f640 02af 	movw	r2, #2223	@ 0x8af
 81168f0:	4909      	ldr	r1, [pc, #36]	@ (8116918 <tcp_next_iss+0x3c>)
 81168f2:	480a      	ldr	r0, [pc, #40]	@ (811691c <tcp_next_iss+0x40>)
 81168f4:	f005 fa92 	bl	811be1c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 81168f8:	4b09      	ldr	r3, [pc, #36]	@ (8116920 <tcp_next_iss+0x44>)
 81168fa:	681a      	ldr	r2, [r3, #0]
 81168fc:	4b09      	ldr	r3, [pc, #36]	@ (8116924 <tcp_next_iss+0x48>)
 81168fe:	681b      	ldr	r3, [r3, #0]
 8116900:	4413      	add	r3, r2
 8116902:	4a07      	ldr	r2, [pc, #28]	@ (8116920 <tcp_next_iss+0x44>)
 8116904:	6013      	str	r3, [r2, #0]
  return iss;
 8116906:	4b06      	ldr	r3, [pc, #24]	@ (8116920 <tcp_next_iss+0x44>)
 8116908:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 811690a:	4618      	mov	r0, r3
 811690c:	3708      	adds	r7, #8
 811690e:	46bd      	mov	sp, r7
 8116910:	bd80      	pop	{r7, pc}
 8116912:	bf00      	nop
 8116914:	0811e0b0 	.word	0x0811e0b0
 8116918:	0811e7e0 	.word	0x0811e7e0
 811691c:	0811e134 	.word	0x0811e134
 8116920:	1000002c 	.word	0x1000002c
 8116924:	10011d14 	.word	0x10011d14

08116928 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8116928:	b580      	push	{r7, lr}
 811692a:	b086      	sub	sp, #24
 811692c:	af00      	add	r7, sp, #0
 811692e:	4603      	mov	r3, r0
 8116930:	60b9      	str	r1, [r7, #8]
 8116932:	607a      	str	r2, [r7, #4]
 8116934:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8116936:	687b      	ldr	r3, [r7, #4]
 8116938:	2b00      	cmp	r3, #0
 811693a:	d106      	bne.n	811694a <tcp_eff_send_mss_netif+0x22>
 811693c:	4b14      	ldr	r3, [pc, #80]	@ (8116990 <tcp_eff_send_mss_netif+0x68>)
 811693e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8116942:	4914      	ldr	r1, [pc, #80]	@ (8116994 <tcp_eff_send_mss_netif+0x6c>)
 8116944:	4814      	ldr	r0, [pc, #80]	@ (8116998 <tcp_eff_send_mss_netif+0x70>)
 8116946:	f005 fa69 	bl	811be1c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 811694a:	68bb      	ldr	r3, [r7, #8]
 811694c:	2b00      	cmp	r3, #0
 811694e:	d101      	bne.n	8116954 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8116950:	89fb      	ldrh	r3, [r7, #14]
 8116952:	e019      	b.n	8116988 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8116954:	68bb      	ldr	r3, [r7, #8]
 8116956:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8116958:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 811695a:	8afb      	ldrh	r3, [r7, #22]
 811695c:	2b00      	cmp	r3, #0
 811695e:	d012      	beq.n	8116986 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8116960:	2328      	movs	r3, #40	@ 0x28
 8116962:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8116964:	8afa      	ldrh	r2, [r7, #22]
 8116966:	8abb      	ldrh	r3, [r7, #20]
 8116968:	429a      	cmp	r2, r3
 811696a:	d904      	bls.n	8116976 <tcp_eff_send_mss_netif+0x4e>
 811696c:	8afa      	ldrh	r2, [r7, #22]
 811696e:	8abb      	ldrh	r3, [r7, #20]
 8116970:	1ad3      	subs	r3, r2, r3
 8116972:	b29b      	uxth	r3, r3
 8116974:	e000      	b.n	8116978 <tcp_eff_send_mss_netif+0x50>
 8116976:	2300      	movs	r3, #0
 8116978:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 811697a:	8a7a      	ldrh	r2, [r7, #18]
 811697c:	89fb      	ldrh	r3, [r7, #14]
 811697e:	4293      	cmp	r3, r2
 8116980:	bf28      	it	cs
 8116982:	4613      	movcs	r3, r2
 8116984:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8116986:	89fb      	ldrh	r3, [r7, #14]
}
 8116988:	4618      	mov	r0, r3
 811698a:	3718      	adds	r7, #24
 811698c:	46bd      	mov	sp, r7
 811698e:	bd80      	pop	{r7, pc}
 8116990:	0811e0b0 	.word	0x0811e0b0
 8116994:	0811e7fc 	.word	0x0811e7fc
 8116998:	0811e134 	.word	0x0811e134

0811699c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 811699c:	b580      	push	{r7, lr}
 811699e:	b084      	sub	sp, #16
 81169a0:	af00      	add	r7, sp, #0
 81169a2:	6078      	str	r0, [r7, #4]
 81169a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 81169a6:	683b      	ldr	r3, [r7, #0]
 81169a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 81169aa:	687b      	ldr	r3, [r7, #4]
 81169ac:	2b00      	cmp	r3, #0
 81169ae:	d119      	bne.n	81169e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 81169b0:	4b10      	ldr	r3, [pc, #64]	@ (81169f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 81169b2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 81169b6:	4910      	ldr	r1, [pc, #64]	@ (81169f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 81169b8:	4810      	ldr	r0, [pc, #64]	@ (81169fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 81169ba:	f005 fa2f 	bl	811be1c <iprintf>

  while (pcb != NULL) {
 81169be:	e011      	b.n	81169e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 81169c0:	68fb      	ldr	r3, [r7, #12]
 81169c2:	681a      	ldr	r2, [r3, #0]
 81169c4:	687b      	ldr	r3, [r7, #4]
 81169c6:	681b      	ldr	r3, [r3, #0]
 81169c8:	429a      	cmp	r2, r3
 81169ca:	d108      	bne.n	81169de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 81169cc:	68fb      	ldr	r3, [r7, #12]
 81169ce:	68db      	ldr	r3, [r3, #12]
 81169d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 81169d2:	68f8      	ldr	r0, [r7, #12]
 81169d4:	f7fe fde6 	bl	81155a4 <tcp_abort>
      pcb = next;
 81169d8:	68bb      	ldr	r3, [r7, #8]
 81169da:	60fb      	str	r3, [r7, #12]
 81169dc:	e002      	b.n	81169e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 81169de:	68fb      	ldr	r3, [r7, #12]
 81169e0:	68db      	ldr	r3, [r3, #12]
 81169e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 81169e4:	68fb      	ldr	r3, [r7, #12]
 81169e6:	2b00      	cmp	r3, #0
 81169e8:	d1ea      	bne.n	81169c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 81169ea:	bf00      	nop
 81169ec:	bf00      	nop
 81169ee:	3710      	adds	r7, #16
 81169f0:	46bd      	mov	sp, r7
 81169f2:	bd80      	pop	{r7, pc}
 81169f4:	0811e0b0 	.word	0x0811e0b0
 81169f8:	0811e824 	.word	0x0811e824
 81169fc:	0811e134 	.word	0x0811e134

08116a00 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8116a00:	b580      	push	{r7, lr}
 8116a02:	b084      	sub	sp, #16
 8116a04:	af00      	add	r7, sp, #0
 8116a06:	6078      	str	r0, [r7, #4]
 8116a08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8116a0a:	687b      	ldr	r3, [r7, #4]
 8116a0c:	2b00      	cmp	r3, #0
 8116a0e:	d02a      	beq.n	8116a66 <tcp_netif_ip_addr_changed+0x66>
 8116a10:	687b      	ldr	r3, [r7, #4]
 8116a12:	681b      	ldr	r3, [r3, #0]
 8116a14:	2b00      	cmp	r3, #0
 8116a16:	d026      	beq.n	8116a66 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8116a18:	4b15      	ldr	r3, [pc, #84]	@ (8116a70 <tcp_netif_ip_addr_changed+0x70>)
 8116a1a:	681b      	ldr	r3, [r3, #0]
 8116a1c:	4619      	mov	r1, r3
 8116a1e:	6878      	ldr	r0, [r7, #4]
 8116a20:	f7ff ffbc 	bl	811699c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8116a24:	4b13      	ldr	r3, [pc, #76]	@ (8116a74 <tcp_netif_ip_addr_changed+0x74>)
 8116a26:	681b      	ldr	r3, [r3, #0]
 8116a28:	4619      	mov	r1, r3
 8116a2a:	6878      	ldr	r0, [r7, #4]
 8116a2c:	f7ff ffb6 	bl	811699c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8116a30:	683b      	ldr	r3, [r7, #0]
 8116a32:	2b00      	cmp	r3, #0
 8116a34:	d017      	beq.n	8116a66 <tcp_netif_ip_addr_changed+0x66>
 8116a36:	683b      	ldr	r3, [r7, #0]
 8116a38:	681b      	ldr	r3, [r3, #0]
 8116a3a:	2b00      	cmp	r3, #0
 8116a3c:	d013      	beq.n	8116a66 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8116a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8116a78 <tcp_netif_ip_addr_changed+0x78>)
 8116a40:	681b      	ldr	r3, [r3, #0]
 8116a42:	60fb      	str	r3, [r7, #12]
 8116a44:	e00c      	b.n	8116a60 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8116a46:	68fb      	ldr	r3, [r7, #12]
 8116a48:	681a      	ldr	r2, [r3, #0]
 8116a4a:	687b      	ldr	r3, [r7, #4]
 8116a4c:	681b      	ldr	r3, [r3, #0]
 8116a4e:	429a      	cmp	r2, r3
 8116a50:	d103      	bne.n	8116a5a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8116a52:	683b      	ldr	r3, [r7, #0]
 8116a54:	681a      	ldr	r2, [r3, #0]
 8116a56:	68fb      	ldr	r3, [r7, #12]
 8116a58:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8116a5a:	68fb      	ldr	r3, [r7, #12]
 8116a5c:	68db      	ldr	r3, [r3, #12]
 8116a5e:	60fb      	str	r3, [r7, #12]
 8116a60:	68fb      	ldr	r3, [r7, #12]
 8116a62:	2b00      	cmp	r3, #0
 8116a64:	d1ef      	bne.n	8116a46 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8116a66:	bf00      	nop
 8116a68:	3710      	adds	r7, #16
 8116a6a:	46bd      	mov	sp, r7
 8116a6c:	bd80      	pop	{r7, pc}
 8116a6e:	bf00      	nop
 8116a70:	10011d20 	.word	0x10011d20
 8116a74:	10011d18 	.word	0x10011d18
 8116a78:	10011d1c 	.word	0x10011d1c

08116a7c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8116a7c:	b580      	push	{r7, lr}
 8116a7e:	b082      	sub	sp, #8
 8116a80:	af00      	add	r7, sp, #0
 8116a82:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8116a84:	687b      	ldr	r3, [r7, #4]
 8116a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8116a88:	2b00      	cmp	r3, #0
 8116a8a:	d007      	beq.n	8116a9c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8116a8c:	687b      	ldr	r3, [r7, #4]
 8116a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8116a90:	4618      	mov	r0, r3
 8116a92:	f7ff fbc1 	bl	8116218 <tcp_segs_free>
    pcb->ooseq = NULL;
 8116a96:	687b      	ldr	r3, [r7, #4]
 8116a98:	2200      	movs	r2, #0
 8116a9a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8116a9c:	bf00      	nop
 8116a9e:	3708      	adds	r7, #8
 8116aa0:	46bd      	mov	sp, r7
 8116aa2:	bd80      	pop	{r7, pc}

08116aa4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8116aa4:	b590      	push	{r4, r7, lr}
 8116aa6:	b08d      	sub	sp, #52	@ 0x34
 8116aa8:	af04      	add	r7, sp, #16
 8116aaa:	6078      	str	r0, [r7, #4]
 8116aac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8116aae:	687b      	ldr	r3, [r7, #4]
 8116ab0:	2b00      	cmp	r3, #0
 8116ab2:	d105      	bne.n	8116ac0 <tcp_input+0x1c>
 8116ab4:	4b9b      	ldr	r3, [pc, #620]	@ (8116d24 <tcp_input+0x280>)
 8116ab6:	2283      	movs	r2, #131	@ 0x83
 8116ab8:	499b      	ldr	r1, [pc, #620]	@ (8116d28 <tcp_input+0x284>)
 8116aba:	489c      	ldr	r0, [pc, #624]	@ (8116d2c <tcp_input+0x288>)
 8116abc:	f005 f9ae 	bl	811be1c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8116ac0:	687b      	ldr	r3, [r7, #4]
 8116ac2:	685b      	ldr	r3, [r3, #4]
 8116ac4:	4a9a      	ldr	r2, [pc, #616]	@ (8116d30 <tcp_input+0x28c>)
 8116ac6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8116ac8:	687b      	ldr	r3, [r7, #4]
 8116aca:	895b      	ldrh	r3, [r3, #10]
 8116acc:	2b13      	cmp	r3, #19
 8116ace:	f240 83d1 	bls.w	8117274 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8116ad2:	4b98      	ldr	r3, [pc, #608]	@ (8116d34 <tcp_input+0x290>)
 8116ad4:	695b      	ldr	r3, [r3, #20]
 8116ad6:	4a97      	ldr	r2, [pc, #604]	@ (8116d34 <tcp_input+0x290>)
 8116ad8:	6812      	ldr	r2, [r2, #0]
 8116ada:	4611      	mov	r1, r2
 8116adc:	4618      	mov	r0, r3
 8116ade:	f7fb fcc3 	bl	8112468 <ip4_addr_isbroadcast_u32>
 8116ae2:	4603      	mov	r3, r0
 8116ae4:	2b00      	cmp	r3, #0
 8116ae6:	f040 83c7 	bne.w	8117278 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8116aea:	4b92      	ldr	r3, [pc, #584]	@ (8116d34 <tcp_input+0x290>)
 8116aec:	695b      	ldr	r3, [r3, #20]
 8116aee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8116af2:	2be0      	cmp	r3, #224	@ 0xe0
 8116af4:	f000 83c0 	beq.w	8117278 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8116af8:	4b8d      	ldr	r3, [pc, #564]	@ (8116d30 <tcp_input+0x28c>)
 8116afa:	681b      	ldr	r3, [r3, #0]
 8116afc:	899b      	ldrh	r3, [r3, #12]
 8116afe:	b29b      	uxth	r3, r3
 8116b00:	4618      	mov	r0, r3
 8116b02:	f7f9 ff43 	bl	811098c <lwip_htons>
 8116b06:	4603      	mov	r3, r0
 8116b08:	0b1b      	lsrs	r3, r3, #12
 8116b0a:	b29b      	uxth	r3, r3
 8116b0c:	b2db      	uxtb	r3, r3
 8116b0e:	009b      	lsls	r3, r3, #2
 8116b10:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8116b12:	7cbb      	ldrb	r3, [r7, #18]
 8116b14:	2b13      	cmp	r3, #19
 8116b16:	f240 83b1 	bls.w	811727c <tcp_input+0x7d8>
 8116b1a:	7cbb      	ldrb	r3, [r7, #18]
 8116b1c:	b29a      	uxth	r2, r3
 8116b1e:	687b      	ldr	r3, [r7, #4]
 8116b20:	891b      	ldrh	r3, [r3, #8]
 8116b22:	429a      	cmp	r2, r3
 8116b24:	f200 83aa 	bhi.w	811727c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8116b28:	7cbb      	ldrb	r3, [r7, #18]
 8116b2a:	b29b      	uxth	r3, r3
 8116b2c:	3b14      	subs	r3, #20
 8116b2e:	b29a      	uxth	r2, r3
 8116b30:	4b81      	ldr	r3, [pc, #516]	@ (8116d38 <tcp_input+0x294>)
 8116b32:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8116b34:	4b81      	ldr	r3, [pc, #516]	@ (8116d3c <tcp_input+0x298>)
 8116b36:	2200      	movs	r2, #0
 8116b38:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8116b3a:	687b      	ldr	r3, [r7, #4]
 8116b3c:	895a      	ldrh	r2, [r3, #10]
 8116b3e:	7cbb      	ldrb	r3, [r7, #18]
 8116b40:	b29b      	uxth	r3, r3
 8116b42:	429a      	cmp	r2, r3
 8116b44:	d309      	bcc.n	8116b5a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8116b46:	4b7c      	ldr	r3, [pc, #496]	@ (8116d38 <tcp_input+0x294>)
 8116b48:	881a      	ldrh	r2, [r3, #0]
 8116b4a:	4b7d      	ldr	r3, [pc, #500]	@ (8116d40 <tcp_input+0x29c>)
 8116b4c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8116b4e:	7cbb      	ldrb	r3, [r7, #18]
 8116b50:	4619      	mov	r1, r3
 8116b52:	6878      	ldr	r0, [r7, #4]
 8116b54:	f7fd fe1a 	bl	811478c <pbuf_remove_header>
 8116b58:	e04e      	b.n	8116bf8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8116b5a:	687b      	ldr	r3, [r7, #4]
 8116b5c:	681b      	ldr	r3, [r3, #0]
 8116b5e:	2b00      	cmp	r3, #0
 8116b60:	d105      	bne.n	8116b6e <tcp_input+0xca>
 8116b62:	4b70      	ldr	r3, [pc, #448]	@ (8116d24 <tcp_input+0x280>)
 8116b64:	22c2      	movs	r2, #194	@ 0xc2
 8116b66:	4977      	ldr	r1, [pc, #476]	@ (8116d44 <tcp_input+0x2a0>)
 8116b68:	4870      	ldr	r0, [pc, #448]	@ (8116d2c <tcp_input+0x288>)
 8116b6a:	f005 f957 	bl	811be1c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8116b6e:	2114      	movs	r1, #20
 8116b70:	6878      	ldr	r0, [r7, #4]
 8116b72:	f7fd fe0b 	bl	811478c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8116b76:	687b      	ldr	r3, [r7, #4]
 8116b78:	895a      	ldrh	r2, [r3, #10]
 8116b7a:	4b71      	ldr	r3, [pc, #452]	@ (8116d40 <tcp_input+0x29c>)
 8116b7c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8116b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8116d38 <tcp_input+0x294>)
 8116b80:	881a      	ldrh	r2, [r3, #0]
 8116b82:	4b6f      	ldr	r3, [pc, #444]	@ (8116d40 <tcp_input+0x29c>)
 8116b84:	881b      	ldrh	r3, [r3, #0]
 8116b86:	1ad3      	subs	r3, r2, r3
 8116b88:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8116b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8116d40 <tcp_input+0x29c>)
 8116b8c:	881b      	ldrh	r3, [r3, #0]
 8116b8e:	4619      	mov	r1, r3
 8116b90:	6878      	ldr	r0, [r7, #4]
 8116b92:	f7fd fdfb 	bl	811478c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8116b96:	687b      	ldr	r3, [r7, #4]
 8116b98:	681b      	ldr	r3, [r3, #0]
 8116b9a:	895b      	ldrh	r3, [r3, #10]
 8116b9c:	8a3a      	ldrh	r2, [r7, #16]
 8116b9e:	429a      	cmp	r2, r3
 8116ba0:	f200 836e 	bhi.w	8117280 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8116ba4:	687b      	ldr	r3, [r7, #4]
 8116ba6:	681b      	ldr	r3, [r3, #0]
 8116ba8:	685b      	ldr	r3, [r3, #4]
 8116baa:	4a64      	ldr	r2, [pc, #400]	@ (8116d3c <tcp_input+0x298>)
 8116bac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8116bae:	687b      	ldr	r3, [r7, #4]
 8116bb0:	681b      	ldr	r3, [r3, #0]
 8116bb2:	8a3a      	ldrh	r2, [r7, #16]
 8116bb4:	4611      	mov	r1, r2
 8116bb6:	4618      	mov	r0, r3
 8116bb8:	f7fd fde8 	bl	811478c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8116bbc:	687b      	ldr	r3, [r7, #4]
 8116bbe:	891a      	ldrh	r2, [r3, #8]
 8116bc0:	8a3b      	ldrh	r3, [r7, #16]
 8116bc2:	1ad3      	subs	r3, r2, r3
 8116bc4:	b29a      	uxth	r2, r3
 8116bc6:	687b      	ldr	r3, [r7, #4]
 8116bc8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8116bca:	687b      	ldr	r3, [r7, #4]
 8116bcc:	895b      	ldrh	r3, [r3, #10]
 8116bce:	2b00      	cmp	r3, #0
 8116bd0:	d005      	beq.n	8116bde <tcp_input+0x13a>
 8116bd2:	4b54      	ldr	r3, [pc, #336]	@ (8116d24 <tcp_input+0x280>)
 8116bd4:	22df      	movs	r2, #223	@ 0xdf
 8116bd6:	495c      	ldr	r1, [pc, #368]	@ (8116d48 <tcp_input+0x2a4>)
 8116bd8:	4854      	ldr	r0, [pc, #336]	@ (8116d2c <tcp_input+0x288>)
 8116bda:	f005 f91f 	bl	811be1c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8116bde:	687b      	ldr	r3, [r7, #4]
 8116be0:	891a      	ldrh	r2, [r3, #8]
 8116be2:	687b      	ldr	r3, [r7, #4]
 8116be4:	681b      	ldr	r3, [r3, #0]
 8116be6:	891b      	ldrh	r3, [r3, #8]
 8116be8:	429a      	cmp	r2, r3
 8116bea:	d005      	beq.n	8116bf8 <tcp_input+0x154>
 8116bec:	4b4d      	ldr	r3, [pc, #308]	@ (8116d24 <tcp_input+0x280>)
 8116bee:	22e0      	movs	r2, #224	@ 0xe0
 8116bf0:	4956      	ldr	r1, [pc, #344]	@ (8116d4c <tcp_input+0x2a8>)
 8116bf2:	484e      	ldr	r0, [pc, #312]	@ (8116d2c <tcp_input+0x288>)
 8116bf4:	f005 f912 	bl	811be1c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8116bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8116d30 <tcp_input+0x28c>)
 8116bfa:	681b      	ldr	r3, [r3, #0]
 8116bfc:	881b      	ldrh	r3, [r3, #0]
 8116bfe:	b29b      	uxth	r3, r3
 8116c00:	4a4b      	ldr	r2, [pc, #300]	@ (8116d30 <tcp_input+0x28c>)
 8116c02:	6814      	ldr	r4, [r2, #0]
 8116c04:	4618      	mov	r0, r3
 8116c06:	f7f9 fec1 	bl	811098c <lwip_htons>
 8116c0a:	4603      	mov	r3, r0
 8116c0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8116c0e:	4b48      	ldr	r3, [pc, #288]	@ (8116d30 <tcp_input+0x28c>)
 8116c10:	681b      	ldr	r3, [r3, #0]
 8116c12:	885b      	ldrh	r3, [r3, #2]
 8116c14:	b29b      	uxth	r3, r3
 8116c16:	4a46      	ldr	r2, [pc, #280]	@ (8116d30 <tcp_input+0x28c>)
 8116c18:	6814      	ldr	r4, [r2, #0]
 8116c1a:	4618      	mov	r0, r3
 8116c1c:	f7f9 feb6 	bl	811098c <lwip_htons>
 8116c20:	4603      	mov	r3, r0
 8116c22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8116c24:	4b42      	ldr	r3, [pc, #264]	@ (8116d30 <tcp_input+0x28c>)
 8116c26:	681b      	ldr	r3, [r3, #0]
 8116c28:	685b      	ldr	r3, [r3, #4]
 8116c2a:	4a41      	ldr	r2, [pc, #260]	@ (8116d30 <tcp_input+0x28c>)
 8116c2c:	6814      	ldr	r4, [r2, #0]
 8116c2e:	4618      	mov	r0, r3
 8116c30:	f7f9 fec1 	bl	81109b6 <lwip_htonl>
 8116c34:	4603      	mov	r3, r0
 8116c36:	6063      	str	r3, [r4, #4]
 8116c38:	6863      	ldr	r3, [r4, #4]
 8116c3a:	4a45      	ldr	r2, [pc, #276]	@ (8116d50 <tcp_input+0x2ac>)
 8116c3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8116c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8116d30 <tcp_input+0x28c>)
 8116c40:	681b      	ldr	r3, [r3, #0]
 8116c42:	689b      	ldr	r3, [r3, #8]
 8116c44:	4a3a      	ldr	r2, [pc, #232]	@ (8116d30 <tcp_input+0x28c>)
 8116c46:	6814      	ldr	r4, [r2, #0]
 8116c48:	4618      	mov	r0, r3
 8116c4a:	f7f9 feb4 	bl	81109b6 <lwip_htonl>
 8116c4e:	4603      	mov	r3, r0
 8116c50:	60a3      	str	r3, [r4, #8]
 8116c52:	68a3      	ldr	r3, [r4, #8]
 8116c54:	4a3f      	ldr	r2, [pc, #252]	@ (8116d54 <tcp_input+0x2b0>)
 8116c56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8116c58:	4b35      	ldr	r3, [pc, #212]	@ (8116d30 <tcp_input+0x28c>)
 8116c5a:	681b      	ldr	r3, [r3, #0]
 8116c5c:	89db      	ldrh	r3, [r3, #14]
 8116c5e:	b29b      	uxth	r3, r3
 8116c60:	4a33      	ldr	r2, [pc, #204]	@ (8116d30 <tcp_input+0x28c>)
 8116c62:	6814      	ldr	r4, [r2, #0]
 8116c64:	4618      	mov	r0, r3
 8116c66:	f7f9 fe91 	bl	811098c <lwip_htons>
 8116c6a:	4603      	mov	r3, r0
 8116c6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8116c6e:	4b30      	ldr	r3, [pc, #192]	@ (8116d30 <tcp_input+0x28c>)
 8116c70:	681b      	ldr	r3, [r3, #0]
 8116c72:	899b      	ldrh	r3, [r3, #12]
 8116c74:	b29b      	uxth	r3, r3
 8116c76:	4618      	mov	r0, r3
 8116c78:	f7f9 fe88 	bl	811098c <lwip_htons>
 8116c7c:	4603      	mov	r3, r0
 8116c7e:	b2db      	uxtb	r3, r3
 8116c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8116c84:	b2da      	uxtb	r2, r3
 8116c86:	4b34      	ldr	r3, [pc, #208]	@ (8116d58 <tcp_input+0x2b4>)
 8116c88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8116c8a:	687b      	ldr	r3, [r7, #4]
 8116c8c:	891a      	ldrh	r2, [r3, #8]
 8116c8e:	4b33      	ldr	r3, [pc, #204]	@ (8116d5c <tcp_input+0x2b8>)
 8116c90:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8116c92:	4b31      	ldr	r3, [pc, #196]	@ (8116d58 <tcp_input+0x2b4>)
 8116c94:	781b      	ldrb	r3, [r3, #0]
 8116c96:	f003 0303 	and.w	r3, r3, #3
 8116c9a:	2b00      	cmp	r3, #0
 8116c9c:	d00c      	beq.n	8116cb8 <tcp_input+0x214>
    tcplen++;
 8116c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8116d5c <tcp_input+0x2b8>)
 8116ca0:	881b      	ldrh	r3, [r3, #0]
 8116ca2:	3301      	adds	r3, #1
 8116ca4:	b29a      	uxth	r2, r3
 8116ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8116d5c <tcp_input+0x2b8>)
 8116ca8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8116caa:	687b      	ldr	r3, [r7, #4]
 8116cac:	891a      	ldrh	r2, [r3, #8]
 8116cae:	4b2b      	ldr	r3, [pc, #172]	@ (8116d5c <tcp_input+0x2b8>)
 8116cb0:	881b      	ldrh	r3, [r3, #0]
 8116cb2:	429a      	cmp	r2, r3
 8116cb4:	f200 82e6 	bhi.w	8117284 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8116cb8:	2300      	movs	r3, #0
 8116cba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8116cbc:	4b28      	ldr	r3, [pc, #160]	@ (8116d60 <tcp_input+0x2bc>)
 8116cbe:	681b      	ldr	r3, [r3, #0]
 8116cc0:	61fb      	str	r3, [r7, #28]
 8116cc2:	e09d      	b.n	8116e00 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8116cc4:	69fb      	ldr	r3, [r7, #28]
 8116cc6:	7d1b      	ldrb	r3, [r3, #20]
 8116cc8:	2b00      	cmp	r3, #0
 8116cca:	d105      	bne.n	8116cd8 <tcp_input+0x234>
 8116ccc:	4b15      	ldr	r3, [pc, #84]	@ (8116d24 <tcp_input+0x280>)
 8116cce:	22fb      	movs	r2, #251	@ 0xfb
 8116cd0:	4924      	ldr	r1, [pc, #144]	@ (8116d64 <tcp_input+0x2c0>)
 8116cd2:	4816      	ldr	r0, [pc, #88]	@ (8116d2c <tcp_input+0x288>)
 8116cd4:	f005 f8a2 	bl	811be1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8116cd8:	69fb      	ldr	r3, [r7, #28]
 8116cda:	7d1b      	ldrb	r3, [r3, #20]
 8116cdc:	2b0a      	cmp	r3, #10
 8116cde:	d105      	bne.n	8116cec <tcp_input+0x248>
 8116ce0:	4b10      	ldr	r3, [pc, #64]	@ (8116d24 <tcp_input+0x280>)
 8116ce2:	22fc      	movs	r2, #252	@ 0xfc
 8116ce4:	4920      	ldr	r1, [pc, #128]	@ (8116d68 <tcp_input+0x2c4>)
 8116ce6:	4811      	ldr	r0, [pc, #68]	@ (8116d2c <tcp_input+0x288>)
 8116ce8:	f005 f898 	bl	811be1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8116cec:	69fb      	ldr	r3, [r7, #28]
 8116cee:	7d1b      	ldrb	r3, [r3, #20]
 8116cf0:	2b01      	cmp	r3, #1
 8116cf2:	d105      	bne.n	8116d00 <tcp_input+0x25c>
 8116cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8116d24 <tcp_input+0x280>)
 8116cf6:	22fd      	movs	r2, #253	@ 0xfd
 8116cf8:	491c      	ldr	r1, [pc, #112]	@ (8116d6c <tcp_input+0x2c8>)
 8116cfa:	480c      	ldr	r0, [pc, #48]	@ (8116d2c <tcp_input+0x288>)
 8116cfc:	f005 f88e 	bl	811be1c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8116d00:	69fb      	ldr	r3, [r7, #28]
 8116d02:	7a1b      	ldrb	r3, [r3, #8]
 8116d04:	2b00      	cmp	r3, #0
 8116d06:	d033      	beq.n	8116d70 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8116d08:	69fb      	ldr	r3, [r7, #28]
 8116d0a:	7a1a      	ldrb	r2, [r3, #8]
 8116d0c:	4b09      	ldr	r3, [pc, #36]	@ (8116d34 <tcp_input+0x290>)
 8116d0e:	685b      	ldr	r3, [r3, #4]
 8116d10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8116d14:	3301      	adds	r3, #1
 8116d16:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8116d18:	429a      	cmp	r2, r3
 8116d1a:	d029      	beq.n	8116d70 <tcp_input+0x2cc>
      prev = pcb;
 8116d1c:	69fb      	ldr	r3, [r7, #28]
 8116d1e:	61bb      	str	r3, [r7, #24]
      continue;
 8116d20:	e06b      	b.n	8116dfa <tcp_input+0x356>
 8116d22:	bf00      	nop
 8116d24:	0811e858 	.word	0x0811e858
 8116d28:	0811e8cc 	.word	0x0811e8cc
 8116d2c:	0811e8e4 	.word	0x0811e8e4
 8116d30:	10011d3c 	.word	0x10011d3c
 8116d34:	1000b244 	.word	0x1000b244
 8116d38:	10011d40 	.word	0x10011d40
 8116d3c:	10011d44 	.word	0x10011d44
 8116d40:	10011d42 	.word	0x10011d42
 8116d44:	0811e90c 	.word	0x0811e90c
 8116d48:	0811e91c 	.word	0x0811e91c
 8116d4c:	0811e928 	.word	0x0811e928
 8116d50:	10011d4c 	.word	0x10011d4c
 8116d54:	10011d50 	.word	0x10011d50
 8116d58:	10011d58 	.word	0x10011d58
 8116d5c:	10011d56 	.word	0x10011d56
 8116d60:	10011d20 	.word	0x10011d20
 8116d64:	0811e948 	.word	0x0811e948
 8116d68:	0811e970 	.word	0x0811e970
 8116d6c:	0811e99c 	.word	0x0811e99c
    }

    if (pcb->remote_port == tcphdr->src &&
 8116d70:	69fb      	ldr	r3, [r7, #28]
 8116d72:	8b1a      	ldrh	r2, [r3, #24]
 8116d74:	4b72      	ldr	r3, [pc, #456]	@ (8116f40 <tcp_input+0x49c>)
 8116d76:	681b      	ldr	r3, [r3, #0]
 8116d78:	881b      	ldrh	r3, [r3, #0]
 8116d7a:	b29b      	uxth	r3, r3
 8116d7c:	429a      	cmp	r2, r3
 8116d7e:	d13a      	bne.n	8116df6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8116d80:	69fb      	ldr	r3, [r7, #28]
 8116d82:	8ada      	ldrh	r2, [r3, #22]
 8116d84:	4b6e      	ldr	r3, [pc, #440]	@ (8116f40 <tcp_input+0x49c>)
 8116d86:	681b      	ldr	r3, [r3, #0]
 8116d88:	885b      	ldrh	r3, [r3, #2]
 8116d8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8116d8c:	429a      	cmp	r2, r3
 8116d8e:	d132      	bne.n	8116df6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8116d90:	69fb      	ldr	r3, [r7, #28]
 8116d92:	685a      	ldr	r2, [r3, #4]
 8116d94:	4b6b      	ldr	r3, [pc, #428]	@ (8116f44 <tcp_input+0x4a0>)
 8116d96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8116d98:	429a      	cmp	r2, r3
 8116d9a:	d12c      	bne.n	8116df6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8116d9c:	69fb      	ldr	r3, [r7, #28]
 8116d9e:	681a      	ldr	r2, [r3, #0]
 8116da0:	4b68      	ldr	r3, [pc, #416]	@ (8116f44 <tcp_input+0x4a0>)
 8116da2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8116da4:	429a      	cmp	r2, r3
 8116da6:	d126      	bne.n	8116df6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8116da8:	69fb      	ldr	r3, [r7, #28]
 8116daa:	68db      	ldr	r3, [r3, #12]
 8116dac:	69fa      	ldr	r2, [r7, #28]
 8116dae:	429a      	cmp	r2, r3
 8116db0:	d106      	bne.n	8116dc0 <tcp_input+0x31c>
 8116db2:	4b65      	ldr	r3, [pc, #404]	@ (8116f48 <tcp_input+0x4a4>)
 8116db4:	f240 120d 	movw	r2, #269	@ 0x10d
 8116db8:	4964      	ldr	r1, [pc, #400]	@ (8116f4c <tcp_input+0x4a8>)
 8116dba:	4865      	ldr	r0, [pc, #404]	@ (8116f50 <tcp_input+0x4ac>)
 8116dbc:	f005 f82e 	bl	811be1c <iprintf>
      if (prev != NULL) {
 8116dc0:	69bb      	ldr	r3, [r7, #24]
 8116dc2:	2b00      	cmp	r3, #0
 8116dc4:	d00a      	beq.n	8116ddc <tcp_input+0x338>
        prev->next = pcb->next;
 8116dc6:	69fb      	ldr	r3, [r7, #28]
 8116dc8:	68da      	ldr	r2, [r3, #12]
 8116dca:	69bb      	ldr	r3, [r7, #24]
 8116dcc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8116dce:	4b61      	ldr	r3, [pc, #388]	@ (8116f54 <tcp_input+0x4b0>)
 8116dd0:	681a      	ldr	r2, [r3, #0]
 8116dd2:	69fb      	ldr	r3, [r7, #28]
 8116dd4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8116dd6:	4a5f      	ldr	r2, [pc, #380]	@ (8116f54 <tcp_input+0x4b0>)
 8116dd8:	69fb      	ldr	r3, [r7, #28]
 8116dda:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8116ddc:	69fb      	ldr	r3, [r7, #28]
 8116dde:	68db      	ldr	r3, [r3, #12]
 8116de0:	69fa      	ldr	r2, [r7, #28]
 8116de2:	429a      	cmp	r2, r3
 8116de4:	d111      	bne.n	8116e0a <tcp_input+0x366>
 8116de6:	4b58      	ldr	r3, [pc, #352]	@ (8116f48 <tcp_input+0x4a4>)
 8116de8:	f240 1215 	movw	r2, #277	@ 0x115
 8116dec:	495a      	ldr	r1, [pc, #360]	@ (8116f58 <tcp_input+0x4b4>)
 8116dee:	4858      	ldr	r0, [pc, #352]	@ (8116f50 <tcp_input+0x4ac>)
 8116df0:	f005 f814 	bl	811be1c <iprintf>
      break;
 8116df4:	e009      	b.n	8116e0a <tcp_input+0x366>
    }
    prev = pcb;
 8116df6:	69fb      	ldr	r3, [r7, #28]
 8116df8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8116dfa:	69fb      	ldr	r3, [r7, #28]
 8116dfc:	68db      	ldr	r3, [r3, #12]
 8116dfe:	61fb      	str	r3, [r7, #28]
 8116e00:	69fb      	ldr	r3, [r7, #28]
 8116e02:	2b00      	cmp	r3, #0
 8116e04:	f47f af5e 	bne.w	8116cc4 <tcp_input+0x220>
 8116e08:	e000      	b.n	8116e0c <tcp_input+0x368>
      break;
 8116e0a:	bf00      	nop
  }

  if (pcb == NULL) {
 8116e0c:	69fb      	ldr	r3, [r7, #28]
 8116e0e:	2b00      	cmp	r3, #0
 8116e10:	f040 80aa 	bne.w	8116f68 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8116e14:	4b51      	ldr	r3, [pc, #324]	@ (8116f5c <tcp_input+0x4b8>)
 8116e16:	681b      	ldr	r3, [r3, #0]
 8116e18:	61fb      	str	r3, [r7, #28]
 8116e1a:	e03f      	b.n	8116e9c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8116e1c:	69fb      	ldr	r3, [r7, #28]
 8116e1e:	7d1b      	ldrb	r3, [r3, #20]
 8116e20:	2b0a      	cmp	r3, #10
 8116e22:	d006      	beq.n	8116e32 <tcp_input+0x38e>
 8116e24:	4b48      	ldr	r3, [pc, #288]	@ (8116f48 <tcp_input+0x4a4>)
 8116e26:	f240 121f 	movw	r2, #287	@ 0x11f
 8116e2a:	494d      	ldr	r1, [pc, #308]	@ (8116f60 <tcp_input+0x4bc>)
 8116e2c:	4848      	ldr	r0, [pc, #288]	@ (8116f50 <tcp_input+0x4ac>)
 8116e2e:	f004 fff5 	bl	811be1c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8116e32:	69fb      	ldr	r3, [r7, #28]
 8116e34:	7a1b      	ldrb	r3, [r3, #8]
 8116e36:	2b00      	cmp	r3, #0
 8116e38:	d009      	beq.n	8116e4e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8116e3a:	69fb      	ldr	r3, [r7, #28]
 8116e3c:	7a1a      	ldrb	r2, [r3, #8]
 8116e3e:	4b41      	ldr	r3, [pc, #260]	@ (8116f44 <tcp_input+0x4a0>)
 8116e40:	685b      	ldr	r3, [r3, #4]
 8116e42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8116e46:	3301      	adds	r3, #1
 8116e48:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8116e4a:	429a      	cmp	r2, r3
 8116e4c:	d122      	bne.n	8116e94 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8116e4e:	69fb      	ldr	r3, [r7, #28]
 8116e50:	8b1a      	ldrh	r2, [r3, #24]
 8116e52:	4b3b      	ldr	r3, [pc, #236]	@ (8116f40 <tcp_input+0x49c>)
 8116e54:	681b      	ldr	r3, [r3, #0]
 8116e56:	881b      	ldrh	r3, [r3, #0]
 8116e58:	b29b      	uxth	r3, r3
 8116e5a:	429a      	cmp	r2, r3
 8116e5c:	d11b      	bne.n	8116e96 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8116e5e:	69fb      	ldr	r3, [r7, #28]
 8116e60:	8ada      	ldrh	r2, [r3, #22]
 8116e62:	4b37      	ldr	r3, [pc, #220]	@ (8116f40 <tcp_input+0x49c>)
 8116e64:	681b      	ldr	r3, [r3, #0]
 8116e66:	885b      	ldrh	r3, [r3, #2]
 8116e68:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8116e6a:	429a      	cmp	r2, r3
 8116e6c:	d113      	bne.n	8116e96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8116e6e:	69fb      	ldr	r3, [r7, #28]
 8116e70:	685a      	ldr	r2, [r3, #4]
 8116e72:	4b34      	ldr	r3, [pc, #208]	@ (8116f44 <tcp_input+0x4a0>)
 8116e74:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8116e76:	429a      	cmp	r2, r3
 8116e78:	d10d      	bne.n	8116e96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8116e7a:	69fb      	ldr	r3, [r7, #28]
 8116e7c:	681a      	ldr	r2, [r3, #0]
 8116e7e:	4b31      	ldr	r3, [pc, #196]	@ (8116f44 <tcp_input+0x4a0>)
 8116e80:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8116e82:	429a      	cmp	r2, r3
 8116e84:	d107      	bne.n	8116e96 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8116e86:	69f8      	ldr	r0, [r7, #28]
 8116e88:	f000 fb56 	bl	8117538 <tcp_timewait_input>
        }
        pbuf_free(p);
 8116e8c:	6878      	ldr	r0, [r7, #4]
 8116e8e:	f7fd fd03 	bl	8114898 <pbuf_free>
        return;
 8116e92:	e1fd      	b.n	8117290 <tcp_input+0x7ec>
        continue;
 8116e94:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8116e96:	69fb      	ldr	r3, [r7, #28]
 8116e98:	68db      	ldr	r3, [r3, #12]
 8116e9a:	61fb      	str	r3, [r7, #28]
 8116e9c:	69fb      	ldr	r3, [r7, #28]
 8116e9e:	2b00      	cmp	r3, #0
 8116ea0:	d1bc      	bne.n	8116e1c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8116ea2:	2300      	movs	r3, #0
 8116ea4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8116ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8116f64 <tcp_input+0x4c0>)
 8116ea8:	681b      	ldr	r3, [r3, #0]
 8116eaa:	617b      	str	r3, [r7, #20]
 8116eac:	e02a      	b.n	8116f04 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8116eae:	697b      	ldr	r3, [r7, #20]
 8116eb0:	7a1b      	ldrb	r3, [r3, #8]
 8116eb2:	2b00      	cmp	r3, #0
 8116eb4:	d00c      	beq.n	8116ed0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8116eb6:	697b      	ldr	r3, [r7, #20]
 8116eb8:	7a1a      	ldrb	r2, [r3, #8]
 8116eba:	4b22      	ldr	r3, [pc, #136]	@ (8116f44 <tcp_input+0x4a0>)
 8116ebc:	685b      	ldr	r3, [r3, #4]
 8116ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8116ec2:	3301      	adds	r3, #1
 8116ec4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8116ec6:	429a      	cmp	r2, r3
 8116ec8:	d002      	beq.n	8116ed0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8116eca:	697b      	ldr	r3, [r7, #20]
 8116ecc:	61bb      	str	r3, [r7, #24]
        continue;
 8116ece:	e016      	b.n	8116efe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8116ed0:	697b      	ldr	r3, [r7, #20]
 8116ed2:	8ada      	ldrh	r2, [r3, #22]
 8116ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8116f40 <tcp_input+0x49c>)
 8116ed6:	681b      	ldr	r3, [r3, #0]
 8116ed8:	885b      	ldrh	r3, [r3, #2]
 8116eda:	b29b      	uxth	r3, r3
 8116edc:	429a      	cmp	r2, r3
 8116ede:	d10c      	bne.n	8116efa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8116ee0:	697b      	ldr	r3, [r7, #20]
 8116ee2:	681a      	ldr	r2, [r3, #0]
 8116ee4:	4b17      	ldr	r3, [pc, #92]	@ (8116f44 <tcp_input+0x4a0>)
 8116ee6:	695b      	ldr	r3, [r3, #20]
 8116ee8:	429a      	cmp	r2, r3
 8116eea:	d00f      	beq.n	8116f0c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8116eec:	697b      	ldr	r3, [r7, #20]
 8116eee:	2b00      	cmp	r3, #0
 8116ef0:	d00d      	beq.n	8116f0e <tcp_input+0x46a>
 8116ef2:	697b      	ldr	r3, [r7, #20]
 8116ef4:	681b      	ldr	r3, [r3, #0]
 8116ef6:	2b00      	cmp	r3, #0
 8116ef8:	d009      	beq.n	8116f0e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8116efa:	697b      	ldr	r3, [r7, #20]
 8116efc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8116efe:	697b      	ldr	r3, [r7, #20]
 8116f00:	68db      	ldr	r3, [r3, #12]
 8116f02:	617b      	str	r3, [r7, #20]
 8116f04:	697b      	ldr	r3, [r7, #20]
 8116f06:	2b00      	cmp	r3, #0
 8116f08:	d1d1      	bne.n	8116eae <tcp_input+0x40a>
 8116f0a:	e000      	b.n	8116f0e <tcp_input+0x46a>
            break;
 8116f0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8116f0e:	697b      	ldr	r3, [r7, #20]
 8116f10:	2b00      	cmp	r3, #0
 8116f12:	d029      	beq.n	8116f68 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8116f14:	69bb      	ldr	r3, [r7, #24]
 8116f16:	2b00      	cmp	r3, #0
 8116f18:	d00a      	beq.n	8116f30 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8116f1a:	697b      	ldr	r3, [r7, #20]
 8116f1c:	68da      	ldr	r2, [r3, #12]
 8116f1e:	69bb      	ldr	r3, [r7, #24]
 8116f20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8116f22:	4b10      	ldr	r3, [pc, #64]	@ (8116f64 <tcp_input+0x4c0>)
 8116f24:	681a      	ldr	r2, [r3, #0]
 8116f26:	697b      	ldr	r3, [r7, #20]
 8116f28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8116f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8116f64 <tcp_input+0x4c0>)
 8116f2c:	697b      	ldr	r3, [r7, #20]
 8116f2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8116f30:	6978      	ldr	r0, [r7, #20]
 8116f32:	f000 fa03 	bl	811733c <tcp_listen_input>
      }
      pbuf_free(p);
 8116f36:	6878      	ldr	r0, [r7, #4]
 8116f38:	f7fd fcae 	bl	8114898 <pbuf_free>
      return;
 8116f3c:	e1a8      	b.n	8117290 <tcp_input+0x7ec>
 8116f3e:	bf00      	nop
 8116f40:	10011d3c 	.word	0x10011d3c
 8116f44:	1000b244 	.word	0x1000b244
 8116f48:	0811e858 	.word	0x0811e858
 8116f4c:	0811e9c4 	.word	0x0811e9c4
 8116f50:	0811e8e4 	.word	0x0811e8e4
 8116f54:	10011d20 	.word	0x10011d20
 8116f58:	0811e9f0 	.word	0x0811e9f0
 8116f5c:	10011d24 	.word	0x10011d24
 8116f60:	0811ea1c 	.word	0x0811ea1c
 8116f64:	10011d1c 	.word	0x10011d1c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8116f68:	69fb      	ldr	r3, [r7, #28]
 8116f6a:	2b00      	cmp	r3, #0
 8116f6c:	f000 8158 	beq.w	8117220 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8116f70:	4b95      	ldr	r3, [pc, #596]	@ (81171c8 <tcp_input+0x724>)
 8116f72:	2200      	movs	r2, #0
 8116f74:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8116f76:	687b      	ldr	r3, [r7, #4]
 8116f78:	891a      	ldrh	r2, [r3, #8]
 8116f7a:	4b93      	ldr	r3, [pc, #588]	@ (81171c8 <tcp_input+0x724>)
 8116f7c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8116f7e:	4a92      	ldr	r2, [pc, #584]	@ (81171c8 <tcp_input+0x724>)
 8116f80:	687b      	ldr	r3, [r7, #4]
 8116f82:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8116f84:	4b91      	ldr	r3, [pc, #580]	@ (81171cc <tcp_input+0x728>)
 8116f86:	681b      	ldr	r3, [r3, #0]
 8116f88:	4a8f      	ldr	r2, [pc, #572]	@ (81171c8 <tcp_input+0x724>)
 8116f8a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8116f8c:	4b90      	ldr	r3, [pc, #576]	@ (81171d0 <tcp_input+0x72c>)
 8116f8e:	2200      	movs	r2, #0
 8116f90:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8116f92:	4b90      	ldr	r3, [pc, #576]	@ (81171d4 <tcp_input+0x730>)
 8116f94:	2200      	movs	r2, #0
 8116f96:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8116f98:	4b8f      	ldr	r3, [pc, #572]	@ (81171d8 <tcp_input+0x734>)
 8116f9a:	2200      	movs	r2, #0
 8116f9c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8116f9e:	4b8f      	ldr	r3, [pc, #572]	@ (81171dc <tcp_input+0x738>)
 8116fa0:	781b      	ldrb	r3, [r3, #0]
 8116fa2:	f003 0308 	and.w	r3, r3, #8
 8116fa6:	2b00      	cmp	r3, #0
 8116fa8:	d006      	beq.n	8116fb8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8116faa:	687b      	ldr	r3, [r7, #4]
 8116fac:	7b5b      	ldrb	r3, [r3, #13]
 8116fae:	f043 0301 	orr.w	r3, r3, #1
 8116fb2:	b2da      	uxtb	r2, r3
 8116fb4:	687b      	ldr	r3, [r7, #4]
 8116fb6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8116fb8:	69fb      	ldr	r3, [r7, #28]
 8116fba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8116fbc:	2b00      	cmp	r3, #0
 8116fbe:	d017      	beq.n	8116ff0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8116fc0:	69f8      	ldr	r0, [r7, #28]
 8116fc2:	f7ff f8ab 	bl	811611c <tcp_process_refused_data>
 8116fc6:	4603      	mov	r3, r0
 8116fc8:	f113 0f0d 	cmn.w	r3, #13
 8116fcc:	d007      	beq.n	8116fde <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8116fce:	69fb      	ldr	r3, [r7, #28]
 8116fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8116fd2:	2b00      	cmp	r3, #0
 8116fd4:	d00c      	beq.n	8116ff0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8116fd6:	4b82      	ldr	r3, [pc, #520]	@ (81171e0 <tcp_input+0x73c>)
 8116fd8:	881b      	ldrh	r3, [r3, #0]
 8116fda:	2b00      	cmp	r3, #0
 8116fdc:	d008      	beq.n	8116ff0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8116fde:	69fb      	ldr	r3, [r7, #28]
 8116fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8116fe2:	2b00      	cmp	r3, #0
 8116fe4:	f040 80e4 	bne.w	81171b0 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8116fe8:	69f8      	ldr	r0, [r7, #28]
 8116fea:	f003 fe01 	bl	811abf0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8116fee:	e0df      	b.n	81171b0 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8116ff0:	4a7c      	ldr	r2, [pc, #496]	@ (81171e4 <tcp_input+0x740>)
 8116ff2:	69fb      	ldr	r3, [r7, #28]
 8116ff4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8116ff6:	69f8      	ldr	r0, [r7, #28]
 8116ff8:	f000 fb18 	bl	811762c <tcp_process>
 8116ffc:	4603      	mov	r3, r0
 8116ffe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8117000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8117004:	f113 0f0d 	cmn.w	r3, #13
 8117008:	f000 80d4 	beq.w	81171b4 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 811700c:	4b71      	ldr	r3, [pc, #452]	@ (81171d4 <tcp_input+0x730>)
 811700e:	781b      	ldrb	r3, [r3, #0]
 8117010:	f003 0308 	and.w	r3, r3, #8
 8117014:	2b00      	cmp	r3, #0
 8117016:	d015      	beq.n	8117044 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8117018:	69fb      	ldr	r3, [r7, #28]
 811701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811701e:	2b00      	cmp	r3, #0
 8117020:	d008      	beq.n	8117034 <tcp_input+0x590>
 8117022:	69fb      	ldr	r3, [r7, #28]
 8117024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8117028:	69fa      	ldr	r2, [r7, #28]
 811702a:	6912      	ldr	r2, [r2, #16]
 811702c:	f06f 010d 	mvn.w	r1, #13
 8117030:	4610      	mov	r0, r2
 8117032:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8117034:	69f9      	ldr	r1, [r7, #28]
 8117036:	486c      	ldr	r0, [pc, #432]	@ (81171e8 <tcp_input+0x744>)
 8117038:	f7ff fbbc 	bl	81167b4 <tcp_pcb_remove>
        tcp_free(pcb);
 811703c:	69f8      	ldr	r0, [r7, #28]
 811703e:	f7fd ffc9 	bl	8114fd4 <tcp_free>
 8117042:	e0da      	b.n	81171fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8117044:	2300      	movs	r3, #0
 8117046:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8117048:	4b63      	ldr	r3, [pc, #396]	@ (81171d8 <tcp_input+0x734>)
 811704a:	881b      	ldrh	r3, [r3, #0]
 811704c:	2b00      	cmp	r3, #0
 811704e:	d01d      	beq.n	811708c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8117050:	4b61      	ldr	r3, [pc, #388]	@ (81171d8 <tcp_input+0x734>)
 8117052:	881b      	ldrh	r3, [r3, #0]
 8117054:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8117056:	69fb      	ldr	r3, [r7, #28]
 8117058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811705c:	2b00      	cmp	r3, #0
 811705e:	d00a      	beq.n	8117076 <tcp_input+0x5d2>
 8117060:	69fb      	ldr	r3, [r7, #28]
 8117062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8117066:	69fa      	ldr	r2, [r7, #28]
 8117068:	6910      	ldr	r0, [r2, #16]
 811706a:	89fa      	ldrh	r2, [r7, #14]
 811706c:	69f9      	ldr	r1, [r7, #28]
 811706e:	4798      	blx	r3
 8117070:	4603      	mov	r3, r0
 8117072:	74fb      	strb	r3, [r7, #19]
 8117074:	e001      	b.n	811707a <tcp_input+0x5d6>
 8117076:	2300      	movs	r3, #0
 8117078:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 811707a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811707e:	f113 0f0d 	cmn.w	r3, #13
 8117082:	f000 8099 	beq.w	81171b8 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8117086:	4b54      	ldr	r3, [pc, #336]	@ (81171d8 <tcp_input+0x734>)
 8117088:	2200      	movs	r2, #0
 811708a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 811708c:	69f8      	ldr	r0, [r7, #28]
 811708e:	f000 f915 	bl	81172bc <tcp_input_delayed_close>
 8117092:	4603      	mov	r3, r0
 8117094:	2b00      	cmp	r3, #0
 8117096:	f040 8091 	bne.w	81171bc <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 811709a:	4b4d      	ldr	r3, [pc, #308]	@ (81171d0 <tcp_input+0x72c>)
 811709c:	681b      	ldr	r3, [r3, #0]
 811709e:	2b00      	cmp	r3, #0
 81170a0:	d041      	beq.n	8117126 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 81170a2:	69fb      	ldr	r3, [r7, #28]
 81170a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81170a6:	2b00      	cmp	r3, #0
 81170a8:	d006      	beq.n	81170b8 <tcp_input+0x614>
 81170aa:	4b50      	ldr	r3, [pc, #320]	@ (81171ec <tcp_input+0x748>)
 81170ac:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 81170b0:	494f      	ldr	r1, [pc, #316]	@ (81171f0 <tcp_input+0x74c>)
 81170b2:	4850      	ldr	r0, [pc, #320]	@ (81171f4 <tcp_input+0x750>)
 81170b4:	f004 feb2 	bl	811be1c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 81170b8:	69fb      	ldr	r3, [r7, #28]
 81170ba:	8b5b      	ldrh	r3, [r3, #26]
 81170bc:	f003 0310 	and.w	r3, r3, #16
 81170c0:	2b00      	cmp	r3, #0
 81170c2:	d008      	beq.n	81170d6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 81170c4:	4b42      	ldr	r3, [pc, #264]	@ (81171d0 <tcp_input+0x72c>)
 81170c6:	681b      	ldr	r3, [r3, #0]
 81170c8:	4618      	mov	r0, r3
 81170ca:	f7fd fbe5 	bl	8114898 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 81170ce:	69f8      	ldr	r0, [r7, #28]
 81170d0:	f7fe fa68 	bl	81155a4 <tcp_abort>
            goto aborted;
 81170d4:	e091      	b.n	81171fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 81170d6:	69fb      	ldr	r3, [r7, #28]
 81170d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81170dc:	2b00      	cmp	r3, #0
 81170de:	d00c      	beq.n	81170fa <tcp_input+0x656>
 81170e0:	69fb      	ldr	r3, [r7, #28]
 81170e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 81170e6:	69fb      	ldr	r3, [r7, #28]
 81170e8:	6918      	ldr	r0, [r3, #16]
 81170ea:	4b39      	ldr	r3, [pc, #228]	@ (81171d0 <tcp_input+0x72c>)
 81170ec:	681a      	ldr	r2, [r3, #0]
 81170ee:	2300      	movs	r3, #0
 81170f0:	69f9      	ldr	r1, [r7, #28]
 81170f2:	47a0      	blx	r4
 81170f4:	4603      	mov	r3, r0
 81170f6:	74fb      	strb	r3, [r7, #19]
 81170f8:	e008      	b.n	811710c <tcp_input+0x668>
 81170fa:	4b35      	ldr	r3, [pc, #212]	@ (81171d0 <tcp_input+0x72c>)
 81170fc:	681a      	ldr	r2, [r3, #0]
 81170fe:	2300      	movs	r3, #0
 8117100:	69f9      	ldr	r1, [r7, #28]
 8117102:	2000      	movs	r0, #0
 8117104:	f7ff f8e2 	bl	81162cc <tcp_recv_null>
 8117108:	4603      	mov	r3, r0
 811710a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 811710c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8117110:	f113 0f0d 	cmn.w	r3, #13
 8117114:	d054      	beq.n	81171c0 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8117116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811711a:	2b00      	cmp	r3, #0
 811711c:	d003      	beq.n	8117126 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 811711e:	4b2c      	ldr	r3, [pc, #176]	@ (81171d0 <tcp_input+0x72c>)
 8117120:	681a      	ldr	r2, [r3, #0]
 8117122:	69fb      	ldr	r3, [r7, #28]
 8117124:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8117126:	4b2b      	ldr	r3, [pc, #172]	@ (81171d4 <tcp_input+0x730>)
 8117128:	781b      	ldrb	r3, [r3, #0]
 811712a:	f003 0320 	and.w	r3, r3, #32
 811712e:	2b00      	cmp	r3, #0
 8117130:	d031      	beq.n	8117196 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8117132:	69fb      	ldr	r3, [r7, #28]
 8117134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8117136:	2b00      	cmp	r3, #0
 8117138:	d009      	beq.n	811714e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 811713a:	69fb      	ldr	r3, [r7, #28]
 811713c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811713e:	7b5a      	ldrb	r2, [r3, #13]
 8117140:	69fb      	ldr	r3, [r7, #28]
 8117142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8117144:	f042 0220 	orr.w	r2, r2, #32
 8117148:	b2d2      	uxtb	r2, r2
 811714a:	735a      	strb	r2, [r3, #13]
 811714c:	e023      	b.n	8117196 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811714e:	69fb      	ldr	r3, [r7, #28]
 8117150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8117152:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8117156:	4293      	cmp	r3, r2
 8117158:	d005      	beq.n	8117166 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 811715a:	69fb      	ldr	r3, [r7, #28]
 811715c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811715e:	3301      	adds	r3, #1
 8117160:	b29a      	uxth	r2, r3
 8117162:	69fb      	ldr	r3, [r7, #28]
 8117164:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8117166:	69fb      	ldr	r3, [r7, #28]
 8117168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811716c:	2b00      	cmp	r3, #0
 811716e:	d00b      	beq.n	8117188 <tcp_input+0x6e4>
 8117170:	69fb      	ldr	r3, [r7, #28]
 8117172:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8117176:	69fb      	ldr	r3, [r7, #28]
 8117178:	6918      	ldr	r0, [r3, #16]
 811717a:	2300      	movs	r3, #0
 811717c:	2200      	movs	r2, #0
 811717e:	69f9      	ldr	r1, [r7, #28]
 8117180:	47a0      	blx	r4
 8117182:	4603      	mov	r3, r0
 8117184:	74fb      	strb	r3, [r7, #19]
 8117186:	e001      	b.n	811718c <tcp_input+0x6e8>
 8117188:	2300      	movs	r3, #0
 811718a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 811718c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8117190:	f113 0f0d 	cmn.w	r3, #13
 8117194:	d016      	beq.n	81171c4 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8117196:	4b13      	ldr	r3, [pc, #76]	@ (81171e4 <tcp_input+0x740>)
 8117198:	2200      	movs	r2, #0
 811719a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 811719c:	69f8      	ldr	r0, [r7, #28]
 811719e:	f000 f88d 	bl	81172bc <tcp_input_delayed_close>
 81171a2:	4603      	mov	r3, r0
 81171a4:	2b00      	cmp	r3, #0
 81171a6:	d127      	bne.n	81171f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 81171a8:	69f8      	ldr	r0, [r7, #28]
 81171aa:	f002 ff1b 	bl	8119fe4 <tcp_output>
 81171ae:	e024      	b.n	81171fa <tcp_input+0x756>
        goto aborted;
 81171b0:	bf00      	nop
 81171b2:	e022      	b.n	81171fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 81171b4:	bf00      	nop
 81171b6:	e020      	b.n	81171fa <tcp_input+0x756>
              goto aborted;
 81171b8:	bf00      	nop
 81171ba:	e01e      	b.n	81171fa <tcp_input+0x756>
          goto aborted;
 81171bc:	bf00      	nop
 81171be:	e01c      	b.n	81171fa <tcp_input+0x756>
            goto aborted;
 81171c0:	bf00      	nop
 81171c2:	e01a      	b.n	81171fa <tcp_input+0x756>
              goto aborted;
 81171c4:	bf00      	nop
 81171c6:	e018      	b.n	81171fa <tcp_input+0x756>
 81171c8:	10011d2c 	.word	0x10011d2c
 81171cc:	10011d3c 	.word	0x10011d3c
 81171d0:	10011d5c 	.word	0x10011d5c
 81171d4:	10011d59 	.word	0x10011d59
 81171d8:	10011d54 	.word	0x10011d54
 81171dc:	10011d58 	.word	0x10011d58
 81171e0:	10011d56 	.word	0x10011d56
 81171e4:	10011d60 	.word	0x10011d60
 81171e8:	10011d20 	.word	0x10011d20
 81171ec:	0811e858 	.word	0x0811e858
 81171f0:	0811ea4c 	.word	0x0811ea4c
 81171f4:	0811e8e4 	.word	0x0811e8e4
          goto aborted;
 81171f8:	bf00      	nop
    tcp_input_pcb = NULL;
 81171fa:	4b27      	ldr	r3, [pc, #156]	@ (8117298 <tcp_input+0x7f4>)
 81171fc:	2200      	movs	r2, #0
 81171fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8117200:	4b26      	ldr	r3, [pc, #152]	@ (811729c <tcp_input+0x7f8>)
 8117202:	2200      	movs	r2, #0
 8117204:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8117206:	4b26      	ldr	r3, [pc, #152]	@ (81172a0 <tcp_input+0x7fc>)
 8117208:	685b      	ldr	r3, [r3, #4]
 811720a:	2b00      	cmp	r3, #0
 811720c:	d03f      	beq.n	811728e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 811720e:	4b24      	ldr	r3, [pc, #144]	@ (81172a0 <tcp_input+0x7fc>)
 8117210:	685b      	ldr	r3, [r3, #4]
 8117212:	4618      	mov	r0, r3
 8117214:	f7fd fb40 	bl	8114898 <pbuf_free>
      inseg.p = NULL;
 8117218:	4b21      	ldr	r3, [pc, #132]	@ (81172a0 <tcp_input+0x7fc>)
 811721a:	2200      	movs	r2, #0
 811721c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 811721e:	e036      	b.n	811728e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8117220:	4b20      	ldr	r3, [pc, #128]	@ (81172a4 <tcp_input+0x800>)
 8117222:	681b      	ldr	r3, [r3, #0]
 8117224:	899b      	ldrh	r3, [r3, #12]
 8117226:	b29b      	uxth	r3, r3
 8117228:	4618      	mov	r0, r3
 811722a:	f7f9 fbaf 	bl	811098c <lwip_htons>
 811722e:	4603      	mov	r3, r0
 8117230:	b2db      	uxtb	r3, r3
 8117232:	f003 0304 	and.w	r3, r3, #4
 8117236:	2b00      	cmp	r3, #0
 8117238:	d118      	bne.n	811726c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811723a:	4b1b      	ldr	r3, [pc, #108]	@ (81172a8 <tcp_input+0x804>)
 811723c:	6819      	ldr	r1, [r3, #0]
 811723e:	4b1b      	ldr	r3, [pc, #108]	@ (81172ac <tcp_input+0x808>)
 8117240:	881b      	ldrh	r3, [r3, #0]
 8117242:	461a      	mov	r2, r3
 8117244:	4b1a      	ldr	r3, [pc, #104]	@ (81172b0 <tcp_input+0x80c>)
 8117246:	681b      	ldr	r3, [r3, #0]
 8117248:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811724a:	4b16      	ldr	r3, [pc, #88]	@ (81172a4 <tcp_input+0x800>)
 811724c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811724e:	885b      	ldrh	r3, [r3, #2]
 8117250:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8117252:	4a14      	ldr	r2, [pc, #80]	@ (81172a4 <tcp_input+0x800>)
 8117254:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117256:	8812      	ldrh	r2, [r2, #0]
 8117258:	b292      	uxth	r2, r2
 811725a:	9202      	str	r2, [sp, #8]
 811725c:	9301      	str	r3, [sp, #4]
 811725e:	4b15      	ldr	r3, [pc, #84]	@ (81172b4 <tcp_input+0x810>)
 8117260:	9300      	str	r3, [sp, #0]
 8117262:	4b15      	ldr	r3, [pc, #84]	@ (81172b8 <tcp_input+0x814>)
 8117264:	4602      	mov	r2, r0
 8117266:	2000      	movs	r0, #0
 8117268:	f003 fc70 	bl	811ab4c <tcp_rst>
    pbuf_free(p);
 811726c:	6878      	ldr	r0, [r7, #4]
 811726e:	f7fd fb13 	bl	8114898 <pbuf_free>
  return;
 8117272:	e00c      	b.n	811728e <tcp_input+0x7ea>
    goto dropped;
 8117274:	bf00      	nop
 8117276:	e006      	b.n	8117286 <tcp_input+0x7e2>
    goto dropped;
 8117278:	bf00      	nop
 811727a:	e004      	b.n	8117286 <tcp_input+0x7e2>
    goto dropped;
 811727c:	bf00      	nop
 811727e:	e002      	b.n	8117286 <tcp_input+0x7e2>
      goto dropped;
 8117280:	bf00      	nop
 8117282:	e000      	b.n	8117286 <tcp_input+0x7e2>
      goto dropped;
 8117284:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8117286:	6878      	ldr	r0, [r7, #4]
 8117288:	f7fd fb06 	bl	8114898 <pbuf_free>
 811728c:	e000      	b.n	8117290 <tcp_input+0x7ec>
  return;
 811728e:	bf00      	nop
}
 8117290:	3724      	adds	r7, #36	@ 0x24
 8117292:	46bd      	mov	sp, r7
 8117294:	bd90      	pop	{r4, r7, pc}
 8117296:	bf00      	nop
 8117298:	10011d60 	.word	0x10011d60
 811729c:	10011d5c 	.word	0x10011d5c
 81172a0:	10011d2c 	.word	0x10011d2c
 81172a4:	10011d3c 	.word	0x10011d3c
 81172a8:	10011d50 	.word	0x10011d50
 81172ac:	10011d56 	.word	0x10011d56
 81172b0:	10011d4c 	.word	0x10011d4c
 81172b4:	1000b254 	.word	0x1000b254
 81172b8:	1000b258 	.word	0x1000b258

081172bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 81172bc:	b580      	push	{r7, lr}
 81172be:	b082      	sub	sp, #8
 81172c0:	af00      	add	r7, sp, #0
 81172c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 81172c4:	687b      	ldr	r3, [r7, #4]
 81172c6:	2b00      	cmp	r3, #0
 81172c8:	d106      	bne.n	81172d8 <tcp_input_delayed_close+0x1c>
 81172ca:	4b17      	ldr	r3, [pc, #92]	@ (8117328 <tcp_input_delayed_close+0x6c>)
 81172cc:	f240 225a 	movw	r2, #602	@ 0x25a
 81172d0:	4916      	ldr	r1, [pc, #88]	@ (811732c <tcp_input_delayed_close+0x70>)
 81172d2:	4817      	ldr	r0, [pc, #92]	@ (8117330 <tcp_input_delayed_close+0x74>)
 81172d4:	f004 fda2 	bl	811be1c <iprintf>

  if (recv_flags & TF_CLOSED) {
 81172d8:	4b16      	ldr	r3, [pc, #88]	@ (8117334 <tcp_input_delayed_close+0x78>)
 81172da:	781b      	ldrb	r3, [r3, #0]
 81172dc:	f003 0310 	and.w	r3, r3, #16
 81172e0:	2b00      	cmp	r3, #0
 81172e2:	d01c      	beq.n	811731e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 81172e4:	687b      	ldr	r3, [r7, #4]
 81172e6:	8b5b      	ldrh	r3, [r3, #26]
 81172e8:	f003 0310 	and.w	r3, r3, #16
 81172ec:	2b00      	cmp	r3, #0
 81172ee:	d10d      	bne.n	811730c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 81172f0:	687b      	ldr	r3, [r7, #4]
 81172f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81172f6:	2b00      	cmp	r3, #0
 81172f8:	d008      	beq.n	811730c <tcp_input_delayed_close+0x50>
 81172fa:	687b      	ldr	r3, [r7, #4]
 81172fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8117300:	687a      	ldr	r2, [r7, #4]
 8117302:	6912      	ldr	r2, [r2, #16]
 8117304:	f06f 010e 	mvn.w	r1, #14
 8117308:	4610      	mov	r0, r2
 811730a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 811730c:	6879      	ldr	r1, [r7, #4]
 811730e:	480a      	ldr	r0, [pc, #40]	@ (8117338 <tcp_input_delayed_close+0x7c>)
 8117310:	f7ff fa50 	bl	81167b4 <tcp_pcb_remove>
    tcp_free(pcb);
 8117314:	6878      	ldr	r0, [r7, #4]
 8117316:	f7fd fe5d 	bl	8114fd4 <tcp_free>
    return 1;
 811731a:	2301      	movs	r3, #1
 811731c:	e000      	b.n	8117320 <tcp_input_delayed_close+0x64>
  }
  return 0;
 811731e:	2300      	movs	r3, #0
}
 8117320:	4618      	mov	r0, r3
 8117322:	3708      	adds	r7, #8
 8117324:	46bd      	mov	sp, r7
 8117326:	bd80      	pop	{r7, pc}
 8117328:	0811e858 	.word	0x0811e858
 811732c:	0811ea68 	.word	0x0811ea68
 8117330:	0811e8e4 	.word	0x0811e8e4
 8117334:	10011d59 	.word	0x10011d59
 8117338:	10011d20 	.word	0x10011d20

0811733c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 811733c:	b590      	push	{r4, r7, lr}
 811733e:	b08b      	sub	sp, #44	@ 0x2c
 8117340:	af04      	add	r7, sp, #16
 8117342:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8117344:	4b6f      	ldr	r3, [pc, #444]	@ (8117504 <tcp_listen_input+0x1c8>)
 8117346:	781b      	ldrb	r3, [r3, #0]
 8117348:	f003 0304 	and.w	r3, r3, #4
 811734c:	2b00      	cmp	r3, #0
 811734e:	f040 80d2 	bne.w	81174f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8117352:	687b      	ldr	r3, [r7, #4]
 8117354:	2b00      	cmp	r3, #0
 8117356:	d106      	bne.n	8117366 <tcp_listen_input+0x2a>
 8117358:	4b6b      	ldr	r3, [pc, #428]	@ (8117508 <tcp_listen_input+0x1cc>)
 811735a:	f240 2281 	movw	r2, #641	@ 0x281
 811735e:	496b      	ldr	r1, [pc, #428]	@ (811750c <tcp_listen_input+0x1d0>)
 8117360:	486b      	ldr	r0, [pc, #428]	@ (8117510 <tcp_listen_input+0x1d4>)
 8117362:	f004 fd5b 	bl	811be1c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8117366:	4b67      	ldr	r3, [pc, #412]	@ (8117504 <tcp_listen_input+0x1c8>)
 8117368:	781b      	ldrb	r3, [r3, #0]
 811736a:	f003 0310 	and.w	r3, r3, #16
 811736e:	2b00      	cmp	r3, #0
 8117370:	d019      	beq.n	81173a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117372:	4b68      	ldr	r3, [pc, #416]	@ (8117514 <tcp_listen_input+0x1d8>)
 8117374:	6819      	ldr	r1, [r3, #0]
 8117376:	4b68      	ldr	r3, [pc, #416]	@ (8117518 <tcp_listen_input+0x1dc>)
 8117378:	881b      	ldrh	r3, [r3, #0]
 811737a:	461a      	mov	r2, r3
 811737c:	4b67      	ldr	r3, [pc, #412]	@ (811751c <tcp_listen_input+0x1e0>)
 811737e:	681b      	ldr	r3, [r3, #0]
 8117380:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8117382:	4b67      	ldr	r3, [pc, #412]	@ (8117520 <tcp_listen_input+0x1e4>)
 8117384:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117386:	885b      	ldrh	r3, [r3, #2]
 8117388:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811738a:	4a65      	ldr	r2, [pc, #404]	@ (8117520 <tcp_listen_input+0x1e4>)
 811738c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811738e:	8812      	ldrh	r2, [r2, #0]
 8117390:	b292      	uxth	r2, r2
 8117392:	9202      	str	r2, [sp, #8]
 8117394:	9301      	str	r3, [sp, #4]
 8117396:	4b63      	ldr	r3, [pc, #396]	@ (8117524 <tcp_listen_input+0x1e8>)
 8117398:	9300      	str	r3, [sp, #0]
 811739a:	4b63      	ldr	r3, [pc, #396]	@ (8117528 <tcp_listen_input+0x1ec>)
 811739c:	4602      	mov	r2, r0
 811739e:	6878      	ldr	r0, [r7, #4]
 81173a0:	f003 fbd4 	bl	811ab4c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 81173a4:	e0a9      	b.n	81174fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 81173a6:	4b57      	ldr	r3, [pc, #348]	@ (8117504 <tcp_listen_input+0x1c8>)
 81173a8:	781b      	ldrb	r3, [r3, #0]
 81173aa:	f003 0302 	and.w	r3, r3, #2
 81173ae:	2b00      	cmp	r3, #0
 81173b0:	f000 80a3 	beq.w	81174fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 81173b4:	687b      	ldr	r3, [r7, #4]
 81173b6:	7d5b      	ldrb	r3, [r3, #21]
 81173b8:	4618      	mov	r0, r3
 81173ba:	f7ff f8ab 	bl	8116514 <tcp_alloc>
 81173be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 81173c0:	697b      	ldr	r3, [r7, #20]
 81173c2:	2b00      	cmp	r3, #0
 81173c4:	d111      	bne.n	81173ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 81173c6:	687b      	ldr	r3, [r7, #4]
 81173c8:	699b      	ldr	r3, [r3, #24]
 81173ca:	2b00      	cmp	r3, #0
 81173cc:	d00a      	beq.n	81173e4 <tcp_listen_input+0xa8>
 81173ce:	687b      	ldr	r3, [r7, #4]
 81173d0:	699b      	ldr	r3, [r3, #24]
 81173d2:	687a      	ldr	r2, [r7, #4]
 81173d4:	6910      	ldr	r0, [r2, #16]
 81173d6:	f04f 32ff 	mov.w	r2, #4294967295
 81173da:	2100      	movs	r1, #0
 81173dc:	4798      	blx	r3
 81173de:	4603      	mov	r3, r0
 81173e0:	73bb      	strb	r3, [r7, #14]
      return;
 81173e2:	e08b      	b.n	81174fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 81173e4:	23f0      	movs	r3, #240	@ 0xf0
 81173e6:	73bb      	strb	r3, [r7, #14]
      return;
 81173e8:	e088      	b.n	81174fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 81173ea:	4b50      	ldr	r3, [pc, #320]	@ (811752c <tcp_listen_input+0x1f0>)
 81173ec:	695a      	ldr	r2, [r3, #20]
 81173ee:	697b      	ldr	r3, [r7, #20]
 81173f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 81173f2:	4b4e      	ldr	r3, [pc, #312]	@ (811752c <tcp_listen_input+0x1f0>)
 81173f4:	691a      	ldr	r2, [r3, #16]
 81173f6:	697b      	ldr	r3, [r7, #20]
 81173f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 81173fa:	687b      	ldr	r3, [r7, #4]
 81173fc:	8ada      	ldrh	r2, [r3, #22]
 81173fe:	697b      	ldr	r3, [r7, #20]
 8117400:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8117402:	4b47      	ldr	r3, [pc, #284]	@ (8117520 <tcp_listen_input+0x1e4>)
 8117404:	681b      	ldr	r3, [r3, #0]
 8117406:	881b      	ldrh	r3, [r3, #0]
 8117408:	b29a      	uxth	r2, r3
 811740a:	697b      	ldr	r3, [r7, #20]
 811740c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 811740e:	697b      	ldr	r3, [r7, #20]
 8117410:	2203      	movs	r2, #3
 8117412:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8117414:	4b41      	ldr	r3, [pc, #260]	@ (811751c <tcp_listen_input+0x1e0>)
 8117416:	681b      	ldr	r3, [r3, #0]
 8117418:	1c5a      	adds	r2, r3, #1
 811741a:	697b      	ldr	r3, [r7, #20]
 811741c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 811741e:	697b      	ldr	r3, [r7, #20]
 8117420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8117422:	697b      	ldr	r3, [r7, #20]
 8117424:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8117426:	6978      	ldr	r0, [r7, #20]
 8117428:	f7ff fa58 	bl	81168dc <tcp_next_iss>
 811742c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 811742e:	697b      	ldr	r3, [r7, #20]
 8117430:	693a      	ldr	r2, [r7, #16]
 8117432:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8117434:	697b      	ldr	r3, [r7, #20]
 8117436:	693a      	ldr	r2, [r7, #16]
 8117438:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 811743a:	697b      	ldr	r3, [r7, #20]
 811743c:	693a      	ldr	r2, [r7, #16]
 811743e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8117440:	697b      	ldr	r3, [r7, #20]
 8117442:	693a      	ldr	r2, [r7, #16]
 8117444:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8117446:	4b35      	ldr	r3, [pc, #212]	@ (811751c <tcp_listen_input+0x1e0>)
 8117448:	681b      	ldr	r3, [r3, #0]
 811744a:	1e5a      	subs	r2, r3, #1
 811744c:	697b      	ldr	r3, [r7, #20]
 811744e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8117450:	687b      	ldr	r3, [r7, #4]
 8117452:	691a      	ldr	r2, [r3, #16]
 8117454:	697b      	ldr	r3, [r7, #20]
 8117456:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8117458:	697b      	ldr	r3, [r7, #20]
 811745a:	687a      	ldr	r2, [r7, #4]
 811745c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 811745e:	687b      	ldr	r3, [r7, #4]
 8117460:	7a5b      	ldrb	r3, [r3, #9]
 8117462:	f003 030c 	and.w	r3, r3, #12
 8117466:	b2da      	uxtb	r2, r3
 8117468:	697b      	ldr	r3, [r7, #20]
 811746a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 811746c:	687b      	ldr	r3, [r7, #4]
 811746e:	7a1a      	ldrb	r2, [r3, #8]
 8117470:	697b      	ldr	r3, [r7, #20]
 8117472:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8117474:	4b2e      	ldr	r3, [pc, #184]	@ (8117530 <tcp_listen_input+0x1f4>)
 8117476:	681a      	ldr	r2, [r3, #0]
 8117478:	697b      	ldr	r3, [r7, #20]
 811747a:	60da      	str	r2, [r3, #12]
 811747c:	4a2c      	ldr	r2, [pc, #176]	@ (8117530 <tcp_listen_input+0x1f4>)
 811747e:	697b      	ldr	r3, [r7, #20]
 8117480:	6013      	str	r3, [r2, #0]
 8117482:	f003 fec7 	bl	811b214 <tcp_timer_needed>
 8117486:	4b2b      	ldr	r3, [pc, #172]	@ (8117534 <tcp_listen_input+0x1f8>)
 8117488:	2201      	movs	r2, #1
 811748a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 811748c:	6978      	ldr	r0, [r7, #20]
 811748e:	f001 fd8b 	bl	8118fa8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8117492:	4b23      	ldr	r3, [pc, #140]	@ (8117520 <tcp_listen_input+0x1e4>)
 8117494:	681b      	ldr	r3, [r3, #0]
 8117496:	89db      	ldrh	r3, [r3, #14]
 8117498:	b29a      	uxth	r2, r3
 811749a:	697b      	ldr	r3, [r7, #20]
 811749c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 81174a0:	697b      	ldr	r3, [r7, #20]
 81174a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 81174a6:	697b      	ldr	r3, [r7, #20]
 81174a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 81174ac:	697b      	ldr	r3, [r7, #20]
 81174ae:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 81174b0:	697b      	ldr	r3, [r7, #20]
 81174b2:	3304      	adds	r3, #4
 81174b4:	4618      	mov	r0, r3
 81174b6:	f7fa fd41 	bl	8111f3c <ip4_route>
 81174ba:	4601      	mov	r1, r0
 81174bc:	697b      	ldr	r3, [r7, #20]
 81174be:	3304      	adds	r3, #4
 81174c0:	461a      	mov	r2, r3
 81174c2:	4620      	mov	r0, r4
 81174c4:	f7ff fa30 	bl	8116928 <tcp_eff_send_mss_netif>
 81174c8:	4603      	mov	r3, r0
 81174ca:	461a      	mov	r2, r3
 81174cc:	697b      	ldr	r3, [r7, #20]
 81174ce:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 81174d0:	2112      	movs	r1, #18
 81174d2:	6978      	ldr	r0, [r7, #20]
 81174d4:	f002 fc98 	bl	8119e08 <tcp_enqueue_flags>
 81174d8:	4603      	mov	r3, r0
 81174da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 81174dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81174e0:	2b00      	cmp	r3, #0
 81174e2:	d004      	beq.n	81174ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 81174e4:	2100      	movs	r1, #0
 81174e6:	6978      	ldr	r0, [r7, #20]
 81174e8:	f7fd ff9e 	bl	8115428 <tcp_abandon>
      return;
 81174ec:	e006      	b.n	81174fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 81174ee:	6978      	ldr	r0, [r7, #20]
 81174f0:	f002 fd78 	bl	8119fe4 <tcp_output>
  return;
 81174f4:	e001      	b.n	81174fa <tcp_listen_input+0x1be>
    return;
 81174f6:	bf00      	nop
 81174f8:	e000      	b.n	81174fc <tcp_listen_input+0x1c0>
  return;
 81174fa:	bf00      	nop
}
 81174fc:	371c      	adds	r7, #28
 81174fe:	46bd      	mov	sp, r7
 8117500:	bd90      	pop	{r4, r7, pc}
 8117502:	bf00      	nop
 8117504:	10011d58 	.word	0x10011d58
 8117508:	0811e858 	.word	0x0811e858
 811750c:	0811ea90 	.word	0x0811ea90
 8117510:	0811e8e4 	.word	0x0811e8e4
 8117514:	10011d50 	.word	0x10011d50
 8117518:	10011d56 	.word	0x10011d56
 811751c:	10011d4c 	.word	0x10011d4c
 8117520:	10011d3c 	.word	0x10011d3c
 8117524:	1000b254 	.word	0x1000b254
 8117528:	1000b258 	.word	0x1000b258
 811752c:	1000b244 	.word	0x1000b244
 8117530:	10011d20 	.word	0x10011d20
 8117534:	10011d28 	.word	0x10011d28

08117538 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8117538:	b580      	push	{r7, lr}
 811753a:	b086      	sub	sp, #24
 811753c:	af04      	add	r7, sp, #16
 811753e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8117540:	4b2f      	ldr	r3, [pc, #188]	@ (8117600 <tcp_timewait_input+0xc8>)
 8117542:	781b      	ldrb	r3, [r3, #0]
 8117544:	f003 0304 	and.w	r3, r3, #4
 8117548:	2b00      	cmp	r3, #0
 811754a:	d153      	bne.n	81175f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 811754c:	687b      	ldr	r3, [r7, #4]
 811754e:	2b00      	cmp	r3, #0
 8117550:	d106      	bne.n	8117560 <tcp_timewait_input+0x28>
 8117552:	4b2c      	ldr	r3, [pc, #176]	@ (8117604 <tcp_timewait_input+0xcc>)
 8117554:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8117558:	492b      	ldr	r1, [pc, #172]	@ (8117608 <tcp_timewait_input+0xd0>)
 811755a:	482c      	ldr	r0, [pc, #176]	@ (811760c <tcp_timewait_input+0xd4>)
 811755c:	f004 fc5e 	bl	811be1c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8117560:	4b27      	ldr	r3, [pc, #156]	@ (8117600 <tcp_timewait_input+0xc8>)
 8117562:	781b      	ldrb	r3, [r3, #0]
 8117564:	f003 0302 	and.w	r3, r3, #2
 8117568:	2b00      	cmp	r3, #0
 811756a:	d02a      	beq.n	81175c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 811756c:	4b28      	ldr	r3, [pc, #160]	@ (8117610 <tcp_timewait_input+0xd8>)
 811756e:	681a      	ldr	r2, [r3, #0]
 8117570:	687b      	ldr	r3, [r7, #4]
 8117572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8117574:	1ad3      	subs	r3, r2, r3
 8117576:	2b00      	cmp	r3, #0
 8117578:	db2d      	blt.n	81175d6 <tcp_timewait_input+0x9e>
 811757a:	4b25      	ldr	r3, [pc, #148]	@ (8117610 <tcp_timewait_input+0xd8>)
 811757c:	681a      	ldr	r2, [r3, #0]
 811757e:	687b      	ldr	r3, [r7, #4]
 8117580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8117582:	6879      	ldr	r1, [r7, #4]
 8117584:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8117586:	440b      	add	r3, r1
 8117588:	1ad3      	subs	r3, r2, r3
 811758a:	2b00      	cmp	r3, #0
 811758c:	dc23      	bgt.n	81175d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811758e:	4b21      	ldr	r3, [pc, #132]	@ (8117614 <tcp_timewait_input+0xdc>)
 8117590:	6819      	ldr	r1, [r3, #0]
 8117592:	4b21      	ldr	r3, [pc, #132]	@ (8117618 <tcp_timewait_input+0xe0>)
 8117594:	881b      	ldrh	r3, [r3, #0]
 8117596:	461a      	mov	r2, r3
 8117598:	4b1d      	ldr	r3, [pc, #116]	@ (8117610 <tcp_timewait_input+0xd8>)
 811759a:	681b      	ldr	r3, [r3, #0]
 811759c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811759e:	4b1f      	ldr	r3, [pc, #124]	@ (811761c <tcp_timewait_input+0xe4>)
 81175a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81175a2:	885b      	ldrh	r3, [r3, #2]
 81175a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81175a6:	4a1d      	ldr	r2, [pc, #116]	@ (811761c <tcp_timewait_input+0xe4>)
 81175a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81175aa:	8812      	ldrh	r2, [r2, #0]
 81175ac:	b292      	uxth	r2, r2
 81175ae:	9202      	str	r2, [sp, #8]
 81175b0:	9301      	str	r3, [sp, #4]
 81175b2:	4b1b      	ldr	r3, [pc, #108]	@ (8117620 <tcp_timewait_input+0xe8>)
 81175b4:	9300      	str	r3, [sp, #0]
 81175b6:	4b1b      	ldr	r3, [pc, #108]	@ (8117624 <tcp_timewait_input+0xec>)
 81175b8:	4602      	mov	r2, r0
 81175ba:	6878      	ldr	r0, [r7, #4]
 81175bc:	f003 fac6 	bl	811ab4c <tcp_rst>
      return;
 81175c0:	e01b      	b.n	81175fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 81175c2:	4b0f      	ldr	r3, [pc, #60]	@ (8117600 <tcp_timewait_input+0xc8>)
 81175c4:	781b      	ldrb	r3, [r3, #0]
 81175c6:	f003 0301 	and.w	r3, r3, #1
 81175ca:	2b00      	cmp	r3, #0
 81175cc:	d003      	beq.n	81175d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 81175ce:	4b16      	ldr	r3, [pc, #88]	@ (8117628 <tcp_timewait_input+0xf0>)
 81175d0:	681a      	ldr	r2, [r3, #0]
 81175d2:	687b      	ldr	r3, [r7, #4]
 81175d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 81175d6:	4b10      	ldr	r3, [pc, #64]	@ (8117618 <tcp_timewait_input+0xe0>)
 81175d8:	881b      	ldrh	r3, [r3, #0]
 81175da:	2b00      	cmp	r3, #0
 81175dc:	d00c      	beq.n	81175f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 81175de:	687b      	ldr	r3, [r7, #4]
 81175e0:	8b5b      	ldrh	r3, [r3, #26]
 81175e2:	f043 0302 	orr.w	r3, r3, #2
 81175e6:	b29a      	uxth	r2, r3
 81175e8:	687b      	ldr	r3, [r7, #4]
 81175ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 81175ec:	6878      	ldr	r0, [r7, #4]
 81175ee:	f002 fcf9 	bl	8119fe4 <tcp_output>
  }
  return;
 81175f2:	e001      	b.n	81175f8 <tcp_timewait_input+0xc0>
    return;
 81175f4:	bf00      	nop
 81175f6:	e000      	b.n	81175fa <tcp_timewait_input+0xc2>
  return;
 81175f8:	bf00      	nop
}
 81175fa:	3708      	adds	r7, #8
 81175fc:	46bd      	mov	sp, r7
 81175fe:	bd80      	pop	{r7, pc}
 8117600:	10011d58 	.word	0x10011d58
 8117604:	0811e858 	.word	0x0811e858
 8117608:	0811eab0 	.word	0x0811eab0
 811760c:	0811e8e4 	.word	0x0811e8e4
 8117610:	10011d4c 	.word	0x10011d4c
 8117614:	10011d50 	.word	0x10011d50
 8117618:	10011d56 	.word	0x10011d56
 811761c:	10011d3c 	.word	0x10011d3c
 8117620:	1000b254 	.word	0x1000b254
 8117624:	1000b258 	.word	0x1000b258
 8117628:	10011d14 	.word	0x10011d14

0811762c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 811762c:	b590      	push	{r4, r7, lr}
 811762e:	b08d      	sub	sp, #52	@ 0x34
 8117630:	af04      	add	r7, sp, #16
 8117632:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8117634:	2300      	movs	r3, #0
 8117636:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8117638:	2300      	movs	r3, #0
 811763a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 811763c:	687b      	ldr	r3, [r7, #4]
 811763e:	2b00      	cmp	r3, #0
 8117640:	d106      	bne.n	8117650 <tcp_process+0x24>
 8117642:	4b9d      	ldr	r3, [pc, #628]	@ (81178b8 <tcp_process+0x28c>)
 8117644:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8117648:	499c      	ldr	r1, [pc, #624]	@ (81178bc <tcp_process+0x290>)
 811764a:	489d      	ldr	r0, [pc, #628]	@ (81178c0 <tcp_process+0x294>)
 811764c:	f004 fbe6 	bl	811be1c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8117650:	4b9c      	ldr	r3, [pc, #624]	@ (81178c4 <tcp_process+0x298>)
 8117652:	781b      	ldrb	r3, [r3, #0]
 8117654:	f003 0304 	and.w	r3, r3, #4
 8117658:	2b00      	cmp	r3, #0
 811765a:	d04e      	beq.n	81176fa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 811765c:	687b      	ldr	r3, [r7, #4]
 811765e:	7d1b      	ldrb	r3, [r3, #20]
 8117660:	2b02      	cmp	r3, #2
 8117662:	d108      	bne.n	8117676 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8117664:	687b      	ldr	r3, [r7, #4]
 8117666:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8117668:	4b97      	ldr	r3, [pc, #604]	@ (81178c8 <tcp_process+0x29c>)
 811766a:	681b      	ldr	r3, [r3, #0]
 811766c:	429a      	cmp	r2, r3
 811766e:	d123      	bne.n	81176b8 <tcp_process+0x8c>
        acceptable = 1;
 8117670:	2301      	movs	r3, #1
 8117672:	76fb      	strb	r3, [r7, #27]
 8117674:	e020      	b.n	81176b8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8117676:	687b      	ldr	r3, [r7, #4]
 8117678:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811767a:	4b94      	ldr	r3, [pc, #592]	@ (81178cc <tcp_process+0x2a0>)
 811767c:	681b      	ldr	r3, [r3, #0]
 811767e:	429a      	cmp	r2, r3
 8117680:	d102      	bne.n	8117688 <tcp_process+0x5c>
        acceptable = 1;
 8117682:	2301      	movs	r3, #1
 8117684:	76fb      	strb	r3, [r7, #27]
 8117686:	e017      	b.n	81176b8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8117688:	4b90      	ldr	r3, [pc, #576]	@ (81178cc <tcp_process+0x2a0>)
 811768a:	681a      	ldr	r2, [r3, #0]
 811768c:	687b      	ldr	r3, [r7, #4]
 811768e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8117690:	1ad3      	subs	r3, r2, r3
 8117692:	2b00      	cmp	r3, #0
 8117694:	db10      	blt.n	81176b8 <tcp_process+0x8c>
 8117696:	4b8d      	ldr	r3, [pc, #564]	@ (81178cc <tcp_process+0x2a0>)
 8117698:	681a      	ldr	r2, [r3, #0]
 811769a:	687b      	ldr	r3, [r7, #4]
 811769c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811769e:	6879      	ldr	r1, [r7, #4]
 81176a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81176a2:	440b      	add	r3, r1
 81176a4:	1ad3      	subs	r3, r2, r3
 81176a6:	2b00      	cmp	r3, #0
 81176a8:	dc06      	bgt.n	81176b8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 81176aa:	687b      	ldr	r3, [r7, #4]
 81176ac:	8b5b      	ldrh	r3, [r3, #26]
 81176ae:	f043 0302 	orr.w	r3, r3, #2
 81176b2:	b29a      	uxth	r2, r3
 81176b4:	687b      	ldr	r3, [r7, #4]
 81176b6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 81176b8:	7efb      	ldrb	r3, [r7, #27]
 81176ba:	2b00      	cmp	r3, #0
 81176bc:	d01b      	beq.n	81176f6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 81176be:	687b      	ldr	r3, [r7, #4]
 81176c0:	7d1b      	ldrb	r3, [r3, #20]
 81176c2:	2b00      	cmp	r3, #0
 81176c4:	d106      	bne.n	81176d4 <tcp_process+0xa8>
 81176c6:	4b7c      	ldr	r3, [pc, #496]	@ (81178b8 <tcp_process+0x28c>)
 81176c8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 81176cc:	4980      	ldr	r1, [pc, #512]	@ (81178d0 <tcp_process+0x2a4>)
 81176ce:	487c      	ldr	r0, [pc, #496]	@ (81178c0 <tcp_process+0x294>)
 81176d0:	f004 fba4 	bl	811be1c <iprintf>
      recv_flags |= TF_RESET;
 81176d4:	4b7f      	ldr	r3, [pc, #508]	@ (81178d4 <tcp_process+0x2a8>)
 81176d6:	781b      	ldrb	r3, [r3, #0]
 81176d8:	f043 0308 	orr.w	r3, r3, #8
 81176dc:	b2da      	uxtb	r2, r3
 81176de:	4b7d      	ldr	r3, [pc, #500]	@ (81178d4 <tcp_process+0x2a8>)
 81176e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 81176e2:	687b      	ldr	r3, [r7, #4]
 81176e4:	8b5b      	ldrh	r3, [r3, #26]
 81176e6:	f023 0301 	bic.w	r3, r3, #1
 81176ea:	b29a      	uxth	r2, r3
 81176ec:	687b      	ldr	r3, [r7, #4]
 81176ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 81176f0:	f06f 030d 	mvn.w	r3, #13
 81176f4:	e37a      	b.n	8117dec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 81176f6:	2300      	movs	r3, #0
 81176f8:	e378      	b.n	8117dec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 81176fa:	4b72      	ldr	r3, [pc, #456]	@ (81178c4 <tcp_process+0x298>)
 81176fc:	781b      	ldrb	r3, [r3, #0]
 81176fe:	f003 0302 	and.w	r3, r3, #2
 8117702:	2b00      	cmp	r3, #0
 8117704:	d010      	beq.n	8117728 <tcp_process+0xfc>
 8117706:	687b      	ldr	r3, [r7, #4]
 8117708:	7d1b      	ldrb	r3, [r3, #20]
 811770a:	2b02      	cmp	r3, #2
 811770c:	d00c      	beq.n	8117728 <tcp_process+0xfc>
 811770e:	687b      	ldr	r3, [r7, #4]
 8117710:	7d1b      	ldrb	r3, [r3, #20]
 8117712:	2b03      	cmp	r3, #3
 8117714:	d008      	beq.n	8117728 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8117716:	687b      	ldr	r3, [r7, #4]
 8117718:	8b5b      	ldrh	r3, [r3, #26]
 811771a:	f043 0302 	orr.w	r3, r3, #2
 811771e:	b29a      	uxth	r2, r3
 8117720:	687b      	ldr	r3, [r7, #4]
 8117722:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8117724:	2300      	movs	r3, #0
 8117726:	e361      	b.n	8117dec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8117728:	687b      	ldr	r3, [r7, #4]
 811772a:	8b5b      	ldrh	r3, [r3, #26]
 811772c:	f003 0310 	and.w	r3, r3, #16
 8117730:	2b00      	cmp	r3, #0
 8117732:	d103      	bne.n	811773c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8117734:	4b68      	ldr	r3, [pc, #416]	@ (81178d8 <tcp_process+0x2ac>)
 8117736:	681a      	ldr	r2, [r3, #0]
 8117738:	687b      	ldr	r3, [r7, #4]
 811773a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 811773c:	687b      	ldr	r3, [r7, #4]
 811773e:	2200      	movs	r2, #0
 8117740:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8117744:	687b      	ldr	r3, [r7, #4]
 8117746:	2200      	movs	r2, #0
 8117748:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 811774c:	6878      	ldr	r0, [r7, #4]
 811774e:	f001 fc2b 	bl	8118fa8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8117752:	687b      	ldr	r3, [r7, #4]
 8117754:	7d1b      	ldrb	r3, [r3, #20]
 8117756:	3b02      	subs	r3, #2
 8117758:	2b07      	cmp	r3, #7
 811775a:	f200 8337 	bhi.w	8117dcc <tcp_process+0x7a0>
 811775e:	a201      	add	r2, pc, #4	@ (adr r2, 8117764 <tcp_process+0x138>)
 8117760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8117764:	08117785 	.word	0x08117785
 8117768:	081179b5 	.word	0x081179b5
 811776c:	08117b2d 	.word	0x08117b2d
 8117770:	08117b57 	.word	0x08117b57
 8117774:	08117c7b 	.word	0x08117c7b
 8117778:	08117b2d 	.word	0x08117b2d
 811777c:	08117d07 	.word	0x08117d07
 8117780:	08117d97 	.word	0x08117d97
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8117784:	4b4f      	ldr	r3, [pc, #316]	@ (81178c4 <tcp_process+0x298>)
 8117786:	781b      	ldrb	r3, [r3, #0]
 8117788:	f003 0310 	and.w	r3, r3, #16
 811778c:	2b00      	cmp	r3, #0
 811778e:	f000 80e4 	beq.w	811795a <tcp_process+0x32e>
 8117792:	4b4c      	ldr	r3, [pc, #304]	@ (81178c4 <tcp_process+0x298>)
 8117794:	781b      	ldrb	r3, [r3, #0]
 8117796:	f003 0302 	and.w	r3, r3, #2
 811779a:	2b00      	cmp	r3, #0
 811779c:	f000 80dd 	beq.w	811795a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 81177a0:	687b      	ldr	r3, [r7, #4]
 81177a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81177a4:	1c5a      	adds	r2, r3, #1
 81177a6:	4b48      	ldr	r3, [pc, #288]	@ (81178c8 <tcp_process+0x29c>)
 81177a8:	681b      	ldr	r3, [r3, #0]
 81177aa:	429a      	cmp	r2, r3
 81177ac:	f040 80d5 	bne.w	811795a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 81177b0:	4b46      	ldr	r3, [pc, #280]	@ (81178cc <tcp_process+0x2a0>)
 81177b2:	681b      	ldr	r3, [r3, #0]
 81177b4:	1c5a      	adds	r2, r3, #1
 81177b6:	687b      	ldr	r3, [r7, #4]
 81177b8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 81177ba:	687b      	ldr	r3, [r7, #4]
 81177bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81177be:	687b      	ldr	r3, [r7, #4]
 81177c0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 81177c2:	4b41      	ldr	r3, [pc, #260]	@ (81178c8 <tcp_process+0x29c>)
 81177c4:	681a      	ldr	r2, [r3, #0]
 81177c6:	687b      	ldr	r3, [r7, #4]
 81177c8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 81177ca:	4b44      	ldr	r3, [pc, #272]	@ (81178dc <tcp_process+0x2b0>)
 81177cc:	681b      	ldr	r3, [r3, #0]
 81177ce:	89db      	ldrh	r3, [r3, #14]
 81177d0:	b29a      	uxth	r2, r3
 81177d2:	687b      	ldr	r3, [r7, #4]
 81177d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 81177d8:	687b      	ldr	r3, [r7, #4]
 81177da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 81177de:	687b      	ldr	r3, [r7, #4]
 81177e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 81177e4:	4b39      	ldr	r3, [pc, #228]	@ (81178cc <tcp_process+0x2a0>)
 81177e6:	681b      	ldr	r3, [r3, #0]
 81177e8:	1e5a      	subs	r2, r3, #1
 81177ea:	687b      	ldr	r3, [r7, #4]
 81177ec:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 81177ee:	687b      	ldr	r3, [r7, #4]
 81177f0:	2204      	movs	r2, #4
 81177f2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 81177f4:	687b      	ldr	r3, [r7, #4]
 81177f6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 81177f8:	687b      	ldr	r3, [r7, #4]
 81177fa:	3304      	adds	r3, #4
 81177fc:	4618      	mov	r0, r3
 81177fe:	f7fa fb9d 	bl	8111f3c <ip4_route>
 8117802:	4601      	mov	r1, r0
 8117804:	687b      	ldr	r3, [r7, #4]
 8117806:	3304      	adds	r3, #4
 8117808:	461a      	mov	r2, r3
 811780a:	4620      	mov	r0, r4
 811780c:	f7ff f88c 	bl	8116928 <tcp_eff_send_mss_netif>
 8117810:	4603      	mov	r3, r0
 8117812:	461a      	mov	r2, r3
 8117814:	687b      	ldr	r3, [r7, #4]
 8117816:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8117818:	687b      	ldr	r3, [r7, #4]
 811781a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811781c:	009a      	lsls	r2, r3, #2
 811781e:	687b      	ldr	r3, [r7, #4]
 8117820:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117822:	005b      	lsls	r3, r3, #1
 8117824:	f241 111c 	movw	r1, #4380	@ 0x111c
 8117828:	428b      	cmp	r3, r1
 811782a:	bf38      	it	cc
 811782c:	460b      	movcc	r3, r1
 811782e:	429a      	cmp	r2, r3
 8117830:	d204      	bcs.n	811783c <tcp_process+0x210>
 8117832:	687b      	ldr	r3, [r7, #4]
 8117834:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117836:	009b      	lsls	r3, r3, #2
 8117838:	b29b      	uxth	r3, r3
 811783a:	e00d      	b.n	8117858 <tcp_process+0x22c>
 811783c:	687b      	ldr	r3, [r7, #4]
 811783e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117840:	005b      	lsls	r3, r3, #1
 8117842:	f241 121c 	movw	r2, #4380	@ 0x111c
 8117846:	4293      	cmp	r3, r2
 8117848:	d904      	bls.n	8117854 <tcp_process+0x228>
 811784a:	687b      	ldr	r3, [r7, #4]
 811784c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811784e:	005b      	lsls	r3, r3, #1
 8117850:	b29b      	uxth	r3, r3
 8117852:	e001      	b.n	8117858 <tcp_process+0x22c>
 8117854:	f241 131c 	movw	r3, #4380	@ 0x111c
 8117858:	687a      	ldr	r2, [r7, #4]
 811785a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 811785e:	687b      	ldr	r3, [r7, #4]
 8117860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8117864:	2b00      	cmp	r3, #0
 8117866:	d106      	bne.n	8117876 <tcp_process+0x24a>
 8117868:	4b13      	ldr	r3, [pc, #76]	@ (81178b8 <tcp_process+0x28c>)
 811786a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 811786e:	491c      	ldr	r1, [pc, #112]	@ (81178e0 <tcp_process+0x2b4>)
 8117870:	4813      	ldr	r0, [pc, #76]	@ (81178c0 <tcp_process+0x294>)
 8117872:	f004 fad3 	bl	811be1c <iprintf>
        --pcb->snd_queuelen;
 8117876:	687b      	ldr	r3, [r7, #4]
 8117878:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811787c:	3b01      	subs	r3, #1
 811787e:	b29a      	uxth	r2, r3
 8117880:	687b      	ldr	r3, [r7, #4]
 8117882:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8117886:	687b      	ldr	r3, [r7, #4]
 8117888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811788a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 811788c:	69fb      	ldr	r3, [r7, #28]
 811788e:	2b00      	cmp	r3, #0
 8117890:	d12a      	bne.n	81178e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8117892:	687b      	ldr	r3, [r7, #4]
 8117894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8117896:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8117898:	69fb      	ldr	r3, [r7, #28]
 811789a:	2b00      	cmp	r3, #0
 811789c:	d106      	bne.n	81178ac <tcp_process+0x280>
 811789e:	4b06      	ldr	r3, [pc, #24]	@ (81178b8 <tcp_process+0x28c>)
 81178a0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 81178a4:	490f      	ldr	r1, [pc, #60]	@ (81178e4 <tcp_process+0x2b8>)
 81178a6:	4806      	ldr	r0, [pc, #24]	@ (81178c0 <tcp_process+0x294>)
 81178a8:	f004 fab8 	bl	811be1c <iprintf>
          pcb->unsent = rseg->next;
 81178ac:	69fb      	ldr	r3, [r7, #28]
 81178ae:	681a      	ldr	r2, [r3, #0]
 81178b0:	687b      	ldr	r3, [r7, #4]
 81178b2:	66da      	str	r2, [r3, #108]	@ 0x6c
 81178b4:	e01c      	b.n	81178f0 <tcp_process+0x2c4>
 81178b6:	bf00      	nop
 81178b8:	0811e858 	.word	0x0811e858
 81178bc:	0811ead0 	.word	0x0811ead0
 81178c0:	0811e8e4 	.word	0x0811e8e4
 81178c4:	10011d58 	.word	0x10011d58
 81178c8:	10011d50 	.word	0x10011d50
 81178cc:	10011d4c 	.word	0x10011d4c
 81178d0:	0811eaec 	.word	0x0811eaec
 81178d4:	10011d59 	.word	0x10011d59
 81178d8:	10011d14 	.word	0x10011d14
 81178dc:	10011d3c 	.word	0x10011d3c
 81178e0:	0811eb0c 	.word	0x0811eb0c
 81178e4:	0811eb24 	.word	0x0811eb24
        } else {
          pcb->unacked = rseg->next;
 81178e8:	69fb      	ldr	r3, [r7, #28]
 81178ea:	681a      	ldr	r2, [r3, #0]
 81178ec:	687b      	ldr	r3, [r7, #4]
 81178ee:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 81178f0:	69f8      	ldr	r0, [r7, #28]
 81178f2:	f7fe fca6 	bl	8116242 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 81178f6:	687b      	ldr	r3, [r7, #4]
 81178f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81178fa:	2b00      	cmp	r3, #0
 81178fc:	d104      	bne.n	8117908 <tcp_process+0x2dc>
          pcb->rtime = -1;
 81178fe:	687b      	ldr	r3, [r7, #4]
 8117900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8117904:	861a      	strh	r2, [r3, #48]	@ 0x30
 8117906:	e006      	b.n	8117916 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8117908:	687b      	ldr	r3, [r7, #4]
 811790a:	2200      	movs	r2, #0
 811790c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 811790e:	687b      	ldr	r3, [r7, #4]
 8117910:	2200      	movs	r2, #0
 8117912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8117916:	687b      	ldr	r3, [r7, #4]
 8117918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811791c:	2b00      	cmp	r3, #0
 811791e:	d00a      	beq.n	8117936 <tcp_process+0x30a>
 8117920:	687b      	ldr	r3, [r7, #4]
 8117922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8117926:	687a      	ldr	r2, [r7, #4]
 8117928:	6910      	ldr	r0, [r2, #16]
 811792a:	2200      	movs	r2, #0
 811792c:	6879      	ldr	r1, [r7, #4]
 811792e:	4798      	blx	r3
 8117930:	4603      	mov	r3, r0
 8117932:	76bb      	strb	r3, [r7, #26]
 8117934:	e001      	b.n	811793a <tcp_process+0x30e>
 8117936:	2300      	movs	r3, #0
 8117938:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 811793a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811793e:	f113 0f0d 	cmn.w	r3, #13
 8117942:	d102      	bne.n	811794a <tcp_process+0x31e>
          return ERR_ABRT;
 8117944:	f06f 030c 	mvn.w	r3, #12
 8117948:	e250      	b.n	8117dec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 811794a:	687b      	ldr	r3, [r7, #4]
 811794c:	8b5b      	ldrh	r3, [r3, #26]
 811794e:	f043 0302 	orr.w	r3, r3, #2
 8117952:	b29a      	uxth	r2, r3
 8117954:	687b      	ldr	r3, [r7, #4]
 8117956:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8117958:	e23a      	b.n	8117dd0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 811795a:	4b98      	ldr	r3, [pc, #608]	@ (8117bbc <tcp_process+0x590>)
 811795c:	781b      	ldrb	r3, [r3, #0]
 811795e:	f003 0310 	and.w	r3, r3, #16
 8117962:	2b00      	cmp	r3, #0
 8117964:	f000 8234 	beq.w	8117dd0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117968:	4b95      	ldr	r3, [pc, #596]	@ (8117bc0 <tcp_process+0x594>)
 811796a:	6819      	ldr	r1, [r3, #0]
 811796c:	4b95      	ldr	r3, [pc, #596]	@ (8117bc4 <tcp_process+0x598>)
 811796e:	881b      	ldrh	r3, [r3, #0]
 8117970:	461a      	mov	r2, r3
 8117972:	4b95      	ldr	r3, [pc, #596]	@ (8117bc8 <tcp_process+0x59c>)
 8117974:	681b      	ldr	r3, [r3, #0]
 8117976:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8117978:	4b94      	ldr	r3, [pc, #592]	@ (8117bcc <tcp_process+0x5a0>)
 811797a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811797c:	885b      	ldrh	r3, [r3, #2]
 811797e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8117980:	4a92      	ldr	r2, [pc, #584]	@ (8117bcc <tcp_process+0x5a0>)
 8117982:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117984:	8812      	ldrh	r2, [r2, #0]
 8117986:	b292      	uxth	r2, r2
 8117988:	9202      	str	r2, [sp, #8]
 811798a:	9301      	str	r3, [sp, #4]
 811798c:	4b90      	ldr	r3, [pc, #576]	@ (8117bd0 <tcp_process+0x5a4>)
 811798e:	9300      	str	r3, [sp, #0]
 8117990:	4b90      	ldr	r3, [pc, #576]	@ (8117bd4 <tcp_process+0x5a8>)
 8117992:	4602      	mov	r2, r0
 8117994:	6878      	ldr	r0, [r7, #4]
 8117996:	f003 f8d9 	bl	811ab4c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 811799a:	687b      	ldr	r3, [r7, #4]
 811799c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81179a0:	2b05      	cmp	r3, #5
 81179a2:	f200 8215 	bhi.w	8117dd0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 81179a6:	687b      	ldr	r3, [r7, #4]
 81179a8:	2200      	movs	r2, #0
 81179aa:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 81179ac:	6878      	ldr	r0, [r7, #4]
 81179ae:	f002 fea5 	bl	811a6fc <tcp_rexmit_rto>
      break;
 81179b2:	e20d      	b.n	8117dd0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 81179b4:	4b81      	ldr	r3, [pc, #516]	@ (8117bbc <tcp_process+0x590>)
 81179b6:	781b      	ldrb	r3, [r3, #0]
 81179b8:	f003 0310 	and.w	r3, r3, #16
 81179bc:	2b00      	cmp	r3, #0
 81179be:	f000 80a1 	beq.w	8117b04 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 81179c2:	4b7f      	ldr	r3, [pc, #508]	@ (8117bc0 <tcp_process+0x594>)
 81179c4:	681a      	ldr	r2, [r3, #0]
 81179c6:	687b      	ldr	r3, [r7, #4]
 81179c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81179ca:	1ad3      	subs	r3, r2, r3
 81179cc:	3b01      	subs	r3, #1
 81179ce:	2b00      	cmp	r3, #0
 81179d0:	db7e      	blt.n	8117ad0 <tcp_process+0x4a4>
 81179d2:	4b7b      	ldr	r3, [pc, #492]	@ (8117bc0 <tcp_process+0x594>)
 81179d4:	681a      	ldr	r2, [r3, #0]
 81179d6:	687b      	ldr	r3, [r7, #4]
 81179d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81179da:	1ad3      	subs	r3, r2, r3
 81179dc:	2b00      	cmp	r3, #0
 81179de:	dc77      	bgt.n	8117ad0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 81179e0:	687b      	ldr	r3, [r7, #4]
 81179e2:	2204      	movs	r2, #4
 81179e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 81179e6:	687b      	ldr	r3, [r7, #4]
 81179e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81179ea:	2b00      	cmp	r3, #0
 81179ec:	d102      	bne.n	81179f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 81179ee:	23fa      	movs	r3, #250	@ 0xfa
 81179f0:	76bb      	strb	r3, [r7, #26]
 81179f2:	e01d      	b.n	8117a30 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 81179f4:	687b      	ldr	r3, [r7, #4]
 81179f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81179f8:	699b      	ldr	r3, [r3, #24]
 81179fa:	2b00      	cmp	r3, #0
 81179fc:	d106      	bne.n	8117a0c <tcp_process+0x3e0>
 81179fe:	4b76      	ldr	r3, [pc, #472]	@ (8117bd8 <tcp_process+0x5ac>)
 8117a00:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8117a04:	4975      	ldr	r1, [pc, #468]	@ (8117bdc <tcp_process+0x5b0>)
 8117a06:	4876      	ldr	r0, [pc, #472]	@ (8117be0 <tcp_process+0x5b4>)
 8117a08:	f004 fa08 	bl	811be1c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8117a0c:	687b      	ldr	r3, [r7, #4]
 8117a0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8117a10:	699b      	ldr	r3, [r3, #24]
 8117a12:	2b00      	cmp	r3, #0
 8117a14:	d00a      	beq.n	8117a2c <tcp_process+0x400>
 8117a16:	687b      	ldr	r3, [r7, #4]
 8117a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8117a1a:	699b      	ldr	r3, [r3, #24]
 8117a1c:	687a      	ldr	r2, [r7, #4]
 8117a1e:	6910      	ldr	r0, [r2, #16]
 8117a20:	2200      	movs	r2, #0
 8117a22:	6879      	ldr	r1, [r7, #4]
 8117a24:	4798      	blx	r3
 8117a26:	4603      	mov	r3, r0
 8117a28:	76bb      	strb	r3, [r7, #26]
 8117a2a:	e001      	b.n	8117a30 <tcp_process+0x404>
 8117a2c:	23f0      	movs	r3, #240	@ 0xf0
 8117a2e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8117a30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8117a34:	2b00      	cmp	r3, #0
 8117a36:	d00a      	beq.n	8117a4e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8117a38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8117a3c:	f113 0f0d 	cmn.w	r3, #13
 8117a40:	d002      	beq.n	8117a48 <tcp_process+0x41c>
              tcp_abort(pcb);
 8117a42:	6878      	ldr	r0, [r7, #4]
 8117a44:	f7fd fdae 	bl	81155a4 <tcp_abort>
            }
            return ERR_ABRT;
 8117a48:	f06f 030c 	mvn.w	r3, #12
 8117a4c:	e1ce      	b.n	8117dec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8117a4e:	6878      	ldr	r0, [r7, #4]
 8117a50:	f000 fae0 	bl	8118014 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8117a54:	4b63      	ldr	r3, [pc, #396]	@ (8117be4 <tcp_process+0x5b8>)
 8117a56:	881b      	ldrh	r3, [r3, #0]
 8117a58:	2b00      	cmp	r3, #0
 8117a5a:	d005      	beq.n	8117a68 <tcp_process+0x43c>
            recv_acked--;
 8117a5c:	4b61      	ldr	r3, [pc, #388]	@ (8117be4 <tcp_process+0x5b8>)
 8117a5e:	881b      	ldrh	r3, [r3, #0]
 8117a60:	3b01      	subs	r3, #1
 8117a62:	b29a      	uxth	r2, r3
 8117a64:	4b5f      	ldr	r3, [pc, #380]	@ (8117be4 <tcp_process+0x5b8>)
 8117a66:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8117a68:	687b      	ldr	r3, [r7, #4]
 8117a6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117a6c:	009a      	lsls	r2, r3, #2
 8117a6e:	687b      	ldr	r3, [r7, #4]
 8117a70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117a72:	005b      	lsls	r3, r3, #1
 8117a74:	f241 111c 	movw	r1, #4380	@ 0x111c
 8117a78:	428b      	cmp	r3, r1
 8117a7a:	bf38      	it	cc
 8117a7c:	460b      	movcc	r3, r1
 8117a7e:	429a      	cmp	r2, r3
 8117a80:	d204      	bcs.n	8117a8c <tcp_process+0x460>
 8117a82:	687b      	ldr	r3, [r7, #4]
 8117a84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117a86:	009b      	lsls	r3, r3, #2
 8117a88:	b29b      	uxth	r3, r3
 8117a8a:	e00d      	b.n	8117aa8 <tcp_process+0x47c>
 8117a8c:	687b      	ldr	r3, [r7, #4]
 8117a8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117a90:	005b      	lsls	r3, r3, #1
 8117a92:	f241 121c 	movw	r2, #4380	@ 0x111c
 8117a96:	4293      	cmp	r3, r2
 8117a98:	d904      	bls.n	8117aa4 <tcp_process+0x478>
 8117a9a:	687b      	ldr	r3, [r7, #4]
 8117a9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117a9e:	005b      	lsls	r3, r3, #1
 8117aa0:	b29b      	uxth	r3, r3
 8117aa2:	e001      	b.n	8117aa8 <tcp_process+0x47c>
 8117aa4:	f241 131c 	movw	r3, #4380	@ 0x111c
 8117aa8:	687a      	ldr	r2, [r7, #4]
 8117aaa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8117aae:	4b4e      	ldr	r3, [pc, #312]	@ (8117be8 <tcp_process+0x5bc>)
 8117ab0:	781b      	ldrb	r3, [r3, #0]
 8117ab2:	f003 0320 	and.w	r3, r3, #32
 8117ab6:	2b00      	cmp	r3, #0
 8117ab8:	d037      	beq.n	8117b2a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8117aba:	687b      	ldr	r3, [r7, #4]
 8117abc:	8b5b      	ldrh	r3, [r3, #26]
 8117abe:	f043 0302 	orr.w	r3, r3, #2
 8117ac2:	b29a      	uxth	r2, r3
 8117ac4:	687b      	ldr	r3, [r7, #4]
 8117ac6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8117ac8:	687b      	ldr	r3, [r7, #4]
 8117aca:	2207      	movs	r2, #7
 8117acc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8117ace:	e02c      	b.n	8117b2a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8117bc0 <tcp_process+0x594>)
 8117ad2:	6819      	ldr	r1, [r3, #0]
 8117ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8117bc4 <tcp_process+0x598>)
 8117ad6:	881b      	ldrh	r3, [r3, #0]
 8117ad8:	461a      	mov	r2, r3
 8117ada:	4b3b      	ldr	r3, [pc, #236]	@ (8117bc8 <tcp_process+0x59c>)
 8117adc:	681b      	ldr	r3, [r3, #0]
 8117ade:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8117ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8117bcc <tcp_process+0x5a0>)
 8117ae2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117ae4:	885b      	ldrh	r3, [r3, #2]
 8117ae6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8117ae8:	4a38      	ldr	r2, [pc, #224]	@ (8117bcc <tcp_process+0x5a0>)
 8117aea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117aec:	8812      	ldrh	r2, [r2, #0]
 8117aee:	b292      	uxth	r2, r2
 8117af0:	9202      	str	r2, [sp, #8]
 8117af2:	9301      	str	r3, [sp, #4]
 8117af4:	4b36      	ldr	r3, [pc, #216]	@ (8117bd0 <tcp_process+0x5a4>)
 8117af6:	9300      	str	r3, [sp, #0]
 8117af8:	4b36      	ldr	r3, [pc, #216]	@ (8117bd4 <tcp_process+0x5a8>)
 8117afa:	4602      	mov	r2, r0
 8117afc:	6878      	ldr	r0, [r7, #4]
 8117afe:	f003 f825 	bl	811ab4c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8117b02:	e167      	b.n	8117dd4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8117b04:	4b2d      	ldr	r3, [pc, #180]	@ (8117bbc <tcp_process+0x590>)
 8117b06:	781b      	ldrb	r3, [r3, #0]
 8117b08:	f003 0302 	and.w	r3, r3, #2
 8117b0c:	2b00      	cmp	r3, #0
 8117b0e:	f000 8161 	beq.w	8117dd4 <tcp_process+0x7a8>
 8117b12:	687b      	ldr	r3, [r7, #4]
 8117b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8117b16:	1e5a      	subs	r2, r3, #1
 8117b18:	4b2b      	ldr	r3, [pc, #172]	@ (8117bc8 <tcp_process+0x59c>)
 8117b1a:	681b      	ldr	r3, [r3, #0]
 8117b1c:	429a      	cmp	r2, r3
 8117b1e:	f040 8159 	bne.w	8117dd4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8117b22:	6878      	ldr	r0, [r7, #4]
 8117b24:	f002 fe0c 	bl	811a740 <tcp_rexmit>
      break;
 8117b28:	e154      	b.n	8117dd4 <tcp_process+0x7a8>
 8117b2a:	e153      	b.n	8117dd4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8117b2c:	6878      	ldr	r0, [r7, #4]
 8117b2e:	f000 fa71 	bl	8118014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8117b32:	4b2d      	ldr	r3, [pc, #180]	@ (8117be8 <tcp_process+0x5bc>)
 8117b34:	781b      	ldrb	r3, [r3, #0]
 8117b36:	f003 0320 	and.w	r3, r3, #32
 8117b3a:	2b00      	cmp	r3, #0
 8117b3c:	f000 814c 	beq.w	8117dd8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8117b40:	687b      	ldr	r3, [r7, #4]
 8117b42:	8b5b      	ldrh	r3, [r3, #26]
 8117b44:	f043 0302 	orr.w	r3, r3, #2
 8117b48:	b29a      	uxth	r2, r3
 8117b4a:	687b      	ldr	r3, [r7, #4]
 8117b4c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8117b4e:	687b      	ldr	r3, [r7, #4]
 8117b50:	2207      	movs	r2, #7
 8117b52:	751a      	strb	r2, [r3, #20]
      }
      break;
 8117b54:	e140      	b.n	8117dd8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8117b56:	6878      	ldr	r0, [r7, #4]
 8117b58:	f000 fa5c 	bl	8118014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8117b5c:	4b22      	ldr	r3, [pc, #136]	@ (8117be8 <tcp_process+0x5bc>)
 8117b5e:	781b      	ldrb	r3, [r3, #0]
 8117b60:	f003 0320 	and.w	r3, r3, #32
 8117b64:	2b00      	cmp	r3, #0
 8117b66:	d071      	beq.n	8117c4c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8117b68:	4b14      	ldr	r3, [pc, #80]	@ (8117bbc <tcp_process+0x590>)
 8117b6a:	781b      	ldrb	r3, [r3, #0]
 8117b6c:	f003 0310 	and.w	r3, r3, #16
 8117b70:	2b00      	cmp	r3, #0
 8117b72:	d060      	beq.n	8117c36 <tcp_process+0x60a>
 8117b74:	687b      	ldr	r3, [r7, #4]
 8117b76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8117b78:	4b11      	ldr	r3, [pc, #68]	@ (8117bc0 <tcp_process+0x594>)
 8117b7a:	681b      	ldr	r3, [r3, #0]
 8117b7c:	429a      	cmp	r2, r3
 8117b7e:	d15a      	bne.n	8117c36 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8117b80:	687b      	ldr	r3, [r7, #4]
 8117b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8117b84:	2b00      	cmp	r3, #0
 8117b86:	d156      	bne.n	8117c36 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8117b88:	687b      	ldr	r3, [r7, #4]
 8117b8a:	8b5b      	ldrh	r3, [r3, #26]
 8117b8c:	f043 0302 	orr.w	r3, r3, #2
 8117b90:	b29a      	uxth	r2, r3
 8117b92:	687b      	ldr	r3, [r7, #4]
 8117b94:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8117b96:	6878      	ldr	r0, [r7, #4]
 8117b98:	f7fe fdbc 	bl	8116714 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8117b9c:	4b13      	ldr	r3, [pc, #76]	@ (8117bec <tcp_process+0x5c0>)
 8117b9e:	681b      	ldr	r3, [r3, #0]
 8117ba0:	687a      	ldr	r2, [r7, #4]
 8117ba2:	429a      	cmp	r2, r3
 8117ba4:	d105      	bne.n	8117bb2 <tcp_process+0x586>
 8117ba6:	4b11      	ldr	r3, [pc, #68]	@ (8117bec <tcp_process+0x5c0>)
 8117ba8:	681b      	ldr	r3, [r3, #0]
 8117baa:	68db      	ldr	r3, [r3, #12]
 8117bac:	4a0f      	ldr	r2, [pc, #60]	@ (8117bec <tcp_process+0x5c0>)
 8117bae:	6013      	str	r3, [r2, #0]
 8117bb0:	e02e      	b.n	8117c10 <tcp_process+0x5e4>
 8117bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8117bec <tcp_process+0x5c0>)
 8117bb4:	681b      	ldr	r3, [r3, #0]
 8117bb6:	617b      	str	r3, [r7, #20]
 8117bb8:	e027      	b.n	8117c0a <tcp_process+0x5de>
 8117bba:	bf00      	nop
 8117bbc:	10011d58 	.word	0x10011d58
 8117bc0:	10011d50 	.word	0x10011d50
 8117bc4:	10011d56 	.word	0x10011d56
 8117bc8:	10011d4c 	.word	0x10011d4c
 8117bcc:	10011d3c 	.word	0x10011d3c
 8117bd0:	1000b254 	.word	0x1000b254
 8117bd4:	1000b258 	.word	0x1000b258
 8117bd8:	0811e858 	.word	0x0811e858
 8117bdc:	0811eb38 	.word	0x0811eb38
 8117be0:	0811e8e4 	.word	0x0811e8e4
 8117be4:	10011d54 	.word	0x10011d54
 8117be8:	10011d59 	.word	0x10011d59
 8117bec:	10011d20 	.word	0x10011d20
 8117bf0:	697b      	ldr	r3, [r7, #20]
 8117bf2:	68db      	ldr	r3, [r3, #12]
 8117bf4:	687a      	ldr	r2, [r7, #4]
 8117bf6:	429a      	cmp	r2, r3
 8117bf8:	d104      	bne.n	8117c04 <tcp_process+0x5d8>
 8117bfa:	687b      	ldr	r3, [r7, #4]
 8117bfc:	68da      	ldr	r2, [r3, #12]
 8117bfe:	697b      	ldr	r3, [r7, #20]
 8117c00:	60da      	str	r2, [r3, #12]
 8117c02:	e005      	b.n	8117c10 <tcp_process+0x5e4>
 8117c04:	697b      	ldr	r3, [r7, #20]
 8117c06:	68db      	ldr	r3, [r3, #12]
 8117c08:	617b      	str	r3, [r7, #20]
 8117c0a:	697b      	ldr	r3, [r7, #20]
 8117c0c:	2b00      	cmp	r3, #0
 8117c0e:	d1ef      	bne.n	8117bf0 <tcp_process+0x5c4>
 8117c10:	687b      	ldr	r3, [r7, #4]
 8117c12:	2200      	movs	r2, #0
 8117c14:	60da      	str	r2, [r3, #12]
 8117c16:	4b77      	ldr	r3, [pc, #476]	@ (8117df4 <tcp_process+0x7c8>)
 8117c18:	2201      	movs	r2, #1
 8117c1a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8117c1c:	687b      	ldr	r3, [r7, #4]
 8117c1e:	220a      	movs	r2, #10
 8117c20:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8117c22:	4b75      	ldr	r3, [pc, #468]	@ (8117df8 <tcp_process+0x7cc>)
 8117c24:	681a      	ldr	r2, [r3, #0]
 8117c26:	687b      	ldr	r3, [r7, #4]
 8117c28:	60da      	str	r2, [r3, #12]
 8117c2a:	4a73      	ldr	r2, [pc, #460]	@ (8117df8 <tcp_process+0x7cc>)
 8117c2c:	687b      	ldr	r3, [r7, #4]
 8117c2e:	6013      	str	r3, [r2, #0]
 8117c30:	f003 faf0 	bl	811b214 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8117c34:	e0d2      	b.n	8117ddc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8117c36:	687b      	ldr	r3, [r7, #4]
 8117c38:	8b5b      	ldrh	r3, [r3, #26]
 8117c3a:	f043 0302 	orr.w	r3, r3, #2
 8117c3e:	b29a      	uxth	r2, r3
 8117c40:	687b      	ldr	r3, [r7, #4]
 8117c42:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8117c44:	687b      	ldr	r3, [r7, #4]
 8117c46:	2208      	movs	r2, #8
 8117c48:	751a      	strb	r2, [r3, #20]
      break;
 8117c4a:	e0c7      	b.n	8117ddc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8117c4c:	4b6b      	ldr	r3, [pc, #428]	@ (8117dfc <tcp_process+0x7d0>)
 8117c4e:	781b      	ldrb	r3, [r3, #0]
 8117c50:	f003 0310 	and.w	r3, r3, #16
 8117c54:	2b00      	cmp	r3, #0
 8117c56:	f000 80c1 	beq.w	8117ddc <tcp_process+0x7b0>
 8117c5a:	687b      	ldr	r3, [r7, #4]
 8117c5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8117c5e:	4b68      	ldr	r3, [pc, #416]	@ (8117e00 <tcp_process+0x7d4>)
 8117c60:	681b      	ldr	r3, [r3, #0]
 8117c62:	429a      	cmp	r2, r3
 8117c64:	f040 80ba 	bne.w	8117ddc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8117c68:	687b      	ldr	r3, [r7, #4]
 8117c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8117c6c:	2b00      	cmp	r3, #0
 8117c6e:	f040 80b5 	bne.w	8117ddc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8117c72:	687b      	ldr	r3, [r7, #4]
 8117c74:	2206      	movs	r2, #6
 8117c76:	751a      	strb	r2, [r3, #20]
      break;
 8117c78:	e0b0      	b.n	8117ddc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8117c7a:	6878      	ldr	r0, [r7, #4]
 8117c7c:	f000 f9ca 	bl	8118014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8117c80:	4b60      	ldr	r3, [pc, #384]	@ (8117e04 <tcp_process+0x7d8>)
 8117c82:	781b      	ldrb	r3, [r3, #0]
 8117c84:	f003 0320 	and.w	r3, r3, #32
 8117c88:	2b00      	cmp	r3, #0
 8117c8a:	f000 80a9 	beq.w	8117de0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8117c8e:	687b      	ldr	r3, [r7, #4]
 8117c90:	8b5b      	ldrh	r3, [r3, #26]
 8117c92:	f043 0302 	orr.w	r3, r3, #2
 8117c96:	b29a      	uxth	r2, r3
 8117c98:	687b      	ldr	r3, [r7, #4]
 8117c9a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8117c9c:	6878      	ldr	r0, [r7, #4]
 8117c9e:	f7fe fd39 	bl	8116714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8117ca2:	4b59      	ldr	r3, [pc, #356]	@ (8117e08 <tcp_process+0x7dc>)
 8117ca4:	681b      	ldr	r3, [r3, #0]
 8117ca6:	687a      	ldr	r2, [r7, #4]
 8117ca8:	429a      	cmp	r2, r3
 8117caa:	d105      	bne.n	8117cb8 <tcp_process+0x68c>
 8117cac:	4b56      	ldr	r3, [pc, #344]	@ (8117e08 <tcp_process+0x7dc>)
 8117cae:	681b      	ldr	r3, [r3, #0]
 8117cb0:	68db      	ldr	r3, [r3, #12]
 8117cb2:	4a55      	ldr	r2, [pc, #340]	@ (8117e08 <tcp_process+0x7dc>)
 8117cb4:	6013      	str	r3, [r2, #0]
 8117cb6:	e013      	b.n	8117ce0 <tcp_process+0x6b4>
 8117cb8:	4b53      	ldr	r3, [pc, #332]	@ (8117e08 <tcp_process+0x7dc>)
 8117cba:	681b      	ldr	r3, [r3, #0]
 8117cbc:	613b      	str	r3, [r7, #16]
 8117cbe:	e00c      	b.n	8117cda <tcp_process+0x6ae>
 8117cc0:	693b      	ldr	r3, [r7, #16]
 8117cc2:	68db      	ldr	r3, [r3, #12]
 8117cc4:	687a      	ldr	r2, [r7, #4]
 8117cc6:	429a      	cmp	r2, r3
 8117cc8:	d104      	bne.n	8117cd4 <tcp_process+0x6a8>
 8117cca:	687b      	ldr	r3, [r7, #4]
 8117ccc:	68da      	ldr	r2, [r3, #12]
 8117cce:	693b      	ldr	r3, [r7, #16]
 8117cd0:	60da      	str	r2, [r3, #12]
 8117cd2:	e005      	b.n	8117ce0 <tcp_process+0x6b4>
 8117cd4:	693b      	ldr	r3, [r7, #16]
 8117cd6:	68db      	ldr	r3, [r3, #12]
 8117cd8:	613b      	str	r3, [r7, #16]
 8117cda:	693b      	ldr	r3, [r7, #16]
 8117cdc:	2b00      	cmp	r3, #0
 8117cde:	d1ef      	bne.n	8117cc0 <tcp_process+0x694>
 8117ce0:	687b      	ldr	r3, [r7, #4]
 8117ce2:	2200      	movs	r2, #0
 8117ce4:	60da      	str	r2, [r3, #12]
 8117ce6:	4b43      	ldr	r3, [pc, #268]	@ (8117df4 <tcp_process+0x7c8>)
 8117ce8:	2201      	movs	r2, #1
 8117cea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8117cec:	687b      	ldr	r3, [r7, #4]
 8117cee:	220a      	movs	r2, #10
 8117cf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8117cf2:	4b41      	ldr	r3, [pc, #260]	@ (8117df8 <tcp_process+0x7cc>)
 8117cf4:	681a      	ldr	r2, [r3, #0]
 8117cf6:	687b      	ldr	r3, [r7, #4]
 8117cf8:	60da      	str	r2, [r3, #12]
 8117cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8117df8 <tcp_process+0x7cc>)
 8117cfc:	687b      	ldr	r3, [r7, #4]
 8117cfe:	6013      	str	r3, [r2, #0]
 8117d00:	f003 fa88 	bl	811b214 <tcp_timer_needed>
      }
      break;
 8117d04:	e06c      	b.n	8117de0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8117d06:	6878      	ldr	r0, [r7, #4]
 8117d08:	f000 f984 	bl	8118014 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8117d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8117dfc <tcp_process+0x7d0>)
 8117d0e:	781b      	ldrb	r3, [r3, #0]
 8117d10:	f003 0310 	and.w	r3, r3, #16
 8117d14:	2b00      	cmp	r3, #0
 8117d16:	d065      	beq.n	8117de4 <tcp_process+0x7b8>
 8117d18:	687b      	ldr	r3, [r7, #4]
 8117d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8117d1c:	4b38      	ldr	r3, [pc, #224]	@ (8117e00 <tcp_process+0x7d4>)
 8117d1e:	681b      	ldr	r3, [r3, #0]
 8117d20:	429a      	cmp	r2, r3
 8117d22:	d15f      	bne.n	8117de4 <tcp_process+0x7b8>
 8117d24:	687b      	ldr	r3, [r7, #4]
 8117d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8117d28:	2b00      	cmp	r3, #0
 8117d2a:	d15b      	bne.n	8117de4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8117d2c:	6878      	ldr	r0, [r7, #4]
 8117d2e:	f7fe fcf1 	bl	8116714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8117d32:	4b35      	ldr	r3, [pc, #212]	@ (8117e08 <tcp_process+0x7dc>)
 8117d34:	681b      	ldr	r3, [r3, #0]
 8117d36:	687a      	ldr	r2, [r7, #4]
 8117d38:	429a      	cmp	r2, r3
 8117d3a:	d105      	bne.n	8117d48 <tcp_process+0x71c>
 8117d3c:	4b32      	ldr	r3, [pc, #200]	@ (8117e08 <tcp_process+0x7dc>)
 8117d3e:	681b      	ldr	r3, [r3, #0]
 8117d40:	68db      	ldr	r3, [r3, #12]
 8117d42:	4a31      	ldr	r2, [pc, #196]	@ (8117e08 <tcp_process+0x7dc>)
 8117d44:	6013      	str	r3, [r2, #0]
 8117d46:	e013      	b.n	8117d70 <tcp_process+0x744>
 8117d48:	4b2f      	ldr	r3, [pc, #188]	@ (8117e08 <tcp_process+0x7dc>)
 8117d4a:	681b      	ldr	r3, [r3, #0]
 8117d4c:	60fb      	str	r3, [r7, #12]
 8117d4e:	e00c      	b.n	8117d6a <tcp_process+0x73e>
 8117d50:	68fb      	ldr	r3, [r7, #12]
 8117d52:	68db      	ldr	r3, [r3, #12]
 8117d54:	687a      	ldr	r2, [r7, #4]
 8117d56:	429a      	cmp	r2, r3
 8117d58:	d104      	bne.n	8117d64 <tcp_process+0x738>
 8117d5a:	687b      	ldr	r3, [r7, #4]
 8117d5c:	68da      	ldr	r2, [r3, #12]
 8117d5e:	68fb      	ldr	r3, [r7, #12]
 8117d60:	60da      	str	r2, [r3, #12]
 8117d62:	e005      	b.n	8117d70 <tcp_process+0x744>
 8117d64:	68fb      	ldr	r3, [r7, #12]
 8117d66:	68db      	ldr	r3, [r3, #12]
 8117d68:	60fb      	str	r3, [r7, #12]
 8117d6a:	68fb      	ldr	r3, [r7, #12]
 8117d6c:	2b00      	cmp	r3, #0
 8117d6e:	d1ef      	bne.n	8117d50 <tcp_process+0x724>
 8117d70:	687b      	ldr	r3, [r7, #4]
 8117d72:	2200      	movs	r2, #0
 8117d74:	60da      	str	r2, [r3, #12]
 8117d76:	4b1f      	ldr	r3, [pc, #124]	@ (8117df4 <tcp_process+0x7c8>)
 8117d78:	2201      	movs	r2, #1
 8117d7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8117d7c:	687b      	ldr	r3, [r7, #4]
 8117d7e:	220a      	movs	r2, #10
 8117d80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8117d82:	4b1d      	ldr	r3, [pc, #116]	@ (8117df8 <tcp_process+0x7cc>)
 8117d84:	681a      	ldr	r2, [r3, #0]
 8117d86:	687b      	ldr	r3, [r7, #4]
 8117d88:	60da      	str	r2, [r3, #12]
 8117d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8117df8 <tcp_process+0x7cc>)
 8117d8c:	687b      	ldr	r3, [r7, #4]
 8117d8e:	6013      	str	r3, [r2, #0]
 8117d90:	f003 fa40 	bl	811b214 <tcp_timer_needed>
      }
      break;
 8117d94:	e026      	b.n	8117de4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8117d96:	6878      	ldr	r0, [r7, #4]
 8117d98:	f000 f93c 	bl	8118014 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8117d9c:	4b17      	ldr	r3, [pc, #92]	@ (8117dfc <tcp_process+0x7d0>)
 8117d9e:	781b      	ldrb	r3, [r3, #0]
 8117da0:	f003 0310 	and.w	r3, r3, #16
 8117da4:	2b00      	cmp	r3, #0
 8117da6:	d01f      	beq.n	8117de8 <tcp_process+0x7bc>
 8117da8:	687b      	ldr	r3, [r7, #4]
 8117daa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8117dac:	4b14      	ldr	r3, [pc, #80]	@ (8117e00 <tcp_process+0x7d4>)
 8117dae:	681b      	ldr	r3, [r3, #0]
 8117db0:	429a      	cmp	r2, r3
 8117db2:	d119      	bne.n	8117de8 <tcp_process+0x7bc>
 8117db4:	687b      	ldr	r3, [r7, #4]
 8117db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8117db8:	2b00      	cmp	r3, #0
 8117dba:	d115      	bne.n	8117de8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8117dbc:	4b11      	ldr	r3, [pc, #68]	@ (8117e04 <tcp_process+0x7d8>)
 8117dbe:	781b      	ldrb	r3, [r3, #0]
 8117dc0:	f043 0310 	orr.w	r3, r3, #16
 8117dc4:	b2da      	uxtb	r2, r3
 8117dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8117e04 <tcp_process+0x7d8>)
 8117dc8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8117dca:	e00d      	b.n	8117de8 <tcp_process+0x7bc>
    default:
      break;
 8117dcc:	bf00      	nop
 8117dce:	e00c      	b.n	8117dea <tcp_process+0x7be>
      break;
 8117dd0:	bf00      	nop
 8117dd2:	e00a      	b.n	8117dea <tcp_process+0x7be>
      break;
 8117dd4:	bf00      	nop
 8117dd6:	e008      	b.n	8117dea <tcp_process+0x7be>
      break;
 8117dd8:	bf00      	nop
 8117dda:	e006      	b.n	8117dea <tcp_process+0x7be>
      break;
 8117ddc:	bf00      	nop
 8117dde:	e004      	b.n	8117dea <tcp_process+0x7be>
      break;
 8117de0:	bf00      	nop
 8117de2:	e002      	b.n	8117dea <tcp_process+0x7be>
      break;
 8117de4:	bf00      	nop
 8117de6:	e000      	b.n	8117dea <tcp_process+0x7be>
      break;
 8117de8:	bf00      	nop
  }
  return ERR_OK;
 8117dea:	2300      	movs	r3, #0
}
 8117dec:	4618      	mov	r0, r3
 8117dee:	3724      	adds	r7, #36	@ 0x24
 8117df0:	46bd      	mov	sp, r7
 8117df2:	bd90      	pop	{r4, r7, pc}
 8117df4:	10011d28 	.word	0x10011d28
 8117df8:	10011d24 	.word	0x10011d24
 8117dfc:	10011d58 	.word	0x10011d58
 8117e00:	10011d50 	.word	0x10011d50
 8117e04:	10011d59 	.word	0x10011d59
 8117e08:	10011d20 	.word	0x10011d20

08117e0c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8117e0c:	b590      	push	{r4, r7, lr}
 8117e0e:	b085      	sub	sp, #20
 8117e10:	af00      	add	r7, sp, #0
 8117e12:	6078      	str	r0, [r7, #4]
 8117e14:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8117e16:	687b      	ldr	r3, [r7, #4]
 8117e18:	2b00      	cmp	r3, #0
 8117e1a:	d106      	bne.n	8117e2a <tcp_oos_insert_segment+0x1e>
 8117e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8117f0c <tcp_oos_insert_segment+0x100>)
 8117e1e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8117e22:	493b      	ldr	r1, [pc, #236]	@ (8117f10 <tcp_oos_insert_segment+0x104>)
 8117e24:	483b      	ldr	r0, [pc, #236]	@ (8117f14 <tcp_oos_insert_segment+0x108>)
 8117e26:	f003 fff9 	bl	811be1c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8117e2a:	687b      	ldr	r3, [r7, #4]
 8117e2c:	68db      	ldr	r3, [r3, #12]
 8117e2e:	899b      	ldrh	r3, [r3, #12]
 8117e30:	b29b      	uxth	r3, r3
 8117e32:	4618      	mov	r0, r3
 8117e34:	f7f8 fdaa 	bl	811098c <lwip_htons>
 8117e38:	4603      	mov	r3, r0
 8117e3a:	b2db      	uxtb	r3, r3
 8117e3c:	f003 0301 	and.w	r3, r3, #1
 8117e40:	2b00      	cmp	r3, #0
 8117e42:	d028      	beq.n	8117e96 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8117e44:	6838      	ldr	r0, [r7, #0]
 8117e46:	f7fe f9e7 	bl	8116218 <tcp_segs_free>
    next = NULL;
 8117e4a:	2300      	movs	r3, #0
 8117e4c:	603b      	str	r3, [r7, #0]
 8117e4e:	e056      	b.n	8117efe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8117e50:	683b      	ldr	r3, [r7, #0]
 8117e52:	68db      	ldr	r3, [r3, #12]
 8117e54:	899b      	ldrh	r3, [r3, #12]
 8117e56:	b29b      	uxth	r3, r3
 8117e58:	4618      	mov	r0, r3
 8117e5a:	f7f8 fd97 	bl	811098c <lwip_htons>
 8117e5e:	4603      	mov	r3, r0
 8117e60:	b2db      	uxtb	r3, r3
 8117e62:	f003 0301 	and.w	r3, r3, #1
 8117e66:	2b00      	cmp	r3, #0
 8117e68:	d00d      	beq.n	8117e86 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8117e6a:	687b      	ldr	r3, [r7, #4]
 8117e6c:	68db      	ldr	r3, [r3, #12]
 8117e6e:	899b      	ldrh	r3, [r3, #12]
 8117e70:	b29c      	uxth	r4, r3
 8117e72:	2001      	movs	r0, #1
 8117e74:	f7f8 fd8a 	bl	811098c <lwip_htons>
 8117e78:	4603      	mov	r3, r0
 8117e7a:	461a      	mov	r2, r3
 8117e7c:	687b      	ldr	r3, [r7, #4]
 8117e7e:	68db      	ldr	r3, [r3, #12]
 8117e80:	4322      	orrs	r2, r4
 8117e82:	b292      	uxth	r2, r2
 8117e84:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8117e86:	683b      	ldr	r3, [r7, #0]
 8117e88:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8117e8a:	683b      	ldr	r3, [r7, #0]
 8117e8c:	681b      	ldr	r3, [r3, #0]
 8117e8e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8117e90:	68f8      	ldr	r0, [r7, #12]
 8117e92:	f7fe f9d6 	bl	8116242 <tcp_seg_free>
    while (next &&
 8117e96:	683b      	ldr	r3, [r7, #0]
 8117e98:	2b00      	cmp	r3, #0
 8117e9a:	d00e      	beq.n	8117eba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8117e9c:	687b      	ldr	r3, [r7, #4]
 8117e9e:	891b      	ldrh	r3, [r3, #8]
 8117ea0:	461a      	mov	r2, r3
 8117ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8117f18 <tcp_oos_insert_segment+0x10c>)
 8117ea4:	681b      	ldr	r3, [r3, #0]
 8117ea6:	441a      	add	r2, r3
 8117ea8:	683b      	ldr	r3, [r7, #0]
 8117eaa:	68db      	ldr	r3, [r3, #12]
 8117eac:	685b      	ldr	r3, [r3, #4]
 8117eae:	6839      	ldr	r1, [r7, #0]
 8117eb0:	8909      	ldrh	r1, [r1, #8]
 8117eb2:	440b      	add	r3, r1
 8117eb4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8117eb6:	2b00      	cmp	r3, #0
 8117eb8:	daca      	bge.n	8117e50 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8117eba:	683b      	ldr	r3, [r7, #0]
 8117ebc:	2b00      	cmp	r3, #0
 8117ebe:	d01e      	beq.n	8117efe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8117ec0:	687b      	ldr	r3, [r7, #4]
 8117ec2:	891b      	ldrh	r3, [r3, #8]
 8117ec4:	461a      	mov	r2, r3
 8117ec6:	4b14      	ldr	r3, [pc, #80]	@ (8117f18 <tcp_oos_insert_segment+0x10c>)
 8117ec8:	681b      	ldr	r3, [r3, #0]
 8117eca:	441a      	add	r2, r3
 8117ecc:	683b      	ldr	r3, [r7, #0]
 8117ece:	68db      	ldr	r3, [r3, #12]
 8117ed0:	685b      	ldr	r3, [r3, #4]
 8117ed2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8117ed4:	2b00      	cmp	r3, #0
 8117ed6:	dd12      	ble.n	8117efe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8117ed8:	683b      	ldr	r3, [r7, #0]
 8117eda:	68db      	ldr	r3, [r3, #12]
 8117edc:	685b      	ldr	r3, [r3, #4]
 8117ede:	b29a      	uxth	r2, r3
 8117ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8117f18 <tcp_oos_insert_segment+0x10c>)
 8117ee2:	681b      	ldr	r3, [r3, #0]
 8117ee4:	b29b      	uxth	r3, r3
 8117ee6:	1ad3      	subs	r3, r2, r3
 8117ee8:	b29a      	uxth	r2, r3
 8117eea:	687b      	ldr	r3, [r7, #4]
 8117eec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8117eee:	687b      	ldr	r3, [r7, #4]
 8117ef0:	685a      	ldr	r2, [r3, #4]
 8117ef2:	687b      	ldr	r3, [r7, #4]
 8117ef4:	891b      	ldrh	r3, [r3, #8]
 8117ef6:	4619      	mov	r1, r3
 8117ef8:	4610      	mov	r0, r2
 8117efa:	f7fc fb49 	bl	8114590 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8117efe:	687b      	ldr	r3, [r7, #4]
 8117f00:	683a      	ldr	r2, [r7, #0]
 8117f02:	601a      	str	r2, [r3, #0]
}
 8117f04:	bf00      	nop
 8117f06:	3714      	adds	r7, #20
 8117f08:	46bd      	mov	sp, r7
 8117f0a:	bd90      	pop	{r4, r7, pc}
 8117f0c:	0811e858 	.word	0x0811e858
 8117f10:	0811eb58 	.word	0x0811eb58
 8117f14:	0811e8e4 	.word	0x0811e8e4
 8117f18:	10011d4c 	.word	0x10011d4c

08117f1c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8117f1c:	b5b0      	push	{r4, r5, r7, lr}
 8117f1e:	b086      	sub	sp, #24
 8117f20:	af00      	add	r7, sp, #0
 8117f22:	60f8      	str	r0, [r7, #12]
 8117f24:	60b9      	str	r1, [r7, #8]
 8117f26:	607a      	str	r2, [r7, #4]
 8117f28:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8117f2a:	e03e      	b.n	8117faa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8117f2c:	68bb      	ldr	r3, [r7, #8]
 8117f2e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8117f30:	68bb      	ldr	r3, [r7, #8]
 8117f32:	681b      	ldr	r3, [r3, #0]
 8117f34:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8117f36:	697b      	ldr	r3, [r7, #20]
 8117f38:	685b      	ldr	r3, [r3, #4]
 8117f3a:	4618      	mov	r0, r3
 8117f3c:	f7fc fd3a 	bl	81149b4 <pbuf_clen>
 8117f40:	4603      	mov	r3, r0
 8117f42:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8117f44:	68fb      	ldr	r3, [r7, #12]
 8117f46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8117f4a:	8a7a      	ldrh	r2, [r7, #18]
 8117f4c:	429a      	cmp	r2, r3
 8117f4e:	d906      	bls.n	8117f5e <tcp_free_acked_segments+0x42>
 8117f50:	4b2a      	ldr	r3, [pc, #168]	@ (8117ffc <tcp_free_acked_segments+0xe0>)
 8117f52:	f240 4257 	movw	r2, #1111	@ 0x457
 8117f56:	492a      	ldr	r1, [pc, #168]	@ (8118000 <tcp_free_acked_segments+0xe4>)
 8117f58:	482a      	ldr	r0, [pc, #168]	@ (8118004 <tcp_free_acked_segments+0xe8>)
 8117f5a:	f003 ff5f 	bl	811be1c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8117f5e:	68fb      	ldr	r3, [r7, #12]
 8117f60:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8117f64:	8a7b      	ldrh	r3, [r7, #18]
 8117f66:	1ad3      	subs	r3, r2, r3
 8117f68:	b29a      	uxth	r2, r3
 8117f6a:	68fb      	ldr	r3, [r7, #12]
 8117f6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8117f70:	697b      	ldr	r3, [r7, #20]
 8117f72:	891a      	ldrh	r2, [r3, #8]
 8117f74:	4b24      	ldr	r3, [pc, #144]	@ (8118008 <tcp_free_acked_segments+0xec>)
 8117f76:	881b      	ldrh	r3, [r3, #0]
 8117f78:	4413      	add	r3, r2
 8117f7a:	b29a      	uxth	r2, r3
 8117f7c:	4b22      	ldr	r3, [pc, #136]	@ (8118008 <tcp_free_acked_segments+0xec>)
 8117f7e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8117f80:	6978      	ldr	r0, [r7, #20]
 8117f82:	f7fe f95e 	bl	8116242 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8117f86:	68fb      	ldr	r3, [r7, #12]
 8117f88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8117f8c:	2b00      	cmp	r3, #0
 8117f8e:	d00c      	beq.n	8117faa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8117f90:	68bb      	ldr	r3, [r7, #8]
 8117f92:	2b00      	cmp	r3, #0
 8117f94:	d109      	bne.n	8117faa <tcp_free_acked_segments+0x8e>
 8117f96:	683b      	ldr	r3, [r7, #0]
 8117f98:	2b00      	cmp	r3, #0
 8117f9a:	d106      	bne.n	8117faa <tcp_free_acked_segments+0x8e>
 8117f9c:	4b17      	ldr	r3, [pc, #92]	@ (8117ffc <tcp_free_acked_segments+0xe0>)
 8117f9e:	f240 4261 	movw	r2, #1121	@ 0x461
 8117fa2:	491a      	ldr	r1, [pc, #104]	@ (811800c <tcp_free_acked_segments+0xf0>)
 8117fa4:	4817      	ldr	r0, [pc, #92]	@ (8118004 <tcp_free_acked_segments+0xe8>)
 8117fa6:	f003 ff39 	bl	811be1c <iprintf>
  while (seg_list != NULL &&
 8117faa:	68bb      	ldr	r3, [r7, #8]
 8117fac:	2b00      	cmp	r3, #0
 8117fae:	d020      	beq.n	8117ff2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8117fb0:	68bb      	ldr	r3, [r7, #8]
 8117fb2:	68db      	ldr	r3, [r3, #12]
 8117fb4:	685b      	ldr	r3, [r3, #4]
 8117fb6:	4618      	mov	r0, r3
 8117fb8:	f7f8 fcfd 	bl	81109b6 <lwip_htonl>
 8117fbc:	4604      	mov	r4, r0
 8117fbe:	68bb      	ldr	r3, [r7, #8]
 8117fc0:	891b      	ldrh	r3, [r3, #8]
 8117fc2:	461d      	mov	r5, r3
 8117fc4:	68bb      	ldr	r3, [r7, #8]
 8117fc6:	68db      	ldr	r3, [r3, #12]
 8117fc8:	899b      	ldrh	r3, [r3, #12]
 8117fca:	b29b      	uxth	r3, r3
 8117fcc:	4618      	mov	r0, r3
 8117fce:	f7f8 fcdd 	bl	811098c <lwip_htons>
 8117fd2:	4603      	mov	r3, r0
 8117fd4:	b2db      	uxtb	r3, r3
 8117fd6:	f003 0303 	and.w	r3, r3, #3
 8117fda:	2b00      	cmp	r3, #0
 8117fdc:	d001      	beq.n	8117fe2 <tcp_free_acked_segments+0xc6>
 8117fde:	2301      	movs	r3, #1
 8117fe0:	e000      	b.n	8117fe4 <tcp_free_acked_segments+0xc8>
 8117fe2:	2300      	movs	r3, #0
 8117fe4:	442b      	add	r3, r5
 8117fe6:	18e2      	adds	r2, r4, r3
 8117fe8:	4b09      	ldr	r3, [pc, #36]	@ (8118010 <tcp_free_acked_segments+0xf4>)
 8117fea:	681b      	ldr	r3, [r3, #0]
 8117fec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8117fee:	2b00      	cmp	r3, #0
 8117ff0:	dd9c      	ble.n	8117f2c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8117ff2:	68bb      	ldr	r3, [r7, #8]
}
 8117ff4:	4618      	mov	r0, r3
 8117ff6:	3718      	adds	r7, #24
 8117ff8:	46bd      	mov	sp, r7
 8117ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8117ffc:	0811e858 	.word	0x0811e858
 8118000:	0811eb80 	.word	0x0811eb80
 8118004:	0811e8e4 	.word	0x0811e8e4
 8118008:	10011d54 	.word	0x10011d54
 811800c:	0811eba8 	.word	0x0811eba8
 8118010:	10011d50 	.word	0x10011d50

08118014 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8118014:	b5b0      	push	{r4, r5, r7, lr}
 8118016:	b094      	sub	sp, #80	@ 0x50
 8118018:	af00      	add	r7, sp, #0
 811801a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 811801c:	2300      	movs	r3, #0
 811801e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8118020:	687b      	ldr	r3, [r7, #4]
 8118022:	2b00      	cmp	r3, #0
 8118024:	d106      	bne.n	8118034 <tcp_receive+0x20>
 8118026:	4b91      	ldr	r3, [pc, #580]	@ (811826c <tcp_receive+0x258>)
 8118028:	f240 427b 	movw	r2, #1147	@ 0x47b
 811802c:	4990      	ldr	r1, [pc, #576]	@ (8118270 <tcp_receive+0x25c>)
 811802e:	4891      	ldr	r0, [pc, #580]	@ (8118274 <tcp_receive+0x260>)
 8118030:	f003 fef4 	bl	811be1c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8118034:	687b      	ldr	r3, [r7, #4]
 8118036:	7d1b      	ldrb	r3, [r3, #20]
 8118038:	2b03      	cmp	r3, #3
 811803a:	d806      	bhi.n	811804a <tcp_receive+0x36>
 811803c:	4b8b      	ldr	r3, [pc, #556]	@ (811826c <tcp_receive+0x258>)
 811803e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8118042:	498d      	ldr	r1, [pc, #564]	@ (8118278 <tcp_receive+0x264>)
 8118044:	488b      	ldr	r0, [pc, #556]	@ (8118274 <tcp_receive+0x260>)
 8118046:	f003 fee9 	bl	811be1c <iprintf>

  if (flags & TCP_ACK) {
 811804a:	4b8c      	ldr	r3, [pc, #560]	@ (811827c <tcp_receive+0x268>)
 811804c:	781b      	ldrb	r3, [r3, #0]
 811804e:	f003 0310 	and.w	r3, r3, #16
 8118052:	2b00      	cmp	r3, #0
 8118054:	f000 8264 	beq.w	8118520 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8118058:	687b      	ldr	r3, [r7, #4]
 811805a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811805e:	461a      	mov	r2, r3
 8118060:	687b      	ldr	r3, [r7, #4]
 8118062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8118064:	4413      	add	r3, r2
 8118066:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8118068:	687b      	ldr	r3, [r7, #4]
 811806a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811806c:	4b84      	ldr	r3, [pc, #528]	@ (8118280 <tcp_receive+0x26c>)
 811806e:	681b      	ldr	r3, [r3, #0]
 8118070:	1ad3      	subs	r3, r2, r3
 8118072:	2b00      	cmp	r3, #0
 8118074:	db1b      	blt.n	81180ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8118076:	687b      	ldr	r3, [r7, #4]
 8118078:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811807a:	4b81      	ldr	r3, [pc, #516]	@ (8118280 <tcp_receive+0x26c>)
 811807c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 811807e:	429a      	cmp	r2, r3
 8118080:	d106      	bne.n	8118090 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8118082:	687b      	ldr	r3, [r7, #4]
 8118084:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8118086:	4b7f      	ldr	r3, [pc, #508]	@ (8118284 <tcp_receive+0x270>)
 8118088:	681b      	ldr	r3, [r3, #0]
 811808a:	1ad3      	subs	r3, r2, r3
 811808c:	2b00      	cmp	r3, #0
 811808e:	db0e      	blt.n	81180ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8118090:	687b      	ldr	r3, [r7, #4]
 8118092:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8118094:	4b7b      	ldr	r3, [pc, #492]	@ (8118284 <tcp_receive+0x270>)
 8118096:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8118098:	429a      	cmp	r2, r3
 811809a:	d125      	bne.n	81180e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 811809c:	4b7a      	ldr	r3, [pc, #488]	@ (8118288 <tcp_receive+0x274>)
 811809e:	681b      	ldr	r3, [r3, #0]
 81180a0:	89db      	ldrh	r3, [r3, #14]
 81180a2:	b29a      	uxth	r2, r3
 81180a4:	687b      	ldr	r3, [r7, #4]
 81180a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81180aa:	429a      	cmp	r2, r3
 81180ac:	d91c      	bls.n	81180e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 81180ae:	4b76      	ldr	r3, [pc, #472]	@ (8118288 <tcp_receive+0x274>)
 81180b0:	681b      	ldr	r3, [r3, #0]
 81180b2:	89db      	ldrh	r3, [r3, #14]
 81180b4:	b29a      	uxth	r2, r3
 81180b6:	687b      	ldr	r3, [r7, #4]
 81180b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 81180bc:	687b      	ldr	r3, [r7, #4]
 81180be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 81180c2:	687b      	ldr	r3, [r7, #4]
 81180c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81180c8:	429a      	cmp	r2, r3
 81180ca:	d205      	bcs.n	81180d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 81180cc:	687b      	ldr	r3, [r7, #4]
 81180ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 81180d2:	687b      	ldr	r3, [r7, #4]
 81180d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 81180d8:	4b69      	ldr	r3, [pc, #420]	@ (8118280 <tcp_receive+0x26c>)
 81180da:	681a      	ldr	r2, [r3, #0]
 81180dc:	687b      	ldr	r3, [r7, #4]
 81180de:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 81180e0:	4b68      	ldr	r3, [pc, #416]	@ (8118284 <tcp_receive+0x270>)
 81180e2:	681a      	ldr	r2, [r3, #0]
 81180e4:	687b      	ldr	r3, [r7, #4]
 81180e6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 81180e8:	4b66      	ldr	r3, [pc, #408]	@ (8118284 <tcp_receive+0x270>)
 81180ea:	681a      	ldr	r2, [r3, #0]
 81180ec:	687b      	ldr	r3, [r7, #4]
 81180ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81180f0:	1ad3      	subs	r3, r2, r3
 81180f2:	2b00      	cmp	r3, #0
 81180f4:	dc58      	bgt.n	81181a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 81180f6:	4b65      	ldr	r3, [pc, #404]	@ (811828c <tcp_receive+0x278>)
 81180f8:	881b      	ldrh	r3, [r3, #0]
 81180fa:	2b00      	cmp	r3, #0
 81180fc:	d14b      	bne.n	8118196 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 81180fe:	687b      	ldr	r3, [r7, #4]
 8118100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8118102:	687a      	ldr	r2, [r7, #4]
 8118104:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8118108:	4413      	add	r3, r2
 811810a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811810c:	429a      	cmp	r2, r3
 811810e:	d142      	bne.n	8118196 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8118110:	687b      	ldr	r3, [r7, #4]
 8118112:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8118116:	2b00      	cmp	r3, #0
 8118118:	db3d      	blt.n	8118196 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 811811a:	687b      	ldr	r3, [r7, #4]
 811811c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 811811e:	4b59      	ldr	r3, [pc, #356]	@ (8118284 <tcp_receive+0x270>)
 8118120:	681b      	ldr	r3, [r3, #0]
 8118122:	429a      	cmp	r2, r3
 8118124:	d137      	bne.n	8118196 <tcp_receive+0x182>
              found_dupack = 1;
 8118126:	2301      	movs	r3, #1
 8118128:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 811812a:	687b      	ldr	r3, [r7, #4]
 811812c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8118130:	2bff      	cmp	r3, #255	@ 0xff
 8118132:	d007      	beq.n	8118144 <tcp_receive+0x130>
                ++pcb->dupacks;
 8118134:	687b      	ldr	r3, [r7, #4]
 8118136:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811813a:	3301      	adds	r3, #1
 811813c:	b2da      	uxtb	r2, r3
 811813e:	687b      	ldr	r3, [r7, #4]
 8118140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8118144:	687b      	ldr	r3, [r7, #4]
 8118146:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811814a:	2b03      	cmp	r3, #3
 811814c:	d91b      	bls.n	8118186 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 811814e:	687b      	ldr	r3, [r7, #4]
 8118150:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8118154:	687b      	ldr	r3, [r7, #4]
 8118156:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8118158:	4413      	add	r3, r2
 811815a:	b29a      	uxth	r2, r3
 811815c:	687b      	ldr	r3, [r7, #4]
 811815e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8118162:	429a      	cmp	r2, r3
 8118164:	d30a      	bcc.n	811817c <tcp_receive+0x168>
 8118166:	687b      	ldr	r3, [r7, #4]
 8118168:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811816c:	687b      	ldr	r3, [r7, #4]
 811816e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8118170:	4413      	add	r3, r2
 8118172:	b29a      	uxth	r2, r3
 8118174:	687b      	ldr	r3, [r7, #4]
 8118176:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811817a:	e004      	b.n	8118186 <tcp_receive+0x172>
 811817c:	687b      	ldr	r3, [r7, #4]
 811817e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8118182:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8118186:	687b      	ldr	r3, [r7, #4]
 8118188:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811818c:	2b02      	cmp	r3, #2
 811818e:	d902      	bls.n	8118196 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8118190:	6878      	ldr	r0, [r7, #4]
 8118192:	f002 fb41 	bl	811a818 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8118196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8118198:	2b00      	cmp	r3, #0
 811819a:	f040 8161 	bne.w	8118460 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 811819e:	687b      	ldr	r3, [r7, #4]
 81181a0:	2200      	movs	r2, #0
 81181a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 81181a6:	e15b      	b.n	8118460 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 81181a8:	4b36      	ldr	r3, [pc, #216]	@ (8118284 <tcp_receive+0x270>)
 81181aa:	681a      	ldr	r2, [r3, #0]
 81181ac:	687b      	ldr	r3, [r7, #4]
 81181ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81181b0:	1ad3      	subs	r3, r2, r3
 81181b2:	3b01      	subs	r3, #1
 81181b4:	2b00      	cmp	r3, #0
 81181b6:	f2c0 814e 	blt.w	8118456 <tcp_receive+0x442>
 81181ba:	4b32      	ldr	r3, [pc, #200]	@ (8118284 <tcp_receive+0x270>)
 81181bc:	681a      	ldr	r2, [r3, #0]
 81181be:	687b      	ldr	r3, [r7, #4]
 81181c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81181c2:	1ad3      	subs	r3, r2, r3
 81181c4:	2b00      	cmp	r3, #0
 81181c6:	f300 8146 	bgt.w	8118456 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 81181ca:	687b      	ldr	r3, [r7, #4]
 81181cc:	8b5b      	ldrh	r3, [r3, #26]
 81181ce:	f003 0304 	and.w	r3, r3, #4
 81181d2:	2b00      	cmp	r3, #0
 81181d4:	d010      	beq.n	81181f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 81181d6:	687b      	ldr	r3, [r7, #4]
 81181d8:	8b5b      	ldrh	r3, [r3, #26]
 81181da:	f023 0304 	bic.w	r3, r3, #4
 81181de:	b29a      	uxth	r2, r3
 81181e0:	687b      	ldr	r3, [r7, #4]
 81181e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 81181e4:	687b      	ldr	r3, [r7, #4]
 81181e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 81181ea:	687b      	ldr	r3, [r7, #4]
 81181ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 81181f0:	687b      	ldr	r3, [r7, #4]
 81181f2:	2200      	movs	r2, #0
 81181f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 81181f8:	687b      	ldr	r3, [r7, #4]
 81181fa:	2200      	movs	r2, #0
 81181fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8118200:	687b      	ldr	r3, [r7, #4]
 8118202:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8118206:	10db      	asrs	r3, r3, #3
 8118208:	b21b      	sxth	r3, r3
 811820a:	b29a      	uxth	r2, r3
 811820c:	687b      	ldr	r3, [r7, #4]
 811820e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8118212:	b29b      	uxth	r3, r3
 8118214:	4413      	add	r3, r2
 8118216:	b29b      	uxth	r3, r3
 8118218:	b21a      	sxth	r2, r3
 811821a:	687b      	ldr	r3, [r7, #4]
 811821c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8118220:	4b18      	ldr	r3, [pc, #96]	@ (8118284 <tcp_receive+0x270>)
 8118222:	681b      	ldr	r3, [r3, #0]
 8118224:	b29a      	uxth	r2, r3
 8118226:	687b      	ldr	r3, [r7, #4]
 8118228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811822a:	b29b      	uxth	r3, r3
 811822c:	1ad3      	subs	r3, r2, r3
 811822e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8118230:	687b      	ldr	r3, [r7, #4]
 8118232:	2200      	movs	r2, #0
 8118234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8118238:	4b12      	ldr	r3, [pc, #72]	@ (8118284 <tcp_receive+0x270>)
 811823a:	681a      	ldr	r2, [r3, #0]
 811823c:	687b      	ldr	r3, [r7, #4]
 811823e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8118240:	687b      	ldr	r3, [r7, #4]
 8118242:	7d1b      	ldrb	r3, [r3, #20]
 8118244:	2b03      	cmp	r3, #3
 8118246:	f240 8097 	bls.w	8118378 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 811824a:	687b      	ldr	r3, [r7, #4]
 811824c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8118250:	687b      	ldr	r3, [r7, #4]
 8118252:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8118256:	429a      	cmp	r2, r3
 8118258:	d245      	bcs.n	81182e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 811825a:	687b      	ldr	r3, [r7, #4]
 811825c:	8b5b      	ldrh	r3, [r3, #26]
 811825e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8118262:	2b00      	cmp	r3, #0
 8118264:	d014      	beq.n	8118290 <tcp_receive+0x27c>
 8118266:	2301      	movs	r3, #1
 8118268:	e013      	b.n	8118292 <tcp_receive+0x27e>
 811826a:	bf00      	nop
 811826c:	0811e858 	.word	0x0811e858
 8118270:	0811ebc8 	.word	0x0811ebc8
 8118274:	0811e8e4 	.word	0x0811e8e4
 8118278:	0811ebe4 	.word	0x0811ebe4
 811827c:	10011d58 	.word	0x10011d58
 8118280:	10011d4c 	.word	0x10011d4c
 8118284:	10011d50 	.word	0x10011d50
 8118288:	10011d3c 	.word	0x10011d3c
 811828c:	10011d56 	.word	0x10011d56
 8118290:	2302      	movs	r3, #2
 8118292:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8118296:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 811829a:	b29a      	uxth	r2, r3
 811829c:	687b      	ldr	r3, [r7, #4]
 811829e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81182a0:	fb12 f303 	smulbb	r3, r2, r3
 81182a4:	b29b      	uxth	r3, r3
 81182a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 81182a8:	4293      	cmp	r3, r2
 81182aa:	bf28      	it	cs
 81182ac:	4613      	movcs	r3, r2
 81182ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 81182b0:	687b      	ldr	r3, [r7, #4]
 81182b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81182b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81182b8:	4413      	add	r3, r2
 81182ba:	b29a      	uxth	r2, r3
 81182bc:	687b      	ldr	r3, [r7, #4]
 81182be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 81182c2:	429a      	cmp	r2, r3
 81182c4:	d309      	bcc.n	81182da <tcp_receive+0x2c6>
 81182c6:	687b      	ldr	r3, [r7, #4]
 81182c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81182cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81182ce:	4413      	add	r3, r2
 81182d0:	b29a      	uxth	r2, r3
 81182d2:	687b      	ldr	r3, [r7, #4]
 81182d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 81182d8:	e04e      	b.n	8118378 <tcp_receive+0x364>
 81182da:	687b      	ldr	r3, [r7, #4]
 81182dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81182e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 81182e4:	e048      	b.n	8118378 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 81182e6:	687b      	ldr	r3, [r7, #4]
 81182e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 81182ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 81182ee:	4413      	add	r3, r2
 81182f0:	b29a      	uxth	r2, r3
 81182f2:	687b      	ldr	r3, [r7, #4]
 81182f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81182f8:	429a      	cmp	r2, r3
 81182fa:	d309      	bcc.n	8118310 <tcp_receive+0x2fc>
 81182fc:	687b      	ldr	r3, [r7, #4]
 81182fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8118302:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8118304:	4413      	add	r3, r2
 8118306:	b29a      	uxth	r2, r3
 8118308:	687b      	ldr	r3, [r7, #4]
 811830a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 811830e:	e004      	b.n	811831a <tcp_receive+0x306>
 8118310:	687b      	ldr	r3, [r7, #4]
 8118312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8118316:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 811831a:	687b      	ldr	r3, [r7, #4]
 811831c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8118320:	687b      	ldr	r3, [r7, #4]
 8118322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8118326:	429a      	cmp	r2, r3
 8118328:	d326      	bcc.n	8118378 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 811832a:	687b      	ldr	r3, [r7, #4]
 811832c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8118330:	687b      	ldr	r3, [r7, #4]
 8118332:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8118336:	1ad3      	subs	r3, r2, r3
 8118338:	b29a      	uxth	r2, r3
 811833a:	687b      	ldr	r3, [r7, #4]
 811833c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8118340:	687b      	ldr	r3, [r7, #4]
 8118342:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8118346:	687b      	ldr	r3, [r7, #4]
 8118348:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811834a:	4413      	add	r3, r2
 811834c:	b29a      	uxth	r2, r3
 811834e:	687b      	ldr	r3, [r7, #4]
 8118350:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8118354:	429a      	cmp	r2, r3
 8118356:	d30a      	bcc.n	811836e <tcp_receive+0x35a>
 8118358:	687b      	ldr	r3, [r7, #4]
 811835a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811835e:	687b      	ldr	r3, [r7, #4]
 8118360:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8118362:	4413      	add	r3, r2
 8118364:	b29a      	uxth	r2, r3
 8118366:	687b      	ldr	r3, [r7, #4]
 8118368:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811836c:	e004      	b.n	8118378 <tcp_receive+0x364>
 811836e:	687b      	ldr	r3, [r7, #4]
 8118370:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8118374:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8118378:	687b      	ldr	r3, [r7, #4]
 811837a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 811837c:	687b      	ldr	r3, [r7, #4]
 811837e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8118380:	4a98      	ldr	r2, [pc, #608]	@ (81185e4 <tcp_receive+0x5d0>)
 8118382:	6878      	ldr	r0, [r7, #4]
 8118384:	f7ff fdca 	bl	8117f1c <tcp_free_acked_segments>
 8118388:	4602      	mov	r2, r0
 811838a:	687b      	ldr	r3, [r7, #4]
 811838c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 811838e:	687b      	ldr	r3, [r7, #4]
 8118390:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8118392:	687b      	ldr	r3, [r7, #4]
 8118394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8118396:	4a94      	ldr	r2, [pc, #592]	@ (81185e8 <tcp_receive+0x5d4>)
 8118398:	6878      	ldr	r0, [r7, #4]
 811839a:	f7ff fdbf 	bl	8117f1c <tcp_free_acked_segments>
 811839e:	4602      	mov	r2, r0
 81183a0:	687b      	ldr	r3, [r7, #4]
 81183a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 81183a4:	687b      	ldr	r3, [r7, #4]
 81183a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81183a8:	2b00      	cmp	r3, #0
 81183aa:	d104      	bne.n	81183b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 81183ac:	687b      	ldr	r3, [r7, #4]
 81183ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81183b2:	861a      	strh	r2, [r3, #48]	@ 0x30
 81183b4:	e002      	b.n	81183bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 81183b6:	687b      	ldr	r3, [r7, #4]
 81183b8:	2200      	movs	r2, #0
 81183ba:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 81183bc:	687b      	ldr	r3, [r7, #4]
 81183be:	2200      	movs	r2, #0
 81183c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 81183c2:	687b      	ldr	r3, [r7, #4]
 81183c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81183c6:	2b00      	cmp	r3, #0
 81183c8:	d103      	bne.n	81183d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 81183ca:	687b      	ldr	r3, [r7, #4]
 81183cc:	2200      	movs	r2, #0
 81183ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 81183d2:	687b      	ldr	r3, [r7, #4]
 81183d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 81183d8:	4b84      	ldr	r3, [pc, #528]	@ (81185ec <tcp_receive+0x5d8>)
 81183da:	881b      	ldrh	r3, [r3, #0]
 81183dc:	4413      	add	r3, r2
 81183de:	b29a      	uxth	r2, r3
 81183e0:	687b      	ldr	r3, [r7, #4]
 81183e2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 81183e6:	687b      	ldr	r3, [r7, #4]
 81183e8:	8b5b      	ldrh	r3, [r3, #26]
 81183ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81183ee:	2b00      	cmp	r3, #0
 81183f0:	d035      	beq.n	811845e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 81183f2:	687b      	ldr	r3, [r7, #4]
 81183f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81183f6:	2b00      	cmp	r3, #0
 81183f8:	d118      	bne.n	811842c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 81183fa:	687b      	ldr	r3, [r7, #4]
 81183fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81183fe:	2b00      	cmp	r3, #0
 8118400:	d00c      	beq.n	811841c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8118402:	687b      	ldr	r3, [r7, #4]
 8118404:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8118406:	687b      	ldr	r3, [r7, #4]
 8118408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811840a:	68db      	ldr	r3, [r3, #12]
 811840c:	685b      	ldr	r3, [r3, #4]
 811840e:	4618      	mov	r0, r3
 8118410:	f7f8 fad1 	bl	81109b6 <lwip_htonl>
 8118414:	4603      	mov	r3, r0
 8118416:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8118418:	2b00      	cmp	r3, #0
 811841a:	dc20      	bgt.n	811845e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 811841c:	687b      	ldr	r3, [r7, #4]
 811841e:	8b5b      	ldrh	r3, [r3, #26]
 8118420:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8118424:	b29a      	uxth	r2, r3
 8118426:	687b      	ldr	r3, [r7, #4]
 8118428:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811842a:	e018      	b.n	811845e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 811842c:	687b      	ldr	r3, [r7, #4]
 811842e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8118430:	687b      	ldr	r3, [r7, #4]
 8118432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8118434:	68db      	ldr	r3, [r3, #12]
 8118436:	685b      	ldr	r3, [r3, #4]
 8118438:	4618      	mov	r0, r3
 811843a:	f7f8 fabc 	bl	81109b6 <lwip_htonl>
 811843e:	4603      	mov	r3, r0
 8118440:	1ae3      	subs	r3, r4, r3
 8118442:	2b00      	cmp	r3, #0
 8118444:	dc0b      	bgt.n	811845e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8118446:	687b      	ldr	r3, [r7, #4]
 8118448:	8b5b      	ldrh	r3, [r3, #26]
 811844a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811844e:	b29a      	uxth	r2, r3
 8118450:	687b      	ldr	r3, [r7, #4]
 8118452:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8118454:	e003      	b.n	811845e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8118456:	6878      	ldr	r0, [r7, #4]
 8118458:	f002 fbca 	bl	811abf0 <tcp_send_empty_ack>
 811845c:	e000      	b.n	8118460 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811845e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8118460:	687b      	ldr	r3, [r7, #4]
 8118462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8118464:	2b00      	cmp	r3, #0
 8118466:	d05b      	beq.n	8118520 <tcp_receive+0x50c>
 8118468:	687b      	ldr	r3, [r7, #4]
 811846a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 811846c:	4b60      	ldr	r3, [pc, #384]	@ (81185f0 <tcp_receive+0x5dc>)
 811846e:	681b      	ldr	r3, [r3, #0]
 8118470:	1ad3      	subs	r3, r2, r3
 8118472:	2b00      	cmp	r3, #0
 8118474:	da54      	bge.n	8118520 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8118476:	4b5f      	ldr	r3, [pc, #380]	@ (81185f4 <tcp_receive+0x5e0>)
 8118478:	681b      	ldr	r3, [r3, #0]
 811847a:	b29a      	uxth	r2, r3
 811847c:	687b      	ldr	r3, [r7, #4]
 811847e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8118480:	b29b      	uxth	r3, r3
 8118482:	1ad3      	subs	r3, r2, r3
 8118484:	b29b      	uxth	r3, r3
 8118486:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 811848a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 811848e:	687b      	ldr	r3, [r7, #4]
 8118490:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8118494:	10db      	asrs	r3, r3, #3
 8118496:	b21b      	sxth	r3, r3
 8118498:	b29b      	uxth	r3, r3
 811849a:	1ad3      	subs	r3, r2, r3
 811849c:	b29b      	uxth	r3, r3
 811849e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 81184a2:	687b      	ldr	r3, [r7, #4]
 81184a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 81184a8:	b29a      	uxth	r2, r3
 81184aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 81184ae:	4413      	add	r3, r2
 81184b0:	b29b      	uxth	r3, r3
 81184b2:	b21a      	sxth	r2, r3
 81184b4:	687b      	ldr	r3, [r7, #4]
 81184b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 81184b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 81184bc:	2b00      	cmp	r3, #0
 81184be:	da05      	bge.n	81184cc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 81184c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 81184c4:	425b      	negs	r3, r3
 81184c6:	b29b      	uxth	r3, r3
 81184c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 81184cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 81184d0:	687b      	ldr	r3, [r7, #4]
 81184d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 81184d6:	109b      	asrs	r3, r3, #2
 81184d8:	b21b      	sxth	r3, r3
 81184da:	b29b      	uxth	r3, r3
 81184dc:	1ad3      	subs	r3, r2, r3
 81184de:	b29b      	uxth	r3, r3
 81184e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 81184e4:	687b      	ldr	r3, [r7, #4]
 81184e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 81184ea:	b29a      	uxth	r2, r3
 81184ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 81184f0:	4413      	add	r3, r2
 81184f2:	b29b      	uxth	r3, r3
 81184f4:	b21a      	sxth	r2, r3
 81184f6:	687b      	ldr	r3, [r7, #4]
 81184f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 81184fa:	687b      	ldr	r3, [r7, #4]
 81184fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8118500:	10db      	asrs	r3, r3, #3
 8118502:	b21b      	sxth	r3, r3
 8118504:	b29a      	uxth	r2, r3
 8118506:	687b      	ldr	r3, [r7, #4]
 8118508:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811850c:	b29b      	uxth	r3, r3
 811850e:	4413      	add	r3, r2
 8118510:	b29b      	uxth	r3, r3
 8118512:	b21a      	sxth	r2, r3
 8118514:	687b      	ldr	r3, [r7, #4]
 8118516:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 811851a:	687b      	ldr	r3, [r7, #4]
 811851c:	2200      	movs	r2, #0
 811851e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8118520:	4b35      	ldr	r3, [pc, #212]	@ (81185f8 <tcp_receive+0x5e4>)
 8118522:	881b      	ldrh	r3, [r3, #0]
 8118524:	2b00      	cmp	r3, #0
 8118526:	f000 84df 	beq.w	8118ee8 <tcp_receive+0xed4>
 811852a:	687b      	ldr	r3, [r7, #4]
 811852c:	7d1b      	ldrb	r3, [r3, #20]
 811852e:	2b06      	cmp	r3, #6
 8118530:	f200 84da 	bhi.w	8118ee8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8118534:	687b      	ldr	r3, [r7, #4]
 8118536:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8118538:	4b30      	ldr	r3, [pc, #192]	@ (81185fc <tcp_receive+0x5e8>)
 811853a:	681b      	ldr	r3, [r3, #0]
 811853c:	1ad3      	subs	r3, r2, r3
 811853e:	3b01      	subs	r3, #1
 8118540:	2b00      	cmp	r3, #0
 8118542:	f2c0 808f 	blt.w	8118664 <tcp_receive+0x650>
 8118546:	687b      	ldr	r3, [r7, #4]
 8118548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811854a:	4b2b      	ldr	r3, [pc, #172]	@ (81185f8 <tcp_receive+0x5e4>)
 811854c:	881b      	ldrh	r3, [r3, #0]
 811854e:	4619      	mov	r1, r3
 8118550:	4b2a      	ldr	r3, [pc, #168]	@ (81185fc <tcp_receive+0x5e8>)
 8118552:	681b      	ldr	r3, [r3, #0]
 8118554:	440b      	add	r3, r1
 8118556:	1ad3      	subs	r3, r2, r3
 8118558:	3301      	adds	r3, #1
 811855a:	2b00      	cmp	r3, #0
 811855c:	f300 8082 	bgt.w	8118664 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8118560:	4b27      	ldr	r3, [pc, #156]	@ (8118600 <tcp_receive+0x5ec>)
 8118562:	685b      	ldr	r3, [r3, #4]
 8118564:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8118566:	687b      	ldr	r3, [r7, #4]
 8118568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811856a:	4b24      	ldr	r3, [pc, #144]	@ (81185fc <tcp_receive+0x5e8>)
 811856c:	681b      	ldr	r3, [r3, #0]
 811856e:	1ad3      	subs	r3, r2, r3
 8118570:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8118572:	4b23      	ldr	r3, [pc, #140]	@ (8118600 <tcp_receive+0x5ec>)
 8118574:	685b      	ldr	r3, [r3, #4]
 8118576:	2b00      	cmp	r3, #0
 8118578:	d106      	bne.n	8118588 <tcp_receive+0x574>
 811857a:	4b22      	ldr	r3, [pc, #136]	@ (8118604 <tcp_receive+0x5f0>)
 811857c:	f240 5294 	movw	r2, #1428	@ 0x594
 8118580:	4921      	ldr	r1, [pc, #132]	@ (8118608 <tcp_receive+0x5f4>)
 8118582:	4822      	ldr	r0, [pc, #136]	@ (811860c <tcp_receive+0x5f8>)
 8118584:	f003 fc4a 	bl	811be1c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8118588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811858a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 811858e:	4293      	cmp	r3, r2
 8118590:	d906      	bls.n	81185a0 <tcp_receive+0x58c>
 8118592:	4b1c      	ldr	r3, [pc, #112]	@ (8118604 <tcp_receive+0x5f0>)
 8118594:	f240 5295 	movw	r2, #1429	@ 0x595
 8118598:	491d      	ldr	r1, [pc, #116]	@ (8118610 <tcp_receive+0x5fc>)
 811859a:	481c      	ldr	r0, [pc, #112]	@ (811860c <tcp_receive+0x5f8>)
 811859c:	f003 fc3e 	bl	811be1c <iprintf>
      off = (u16_t)off32;
 81185a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81185a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 81185a6:	4b16      	ldr	r3, [pc, #88]	@ (8118600 <tcp_receive+0x5ec>)
 81185a8:	685b      	ldr	r3, [r3, #4]
 81185aa:	891b      	ldrh	r3, [r3, #8]
 81185ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81185b0:	429a      	cmp	r2, r3
 81185b2:	d906      	bls.n	81185c2 <tcp_receive+0x5ae>
 81185b4:	4b13      	ldr	r3, [pc, #76]	@ (8118604 <tcp_receive+0x5f0>)
 81185b6:	f240 5297 	movw	r2, #1431	@ 0x597
 81185ba:	4916      	ldr	r1, [pc, #88]	@ (8118614 <tcp_receive+0x600>)
 81185bc:	4813      	ldr	r0, [pc, #76]	@ (811860c <tcp_receive+0x5f8>)
 81185be:	f003 fc2d 	bl	811be1c <iprintf>
      inseg.len -= off;
 81185c2:	4b0f      	ldr	r3, [pc, #60]	@ (8118600 <tcp_receive+0x5ec>)
 81185c4:	891a      	ldrh	r2, [r3, #8]
 81185c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81185ca:	1ad3      	subs	r3, r2, r3
 81185cc:	b29a      	uxth	r2, r3
 81185ce:	4b0c      	ldr	r3, [pc, #48]	@ (8118600 <tcp_receive+0x5ec>)
 81185d0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 81185d2:	4b0b      	ldr	r3, [pc, #44]	@ (8118600 <tcp_receive+0x5ec>)
 81185d4:	685b      	ldr	r3, [r3, #4]
 81185d6:	891a      	ldrh	r2, [r3, #8]
 81185d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81185dc:	1ad3      	subs	r3, r2, r3
 81185de:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 81185e0:	e02a      	b.n	8118638 <tcp_receive+0x624>
 81185e2:	bf00      	nop
 81185e4:	0811ec00 	.word	0x0811ec00
 81185e8:	0811ec08 	.word	0x0811ec08
 81185ec:	10011d54 	.word	0x10011d54
 81185f0:	10011d50 	.word	0x10011d50
 81185f4:	10011d14 	.word	0x10011d14
 81185f8:	10011d56 	.word	0x10011d56
 81185fc:	10011d4c 	.word	0x10011d4c
 8118600:	10011d2c 	.word	0x10011d2c
 8118604:	0811e858 	.word	0x0811e858
 8118608:	0811ec10 	.word	0x0811ec10
 811860c:	0811e8e4 	.word	0x0811e8e4
 8118610:	0811ec20 	.word	0x0811ec20
 8118614:	0811ec30 	.word	0x0811ec30
        off -= p->len;
 8118618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811861a:	895b      	ldrh	r3, [r3, #10]
 811861c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8118620:	1ad3      	subs	r3, r2, r3
 8118622:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8118626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8118628:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811862a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 811862c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811862e:	2200      	movs	r2, #0
 8118630:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8118632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8118634:	681b      	ldr	r3, [r3, #0]
 8118636:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8118638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811863a:	895b      	ldrh	r3, [r3, #10]
 811863c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8118640:	429a      	cmp	r2, r3
 8118642:	d8e9      	bhi.n	8118618 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8118644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8118648:	4619      	mov	r1, r3
 811864a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 811864c:	f7fc f89e 	bl	811478c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8118650:	687b      	ldr	r3, [r7, #4]
 8118652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118654:	4a90      	ldr	r2, [pc, #576]	@ (8118898 <tcp_receive+0x884>)
 8118656:	6013      	str	r3, [r2, #0]
 8118658:	4b90      	ldr	r3, [pc, #576]	@ (811889c <tcp_receive+0x888>)
 811865a:	68db      	ldr	r3, [r3, #12]
 811865c:	4a8e      	ldr	r2, [pc, #568]	@ (8118898 <tcp_receive+0x884>)
 811865e:	6812      	ldr	r2, [r2, #0]
 8118660:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8118662:	e00d      	b.n	8118680 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8118664:	4b8c      	ldr	r3, [pc, #560]	@ (8118898 <tcp_receive+0x884>)
 8118666:	681a      	ldr	r2, [r3, #0]
 8118668:	687b      	ldr	r3, [r7, #4]
 811866a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811866c:	1ad3      	subs	r3, r2, r3
 811866e:	2b00      	cmp	r3, #0
 8118670:	da06      	bge.n	8118680 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8118672:	687b      	ldr	r3, [r7, #4]
 8118674:	8b5b      	ldrh	r3, [r3, #26]
 8118676:	f043 0302 	orr.w	r3, r3, #2
 811867a:	b29a      	uxth	r2, r3
 811867c:	687b      	ldr	r3, [r7, #4]
 811867e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8118680:	4b85      	ldr	r3, [pc, #532]	@ (8118898 <tcp_receive+0x884>)
 8118682:	681a      	ldr	r2, [r3, #0]
 8118684:	687b      	ldr	r3, [r7, #4]
 8118686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118688:	1ad3      	subs	r3, r2, r3
 811868a:	2b00      	cmp	r3, #0
 811868c:	f2c0 8427 	blt.w	8118ede <tcp_receive+0xeca>
 8118690:	4b81      	ldr	r3, [pc, #516]	@ (8118898 <tcp_receive+0x884>)
 8118692:	681a      	ldr	r2, [r3, #0]
 8118694:	687b      	ldr	r3, [r7, #4]
 8118696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118698:	6879      	ldr	r1, [r7, #4]
 811869a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811869c:	440b      	add	r3, r1
 811869e:	1ad3      	subs	r3, r2, r3
 81186a0:	3301      	adds	r3, #1
 81186a2:	2b00      	cmp	r3, #0
 81186a4:	f300 841b 	bgt.w	8118ede <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 81186a8:	687b      	ldr	r3, [r7, #4]
 81186aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81186ac:	4b7a      	ldr	r3, [pc, #488]	@ (8118898 <tcp_receive+0x884>)
 81186ae:	681b      	ldr	r3, [r3, #0]
 81186b0:	429a      	cmp	r2, r3
 81186b2:	f040 8298 	bne.w	8118be6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 81186b6:	4b79      	ldr	r3, [pc, #484]	@ (811889c <tcp_receive+0x888>)
 81186b8:	891c      	ldrh	r4, [r3, #8]
 81186ba:	4b78      	ldr	r3, [pc, #480]	@ (811889c <tcp_receive+0x888>)
 81186bc:	68db      	ldr	r3, [r3, #12]
 81186be:	899b      	ldrh	r3, [r3, #12]
 81186c0:	b29b      	uxth	r3, r3
 81186c2:	4618      	mov	r0, r3
 81186c4:	f7f8 f962 	bl	811098c <lwip_htons>
 81186c8:	4603      	mov	r3, r0
 81186ca:	b2db      	uxtb	r3, r3
 81186cc:	f003 0303 	and.w	r3, r3, #3
 81186d0:	2b00      	cmp	r3, #0
 81186d2:	d001      	beq.n	81186d8 <tcp_receive+0x6c4>
 81186d4:	2301      	movs	r3, #1
 81186d6:	e000      	b.n	81186da <tcp_receive+0x6c6>
 81186d8:	2300      	movs	r3, #0
 81186da:	4423      	add	r3, r4
 81186dc:	b29a      	uxth	r2, r3
 81186de:	4b70      	ldr	r3, [pc, #448]	@ (81188a0 <tcp_receive+0x88c>)
 81186e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 81186e2:	687b      	ldr	r3, [r7, #4]
 81186e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81186e6:	4b6e      	ldr	r3, [pc, #440]	@ (81188a0 <tcp_receive+0x88c>)
 81186e8:	881b      	ldrh	r3, [r3, #0]
 81186ea:	429a      	cmp	r2, r3
 81186ec:	d274      	bcs.n	81187d8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 81186ee:	4b6b      	ldr	r3, [pc, #428]	@ (811889c <tcp_receive+0x888>)
 81186f0:	68db      	ldr	r3, [r3, #12]
 81186f2:	899b      	ldrh	r3, [r3, #12]
 81186f4:	b29b      	uxth	r3, r3
 81186f6:	4618      	mov	r0, r3
 81186f8:	f7f8 f948 	bl	811098c <lwip_htons>
 81186fc:	4603      	mov	r3, r0
 81186fe:	b2db      	uxtb	r3, r3
 8118700:	f003 0301 	and.w	r3, r3, #1
 8118704:	2b00      	cmp	r3, #0
 8118706:	d01e      	beq.n	8118746 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8118708:	4b64      	ldr	r3, [pc, #400]	@ (811889c <tcp_receive+0x888>)
 811870a:	68db      	ldr	r3, [r3, #12]
 811870c:	899b      	ldrh	r3, [r3, #12]
 811870e:	b29b      	uxth	r3, r3
 8118710:	b21b      	sxth	r3, r3
 8118712:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8118716:	b21c      	sxth	r4, r3
 8118718:	4b60      	ldr	r3, [pc, #384]	@ (811889c <tcp_receive+0x888>)
 811871a:	68db      	ldr	r3, [r3, #12]
 811871c:	899b      	ldrh	r3, [r3, #12]
 811871e:	b29b      	uxth	r3, r3
 8118720:	4618      	mov	r0, r3
 8118722:	f7f8 f933 	bl	811098c <lwip_htons>
 8118726:	4603      	mov	r3, r0
 8118728:	b2db      	uxtb	r3, r3
 811872a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811872e:	b29b      	uxth	r3, r3
 8118730:	4618      	mov	r0, r3
 8118732:	f7f8 f92b 	bl	811098c <lwip_htons>
 8118736:	4603      	mov	r3, r0
 8118738:	b21b      	sxth	r3, r3
 811873a:	4323      	orrs	r3, r4
 811873c:	b21a      	sxth	r2, r3
 811873e:	4b57      	ldr	r3, [pc, #348]	@ (811889c <tcp_receive+0x888>)
 8118740:	68db      	ldr	r3, [r3, #12]
 8118742:	b292      	uxth	r2, r2
 8118744:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8118746:	687b      	ldr	r3, [r7, #4]
 8118748:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811874a:	4b54      	ldr	r3, [pc, #336]	@ (811889c <tcp_receive+0x888>)
 811874c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811874e:	4b53      	ldr	r3, [pc, #332]	@ (811889c <tcp_receive+0x888>)
 8118750:	68db      	ldr	r3, [r3, #12]
 8118752:	899b      	ldrh	r3, [r3, #12]
 8118754:	b29b      	uxth	r3, r3
 8118756:	4618      	mov	r0, r3
 8118758:	f7f8 f918 	bl	811098c <lwip_htons>
 811875c:	4603      	mov	r3, r0
 811875e:	b2db      	uxtb	r3, r3
 8118760:	f003 0302 	and.w	r3, r3, #2
 8118764:	2b00      	cmp	r3, #0
 8118766:	d005      	beq.n	8118774 <tcp_receive+0x760>
            inseg.len -= 1;
 8118768:	4b4c      	ldr	r3, [pc, #304]	@ (811889c <tcp_receive+0x888>)
 811876a:	891b      	ldrh	r3, [r3, #8]
 811876c:	3b01      	subs	r3, #1
 811876e:	b29a      	uxth	r2, r3
 8118770:	4b4a      	ldr	r3, [pc, #296]	@ (811889c <tcp_receive+0x888>)
 8118772:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8118774:	4b49      	ldr	r3, [pc, #292]	@ (811889c <tcp_receive+0x888>)
 8118776:	685b      	ldr	r3, [r3, #4]
 8118778:	4a48      	ldr	r2, [pc, #288]	@ (811889c <tcp_receive+0x888>)
 811877a:	8912      	ldrh	r2, [r2, #8]
 811877c:	4611      	mov	r1, r2
 811877e:	4618      	mov	r0, r3
 8118780:	f7fb ff06 	bl	8114590 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8118784:	4b45      	ldr	r3, [pc, #276]	@ (811889c <tcp_receive+0x888>)
 8118786:	891c      	ldrh	r4, [r3, #8]
 8118788:	4b44      	ldr	r3, [pc, #272]	@ (811889c <tcp_receive+0x888>)
 811878a:	68db      	ldr	r3, [r3, #12]
 811878c:	899b      	ldrh	r3, [r3, #12]
 811878e:	b29b      	uxth	r3, r3
 8118790:	4618      	mov	r0, r3
 8118792:	f7f8 f8fb 	bl	811098c <lwip_htons>
 8118796:	4603      	mov	r3, r0
 8118798:	b2db      	uxtb	r3, r3
 811879a:	f003 0303 	and.w	r3, r3, #3
 811879e:	2b00      	cmp	r3, #0
 81187a0:	d001      	beq.n	81187a6 <tcp_receive+0x792>
 81187a2:	2301      	movs	r3, #1
 81187a4:	e000      	b.n	81187a8 <tcp_receive+0x794>
 81187a6:	2300      	movs	r3, #0
 81187a8:	4423      	add	r3, r4
 81187aa:	b29a      	uxth	r2, r3
 81187ac:	4b3c      	ldr	r3, [pc, #240]	@ (81188a0 <tcp_receive+0x88c>)
 81187ae:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 81187b0:	4b3b      	ldr	r3, [pc, #236]	@ (81188a0 <tcp_receive+0x88c>)
 81187b2:	881b      	ldrh	r3, [r3, #0]
 81187b4:	461a      	mov	r2, r3
 81187b6:	4b38      	ldr	r3, [pc, #224]	@ (8118898 <tcp_receive+0x884>)
 81187b8:	681b      	ldr	r3, [r3, #0]
 81187ba:	441a      	add	r2, r3
 81187bc:	687b      	ldr	r3, [r7, #4]
 81187be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81187c0:	6879      	ldr	r1, [r7, #4]
 81187c2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81187c4:	440b      	add	r3, r1
 81187c6:	429a      	cmp	r2, r3
 81187c8:	d006      	beq.n	81187d8 <tcp_receive+0x7c4>
 81187ca:	4b36      	ldr	r3, [pc, #216]	@ (81188a4 <tcp_receive+0x890>)
 81187cc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 81187d0:	4935      	ldr	r1, [pc, #212]	@ (81188a8 <tcp_receive+0x894>)
 81187d2:	4836      	ldr	r0, [pc, #216]	@ (81188ac <tcp_receive+0x898>)
 81187d4:	f003 fb22 	bl	811be1c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 81187d8:	687b      	ldr	r3, [r7, #4]
 81187da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81187dc:	2b00      	cmp	r3, #0
 81187de:	f000 80e6 	beq.w	81189ae <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 81187e2:	4b2e      	ldr	r3, [pc, #184]	@ (811889c <tcp_receive+0x888>)
 81187e4:	68db      	ldr	r3, [r3, #12]
 81187e6:	899b      	ldrh	r3, [r3, #12]
 81187e8:	b29b      	uxth	r3, r3
 81187ea:	4618      	mov	r0, r3
 81187ec:	f7f8 f8ce 	bl	811098c <lwip_htons>
 81187f0:	4603      	mov	r3, r0
 81187f2:	b2db      	uxtb	r3, r3
 81187f4:	f003 0301 	and.w	r3, r3, #1
 81187f8:	2b00      	cmp	r3, #0
 81187fa:	d010      	beq.n	811881e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 81187fc:	e00a      	b.n	8118814 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 81187fe:	687b      	ldr	r3, [r7, #4]
 8118800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118802:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8118804:	687b      	ldr	r3, [r7, #4]
 8118806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118808:	681a      	ldr	r2, [r3, #0]
 811880a:	687b      	ldr	r3, [r7, #4]
 811880c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 811880e:	68f8      	ldr	r0, [r7, #12]
 8118810:	f7fd fd17 	bl	8116242 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8118814:	687b      	ldr	r3, [r7, #4]
 8118816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118818:	2b00      	cmp	r3, #0
 811881a:	d1f0      	bne.n	81187fe <tcp_receive+0x7ea>
 811881c:	e0c7      	b.n	81189ae <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 811881e:	687b      	ldr	r3, [r7, #4]
 8118820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118822:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8118824:	e051      	b.n	81188ca <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8118826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8118828:	68db      	ldr	r3, [r3, #12]
 811882a:	899b      	ldrh	r3, [r3, #12]
 811882c:	b29b      	uxth	r3, r3
 811882e:	4618      	mov	r0, r3
 8118830:	f7f8 f8ac 	bl	811098c <lwip_htons>
 8118834:	4603      	mov	r3, r0
 8118836:	b2db      	uxtb	r3, r3
 8118838:	f003 0301 	and.w	r3, r3, #1
 811883c:	2b00      	cmp	r3, #0
 811883e:	d03c      	beq.n	81188ba <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8118840:	4b16      	ldr	r3, [pc, #88]	@ (811889c <tcp_receive+0x888>)
 8118842:	68db      	ldr	r3, [r3, #12]
 8118844:	899b      	ldrh	r3, [r3, #12]
 8118846:	b29b      	uxth	r3, r3
 8118848:	4618      	mov	r0, r3
 811884a:	f7f8 f89f 	bl	811098c <lwip_htons>
 811884e:	4603      	mov	r3, r0
 8118850:	b2db      	uxtb	r3, r3
 8118852:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8118856:	2b00      	cmp	r3, #0
 8118858:	d12f      	bne.n	81188ba <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 811885a:	4b10      	ldr	r3, [pc, #64]	@ (811889c <tcp_receive+0x888>)
 811885c:	68db      	ldr	r3, [r3, #12]
 811885e:	899b      	ldrh	r3, [r3, #12]
 8118860:	b29c      	uxth	r4, r3
 8118862:	2001      	movs	r0, #1
 8118864:	f7f8 f892 	bl	811098c <lwip_htons>
 8118868:	4603      	mov	r3, r0
 811886a:	461a      	mov	r2, r3
 811886c:	4b0b      	ldr	r3, [pc, #44]	@ (811889c <tcp_receive+0x888>)
 811886e:	68db      	ldr	r3, [r3, #12]
 8118870:	4322      	orrs	r2, r4
 8118872:	b292      	uxth	r2, r2
 8118874:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8118876:	4b09      	ldr	r3, [pc, #36]	@ (811889c <tcp_receive+0x888>)
 8118878:	891c      	ldrh	r4, [r3, #8]
 811887a:	4b08      	ldr	r3, [pc, #32]	@ (811889c <tcp_receive+0x888>)
 811887c:	68db      	ldr	r3, [r3, #12]
 811887e:	899b      	ldrh	r3, [r3, #12]
 8118880:	b29b      	uxth	r3, r3
 8118882:	4618      	mov	r0, r3
 8118884:	f7f8 f882 	bl	811098c <lwip_htons>
 8118888:	4603      	mov	r3, r0
 811888a:	b2db      	uxtb	r3, r3
 811888c:	f003 0303 	and.w	r3, r3, #3
 8118890:	2b00      	cmp	r3, #0
 8118892:	d00d      	beq.n	81188b0 <tcp_receive+0x89c>
 8118894:	2301      	movs	r3, #1
 8118896:	e00c      	b.n	81188b2 <tcp_receive+0x89e>
 8118898:	10011d4c 	.word	0x10011d4c
 811889c:	10011d2c 	.word	0x10011d2c
 81188a0:	10011d56 	.word	0x10011d56
 81188a4:	0811e858 	.word	0x0811e858
 81188a8:	0811ec40 	.word	0x0811ec40
 81188ac:	0811e8e4 	.word	0x0811e8e4
 81188b0:	2300      	movs	r3, #0
 81188b2:	4423      	add	r3, r4
 81188b4:	b29a      	uxth	r2, r3
 81188b6:	4b98      	ldr	r3, [pc, #608]	@ (8118b18 <tcp_receive+0xb04>)
 81188b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 81188ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81188bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 81188be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81188c0:	681b      	ldr	r3, [r3, #0]
 81188c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 81188c4:	6938      	ldr	r0, [r7, #16]
 81188c6:	f7fd fcbc 	bl	8116242 <tcp_seg_free>
            while (next &&
 81188ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81188cc:	2b00      	cmp	r3, #0
 81188ce:	d00e      	beq.n	81188ee <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 81188d0:	4b91      	ldr	r3, [pc, #580]	@ (8118b18 <tcp_receive+0xb04>)
 81188d2:	881b      	ldrh	r3, [r3, #0]
 81188d4:	461a      	mov	r2, r3
 81188d6:	4b91      	ldr	r3, [pc, #580]	@ (8118b1c <tcp_receive+0xb08>)
 81188d8:	681b      	ldr	r3, [r3, #0]
 81188da:	441a      	add	r2, r3
 81188dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81188de:	68db      	ldr	r3, [r3, #12]
 81188e0:	685b      	ldr	r3, [r3, #4]
 81188e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81188e4:	8909      	ldrh	r1, [r1, #8]
 81188e6:	440b      	add	r3, r1
 81188e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 81188ea:	2b00      	cmp	r3, #0
 81188ec:	da9b      	bge.n	8118826 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 81188ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81188f0:	2b00      	cmp	r3, #0
 81188f2:	d059      	beq.n	81189a8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 81188f4:	4b88      	ldr	r3, [pc, #544]	@ (8118b18 <tcp_receive+0xb04>)
 81188f6:	881b      	ldrh	r3, [r3, #0]
 81188f8:	461a      	mov	r2, r3
 81188fa:	4b88      	ldr	r3, [pc, #544]	@ (8118b1c <tcp_receive+0xb08>)
 81188fc:	681b      	ldr	r3, [r3, #0]
 81188fe:	441a      	add	r2, r3
 8118900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8118902:	68db      	ldr	r3, [r3, #12]
 8118904:	685b      	ldr	r3, [r3, #4]
 8118906:	1ad3      	subs	r3, r2, r3
            if (next &&
 8118908:	2b00      	cmp	r3, #0
 811890a:	dd4d      	ble.n	81189a8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 811890c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811890e:	68db      	ldr	r3, [r3, #12]
 8118910:	685b      	ldr	r3, [r3, #4]
 8118912:	b29a      	uxth	r2, r3
 8118914:	4b81      	ldr	r3, [pc, #516]	@ (8118b1c <tcp_receive+0xb08>)
 8118916:	681b      	ldr	r3, [r3, #0]
 8118918:	b29b      	uxth	r3, r3
 811891a:	1ad3      	subs	r3, r2, r3
 811891c:	b29a      	uxth	r2, r3
 811891e:	4b80      	ldr	r3, [pc, #512]	@ (8118b20 <tcp_receive+0xb0c>)
 8118920:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8118922:	4b7f      	ldr	r3, [pc, #508]	@ (8118b20 <tcp_receive+0xb0c>)
 8118924:	68db      	ldr	r3, [r3, #12]
 8118926:	899b      	ldrh	r3, [r3, #12]
 8118928:	b29b      	uxth	r3, r3
 811892a:	4618      	mov	r0, r3
 811892c:	f7f8 f82e 	bl	811098c <lwip_htons>
 8118930:	4603      	mov	r3, r0
 8118932:	b2db      	uxtb	r3, r3
 8118934:	f003 0302 	and.w	r3, r3, #2
 8118938:	2b00      	cmp	r3, #0
 811893a:	d005      	beq.n	8118948 <tcp_receive+0x934>
                inseg.len -= 1;
 811893c:	4b78      	ldr	r3, [pc, #480]	@ (8118b20 <tcp_receive+0xb0c>)
 811893e:	891b      	ldrh	r3, [r3, #8]
 8118940:	3b01      	subs	r3, #1
 8118942:	b29a      	uxth	r2, r3
 8118944:	4b76      	ldr	r3, [pc, #472]	@ (8118b20 <tcp_receive+0xb0c>)
 8118946:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8118948:	4b75      	ldr	r3, [pc, #468]	@ (8118b20 <tcp_receive+0xb0c>)
 811894a:	685b      	ldr	r3, [r3, #4]
 811894c:	4a74      	ldr	r2, [pc, #464]	@ (8118b20 <tcp_receive+0xb0c>)
 811894e:	8912      	ldrh	r2, [r2, #8]
 8118950:	4611      	mov	r1, r2
 8118952:	4618      	mov	r0, r3
 8118954:	f7fb fe1c 	bl	8114590 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8118958:	4b71      	ldr	r3, [pc, #452]	@ (8118b20 <tcp_receive+0xb0c>)
 811895a:	891c      	ldrh	r4, [r3, #8]
 811895c:	4b70      	ldr	r3, [pc, #448]	@ (8118b20 <tcp_receive+0xb0c>)
 811895e:	68db      	ldr	r3, [r3, #12]
 8118960:	899b      	ldrh	r3, [r3, #12]
 8118962:	b29b      	uxth	r3, r3
 8118964:	4618      	mov	r0, r3
 8118966:	f7f8 f811 	bl	811098c <lwip_htons>
 811896a:	4603      	mov	r3, r0
 811896c:	b2db      	uxtb	r3, r3
 811896e:	f003 0303 	and.w	r3, r3, #3
 8118972:	2b00      	cmp	r3, #0
 8118974:	d001      	beq.n	811897a <tcp_receive+0x966>
 8118976:	2301      	movs	r3, #1
 8118978:	e000      	b.n	811897c <tcp_receive+0x968>
 811897a:	2300      	movs	r3, #0
 811897c:	4423      	add	r3, r4
 811897e:	b29a      	uxth	r2, r3
 8118980:	4b65      	ldr	r3, [pc, #404]	@ (8118b18 <tcp_receive+0xb04>)
 8118982:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8118984:	4b64      	ldr	r3, [pc, #400]	@ (8118b18 <tcp_receive+0xb04>)
 8118986:	881b      	ldrh	r3, [r3, #0]
 8118988:	461a      	mov	r2, r3
 811898a:	4b64      	ldr	r3, [pc, #400]	@ (8118b1c <tcp_receive+0xb08>)
 811898c:	681b      	ldr	r3, [r3, #0]
 811898e:	441a      	add	r2, r3
 8118990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8118992:	68db      	ldr	r3, [r3, #12]
 8118994:	685b      	ldr	r3, [r3, #4]
 8118996:	429a      	cmp	r2, r3
 8118998:	d006      	beq.n	81189a8 <tcp_receive+0x994>
 811899a:	4b62      	ldr	r3, [pc, #392]	@ (8118b24 <tcp_receive+0xb10>)
 811899c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 81189a0:	4961      	ldr	r1, [pc, #388]	@ (8118b28 <tcp_receive+0xb14>)
 81189a2:	4862      	ldr	r0, [pc, #392]	@ (8118b2c <tcp_receive+0xb18>)
 81189a4:	f003 fa3a 	bl	811be1c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 81189a8:	687b      	ldr	r3, [r7, #4]
 81189aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81189ac:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 81189ae:	4b5a      	ldr	r3, [pc, #360]	@ (8118b18 <tcp_receive+0xb04>)
 81189b0:	881b      	ldrh	r3, [r3, #0]
 81189b2:	461a      	mov	r2, r3
 81189b4:	4b59      	ldr	r3, [pc, #356]	@ (8118b1c <tcp_receive+0xb08>)
 81189b6:	681b      	ldr	r3, [r3, #0]
 81189b8:	441a      	add	r2, r3
 81189ba:	687b      	ldr	r3, [r7, #4]
 81189bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 81189be:	687b      	ldr	r3, [r7, #4]
 81189c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81189c2:	4b55      	ldr	r3, [pc, #340]	@ (8118b18 <tcp_receive+0xb04>)
 81189c4:	881b      	ldrh	r3, [r3, #0]
 81189c6:	429a      	cmp	r2, r3
 81189c8:	d206      	bcs.n	81189d8 <tcp_receive+0x9c4>
 81189ca:	4b56      	ldr	r3, [pc, #344]	@ (8118b24 <tcp_receive+0xb10>)
 81189cc:	f240 6207 	movw	r2, #1543	@ 0x607
 81189d0:	4957      	ldr	r1, [pc, #348]	@ (8118b30 <tcp_receive+0xb1c>)
 81189d2:	4856      	ldr	r0, [pc, #344]	@ (8118b2c <tcp_receive+0xb18>)
 81189d4:	f003 fa22 	bl	811be1c <iprintf>
        pcb->rcv_wnd -= tcplen;
 81189d8:	687b      	ldr	r3, [r7, #4]
 81189da:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81189dc:	4b4e      	ldr	r3, [pc, #312]	@ (8118b18 <tcp_receive+0xb04>)
 81189de:	881b      	ldrh	r3, [r3, #0]
 81189e0:	1ad3      	subs	r3, r2, r3
 81189e2:	b29a      	uxth	r2, r3
 81189e4:	687b      	ldr	r3, [r7, #4]
 81189e6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 81189e8:	6878      	ldr	r0, [r7, #4]
 81189ea:	f7fc fde7 	bl	81155bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 81189ee:	4b4c      	ldr	r3, [pc, #304]	@ (8118b20 <tcp_receive+0xb0c>)
 81189f0:	685b      	ldr	r3, [r3, #4]
 81189f2:	891b      	ldrh	r3, [r3, #8]
 81189f4:	2b00      	cmp	r3, #0
 81189f6:	d006      	beq.n	8118a06 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 81189f8:	4b49      	ldr	r3, [pc, #292]	@ (8118b20 <tcp_receive+0xb0c>)
 81189fa:	685b      	ldr	r3, [r3, #4]
 81189fc:	4a4d      	ldr	r2, [pc, #308]	@ (8118b34 <tcp_receive+0xb20>)
 81189fe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8118a00:	4b47      	ldr	r3, [pc, #284]	@ (8118b20 <tcp_receive+0xb0c>)
 8118a02:	2200      	movs	r2, #0
 8118a04:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8118a06:	4b46      	ldr	r3, [pc, #280]	@ (8118b20 <tcp_receive+0xb0c>)
 8118a08:	68db      	ldr	r3, [r3, #12]
 8118a0a:	899b      	ldrh	r3, [r3, #12]
 8118a0c:	b29b      	uxth	r3, r3
 8118a0e:	4618      	mov	r0, r3
 8118a10:	f7f7 ffbc 	bl	811098c <lwip_htons>
 8118a14:	4603      	mov	r3, r0
 8118a16:	b2db      	uxtb	r3, r3
 8118a18:	f003 0301 	and.w	r3, r3, #1
 8118a1c:	2b00      	cmp	r3, #0
 8118a1e:	f000 80b8 	beq.w	8118b92 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8118a22:	4b45      	ldr	r3, [pc, #276]	@ (8118b38 <tcp_receive+0xb24>)
 8118a24:	781b      	ldrb	r3, [r3, #0]
 8118a26:	f043 0320 	orr.w	r3, r3, #32
 8118a2a:	b2da      	uxtb	r2, r3
 8118a2c:	4b42      	ldr	r3, [pc, #264]	@ (8118b38 <tcp_receive+0xb24>)
 8118a2e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8118a30:	e0af      	b.n	8118b92 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8118a32:	687b      	ldr	r3, [r7, #4]
 8118a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118a36:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8118a38:	687b      	ldr	r3, [r7, #4]
 8118a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118a3c:	68db      	ldr	r3, [r3, #12]
 8118a3e:	685b      	ldr	r3, [r3, #4]
 8118a40:	4a36      	ldr	r2, [pc, #216]	@ (8118b1c <tcp_receive+0xb08>)
 8118a42:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8118a44:	68bb      	ldr	r3, [r7, #8]
 8118a46:	891b      	ldrh	r3, [r3, #8]
 8118a48:	461c      	mov	r4, r3
 8118a4a:	68bb      	ldr	r3, [r7, #8]
 8118a4c:	68db      	ldr	r3, [r3, #12]
 8118a4e:	899b      	ldrh	r3, [r3, #12]
 8118a50:	b29b      	uxth	r3, r3
 8118a52:	4618      	mov	r0, r3
 8118a54:	f7f7 ff9a 	bl	811098c <lwip_htons>
 8118a58:	4603      	mov	r3, r0
 8118a5a:	b2db      	uxtb	r3, r3
 8118a5c:	f003 0303 	and.w	r3, r3, #3
 8118a60:	2b00      	cmp	r3, #0
 8118a62:	d001      	beq.n	8118a68 <tcp_receive+0xa54>
 8118a64:	2301      	movs	r3, #1
 8118a66:	e000      	b.n	8118a6a <tcp_receive+0xa56>
 8118a68:	2300      	movs	r3, #0
 8118a6a:	191a      	adds	r2, r3, r4
 8118a6c:	687b      	ldr	r3, [r7, #4]
 8118a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118a70:	441a      	add	r2, r3
 8118a72:	687b      	ldr	r3, [r7, #4]
 8118a74:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8118a76:	687b      	ldr	r3, [r7, #4]
 8118a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8118a7a:	461c      	mov	r4, r3
 8118a7c:	68bb      	ldr	r3, [r7, #8]
 8118a7e:	891b      	ldrh	r3, [r3, #8]
 8118a80:	461d      	mov	r5, r3
 8118a82:	68bb      	ldr	r3, [r7, #8]
 8118a84:	68db      	ldr	r3, [r3, #12]
 8118a86:	899b      	ldrh	r3, [r3, #12]
 8118a88:	b29b      	uxth	r3, r3
 8118a8a:	4618      	mov	r0, r3
 8118a8c:	f7f7 ff7e 	bl	811098c <lwip_htons>
 8118a90:	4603      	mov	r3, r0
 8118a92:	b2db      	uxtb	r3, r3
 8118a94:	f003 0303 	and.w	r3, r3, #3
 8118a98:	2b00      	cmp	r3, #0
 8118a9a:	d001      	beq.n	8118aa0 <tcp_receive+0xa8c>
 8118a9c:	2301      	movs	r3, #1
 8118a9e:	e000      	b.n	8118aa2 <tcp_receive+0xa8e>
 8118aa0:	2300      	movs	r3, #0
 8118aa2:	442b      	add	r3, r5
 8118aa4:	429c      	cmp	r4, r3
 8118aa6:	d206      	bcs.n	8118ab6 <tcp_receive+0xaa2>
 8118aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8118b24 <tcp_receive+0xb10>)
 8118aaa:	f240 622b 	movw	r2, #1579	@ 0x62b
 8118aae:	4923      	ldr	r1, [pc, #140]	@ (8118b3c <tcp_receive+0xb28>)
 8118ab0:	481e      	ldr	r0, [pc, #120]	@ (8118b2c <tcp_receive+0xb18>)
 8118ab2:	f003 f9b3 	bl	811be1c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8118ab6:	68bb      	ldr	r3, [r7, #8]
 8118ab8:	891b      	ldrh	r3, [r3, #8]
 8118aba:	461c      	mov	r4, r3
 8118abc:	68bb      	ldr	r3, [r7, #8]
 8118abe:	68db      	ldr	r3, [r3, #12]
 8118ac0:	899b      	ldrh	r3, [r3, #12]
 8118ac2:	b29b      	uxth	r3, r3
 8118ac4:	4618      	mov	r0, r3
 8118ac6:	f7f7 ff61 	bl	811098c <lwip_htons>
 8118aca:	4603      	mov	r3, r0
 8118acc:	b2db      	uxtb	r3, r3
 8118ace:	f003 0303 	and.w	r3, r3, #3
 8118ad2:	2b00      	cmp	r3, #0
 8118ad4:	d001      	beq.n	8118ada <tcp_receive+0xac6>
 8118ad6:	2301      	movs	r3, #1
 8118ad8:	e000      	b.n	8118adc <tcp_receive+0xac8>
 8118ada:	2300      	movs	r3, #0
 8118adc:	1919      	adds	r1, r3, r4
 8118ade:	687b      	ldr	r3, [r7, #4]
 8118ae0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8118ae2:	b28b      	uxth	r3, r1
 8118ae4:	1ad3      	subs	r3, r2, r3
 8118ae6:	b29a      	uxth	r2, r3
 8118ae8:	687b      	ldr	r3, [r7, #4]
 8118aea:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8118aec:	6878      	ldr	r0, [r7, #4]
 8118aee:	f7fc fd65 	bl	81155bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8118af2:	68bb      	ldr	r3, [r7, #8]
 8118af4:	685b      	ldr	r3, [r3, #4]
 8118af6:	891b      	ldrh	r3, [r3, #8]
 8118af8:	2b00      	cmp	r3, #0
 8118afa:	d028      	beq.n	8118b4e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8118afc:	4b0d      	ldr	r3, [pc, #52]	@ (8118b34 <tcp_receive+0xb20>)
 8118afe:	681b      	ldr	r3, [r3, #0]
 8118b00:	2b00      	cmp	r3, #0
 8118b02:	d01d      	beq.n	8118b40 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8118b04:	4b0b      	ldr	r3, [pc, #44]	@ (8118b34 <tcp_receive+0xb20>)
 8118b06:	681a      	ldr	r2, [r3, #0]
 8118b08:	68bb      	ldr	r3, [r7, #8]
 8118b0a:	685b      	ldr	r3, [r3, #4]
 8118b0c:	4619      	mov	r1, r3
 8118b0e:	4610      	mov	r0, r2
 8118b10:	f7fb ff90 	bl	8114a34 <pbuf_cat>
 8118b14:	e018      	b.n	8118b48 <tcp_receive+0xb34>
 8118b16:	bf00      	nop
 8118b18:	10011d56 	.word	0x10011d56
 8118b1c:	10011d4c 	.word	0x10011d4c
 8118b20:	10011d2c 	.word	0x10011d2c
 8118b24:	0811e858 	.word	0x0811e858
 8118b28:	0811ec78 	.word	0x0811ec78
 8118b2c:	0811e8e4 	.word	0x0811e8e4
 8118b30:	0811ecb4 	.word	0x0811ecb4
 8118b34:	10011d5c 	.word	0x10011d5c
 8118b38:	10011d59 	.word	0x10011d59
 8118b3c:	0811ecd4 	.word	0x0811ecd4
            } else {
              recv_data = cseg->p;
 8118b40:	68bb      	ldr	r3, [r7, #8]
 8118b42:	685b      	ldr	r3, [r3, #4]
 8118b44:	4a70      	ldr	r2, [pc, #448]	@ (8118d08 <tcp_receive+0xcf4>)
 8118b46:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8118b48:	68bb      	ldr	r3, [r7, #8]
 8118b4a:	2200      	movs	r2, #0
 8118b4c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8118b4e:	68bb      	ldr	r3, [r7, #8]
 8118b50:	68db      	ldr	r3, [r3, #12]
 8118b52:	899b      	ldrh	r3, [r3, #12]
 8118b54:	b29b      	uxth	r3, r3
 8118b56:	4618      	mov	r0, r3
 8118b58:	f7f7 ff18 	bl	811098c <lwip_htons>
 8118b5c:	4603      	mov	r3, r0
 8118b5e:	b2db      	uxtb	r3, r3
 8118b60:	f003 0301 	and.w	r3, r3, #1
 8118b64:	2b00      	cmp	r3, #0
 8118b66:	d00d      	beq.n	8118b84 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8118b68:	4b68      	ldr	r3, [pc, #416]	@ (8118d0c <tcp_receive+0xcf8>)
 8118b6a:	781b      	ldrb	r3, [r3, #0]
 8118b6c:	f043 0320 	orr.w	r3, r3, #32
 8118b70:	b2da      	uxtb	r2, r3
 8118b72:	4b66      	ldr	r3, [pc, #408]	@ (8118d0c <tcp_receive+0xcf8>)
 8118b74:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8118b76:	687b      	ldr	r3, [r7, #4]
 8118b78:	7d1b      	ldrb	r3, [r3, #20]
 8118b7a:	2b04      	cmp	r3, #4
 8118b7c:	d102      	bne.n	8118b84 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8118b7e:	687b      	ldr	r3, [r7, #4]
 8118b80:	2207      	movs	r2, #7
 8118b82:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8118b84:	68bb      	ldr	r3, [r7, #8]
 8118b86:	681a      	ldr	r2, [r3, #0]
 8118b88:	687b      	ldr	r3, [r7, #4]
 8118b8a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8118b8c:	68b8      	ldr	r0, [r7, #8]
 8118b8e:	f7fd fb58 	bl	8116242 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8118b92:	687b      	ldr	r3, [r7, #4]
 8118b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118b96:	2b00      	cmp	r3, #0
 8118b98:	d008      	beq.n	8118bac <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8118b9a:	687b      	ldr	r3, [r7, #4]
 8118b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118b9e:	68db      	ldr	r3, [r3, #12]
 8118ba0:	685a      	ldr	r2, [r3, #4]
 8118ba2:	687b      	ldr	r3, [r7, #4]
 8118ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8118ba6:	429a      	cmp	r2, r3
 8118ba8:	f43f af43 	beq.w	8118a32 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8118bac:	687b      	ldr	r3, [r7, #4]
 8118bae:	8b5b      	ldrh	r3, [r3, #26]
 8118bb0:	f003 0301 	and.w	r3, r3, #1
 8118bb4:	2b00      	cmp	r3, #0
 8118bb6:	d00e      	beq.n	8118bd6 <tcp_receive+0xbc2>
 8118bb8:	687b      	ldr	r3, [r7, #4]
 8118bba:	8b5b      	ldrh	r3, [r3, #26]
 8118bbc:	f023 0301 	bic.w	r3, r3, #1
 8118bc0:	b29a      	uxth	r2, r3
 8118bc2:	687b      	ldr	r3, [r7, #4]
 8118bc4:	835a      	strh	r2, [r3, #26]
 8118bc6:	687b      	ldr	r3, [r7, #4]
 8118bc8:	8b5b      	ldrh	r3, [r3, #26]
 8118bca:	f043 0302 	orr.w	r3, r3, #2
 8118bce:	b29a      	uxth	r2, r3
 8118bd0:	687b      	ldr	r3, [r7, #4]
 8118bd2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8118bd4:	e187      	b.n	8118ee6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8118bd6:	687b      	ldr	r3, [r7, #4]
 8118bd8:	8b5b      	ldrh	r3, [r3, #26]
 8118bda:	f043 0301 	orr.w	r3, r3, #1
 8118bde:	b29a      	uxth	r2, r3
 8118be0:	687b      	ldr	r3, [r7, #4]
 8118be2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8118be4:	e17f      	b.n	8118ee6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8118be6:	687b      	ldr	r3, [r7, #4]
 8118be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118bea:	2b00      	cmp	r3, #0
 8118bec:	d106      	bne.n	8118bfc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8118bee:	4848      	ldr	r0, [pc, #288]	@ (8118d10 <tcp_receive+0xcfc>)
 8118bf0:	f7fd fb40 	bl	8116274 <tcp_seg_copy>
 8118bf4:	4602      	mov	r2, r0
 8118bf6:	687b      	ldr	r3, [r7, #4]
 8118bf8:	675a      	str	r2, [r3, #116]	@ 0x74
 8118bfa:	e16c      	b.n	8118ed6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8118bfc:	2300      	movs	r3, #0
 8118bfe:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8118c00:	687b      	ldr	r3, [r7, #4]
 8118c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118c04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8118c06:	e156      	b.n	8118eb6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8118c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118c0a:	68db      	ldr	r3, [r3, #12]
 8118c0c:	685a      	ldr	r2, [r3, #4]
 8118c0e:	4b41      	ldr	r3, [pc, #260]	@ (8118d14 <tcp_receive+0xd00>)
 8118c10:	681b      	ldr	r3, [r3, #0]
 8118c12:	429a      	cmp	r2, r3
 8118c14:	d11d      	bne.n	8118c52 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8118c16:	4b3e      	ldr	r3, [pc, #248]	@ (8118d10 <tcp_receive+0xcfc>)
 8118c18:	891a      	ldrh	r2, [r3, #8]
 8118c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118c1c:	891b      	ldrh	r3, [r3, #8]
 8118c1e:	429a      	cmp	r2, r3
 8118c20:	f240 814e 	bls.w	8118ec0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8118c24:	483a      	ldr	r0, [pc, #232]	@ (8118d10 <tcp_receive+0xcfc>)
 8118c26:	f7fd fb25 	bl	8116274 <tcp_seg_copy>
 8118c2a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8118c2c:	697b      	ldr	r3, [r7, #20]
 8118c2e:	2b00      	cmp	r3, #0
 8118c30:	f000 8148 	beq.w	8118ec4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8118c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118c36:	2b00      	cmp	r3, #0
 8118c38:	d003      	beq.n	8118c42 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8118c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118c3c:	697a      	ldr	r2, [r7, #20]
 8118c3e:	601a      	str	r2, [r3, #0]
 8118c40:	e002      	b.n	8118c48 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8118c42:	687b      	ldr	r3, [r7, #4]
 8118c44:	697a      	ldr	r2, [r7, #20]
 8118c46:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8118c48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8118c4a:	6978      	ldr	r0, [r7, #20]
 8118c4c:	f7ff f8de 	bl	8117e0c <tcp_oos_insert_segment>
                }
                break;
 8118c50:	e138      	b.n	8118ec4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8118c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118c54:	2b00      	cmp	r3, #0
 8118c56:	d117      	bne.n	8118c88 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8118c58:	4b2e      	ldr	r3, [pc, #184]	@ (8118d14 <tcp_receive+0xd00>)
 8118c5a:	681a      	ldr	r2, [r3, #0]
 8118c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118c5e:	68db      	ldr	r3, [r3, #12]
 8118c60:	685b      	ldr	r3, [r3, #4]
 8118c62:	1ad3      	subs	r3, r2, r3
 8118c64:	2b00      	cmp	r3, #0
 8118c66:	da57      	bge.n	8118d18 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8118c68:	4829      	ldr	r0, [pc, #164]	@ (8118d10 <tcp_receive+0xcfc>)
 8118c6a:	f7fd fb03 	bl	8116274 <tcp_seg_copy>
 8118c6e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8118c70:	69bb      	ldr	r3, [r7, #24]
 8118c72:	2b00      	cmp	r3, #0
 8118c74:	f000 8128 	beq.w	8118ec8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8118c78:	687b      	ldr	r3, [r7, #4]
 8118c7a:	69ba      	ldr	r2, [r7, #24]
 8118c7c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8118c7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8118c80:	69b8      	ldr	r0, [r7, #24]
 8118c82:	f7ff f8c3 	bl	8117e0c <tcp_oos_insert_segment>
                  }
                  break;
 8118c86:	e11f      	b.n	8118ec8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8118c88:	4b22      	ldr	r3, [pc, #136]	@ (8118d14 <tcp_receive+0xd00>)
 8118c8a:	681a      	ldr	r2, [r3, #0]
 8118c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118c8e:	68db      	ldr	r3, [r3, #12]
 8118c90:	685b      	ldr	r3, [r3, #4]
 8118c92:	1ad3      	subs	r3, r2, r3
 8118c94:	3b01      	subs	r3, #1
 8118c96:	2b00      	cmp	r3, #0
 8118c98:	db3e      	blt.n	8118d18 <tcp_receive+0xd04>
 8118c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8118d14 <tcp_receive+0xd00>)
 8118c9c:	681a      	ldr	r2, [r3, #0]
 8118c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118ca0:	68db      	ldr	r3, [r3, #12]
 8118ca2:	685b      	ldr	r3, [r3, #4]
 8118ca4:	1ad3      	subs	r3, r2, r3
 8118ca6:	3301      	adds	r3, #1
 8118ca8:	2b00      	cmp	r3, #0
 8118caa:	dc35      	bgt.n	8118d18 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8118cac:	4818      	ldr	r0, [pc, #96]	@ (8118d10 <tcp_receive+0xcfc>)
 8118cae:	f7fd fae1 	bl	8116274 <tcp_seg_copy>
 8118cb2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8118cb4:	69fb      	ldr	r3, [r7, #28]
 8118cb6:	2b00      	cmp	r3, #0
 8118cb8:	f000 8108 	beq.w	8118ecc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8118cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118cbe:	68db      	ldr	r3, [r3, #12]
 8118cc0:	685b      	ldr	r3, [r3, #4]
 8118cc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8118cc4:	8912      	ldrh	r2, [r2, #8]
 8118cc6:	441a      	add	r2, r3
 8118cc8:	4b12      	ldr	r3, [pc, #72]	@ (8118d14 <tcp_receive+0xd00>)
 8118cca:	681b      	ldr	r3, [r3, #0]
 8118ccc:	1ad3      	subs	r3, r2, r3
 8118cce:	2b00      	cmp	r3, #0
 8118cd0:	dd12      	ble.n	8118cf8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8118cd2:	4b10      	ldr	r3, [pc, #64]	@ (8118d14 <tcp_receive+0xd00>)
 8118cd4:	681b      	ldr	r3, [r3, #0]
 8118cd6:	b29a      	uxth	r2, r3
 8118cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118cda:	68db      	ldr	r3, [r3, #12]
 8118cdc:	685b      	ldr	r3, [r3, #4]
 8118cde:	b29b      	uxth	r3, r3
 8118ce0:	1ad3      	subs	r3, r2, r3
 8118ce2:	b29a      	uxth	r2, r3
 8118ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118ce6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8118ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118cea:	685a      	ldr	r2, [r3, #4]
 8118cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118cee:	891b      	ldrh	r3, [r3, #8]
 8118cf0:	4619      	mov	r1, r3
 8118cf2:	4610      	mov	r0, r2
 8118cf4:	f7fb fc4c 	bl	8114590 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8118cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118cfa:	69fa      	ldr	r2, [r7, #28]
 8118cfc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8118cfe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8118d00:	69f8      	ldr	r0, [r7, #28]
 8118d02:	f7ff f883 	bl	8117e0c <tcp_oos_insert_segment>
                  }
                  break;
 8118d06:	e0e1      	b.n	8118ecc <tcp_receive+0xeb8>
 8118d08:	10011d5c 	.word	0x10011d5c
 8118d0c:	10011d59 	.word	0x10011d59
 8118d10:	10011d2c 	.word	0x10011d2c
 8118d14:	10011d4c 	.word	0x10011d4c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8118d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d1a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8118d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d1e:	681b      	ldr	r3, [r3, #0]
 8118d20:	2b00      	cmp	r3, #0
 8118d22:	f040 80c5 	bne.w	8118eb0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8118d26:	4b7f      	ldr	r3, [pc, #508]	@ (8118f24 <tcp_receive+0xf10>)
 8118d28:	681a      	ldr	r2, [r3, #0]
 8118d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d2c:	68db      	ldr	r3, [r3, #12]
 8118d2e:	685b      	ldr	r3, [r3, #4]
 8118d30:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8118d32:	2b00      	cmp	r3, #0
 8118d34:	f340 80bc 	ble.w	8118eb0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8118d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d3a:	68db      	ldr	r3, [r3, #12]
 8118d3c:	899b      	ldrh	r3, [r3, #12]
 8118d3e:	b29b      	uxth	r3, r3
 8118d40:	4618      	mov	r0, r3
 8118d42:	f7f7 fe23 	bl	811098c <lwip_htons>
 8118d46:	4603      	mov	r3, r0
 8118d48:	b2db      	uxtb	r3, r3
 8118d4a:	f003 0301 	and.w	r3, r3, #1
 8118d4e:	2b00      	cmp	r3, #0
 8118d50:	f040 80be 	bne.w	8118ed0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8118d54:	4874      	ldr	r0, [pc, #464]	@ (8118f28 <tcp_receive+0xf14>)
 8118d56:	f7fd fa8d 	bl	8116274 <tcp_seg_copy>
 8118d5a:	4602      	mov	r2, r0
 8118d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d5e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8118d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d62:	681b      	ldr	r3, [r3, #0]
 8118d64:	2b00      	cmp	r3, #0
 8118d66:	f000 80b5 	beq.w	8118ed4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8118d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d6c:	68db      	ldr	r3, [r3, #12]
 8118d6e:	685b      	ldr	r3, [r3, #4]
 8118d70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8118d72:	8912      	ldrh	r2, [r2, #8]
 8118d74:	441a      	add	r2, r3
 8118d76:	4b6b      	ldr	r3, [pc, #428]	@ (8118f24 <tcp_receive+0xf10>)
 8118d78:	681b      	ldr	r3, [r3, #0]
 8118d7a:	1ad3      	subs	r3, r2, r3
 8118d7c:	2b00      	cmp	r3, #0
 8118d7e:	dd12      	ble.n	8118da6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8118d80:	4b68      	ldr	r3, [pc, #416]	@ (8118f24 <tcp_receive+0xf10>)
 8118d82:	681b      	ldr	r3, [r3, #0]
 8118d84:	b29a      	uxth	r2, r3
 8118d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d88:	68db      	ldr	r3, [r3, #12]
 8118d8a:	685b      	ldr	r3, [r3, #4]
 8118d8c:	b29b      	uxth	r3, r3
 8118d8e:	1ad3      	subs	r3, r2, r3
 8118d90:	b29a      	uxth	r2, r3
 8118d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d94:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8118d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d98:	685a      	ldr	r2, [r3, #4]
 8118d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d9c:	891b      	ldrh	r3, [r3, #8]
 8118d9e:	4619      	mov	r1, r3
 8118da0:	4610      	mov	r0, r2
 8118da2:	f7fb fbf5 	bl	8114590 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8118da6:	4b61      	ldr	r3, [pc, #388]	@ (8118f2c <tcp_receive+0xf18>)
 8118da8:	881b      	ldrh	r3, [r3, #0]
 8118daa:	461a      	mov	r2, r3
 8118dac:	4b5d      	ldr	r3, [pc, #372]	@ (8118f24 <tcp_receive+0xf10>)
 8118dae:	681b      	ldr	r3, [r3, #0]
 8118db0:	441a      	add	r2, r3
 8118db2:	687b      	ldr	r3, [r7, #4]
 8118db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118db6:	6879      	ldr	r1, [r7, #4]
 8118db8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8118dba:	440b      	add	r3, r1
 8118dbc:	1ad3      	subs	r3, r2, r3
 8118dbe:	2b00      	cmp	r3, #0
 8118dc0:	f340 8088 	ble.w	8118ed4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8118dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118dc6:	681b      	ldr	r3, [r3, #0]
 8118dc8:	68db      	ldr	r3, [r3, #12]
 8118dca:	899b      	ldrh	r3, [r3, #12]
 8118dcc:	b29b      	uxth	r3, r3
 8118dce:	4618      	mov	r0, r3
 8118dd0:	f7f7 fddc 	bl	811098c <lwip_htons>
 8118dd4:	4603      	mov	r3, r0
 8118dd6:	b2db      	uxtb	r3, r3
 8118dd8:	f003 0301 	and.w	r3, r3, #1
 8118ddc:	2b00      	cmp	r3, #0
 8118dde:	d021      	beq.n	8118e24 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8118de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118de2:	681b      	ldr	r3, [r3, #0]
 8118de4:	68db      	ldr	r3, [r3, #12]
 8118de6:	899b      	ldrh	r3, [r3, #12]
 8118de8:	b29b      	uxth	r3, r3
 8118dea:	b21b      	sxth	r3, r3
 8118dec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8118df0:	b21c      	sxth	r4, r3
 8118df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118df4:	681b      	ldr	r3, [r3, #0]
 8118df6:	68db      	ldr	r3, [r3, #12]
 8118df8:	899b      	ldrh	r3, [r3, #12]
 8118dfa:	b29b      	uxth	r3, r3
 8118dfc:	4618      	mov	r0, r3
 8118dfe:	f7f7 fdc5 	bl	811098c <lwip_htons>
 8118e02:	4603      	mov	r3, r0
 8118e04:	b2db      	uxtb	r3, r3
 8118e06:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8118e0a:	b29b      	uxth	r3, r3
 8118e0c:	4618      	mov	r0, r3
 8118e0e:	f7f7 fdbd 	bl	811098c <lwip_htons>
 8118e12:	4603      	mov	r3, r0
 8118e14:	b21b      	sxth	r3, r3
 8118e16:	4323      	orrs	r3, r4
 8118e18:	b21a      	sxth	r2, r3
 8118e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e1c:	681b      	ldr	r3, [r3, #0]
 8118e1e:	68db      	ldr	r3, [r3, #12]
 8118e20:	b292      	uxth	r2, r2
 8118e22:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8118e24:	687b      	ldr	r3, [r7, #4]
 8118e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118e28:	b29a      	uxth	r2, r3
 8118e2a:	687b      	ldr	r3, [r7, #4]
 8118e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8118e2e:	4413      	add	r3, r2
 8118e30:	b299      	uxth	r1, r3
 8118e32:	4b3c      	ldr	r3, [pc, #240]	@ (8118f24 <tcp_receive+0xf10>)
 8118e34:	681b      	ldr	r3, [r3, #0]
 8118e36:	b29a      	uxth	r2, r3
 8118e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e3a:	681b      	ldr	r3, [r3, #0]
 8118e3c:	1a8a      	subs	r2, r1, r2
 8118e3e:	b292      	uxth	r2, r2
 8118e40:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8118e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e44:	681b      	ldr	r3, [r3, #0]
 8118e46:	685a      	ldr	r2, [r3, #4]
 8118e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e4a:	681b      	ldr	r3, [r3, #0]
 8118e4c:	891b      	ldrh	r3, [r3, #8]
 8118e4e:	4619      	mov	r1, r3
 8118e50:	4610      	mov	r0, r2
 8118e52:	f7fb fb9d 	bl	8114590 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8118e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e58:	681b      	ldr	r3, [r3, #0]
 8118e5a:	891c      	ldrh	r4, [r3, #8]
 8118e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e5e:	681b      	ldr	r3, [r3, #0]
 8118e60:	68db      	ldr	r3, [r3, #12]
 8118e62:	899b      	ldrh	r3, [r3, #12]
 8118e64:	b29b      	uxth	r3, r3
 8118e66:	4618      	mov	r0, r3
 8118e68:	f7f7 fd90 	bl	811098c <lwip_htons>
 8118e6c:	4603      	mov	r3, r0
 8118e6e:	b2db      	uxtb	r3, r3
 8118e70:	f003 0303 	and.w	r3, r3, #3
 8118e74:	2b00      	cmp	r3, #0
 8118e76:	d001      	beq.n	8118e7c <tcp_receive+0xe68>
 8118e78:	2301      	movs	r3, #1
 8118e7a:	e000      	b.n	8118e7e <tcp_receive+0xe6a>
 8118e7c:	2300      	movs	r3, #0
 8118e7e:	4423      	add	r3, r4
 8118e80:	b29a      	uxth	r2, r3
 8118e82:	4b2a      	ldr	r3, [pc, #168]	@ (8118f2c <tcp_receive+0xf18>)
 8118e84:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8118e86:	4b29      	ldr	r3, [pc, #164]	@ (8118f2c <tcp_receive+0xf18>)
 8118e88:	881b      	ldrh	r3, [r3, #0]
 8118e8a:	461a      	mov	r2, r3
 8118e8c:	4b25      	ldr	r3, [pc, #148]	@ (8118f24 <tcp_receive+0xf10>)
 8118e8e:	681b      	ldr	r3, [r3, #0]
 8118e90:	441a      	add	r2, r3
 8118e92:	687b      	ldr	r3, [r7, #4]
 8118e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118e96:	6879      	ldr	r1, [r7, #4]
 8118e98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8118e9a:	440b      	add	r3, r1
 8118e9c:	429a      	cmp	r2, r3
 8118e9e:	d019      	beq.n	8118ed4 <tcp_receive+0xec0>
 8118ea0:	4b23      	ldr	r3, [pc, #140]	@ (8118f30 <tcp_receive+0xf1c>)
 8118ea2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8118ea6:	4923      	ldr	r1, [pc, #140]	@ (8118f34 <tcp_receive+0xf20>)
 8118ea8:	4823      	ldr	r0, [pc, #140]	@ (8118f38 <tcp_receive+0xf24>)
 8118eaa:	f002 ffb7 	bl	811be1c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8118eae:	e011      	b.n	8118ed4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8118eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118eb2:	681b      	ldr	r3, [r3, #0]
 8118eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8118eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118eb8:	2b00      	cmp	r3, #0
 8118eba:	f47f aea5 	bne.w	8118c08 <tcp_receive+0xbf4>
 8118ebe:	e00a      	b.n	8118ed6 <tcp_receive+0xec2>
                break;
 8118ec0:	bf00      	nop
 8118ec2:	e008      	b.n	8118ed6 <tcp_receive+0xec2>
                break;
 8118ec4:	bf00      	nop
 8118ec6:	e006      	b.n	8118ed6 <tcp_receive+0xec2>
                  break;
 8118ec8:	bf00      	nop
 8118eca:	e004      	b.n	8118ed6 <tcp_receive+0xec2>
                  break;
 8118ecc:	bf00      	nop
 8118ece:	e002      	b.n	8118ed6 <tcp_receive+0xec2>
                  break;
 8118ed0:	bf00      	nop
 8118ed2:	e000      	b.n	8118ed6 <tcp_receive+0xec2>
                break;
 8118ed4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8118ed6:	6878      	ldr	r0, [r7, #4]
 8118ed8:	f001 fe8a 	bl	811abf0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8118edc:	e003      	b.n	8118ee6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8118ede:	6878      	ldr	r0, [r7, #4]
 8118ee0:	f001 fe86 	bl	811abf0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8118ee4:	e01a      	b.n	8118f1c <tcp_receive+0xf08>
 8118ee6:	e019      	b.n	8118f1c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8118ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8118f24 <tcp_receive+0xf10>)
 8118eea:	681a      	ldr	r2, [r3, #0]
 8118eec:	687b      	ldr	r3, [r7, #4]
 8118eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118ef0:	1ad3      	subs	r3, r2, r3
 8118ef2:	2b00      	cmp	r3, #0
 8118ef4:	db0a      	blt.n	8118f0c <tcp_receive+0xef8>
 8118ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8118f24 <tcp_receive+0xf10>)
 8118ef8:	681a      	ldr	r2, [r3, #0]
 8118efa:	687b      	ldr	r3, [r7, #4]
 8118efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118efe:	6879      	ldr	r1, [r7, #4]
 8118f00:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8118f02:	440b      	add	r3, r1
 8118f04:	1ad3      	subs	r3, r2, r3
 8118f06:	3301      	adds	r3, #1
 8118f08:	2b00      	cmp	r3, #0
 8118f0a:	dd07      	ble.n	8118f1c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8118f0c:	687b      	ldr	r3, [r7, #4]
 8118f0e:	8b5b      	ldrh	r3, [r3, #26]
 8118f10:	f043 0302 	orr.w	r3, r3, #2
 8118f14:	b29a      	uxth	r2, r3
 8118f16:	687b      	ldr	r3, [r7, #4]
 8118f18:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8118f1a:	e7ff      	b.n	8118f1c <tcp_receive+0xf08>
 8118f1c:	bf00      	nop
 8118f1e:	3750      	adds	r7, #80	@ 0x50
 8118f20:	46bd      	mov	sp, r7
 8118f22:	bdb0      	pop	{r4, r5, r7, pc}
 8118f24:	10011d4c 	.word	0x10011d4c
 8118f28:	10011d2c 	.word	0x10011d2c
 8118f2c:	10011d56 	.word	0x10011d56
 8118f30:	0811e858 	.word	0x0811e858
 8118f34:	0811ec40 	.word	0x0811ec40
 8118f38:	0811e8e4 	.word	0x0811e8e4

08118f3c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8118f3c:	b480      	push	{r7}
 8118f3e:	b083      	sub	sp, #12
 8118f40:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8118f42:	4b15      	ldr	r3, [pc, #84]	@ (8118f98 <tcp_get_next_optbyte+0x5c>)
 8118f44:	881b      	ldrh	r3, [r3, #0]
 8118f46:	1c5a      	adds	r2, r3, #1
 8118f48:	b291      	uxth	r1, r2
 8118f4a:	4a13      	ldr	r2, [pc, #76]	@ (8118f98 <tcp_get_next_optbyte+0x5c>)
 8118f4c:	8011      	strh	r1, [r2, #0]
 8118f4e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8118f50:	4b12      	ldr	r3, [pc, #72]	@ (8118f9c <tcp_get_next_optbyte+0x60>)
 8118f52:	681b      	ldr	r3, [r3, #0]
 8118f54:	2b00      	cmp	r3, #0
 8118f56:	d004      	beq.n	8118f62 <tcp_get_next_optbyte+0x26>
 8118f58:	4b11      	ldr	r3, [pc, #68]	@ (8118fa0 <tcp_get_next_optbyte+0x64>)
 8118f5a:	881b      	ldrh	r3, [r3, #0]
 8118f5c:	88fa      	ldrh	r2, [r7, #6]
 8118f5e:	429a      	cmp	r2, r3
 8118f60:	d208      	bcs.n	8118f74 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8118f62:	4b10      	ldr	r3, [pc, #64]	@ (8118fa4 <tcp_get_next_optbyte+0x68>)
 8118f64:	681b      	ldr	r3, [r3, #0]
 8118f66:	3314      	adds	r3, #20
 8118f68:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8118f6a:	88fb      	ldrh	r3, [r7, #6]
 8118f6c:	683a      	ldr	r2, [r7, #0]
 8118f6e:	4413      	add	r3, r2
 8118f70:	781b      	ldrb	r3, [r3, #0]
 8118f72:	e00b      	b.n	8118f8c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8118f74:	88fb      	ldrh	r3, [r7, #6]
 8118f76:	b2da      	uxtb	r2, r3
 8118f78:	4b09      	ldr	r3, [pc, #36]	@ (8118fa0 <tcp_get_next_optbyte+0x64>)
 8118f7a:	881b      	ldrh	r3, [r3, #0]
 8118f7c:	b2db      	uxtb	r3, r3
 8118f7e:	1ad3      	subs	r3, r2, r3
 8118f80:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8118f82:	4b06      	ldr	r3, [pc, #24]	@ (8118f9c <tcp_get_next_optbyte+0x60>)
 8118f84:	681a      	ldr	r2, [r3, #0]
 8118f86:	797b      	ldrb	r3, [r7, #5]
 8118f88:	4413      	add	r3, r2
 8118f8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8118f8c:	4618      	mov	r0, r3
 8118f8e:	370c      	adds	r7, #12
 8118f90:	46bd      	mov	sp, r7
 8118f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118f96:	4770      	bx	lr
 8118f98:	10011d48 	.word	0x10011d48
 8118f9c:	10011d44 	.word	0x10011d44
 8118fa0:	10011d42 	.word	0x10011d42
 8118fa4:	10011d3c 	.word	0x10011d3c

08118fa8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8118fa8:	b580      	push	{r7, lr}
 8118faa:	b084      	sub	sp, #16
 8118fac:	af00      	add	r7, sp, #0
 8118fae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8118fb0:	687b      	ldr	r3, [r7, #4]
 8118fb2:	2b00      	cmp	r3, #0
 8118fb4:	d106      	bne.n	8118fc4 <tcp_parseopt+0x1c>
 8118fb6:	4b33      	ldr	r3, [pc, #204]	@ (8119084 <tcp_parseopt+0xdc>)
 8118fb8:	f240 727d 	movw	r2, #1917	@ 0x77d
 8118fbc:	4932      	ldr	r1, [pc, #200]	@ (8119088 <tcp_parseopt+0xe0>)
 8118fbe:	4833      	ldr	r0, [pc, #204]	@ (811908c <tcp_parseopt+0xe4>)
 8118fc0:	f002 ff2c 	bl	811be1c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8118fc4:	4b32      	ldr	r3, [pc, #200]	@ (8119090 <tcp_parseopt+0xe8>)
 8118fc6:	881b      	ldrh	r3, [r3, #0]
 8118fc8:	2b00      	cmp	r3, #0
 8118fca:	d057      	beq.n	811907c <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8118fcc:	4b31      	ldr	r3, [pc, #196]	@ (8119094 <tcp_parseopt+0xec>)
 8118fce:	2200      	movs	r2, #0
 8118fd0:	801a      	strh	r2, [r3, #0]
 8118fd2:	e047      	b.n	8119064 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8118fd4:	f7ff ffb2 	bl	8118f3c <tcp_get_next_optbyte>
 8118fd8:	4603      	mov	r3, r0
 8118fda:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8118fdc:	7bfb      	ldrb	r3, [r7, #15]
 8118fde:	2b02      	cmp	r3, #2
 8118fe0:	d006      	beq.n	8118ff0 <tcp_parseopt+0x48>
 8118fe2:	2b02      	cmp	r3, #2
 8118fe4:	dc2b      	bgt.n	811903e <tcp_parseopt+0x96>
 8118fe6:	2b00      	cmp	r3, #0
 8118fe8:	d043      	beq.n	8119072 <tcp_parseopt+0xca>
 8118fea:	2b01      	cmp	r3, #1
 8118fec:	d039      	beq.n	8119062 <tcp_parseopt+0xba>
 8118fee:	e026      	b.n	811903e <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8118ff0:	f7ff ffa4 	bl	8118f3c <tcp_get_next_optbyte>
 8118ff4:	4603      	mov	r3, r0
 8118ff6:	2b04      	cmp	r3, #4
 8118ff8:	d13d      	bne.n	8119076 <tcp_parseopt+0xce>
 8118ffa:	4b26      	ldr	r3, [pc, #152]	@ (8119094 <tcp_parseopt+0xec>)
 8118ffc:	881b      	ldrh	r3, [r3, #0]
 8118ffe:	3301      	adds	r3, #1
 8119000:	4a23      	ldr	r2, [pc, #140]	@ (8119090 <tcp_parseopt+0xe8>)
 8119002:	8812      	ldrh	r2, [r2, #0]
 8119004:	4293      	cmp	r3, r2
 8119006:	da36      	bge.n	8119076 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8119008:	f7ff ff98 	bl	8118f3c <tcp_get_next_optbyte>
 811900c:	4603      	mov	r3, r0
 811900e:	021b      	lsls	r3, r3, #8
 8119010:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8119012:	f7ff ff93 	bl	8118f3c <tcp_get_next_optbyte>
 8119016:	4603      	mov	r3, r0
 8119018:	461a      	mov	r2, r3
 811901a:	89bb      	ldrh	r3, [r7, #12]
 811901c:	4313      	orrs	r3, r2
 811901e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8119020:	89bb      	ldrh	r3, [r7, #12]
 8119022:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8119026:	4293      	cmp	r3, r2
 8119028:	d804      	bhi.n	8119034 <tcp_parseopt+0x8c>
 811902a:	89bb      	ldrh	r3, [r7, #12]
 811902c:	2b00      	cmp	r3, #0
 811902e:	d001      	beq.n	8119034 <tcp_parseopt+0x8c>
 8119030:	89ba      	ldrh	r2, [r7, #12]
 8119032:	e001      	b.n	8119038 <tcp_parseopt+0x90>
 8119034:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8119038:	687b      	ldr	r3, [r7, #4]
 811903a:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 811903c:	e012      	b.n	8119064 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 811903e:	f7ff ff7d 	bl	8118f3c <tcp_get_next_optbyte>
 8119042:	4603      	mov	r3, r0
 8119044:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8119046:	7afb      	ldrb	r3, [r7, #11]
 8119048:	2b01      	cmp	r3, #1
 811904a:	d916      	bls.n	811907a <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 811904c:	7afb      	ldrb	r3, [r7, #11]
 811904e:	b29a      	uxth	r2, r3
 8119050:	4b10      	ldr	r3, [pc, #64]	@ (8119094 <tcp_parseopt+0xec>)
 8119052:	881b      	ldrh	r3, [r3, #0]
 8119054:	4413      	add	r3, r2
 8119056:	b29b      	uxth	r3, r3
 8119058:	3b02      	subs	r3, #2
 811905a:	b29a      	uxth	r2, r3
 811905c:	4b0d      	ldr	r3, [pc, #52]	@ (8119094 <tcp_parseopt+0xec>)
 811905e:	801a      	strh	r2, [r3, #0]
 8119060:	e000      	b.n	8119064 <tcp_parseopt+0xbc>
          break;
 8119062:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8119064:	4b0b      	ldr	r3, [pc, #44]	@ (8119094 <tcp_parseopt+0xec>)
 8119066:	881a      	ldrh	r2, [r3, #0]
 8119068:	4b09      	ldr	r3, [pc, #36]	@ (8119090 <tcp_parseopt+0xe8>)
 811906a:	881b      	ldrh	r3, [r3, #0]
 811906c:	429a      	cmp	r2, r3
 811906e:	d3b1      	bcc.n	8118fd4 <tcp_parseopt+0x2c>
 8119070:	e004      	b.n	811907c <tcp_parseopt+0xd4>
          return;
 8119072:	bf00      	nop
 8119074:	e002      	b.n	811907c <tcp_parseopt+0xd4>
            return;
 8119076:	bf00      	nop
 8119078:	e000      	b.n	811907c <tcp_parseopt+0xd4>
            return;
 811907a:	bf00      	nop
      }
    }
  }
}
 811907c:	3710      	adds	r7, #16
 811907e:	46bd      	mov	sp, r7
 8119080:	bd80      	pop	{r7, pc}
 8119082:	bf00      	nop
 8119084:	0811e858 	.word	0x0811e858
 8119088:	0811ecfc 	.word	0x0811ecfc
 811908c:	0811e8e4 	.word	0x0811e8e4
 8119090:	10011d40 	.word	0x10011d40
 8119094:	10011d48 	.word	0x10011d48

08119098 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8119098:	b480      	push	{r7}
 811909a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 811909c:	4b05      	ldr	r3, [pc, #20]	@ (81190b4 <tcp_trigger_input_pcb_close+0x1c>)
 811909e:	781b      	ldrb	r3, [r3, #0]
 81190a0:	f043 0310 	orr.w	r3, r3, #16
 81190a4:	b2da      	uxtb	r2, r3
 81190a6:	4b03      	ldr	r3, [pc, #12]	@ (81190b4 <tcp_trigger_input_pcb_close+0x1c>)
 81190a8:	701a      	strb	r2, [r3, #0]
}
 81190aa:	bf00      	nop
 81190ac:	46bd      	mov	sp, r7
 81190ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81190b2:	4770      	bx	lr
 81190b4:	10011d59 	.word	0x10011d59

081190b8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 81190b8:	b580      	push	{r7, lr}
 81190ba:	b084      	sub	sp, #16
 81190bc:	af00      	add	r7, sp, #0
 81190be:	60f8      	str	r0, [r7, #12]
 81190c0:	60b9      	str	r1, [r7, #8]
 81190c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 81190c4:	68fb      	ldr	r3, [r7, #12]
 81190c6:	2b00      	cmp	r3, #0
 81190c8:	d00a      	beq.n	81190e0 <tcp_route+0x28>
 81190ca:	68fb      	ldr	r3, [r7, #12]
 81190cc:	7a1b      	ldrb	r3, [r3, #8]
 81190ce:	2b00      	cmp	r3, #0
 81190d0:	d006      	beq.n	81190e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 81190d2:	68fb      	ldr	r3, [r7, #12]
 81190d4:	7a1b      	ldrb	r3, [r3, #8]
 81190d6:	4618      	mov	r0, r3
 81190d8:	f7fb f850 	bl	811417c <netif_get_by_index>
 81190dc:	4603      	mov	r3, r0
 81190de:	e003      	b.n	81190e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 81190e0:	6878      	ldr	r0, [r7, #4]
 81190e2:	f7f8 ff2b 	bl	8111f3c <ip4_route>
 81190e6:	4603      	mov	r3, r0
  }
}
 81190e8:	4618      	mov	r0, r3
 81190ea:	3710      	adds	r7, #16
 81190ec:	46bd      	mov	sp, r7
 81190ee:	bd80      	pop	{r7, pc}

081190f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 81190f0:	b590      	push	{r4, r7, lr}
 81190f2:	b087      	sub	sp, #28
 81190f4:	af00      	add	r7, sp, #0
 81190f6:	60f8      	str	r0, [r7, #12]
 81190f8:	60b9      	str	r1, [r7, #8]
 81190fa:	603b      	str	r3, [r7, #0]
 81190fc:	4613      	mov	r3, r2
 81190fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8119100:	68fb      	ldr	r3, [r7, #12]
 8119102:	2b00      	cmp	r3, #0
 8119104:	d105      	bne.n	8119112 <tcp_create_segment+0x22>
 8119106:	4b43      	ldr	r3, [pc, #268]	@ (8119214 <tcp_create_segment+0x124>)
 8119108:	22a3      	movs	r2, #163	@ 0xa3
 811910a:	4943      	ldr	r1, [pc, #268]	@ (8119218 <tcp_create_segment+0x128>)
 811910c:	4843      	ldr	r0, [pc, #268]	@ (811921c <tcp_create_segment+0x12c>)
 811910e:	f002 fe85 	bl	811be1c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8119112:	68bb      	ldr	r3, [r7, #8]
 8119114:	2b00      	cmp	r3, #0
 8119116:	d105      	bne.n	8119124 <tcp_create_segment+0x34>
 8119118:	4b3e      	ldr	r3, [pc, #248]	@ (8119214 <tcp_create_segment+0x124>)
 811911a:	22a4      	movs	r2, #164	@ 0xa4
 811911c:	4940      	ldr	r1, [pc, #256]	@ (8119220 <tcp_create_segment+0x130>)
 811911e:	483f      	ldr	r0, [pc, #252]	@ (811921c <tcp_create_segment+0x12c>)
 8119120:	f002 fe7c 	bl	811be1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8119124:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8119128:	009b      	lsls	r3, r3, #2
 811912a:	b2db      	uxtb	r3, r3
 811912c:	f003 0304 	and.w	r3, r3, #4
 8119130:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8119132:	2003      	movs	r0, #3
 8119134:	f7fa fc96 	bl	8113a64 <memp_malloc>
 8119138:	6138      	str	r0, [r7, #16]
 811913a:	693b      	ldr	r3, [r7, #16]
 811913c:	2b00      	cmp	r3, #0
 811913e:	d104      	bne.n	811914a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8119140:	68b8      	ldr	r0, [r7, #8]
 8119142:	f7fb fba9 	bl	8114898 <pbuf_free>
    return NULL;
 8119146:	2300      	movs	r3, #0
 8119148:	e060      	b.n	811920c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 811914a:	693b      	ldr	r3, [r7, #16]
 811914c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8119150:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8119152:	693b      	ldr	r3, [r7, #16]
 8119154:	2200      	movs	r2, #0
 8119156:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8119158:	693b      	ldr	r3, [r7, #16]
 811915a:	68ba      	ldr	r2, [r7, #8]
 811915c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 811915e:	68bb      	ldr	r3, [r7, #8]
 8119160:	891a      	ldrh	r2, [r3, #8]
 8119162:	7dfb      	ldrb	r3, [r7, #23]
 8119164:	b29b      	uxth	r3, r3
 8119166:	429a      	cmp	r2, r3
 8119168:	d205      	bcs.n	8119176 <tcp_create_segment+0x86>
 811916a:	4b2a      	ldr	r3, [pc, #168]	@ (8119214 <tcp_create_segment+0x124>)
 811916c:	22b0      	movs	r2, #176	@ 0xb0
 811916e:	492d      	ldr	r1, [pc, #180]	@ (8119224 <tcp_create_segment+0x134>)
 8119170:	482a      	ldr	r0, [pc, #168]	@ (811921c <tcp_create_segment+0x12c>)
 8119172:	f002 fe53 	bl	811be1c <iprintf>
  seg->len = p->tot_len - optlen;
 8119176:	68bb      	ldr	r3, [r7, #8]
 8119178:	891a      	ldrh	r2, [r3, #8]
 811917a:	7dfb      	ldrb	r3, [r7, #23]
 811917c:	b29b      	uxth	r3, r3
 811917e:	1ad3      	subs	r3, r2, r3
 8119180:	b29a      	uxth	r2, r3
 8119182:	693b      	ldr	r3, [r7, #16]
 8119184:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8119186:	2114      	movs	r1, #20
 8119188:	68b8      	ldr	r0, [r7, #8]
 811918a:	f7fb faef 	bl	811476c <pbuf_add_header>
 811918e:	4603      	mov	r3, r0
 8119190:	2b00      	cmp	r3, #0
 8119192:	d004      	beq.n	811919e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8119194:	6938      	ldr	r0, [r7, #16]
 8119196:	f7fd f854 	bl	8116242 <tcp_seg_free>
    return NULL;
 811919a:	2300      	movs	r3, #0
 811919c:	e036      	b.n	811920c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 811919e:	693b      	ldr	r3, [r7, #16]
 81191a0:	685b      	ldr	r3, [r3, #4]
 81191a2:	685a      	ldr	r2, [r3, #4]
 81191a4:	693b      	ldr	r3, [r7, #16]
 81191a6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 81191a8:	68fb      	ldr	r3, [r7, #12]
 81191aa:	8ada      	ldrh	r2, [r3, #22]
 81191ac:	693b      	ldr	r3, [r7, #16]
 81191ae:	68dc      	ldr	r4, [r3, #12]
 81191b0:	4610      	mov	r0, r2
 81191b2:	f7f7 fbeb 	bl	811098c <lwip_htons>
 81191b6:	4603      	mov	r3, r0
 81191b8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 81191ba:	68fb      	ldr	r3, [r7, #12]
 81191bc:	8b1a      	ldrh	r2, [r3, #24]
 81191be:	693b      	ldr	r3, [r7, #16]
 81191c0:	68dc      	ldr	r4, [r3, #12]
 81191c2:	4610      	mov	r0, r2
 81191c4:	f7f7 fbe2 	bl	811098c <lwip_htons>
 81191c8:	4603      	mov	r3, r0
 81191ca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 81191cc:	693b      	ldr	r3, [r7, #16]
 81191ce:	68dc      	ldr	r4, [r3, #12]
 81191d0:	6838      	ldr	r0, [r7, #0]
 81191d2:	f7f7 fbf0 	bl	81109b6 <lwip_htonl>
 81191d6:	4603      	mov	r3, r0
 81191d8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 81191da:	7dfb      	ldrb	r3, [r7, #23]
 81191dc:	089b      	lsrs	r3, r3, #2
 81191de:	b2db      	uxtb	r3, r3
 81191e0:	3305      	adds	r3, #5
 81191e2:	b29b      	uxth	r3, r3
 81191e4:	031b      	lsls	r3, r3, #12
 81191e6:	b29a      	uxth	r2, r3
 81191e8:	79fb      	ldrb	r3, [r7, #7]
 81191ea:	b29b      	uxth	r3, r3
 81191ec:	4313      	orrs	r3, r2
 81191ee:	b29a      	uxth	r2, r3
 81191f0:	693b      	ldr	r3, [r7, #16]
 81191f2:	68dc      	ldr	r4, [r3, #12]
 81191f4:	4610      	mov	r0, r2
 81191f6:	f7f7 fbc9 	bl	811098c <lwip_htons>
 81191fa:	4603      	mov	r3, r0
 81191fc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 81191fe:	693b      	ldr	r3, [r7, #16]
 8119200:	68db      	ldr	r3, [r3, #12]
 8119202:	2200      	movs	r2, #0
 8119204:	749a      	strb	r2, [r3, #18]
 8119206:	2200      	movs	r2, #0
 8119208:	74da      	strb	r2, [r3, #19]
  return seg;
 811920a:	693b      	ldr	r3, [r7, #16]
}
 811920c:	4618      	mov	r0, r3
 811920e:	371c      	adds	r7, #28
 8119210:	46bd      	mov	sp, r7
 8119212:	bd90      	pop	{r4, r7, pc}
 8119214:	0811ed18 	.word	0x0811ed18
 8119218:	0811ed8c 	.word	0x0811ed8c
 811921c:	0811edac 	.word	0x0811edac
 8119220:	0811edd4 	.word	0x0811edd4
 8119224:	0811edf8 	.word	0x0811edf8

08119228 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8119228:	b580      	push	{r7, lr}
 811922a:	b086      	sub	sp, #24
 811922c:	af00      	add	r7, sp, #0
 811922e:	607b      	str	r3, [r7, #4]
 8119230:	4603      	mov	r3, r0
 8119232:	73fb      	strb	r3, [r7, #15]
 8119234:	460b      	mov	r3, r1
 8119236:	81bb      	strh	r3, [r7, #12]
 8119238:	4613      	mov	r3, r2
 811923a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 811923c:	89bb      	ldrh	r3, [r7, #12]
 811923e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8119240:	687b      	ldr	r3, [r7, #4]
 8119242:	2b00      	cmp	r3, #0
 8119244:	d105      	bne.n	8119252 <tcp_pbuf_prealloc+0x2a>
 8119246:	4b30      	ldr	r3, [pc, #192]	@ (8119308 <tcp_pbuf_prealloc+0xe0>)
 8119248:	22e8      	movs	r2, #232	@ 0xe8
 811924a:	4930      	ldr	r1, [pc, #192]	@ (811930c <tcp_pbuf_prealloc+0xe4>)
 811924c:	4830      	ldr	r0, [pc, #192]	@ (8119310 <tcp_pbuf_prealloc+0xe8>)
 811924e:	f002 fde5 	bl	811be1c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8119252:	6a3b      	ldr	r3, [r7, #32]
 8119254:	2b00      	cmp	r3, #0
 8119256:	d105      	bne.n	8119264 <tcp_pbuf_prealloc+0x3c>
 8119258:	4b2b      	ldr	r3, [pc, #172]	@ (8119308 <tcp_pbuf_prealloc+0xe0>)
 811925a:	22e9      	movs	r2, #233	@ 0xe9
 811925c:	492d      	ldr	r1, [pc, #180]	@ (8119314 <tcp_pbuf_prealloc+0xec>)
 811925e:	482c      	ldr	r0, [pc, #176]	@ (8119310 <tcp_pbuf_prealloc+0xe8>)
 8119260:	f002 fddc 	bl	811be1c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8119264:	89ba      	ldrh	r2, [r7, #12]
 8119266:	897b      	ldrh	r3, [r7, #10]
 8119268:	429a      	cmp	r2, r3
 811926a:	d221      	bcs.n	81192b0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 811926c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8119270:	f003 0302 	and.w	r3, r3, #2
 8119274:	2b00      	cmp	r3, #0
 8119276:	d111      	bne.n	811929c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8119278:	6a3b      	ldr	r3, [r7, #32]
 811927a:	8b5b      	ldrh	r3, [r3, #26]
 811927c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8119280:	2b00      	cmp	r3, #0
 8119282:	d115      	bne.n	81192b0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8119284:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8119288:	2b00      	cmp	r3, #0
 811928a:	d007      	beq.n	811929c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 811928c:	6a3b      	ldr	r3, [r7, #32]
 811928e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8119290:	2b00      	cmp	r3, #0
 8119292:	d103      	bne.n	811929c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8119294:	6a3b      	ldr	r3, [r7, #32]
 8119296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8119298:	2b00      	cmp	r3, #0
 811929a:	d009      	beq.n	81192b0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 811929c:	89bb      	ldrh	r3, [r7, #12]
 811929e:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 81192a2:	f023 0203 	bic.w	r2, r3, #3
 81192a6:	897b      	ldrh	r3, [r7, #10]
 81192a8:	4293      	cmp	r3, r2
 81192aa:	bf28      	it	cs
 81192ac:	4613      	movcs	r3, r2
 81192ae:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 81192b0:	8af9      	ldrh	r1, [r7, #22]
 81192b2:	7bfb      	ldrb	r3, [r7, #15]
 81192b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81192b8:	4618      	mov	r0, r3
 81192ba:	f7fb f809 	bl	81142d0 <pbuf_alloc>
 81192be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 81192c0:	693b      	ldr	r3, [r7, #16]
 81192c2:	2b00      	cmp	r3, #0
 81192c4:	d101      	bne.n	81192ca <tcp_pbuf_prealloc+0xa2>
    return NULL;
 81192c6:	2300      	movs	r3, #0
 81192c8:	e019      	b.n	81192fe <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 81192ca:	693b      	ldr	r3, [r7, #16]
 81192cc:	681b      	ldr	r3, [r3, #0]
 81192ce:	2b00      	cmp	r3, #0
 81192d0:	d006      	beq.n	81192e0 <tcp_pbuf_prealloc+0xb8>
 81192d2:	4b0d      	ldr	r3, [pc, #52]	@ (8119308 <tcp_pbuf_prealloc+0xe0>)
 81192d4:	f240 120b 	movw	r2, #267	@ 0x10b
 81192d8:	490f      	ldr	r1, [pc, #60]	@ (8119318 <tcp_pbuf_prealloc+0xf0>)
 81192da:	480d      	ldr	r0, [pc, #52]	@ (8119310 <tcp_pbuf_prealloc+0xe8>)
 81192dc:	f002 fd9e 	bl	811be1c <iprintf>
  *oversize = p->len - length;
 81192e0:	693b      	ldr	r3, [r7, #16]
 81192e2:	895a      	ldrh	r2, [r3, #10]
 81192e4:	89bb      	ldrh	r3, [r7, #12]
 81192e6:	1ad3      	subs	r3, r2, r3
 81192e8:	b29a      	uxth	r2, r3
 81192ea:	687b      	ldr	r3, [r7, #4]
 81192ec:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 81192ee:	693b      	ldr	r3, [r7, #16]
 81192f0:	89ba      	ldrh	r2, [r7, #12]
 81192f2:	811a      	strh	r2, [r3, #8]
 81192f4:	693b      	ldr	r3, [r7, #16]
 81192f6:	891a      	ldrh	r2, [r3, #8]
 81192f8:	693b      	ldr	r3, [r7, #16]
 81192fa:	815a      	strh	r2, [r3, #10]
  return p;
 81192fc:	693b      	ldr	r3, [r7, #16]
}
 81192fe:	4618      	mov	r0, r3
 8119300:	3718      	adds	r7, #24
 8119302:	46bd      	mov	sp, r7
 8119304:	bd80      	pop	{r7, pc}
 8119306:	bf00      	nop
 8119308:	0811ed18 	.word	0x0811ed18
 811930c:	0811ee10 	.word	0x0811ee10
 8119310:	0811edac 	.word	0x0811edac
 8119314:	0811ee34 	.word	0x0811ee34
 8119318:	0811ee54 	.word	0x0811ee54

0811931c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 811931c:	b580      	push	{r7, lr}
 811931e:	b082      	sub	sp, #8
 8119320:	af00      	add	r7, sp, #0
 8119322:	6078      	str	r0, [r7, #4]
 8119324:	460b      	mov	r3, r1
 8119326:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8119328:	687b      	ldr	r3, [r7, #4]
 811932a:	2b00      	cmp	r3, #0
 811932c:	d106      	bne.n	811933c <tcp_write_checks+0x20>
 811932e:	4b33      	ldr	r3, [pc, #204]	@ (81193fc <tcp_write_checks+0xe0>)
 8119330:	f240 1233 	movw	r2, #307	@ 0x133
 8119334:	4932      	ldr	r1, [pc, #200]	@ (8119400 <tcp_write_checks+0xe4>)
 8119336:	4833      	ldr	r0, [pc, #204]	@ (8119404 <tcp_write_checks+0xe8>)
 8119338:	f002 fd70 	bl	811be1c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 811933c:	687b      	ldr	r3, [r7, #4]
 811933e:	7d1b      	ldrb	r3, [r3, #20]
 8119340:	2b04      	cmp	r3, #4
 8119342:	d00e      	beq.n	8119362 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8119344:	687b      	ldr	r3, [r7, #4]
 8119346:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8119348:	2b07      	cmp	r3, #7
 811934a:	d00a      	beq.n	8119362 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 811934c:	687b      	ldr	r3, [r7, #4]
 811934e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8119350:	2b02      	cmp	r3, #2
 8119352:	d006      	beq.n	8119362 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8119354:	687b      	ldr	r3, [r7, #4]
 8119356:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8119358:	2b03      	cmp	r3, #3
 811935a:	d002      	beq.n	8119362 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 811935c:	f06f 030a 	mvn.w	r3, #10
 8119360:	e048      	b.n	81193f4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8119362:	887b      	ldrh	r3, [r7, #2]
 8119364:	2b00      	cmp	r3, #0
 8119366:	d101      	bne.n	811936c <tcp_write_checks+0x50>
    return ERR_OK;
 8119368:	2300      	movs	r3, #0
 811936a:	e043      	b.n	81193f4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 811936c:	687b      	ldr	r3, [r7, #4]
 811936e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8119372:	887a      	ldrh	r2, [r7, #2]
 8119374:	429a      	cmp	r2, r3
 8119376:	d909      	bls.n	811938c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8119378:	687b      	ldr	r3, [r7, #4]
 811937a:	8b5b      	ldrh	r3, [r3, #26]
 811937c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8119380:	b29a      	uxth	r2, r3
 8119382:	687b      	ldr	r3, [r7, #4]
 8119384:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8119386:	f04f 33ff 	mov.w	r3, #4294967295
 811938a:	e033      	b.n	81193f4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 811938c:	687b      	ldr	r3, [r7, #4]
 811938e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119392:	2b0f      	cmp	r3, #15
 8119394:	d909      	bls.n	81193aa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8119396:	687b      	ldr	r3, [r7, #4]
 8119398:	8b5b      	ldrh	r3, [r3, #26]
 811939a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811939e:	b29a      	uxth	r2, r3
 81193a0:	687b      	ldr	r3, [r7, #4]
 81193a2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 81193a4:	f04f 33ff 	mov.w	r3, #4294967295
 81193a8:	e024      	b.n	81193f4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 81193aa:	687b      	ldr	r3, [r7, #4]
 81193ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81193b0:	2b00      	cmp	r3, #0
 81193b2:	d00f      	beq.n	81193d4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 81193b4:	687b      	ldr	r3, [r7, #4]
 81193b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81193b8:	2b00      	cmp	r3, #0
 81193ba:	d11a      	bne.n	81193f2 <tcp_write_checks+0xd6>
 81193bc:	687b      	ldr	r3, [r7, #4]
 81193be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81193c0:	2b00      	cmp	r3, #0
 81193c2:	d116      	bne.n	81193f2 <tcp_write_checks+0xd6>
 81193c4:	4b0d      	ldr	r3, [pc, #52]	@ (81193fc <tcp_write_checks+0xe0>)
 81193c6:	f240 1255 	movw	r2, #341	@ 0x155
 81193ca:	490f      	ldr	r1, [pc, #60]	@ (8119408 <tcp_write_checks+0xec>)
 81193cc:	480d      	ldr	r0, [pc, #52]	@ (8119404 <tcp_write_checks+0xe8>)
 81193ce:	f002 fd25 	bl	811be1c <iprintf>
 81193d2:	e00e      	b.n	81193f2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 81193d4:	687b      	ldr	r3, [r7, #4]
 81193d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81193d8:	2b00      	cmp	r3, #0
 81193da:	d103      	bne.n	81193e4 <tcp_write_checks+0xc8>
 81193dc:	687b      	ldr	r3, [r7, #4]
 81193de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81193e0:	2b00      	cmp	r3, #0
 81193e2:	d006      	beq.n	81193f2 <tcp_write_checks+0xd6>
 81193e4:	4b05      	ldr	r3, [pc, #20]	@ (81193fc <tcp_write_checks+0xe0>)
 81193e6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 81193ea:	4908      	ldr	r1, [pc, #32]	@ (811940c <tcp_write_checks+0xf0>)
 81193ec:	4805      	ldr	r0, [pc, #20]	@ (8119404 <tcp_write_checks+0xe8>)
 81193ee:	f002 fd15 	bl	811be1c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 81193f2:	2300      	movs	r3, #0
}
 81193f4:	4618      	mov	r0, r3
 81193f6:	3708      	adds	r7, #8
 81193f8:	46bd      	mov	sp, r7
 81193fa:	bd80      	pop	{r7, pc}
 81193fc:	0811ed18 	.word	0x0811ed18
 8119400:	0811ee68 	.word	0x0811ee68
 8119404:	0811edac 	.word	0x0811edac
 8119408:	0811ee88 	.word	0x0811ee88
 811940c:	0811eec4 	.word	0x0811eec4

08119410 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8119410:	b590      	push	{r4, r7, lr}
 8119412:	b09b      	sub	sp, #108	@ 0x6c
 8119414:	af04      	add	r7, sp, #16
 8119416:	60f8      	str	r0, [r7, #12]
 8119418:	60b9      	str	r1, [r7, #8]
 811941a:	4611      	mov	r1, r2
 811941c:	461a      	mov	r2, r3
 811941e:	460b      	mov	r3, r1
 8119420:	80fb      	strh	r3, [r7, #6]
 8119422:	4613      	mov	r3, r2
 8119424:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8119426:	2300      	movs	r3, #0
 8119428:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 811942a:	2300      	movs	r3, #0
 811942c:	653b      	str	r3, [r7, #80]	@ 0x50
 811942e:	2300      	movs	r3, #0
 8119430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8119432:	2300      	movs	r3, #0
 8119434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8119436:	2300      	movs	r3, #0
 8119438:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 811943a:	2300      	movs	r3, #0
 811943c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8119440:	2300      	movs	r3, #0
 8119442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8119446:	2300      	movs	r3, #0
 8119448:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 811944a:	2300      	movs	r3, #0
 811944c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 811944e:	2300      	movs	r3, #0
 8119450:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8119452:	68fb      	ldr	r3, [r7, #12]
 8119454:	2b00      	cmp	r3, #0
 8119456:	d109      	bne.n	811946c <tcp_write+0x5c>
 8119458:	4ba4      	ldr	r3, [pc, #656]	@ (81196ec <tcp_write+0x2dc>)
 811945a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 811945e:	49a4      	ldr	r1, [pc, #656]	@ (81196f0 <tcp_write+0x2e0>)
 8119460:	48a4      	ldr	r0, [pc, #656]	@ (81196f4 <tcp_write+0x2e4>)
 8119462:	f002 fcdb 	bl	811be1c <iprintf>
 8119466:	f06f 030f 	mvn.w	r3, #15
 811946a:	e32a      	b.n	8119ac2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 811946c:	68fb      	ldr	r3, [r7, #12]
 811946e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8119472:	085b      	lsrs	r3, r3, #1
 8119474:	b29a      	uxth	r2, r3
 8119476:	68fb      	ldr	r3, [r7, #12]
 8119478:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811947a:	4293      	cmp	r3, r2
 811947c:	bf28      	it	cs
 811947e:	4613      	movcs	r3, r2
 8119480:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8119482:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8119484:	2b00      	cmp	r3, #0
 8119486:	d102      	bne.n	811948e <tcp_write+0x7e>
 8119488:	68fb      	ldr	r3, [r7, #12]
 811948a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811948c:	e000      	b.n	8119490 <tcp_write+0x80>
 811948e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8119490:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8119492:	68bb      	ldr	r3, [r7, #8]
 8119494:	2b00      	cmp	r3, #0
 8119496:	d109      	bne.n	81194ac <tcp_write+0x9c>
 8119498:	4b94      	ldr	r3, [pc, #592]	@ (81196ec <tcp_write+0x2dc>)
 811949a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 811949e:	4996      	ldr	r1, [pc, #600]	@ (81196f8 <tcp_write+0x2e8>)
 81194a0:	4894      	ldr	r0, [pc, #592]	@ (81196f4 <tcp_write+0x2e4>)
 81194a2:	f002 fcbb 	bl	811be1c <iprintf>
 81194a6:	f06f 030f 	mvn.w	r3, #15
 81194aa:	e30a      	b.n	8119ac2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 81194ac:	88fb      	ldrh	r3, [r7, #6]
 81194ae:	4619      	mov	r1, r3
 81194b0:	68f8      	ldr	r0, [r7, #12]
 81194b2:	f7ff ff33 	bl	811931c <tcp_write_checks>
 81194b6:	4603      	mov	r3, r0
 81194b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 81194bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 81194c0:	2b00      	cmp	r3, #0
 81194c2:	d002      	beq.n	81194ca <tcp_write+0xba>
    return err;
 81194c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 81194c8:	e2fb      	b.n	8119ac2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 81194ca:	68fb      	ldr	r3, [r7, #12]
 81194cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81194d0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 81194d4:	2300      	movs	r3, #0
 81194d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 81194da:	68fb      	ldr	r3, [r7, #12]
 81194dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81194de:	2b00      	cmp	r3, #0
 81194e0:	f000 80f6 	beq.w	81196d0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 81194e4:	68fb      	ldr	r3, [r7, #12]
 81194e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81194e8:	653b      	str	r3, [r7, #80]	@ 0x50
 81194ea:	e002      	b.n	81194f2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 81194ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81194ee:	681b      	ldr	r3, [r3, #0]
 81194f0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 81194f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81194f4:	681b      	ldr	r3, [r3, #0]
 81194f6:	2b00      	cmp	r3, #0
 81194f8:	d1f8      	bne.n	81194ec <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 81194fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81194fc:	7a9b      	ldrb	r3, [r3, #10]
 81194fe:	009b      	lsls	r3, r3, #2
 8119500:	b29b      	uxth	r3, r3
 8119502:	f003 0304 	and.w	r3, r3, #4
 8119506:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8119508:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811950a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811950c:	891b      	ldrh	r3, [r3, #8]
 811950e:	4619      	mov	r1, r3
 8119510:	8c3b      	ldrh	r3, [r7, #32]
 8119512:	440b      	add	r3, r1
 8119514:	429a      	cmp	r2, r3
 8119516:	da06      	bge.n	8119526 <tcp_write+0x116>
 8119518:	4b74      	ldr	r3, [pc, #464]	@ (81196ec <tcp_write+0x2dc>)
 811951a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 811951e:	4977      	ldr	r1, [pc, #476]	@ (81196fc <tcp_write+0x2ec>)
 8119520:	4874      	ldr	r0, [pc, #464]	@ (81196f4 <tcp_write+0x2e4>)
 8119522:	f002 fc7b 	bl	811be1c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8119526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119528:	891a      	ldrh	r2, [r3, #8]
 811952a:	8c3b      	ldrh	r3, [r7, #32]
 811952c:	4413      	add	r3, r2
 811952e:	b29b      	uxth	r3, r3
 8119530:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8119532:	1ad3      	subs	r3, r2, r3
 8119534:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8119536:	68fb      	ldr	r3, [r7, #12]
 8119538:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 811953c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 811953e:	8a7b      	ldrh	r3, [r7, #18]
 8119540:	2b00      	cmp	r3, #0
 8119542:	d026      	beq.n	8119592 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8119544:	8a7b      	ldrh	r3, [r7, #18]
 8119546:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8119548:	429a      	cmp	r2, r3
 811954a:	d206      	bcs.n	811955a <tcp_write+0x14a>
 811954c:	4b67      	ldr	r3, [pc, #412]	@ (81196ec <tcp_write+0x2dc>)
 811954e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8119552:	496b      	ldr	r1, [pc, #428]	@ (8119700 <tcp_write+0x2f0>)
 8119554:	4867      	ldr	r0, [pc, #412]	@ (81196f4 <tcp_write+0x2e4>)
 8119556:	f002 fc61 	bl	811be1c <iprintf>
      seg = last_unsent;
 811955a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811955c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 811955e:	8a7b      	ldrh	r3, [r7, #18]
 8119560:	88fa      	ldrh	r2, [r7, #6]
 8119562:	4293      	cmp	r3, r2
 8119564:	bf28      	it	cs
 8119566:	4613      	movcs	r3, r2
 8119568:	b29b      	uxth	r3, r3
 811956a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 811956c:	4293      	cmp	r3, r2
 811956e:	bf28      	it	cs
 8119570:	4613      	movcs	r3, r2
 8119572:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8119574:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8119578:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811957a:	4413      	add	r3, r2
 811957c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8119580:	8a7a      	ldrh	r2, [r7, #18]
 8119582:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8119584:	1ad3      	subs	r3, r2, r3
 8119586:	b29b      	uxth	r3, r3
 8119588:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 811958a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 811958c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811958e:	1ad3      	subs	r3, r2, r3
 8119590:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8119592:	8a7b      	ldrh	r3, [r7, #18]
 8119594:	2b00      	cmp	r3, #0
 8119596:	d00b      	beq.n	81195b0 <tcp_write+0x1a0>
 8119598:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811959c:	88fb      	ldrh	r3, [r7, #6]
 811959e:	429a      	cmp	r2, r3
 81195a0:	d006      	beq.n	81195b0 <tcp_write+0x1a0>
 81195a2:	4b52      	ldr	r3, [pc, #328]	@ (81196ec <tcp_write+0x2dc>)
 81195a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81195a8:	4956      	ldr	r1, [pc, #344]	@ (8119704 <tcp_write+0x2f4>)
 81195aa:	4852      	ldr	r0, [pc, #328]	@ (81196f4 <tcp_write+0x2e4>)
 81195ac:	f002 fc36 	bl	811be1c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 81195b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81195b4:	88fb      	ldrh	r3, [r7, #6]
 81195b6:	429a      	cmp	r2, r3
 81195b8:	f080 8167 	bcs.w	811988a <tcp_write+0x47a>
 81195bc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 81195be:	2b00      	cmp	r3, #0
 81195c0:	f000 8163 	beq.w	811988a <tcp_write+0x47a>
 81195c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81195c6:	891b      	ldrh	r3, [r3, #8]
 81195c8:	2b00      	cmp	r3, #0
 81195ca:	f000 815e 	beq.w	811988a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 81195ce:	88fa      	ldrh	r2, [r7, #6]
 81195d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81195d4:	1ad2      	subs	r2, r2, r3
 81195d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 81195d8:	4293      	cmp	r3, r2
 81195da:	bfa8      	it	ge
 81195dc:	4613      	movge	r3, r2
 81195de:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 81195e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81195e2:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 81195e4:	797b      	ldrb	r3, [r7, #5]
 81195e6:	f003 0301 	and.w	r3, r3, #1
 81195ea:	2b00      	cmp	r3, #0
 81195ec:	d027      	beq.n	811963e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 81195ee:	f107 0012 	add.w	r0, r7, #18
 81195f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 81195f4:	8bf9      	ldrh	r1, [r7, #30]
 81195f6:	2301      	movs	r3, #1
 81195f8:	9302      	str	r3, [sp, #8]
 81195fa:	797b      	ldrb	r3, [r7, #5]
 81195fc:	9301      	str	r3, [sp, #4]
 81195fe:	68fb      	ldr	r3, [r7, #12]
 8119600:	9300      	str	r3, [sp, #0]
 8119602:	4603      	mov	r3, r0
 8119604:	2000      	movs	r0, #0
 8119606:	f7ff fe0f 	bl	8119228 <tcp_pbuf_prealloc>
 811960a:	6578      	str	r0, [r7, #84]	@ 0x54
 811960c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811960e:	2b00      	cmp	r3, #0
 8119610:	f000 8225 	beq.w	8119a5e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8119614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8119616:	6858      	ldr	r0, [r3, #4]
 8119618:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811961c:	68ba      	ldr	r2, [r7, #8]
 811961e:	4413      	add	r3, r2
 8119620:	8bfa      	ldrh	r2, [r7, #30]
 8119622:	4619      	mov	r1, r3
 8119624:	f002 fdab 	bl	811c17e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8119628:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 811962a:	f7fb f9c3 	bl	81149b4 <pbuf_clen>
 811962e:	4603      	mov	r3, r0
 8119630:	461a      	mov	r2, r3
 8119632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8119636:	4413      	add	r3, r2
 8119638:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 811963c:	e041      	b.n	81196c2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 811963e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119640:	685b      	ldr	r3, [r3, #4]
 8119642:	637b      	str	r3, [r7, #52]	@ 0x34
 8119644:	e002      	b.n	811964c <tcp_write+0x23c>
 8119646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8119648:	681b      	ldr	r3, [r3, #0]
 811964a:	637b      	str	r3, [r7, #52]	@ 0x34
 811964c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811964e:	681b      	ldr	r3, [r3, #0]
 8119650:	2b00      	cmp	r3, #0
 8119652:	d1f8      	bne.n	8119646 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8119654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8119656:	7b1b      	ldrb	r3, [r3, #12]
 8119658:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 811965c:	2b00      	cmp	r3, #0
 811965e:	d115      	bne.n	811968c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8119660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8119662:	685b      	ldr	r3, [r3, #4]
 8119664:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8119666:	8952      	ldrh	r2, [r2, #10]
 8119668:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 811966a:	68ba      	ldr	r2, [r7, #8]
 811966c:	429a      	cmp	r2, r3
 811966e:	d10d      	bne.n	811968c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8119670:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119674:	2b00      	cmp	r3, #0
 8119676:	d006      	beq.n	8119686 <tcp_write+0x276>
 8119678:	4b1c      	ldr	r3, [pc, #112]	@ (81196ec <tcp_write+0x2dc>)
 811967a:	f240 2231 	movw	r2, #561	@ 0x231
 811967e:	4922      	ldr	r1, [pc, #136]	@ (8119708 <tcp_write+0x2f8>)
 8119680:	481c      	ldr	r0, [pc, #112]	@ (81196f4 <tcp_write+0x2e4>)
 8119682:	f002 fbcb 	bl	811be1c <iprintf>
          extendlen = seglen;
 8119686:	8bfb      	ldrh	r3, [r7, #30]
 8119688:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 811968a:	e01a      	b.n	81196c2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 811968c:	8bfb      	ldrh	r3, [r7, #30]
 811968e:	2201      	movs	r2, #1
 8119690:	4619      	mov	r1, r3
 8119692:	2000      	movs	r0, #0
 8119694:	f7fa fe1c 	bl	81142d0 <pbuf_alloc>
 8119698:	6578      	str	r0, [r7, #84]	@ 0x54
 811969a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811969c:	2b00      	cmp	r3, #0
 811969e:	f000 81e0 	beq.w	8119a62 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 81196a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81196a6:	68ba      	ldr	r2, [r7, #8]
 81196a8:	441a      	add	r2, r3
 81196aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81196ac:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 81196ae:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 81196b0:	f7fb f980 	bl	81149b4 <pbuf_clen>
 81196b4:	4603      	mov	r3, r0
 81196b6:	461a      	mov	r2, r3
 81196b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 81196bc:	4413      	add	r3, r2
 81196be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 81196c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81196c6:	8bfb      	ldrh	r3, [r7, #30]
 81196c8:	4413      	add	r3, r2
 81196ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 81196ce:	e0dc      	b.n	811988a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 81196d0:	68fb      	ldr	r3, [r7, #12]
 81196d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 81196d6:	2b00      	cmp	r3, #0
 81196d8:	f000 80d7 	beq.w	811988a <tcp_write+0x47a>
 81196dc:	4b03      	ldr	r3, [pc, #12]	@ (81196ec <tcp_write+0x2dc>)
 81196de:	f240 224a 	movw	r2, #586	@ 0x24a
 81196e2:	490a      	ldr	r1, [pc, #40]	@ (811970c <tcp_write+0x2fc>)
 81196e4:	4803      	ldr	r0, [pc, #12]	@ (81196f4 <tcp_write+0x2e4>)
 81196e6:	f002 fb99 	bl	811be1c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 81196ea:	e0ce      	b.n	811988a <tcp_write+0x47a>
 81196ec:	0811ed18 	.word	0x0811ed18
 81196f0:	0811eef8 	.word	0x0811eef8
 81196f4:	0811edac 	.word	0x0811edac
 81196f8:	0811ef10 	.word	0x0811ef10
 81196fc:	0811ef44 	.word	0x0811ef44
 8119700:	0811ef5c 	.word	0x0811ef5c
 8119704:	0811ef7c 	.word	0x0811ef7c
 8119708:	0811ef9c 	.word	0x0811ef9c
 811970c:	0811efc8 	.word	0x0811efc8
    struct pbuf *p;
    u16_t left = len - pos;
 8119710:	88fa      	ldrh	r2, [r7, #6]
 8119712:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119716:	1ad3      	subs	r3, r2, r3
 8119718:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 811971a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811971e:	b29b      	uxth	r3, r3
 8119720:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8119722:	1ad3      	subs	r3, r2, r3
 8119724:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8119726:	8b7a      	ldrh	r2, [r7, #26]
 8119728:	8bbb      	ldrh	r3, [r7, #28]
 811972a:	4293      	cmp	r3, r2
 811972c:	bf28      	it	cs
 811972e:	4613      	movcs	r3, r2
 8119730:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8119732:	797b      	ldrb	r3, [r7, #5]
 8119734:	f003 0301 	and.w	r3, r3, #1
 8119738:	2b00      	cmp	r3, #0
 811973a:	d036      	beq.n	81197aa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 811973c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8119740:	b29a      	uxth	r2, r3
 8119742:	8b3b      	ldrh	r3, [r7, #24]
 8119744:	4413      	add	r3, r2
 8119746:	b299      	uxth	r1, r3
 8119748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811974a:	2b00      	cmp	r3, #0
 811974c:	bf0c      	ite	eq
 811974e:	2301      	moveq	r3, #1
 8119750:	2300      	movne	r3, #0
 8119752:	b2db      	uxtb	r3, r3
 8119754:	f107 0012 	add.w	r0, r7, #18
 8119758:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811975a:	9302      	str	r3, [sp, #8]
 811975c:	797b      	ldrb	r3, [r7, #5]
 811975e:	9301      	str	r3, [sp, #4]
 8119760:	68fb      	ldr	r3, [r7, #12]
 8119762:	9300      	str	r3, [sp, #0]
 8119764:	4603      	mov	r3, r0
 8119766:	2036      	movs	r0, #54	@ 0x36
 8119768:	f7ff fd5e 	bl	8119228 <tcp_pbuf_prealloc>
 811976c:	6338      	str	r0, [r7, #48]	@ 0x30
 811976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119770:	2b00      	cmp	r3, #0
 8119772:	f000 8178 	beq.w	8119a66 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8119776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119778:	895b      	ldrh	r3, [r3, #10]
 811977a:	8b3a      	ldrh	r2, [r7, #24]
 811977c:	429a      	cmp	r2, r3
 811977e:	d906      	bls.n	811978e <tcp_write+0x37e>
 8119780:	4b8c      	ldr	r3, [pc, #560]	@ (81199b4 <tcp_write+0x5a4>)
 8119782:	f240 2266 	movw	r2, #614	@ 0x266
 8119786:	498c      	ldr	r1, [pc, #560]	@ (81199b8 <tcp_write+0x5a8>)
 8119788:	488c      	ldr	r0, [pc, #560]	@ (81199bc <tcp_write+0x5ac>)
 811978a:	f002 fb47 	bl	811be1c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 811978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119790:	685a      	ldr	r2, [r3, #4]
 8119792:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8119796:	18d0      	adds	r0, r2, r3
 8119798:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811979c:	68ba      	ldr	r2, [r7, #8]
 811979e:	4413      	add	r3, r2
 81197a0:	8b3a      	ldrh	r2, [r7, #24]
 81197a2:	4619      	mov	r1, r3
 81197a4:	f002 fceb 	bl	811c17e <memcpy>
 81197a8:	e02f      	b.n	811980a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 81197aa:	8a7b      	ldrh	r3, [r7, #18]
 81197ac:	2b00      	cmp	r3, #0
 81197ae:	d006      	beq.n	81197be <tcp_write+0x3ae>
 81197b0:	4b80      	ldr	r3, [pc, #512]	@ (81199b4 <tcp_write+0x5a4>)
 81197b2:	f240 2271 	movw	r2, #625	@ 0x271
 81197b6:	4982      	ldr	r1, [pc, #520]	@ (81199c0 <tcp_write+0x5b0>)
 81197b8:	4880      	ldr	r0, [pc, #512]	@ (81199bc <tcp_write+0x5ac>)
 81197ba:	f002 fb2f 	bl	811be1c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 81197be:	8b3b      	ldrh	r3, [r7, #24]
 81197c0:	2201      	movs	r2, #1
 81197c2:	4619      	mov	r1, r3
 81197c4:	2036      	movs	r0, #54	@ 0x36
 81197c6:	f7fa fd83 	bl	81142d0 <pbuf_alloc>
 81197ca:	6178      	str	r0, [r7, #20]
 81197cc:	697b      	ldr	r3, [r7, #20]
 81197ce:	2b00      	cmp	r3, #0
 81197d0:	f000 814b 	beq.w	8119a6a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 81197d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81197d8:	68ba      	ldr	r2, [r7, #8]
 81197da:	441a      	add	r2, r3
 81197dc:	697b      	ldr	r3, [r7, #20]
 81197de:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 81197e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81197e4:	b29b      	uxth	r3, r3
 81197e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81197ea:	4619      	mov	r1, r3
 81197ec:	2036      	movs	r0, #54	@ 0x36
 81197ee:	f7fa fd6f 	bl	81142d0 <pbuf_alloc>
 81197f2:	6338      	str	r0, [r7, #48]	@ 0x30
 81197f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81197f6:	2b00      	cmp	r3, #0
 81197f8:	d103      	bne.n	8119802 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 81197fa:	6978      	ldr	r0, [r7, #20]
 81197fc:	f7fb f84c 	bl	8114898 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8119800:	e136      	b.n	8119a70 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8119802:	6979      	ldr	r1, [r7, #20]
 8119804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8119806:	f7fb f915 	bl	8114a34 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 811980a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811980c:	f7fb f8d2 	bl	81149b4 <pbuf_clen>
 8119810:	4603      	mov	r3, r0
 8119812:	461a      	mov	r2, r3
 8119814:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8119818:	4413      	add	r3, r2
 811981a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 811981e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8119822:	2b10      	cmp	r3, #16
 8119824:	d903      	bls.n	811982e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8119826:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8119828:	f7fb f836 	bl	8114898 <pbuf_free>
      goto memerr;
 811982c:	e120      	b.n	8119a70 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 811982e:	68fb      	ldr	r3, [r7, #12]
 8119830:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8119832:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119836:	441a      	add	r2, r3
 8119838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811983c:	9300      	str	r3, [sp, #0]
 811983e:	4613      	mov	r3, r2
 8119840:	2200      	movs	r2, #0
 8119842:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8119844:	68f8      	ldr	r0, [r7, #12]
 8119846:	f7ff fc53 	bl	81190f0 <tcp_create_segment>
 811984a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 811984c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811984e:	2b00      	cmp	r3, #0
 8119850:	f000 810d 	beq.w	8119a6e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8119854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8119856:	2b00      	cmp	r3, #0
 8119858:	d102      	bne.n	8119860 <tcp_write+0x450>
      queue = seg;
 811985a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811985c:	647b      	str	r3, [r7, #68]	@ 0x44
 811985e:	e00c      	b.n	811987a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8119860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8119862:	2b00      	cmp	r3, #0
 8119864:	d106      	bne.n	8119874 <tcp_write+0x464>
 8119866:	4b53      	ldr	r3, [pc, #332]	@ (81199b4 <tcp_write+0x5a4>)
 8119868:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811986c:	4955      	ldr	r1, [pc, #340]	@ (81199c4 <tcp_write+0x5b4>)
 811986e:	4853      	ldr	r0, [pc, #332]	@ (81199bc <tcp_write+0x5ac>)
 8119870:	f002 fad4 	bl	811be1c <iprintf>
      prev_seg->next = seg;
 8119874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8119876:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8119878:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 811987a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811987c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 811987e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8119882:	8b3b      	ldrh	r3, [r7, #24]
 8119884:	4413      	add	r3, r2
 8119886:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 811988a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811988e:	88fb      	ldrh	r3, [r7, #6]
 8119890:	429a      	cmp	r2, r3
 8119892:	f4ff af3d 	bcc.w	8119710 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8119896:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8119898:	2b00      	cmp	r3, #0
 811989a:	d02c      	beq.n	81198f6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 811989c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811989e:	685b      	ldr	r3, [r3, #4]
 81198a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81198a2:	e01e      	b.n	81198e2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 81198a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198a6:	891a      	ldrh	r2, [r3, #8]
 81198a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81198aa:	4413      	add	r3, r2
 81198ac:	b29a      	uxth	r2, r3
 81198ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198b0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 81198b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198b4:	681b      	ldr	r3, [r3, #0]
 81198b6:	2b00      	cmp	r3, #0
 81198b8:	d110      	bne.n	81198dc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 81198ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198bc:	685b      	ldr	r3, [r3, #4]
 81198be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81198c0:	8952      	ldrh	r2, [r2, #10]
 81198c2:	4413      	add	r3, r2
 81198c4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 81198c6:	68b9      	ldr	r1, [r7, #8]
 81198c8:	4618      	mov	r0, r3
 81198ca:	f002 fc58 	bl	811c17e <memcpy>
        p->len += oversize_used;
 81198ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198d0:	895a      	ldrh	r2, [r3, #10]
 81198d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81198d4:	4413      	add	r3, r2
 81198d6:	b29a      	uxth	r2, r3
 81198d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198da:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 81198dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198de:	681b      	ldr	r3, [r3, #0]
 81198e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81198e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198e4:	2b00      	cmp	r3, #0
 81198e6:	d1dd      	bne.n	81198a4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 81198e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81198ea:	891a      	ldrh	r2, [r3, #8]
 81198ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81198ee:	4413      	add	r3, r2
 81198f0:	b29a      	uxth	r2, r3
 81198f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81198f4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 81198f6:	8a7a      	ldrh	r2, [r7, #18]
 81198f8:	68fb      	ldr	r3, [r7, #12]
 81198fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 81198fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8119900:	2b00      	cmp	r3, #0
 8119902:	d018      	beq.n	8119936 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8119904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119906:	2b00      	cmp	r3, #0
 8119908:	d106      	bne.n	8119918 <tcp_write+0x508>
 811990a:	4b2a      	ldr	r3, [pc, #168]	@ (81199b4 <tcp_write+0x5a4>)
 811990c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8119910:	492d      	ldr	r1, [pc, #180]	@ (81199c8 <tcp_write+0x5b8>)
 8119912:	482a      	ldr	r0, [pc, #168]	@ (81199bc <tcp_write+0x5ac>)
 8119914:	f002 fa82 	bl	811be1c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8119918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811991a:	685b      	ldr	r3, [r3, #4]
 811991c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 811991e:	4618      	mov	r0, r3
 8119920:	f7fb f888 	bl	8114a34 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8119924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119926:	891a      	ldrh	r2, [r3, #8]
 8119928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811992a:	891b      	ldrh	r3, [r3, #8]
 811992c:	4413      	add	r3, r2
 811992e:	b29a      	uxth	r2, r3
 8119930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119932:	811a      	strh	r2, [r3, #8]
 8119934:	e037      	b.n	81199a6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8119936:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8119938:	2b00      	cmp	r3, #0
 811993a:	d034      	beq.n	81199a6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 811993c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811993e:	2b00      	cmp	r3, #0
 8119940:	d003      	beq.n	811994a <tcp_write+0x53a>
 8119942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119944:	685b      	ldr	r3, [r3, #4]
 8119946:	2b00      	cmp	r3, #0
 8119948:	d106      	bne.n	8119958 <tcp_write+0x548>
 811994a:	4b1a      	ldr	r3, [pc, #104]	@ (81199b4 <tcp_write+0x5a4>)
 811994c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8119950:	491e      	ldr	r1, [pc, #120]	@ (81199cc <tcp_write+0x5bc>)
 8119952:	481a      	ldr	r0, [pc, #104]	@ (81199bc <tcp_write+0x5ac>)
 8119954:	f002 fa62 	bl	811be1c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8119958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811995a:	685b      	ldr	r3, [r3, #4]
 811995c:	62bb      	str	r3, [r7, #40]	@ 0x28
 811995e:	e009      	b.n	8119974 <tcp_write+0x564>
      p->tot_len += extendlen;
 8119960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119962:	891a      	ldrh	r2, [r3, #8]
 8119964:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8119966:	4413      	add	r3, r2
 8119968:	b29a      	uxth	r2, r3
 811996a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811996c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 811996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119970:	681b      	ldr	r3, [r3, #0]
 8119972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8119974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119976:	681b      	ldr	r3, [r3, #0]
 8119978:	2b00      	cmp	r3, #0
 811997a:	d1f1      	bne.n	8119960 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 811997c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811997e:	891a      	ldrh	r2, [r3, #8]
 8119980:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8119982:	4413      	add	r3, r2
 8119984:	b29a      	uxth	r2, r3
 8119986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119988:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 811998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811998c:	895a      	ldrh	r2, [r3, #10]
 811998e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8119990:	4413      	add	r3, r2
 8119992:	b29a      	uxth	r2, r3
 8119994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119996:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8119998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811999a:	891a      	ldrh	r2, [r3, #8]
 811999c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811999e:	4413      	add	r3, r2
 81199a0:	b29a      	uxth	r2, r3
 81199a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81199a4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 81199a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81199a8:	2b00      	cmp	r3, #0
 81199aa:	d111      	bne.n	81199d0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 81199ac:	68fb      	ldr	r3, [r7, #12]
 81199ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81199b0:	66da      	str	r2, [r3, #108]	@ 0x6c
 81199b2:	e010      	b.n	81199d6 <tcp_write+0x5c6>
 81199b4:	0811ed18 	.word	0x0811ed18
 81199b8:	0811eff8 	.word	0x0811eff8
 81199bc:	0811edac 	.word	0x0811edac
 81199c0:	0811f038 	.word	0x0811f038
 81199c4:	0811f048 	.word	0x0811f048
 81199c8:	0811f05c 	.word	0x0811f05c
 81199cc:	0811f094 	.word	0x0811f094
  } else {
    last_unsent->next = queue;
 81199d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81199d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81199d4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 81199d6:	68fb      	ldr	r3, [r7, #12]
 81199d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81199da:	88fb      	ldrh	r3, [r7, #6]
 81199dc:	441a      	add	r2, r3
 81199de:	68fb      	ldr	r3, [r7, #12]
 81199e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 81199e2:	68fb      	ldr	r3, [r7, #12]
 81199e4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 81199e8:	88fb      	ldrh	r3, [r7, #6]
 81199ea:	1ad3      	subs	r3, r2, r3
 81199ec:	b29a      	uxth	r2, r3
 81199ee:	68fb      	ldr	r3, [r7, #12]
 81199f0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 81199f4:	68fb      	ldr	r3, [r7, #12]
 81199f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 81199fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 81199fe:	68fb      	ldr	r3, [r7, #12]
 8119a00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119a04:	2b00      	cmp	r3, #0
 8119a06:	d00e      	beq.n	8119a26 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8119a08:	68fb      	ldr	r3, [r7, #12]
 8119a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119a0c:	2b00      	cmp	r3, #0
 8119a0e:	d10a      	bne.n	8119a26 <tcp_write+0x616>
 8119a10:	68fb      	ldr	r3, [r7, #12]
 8119a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119a14:	2b00      	cmp	r3, #0
 8119a16:	d106      	bne.n	8119a26 <tcp_write+0x616>
 8119a18:	4b2c      	ldr	r3, [pc, #176]	@ (8119acc <tcp_write+0x6bc>)
 8119a1a:	f240 3212 	movw	r2, #786	@ 0x312
 8119a1e:	492c      	ldr	r1, [pc, #176]	@ (8119ad0 <tcp_write+0x6c0>)
 8119a20:	482c      	ldr	r0, [pc, #176]	@ (8119ad4 <tcp_write+0x6c4>)
 8119a22:	f002 f9fb 	bl	811be1c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8119a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8119a28:	2b00      	cmp	r3, #0
 8119a2a:	d016      	beq.n	8119a5a <tcp_write+0x64a>
 8119a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8119a2e:	68db      	ldr	r3, [r3, #12]
 8119a30:	2b00      	cmp	r3, #0
 8119a32:	d012      	beq.n	8119a5a <tcp_write+0x64a>
 8119a34:	797b      	ldrb	r3, [r7, #5]
 8119a36:	f003 0302 	and.w	r3, r3, #2
 8119a3a:	2b00      	cmp	r3, #0
 8119a3c:	d10d      	bne.n	8119a5a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8119a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8119a40:	68db      	ldr	r3, [r3, #12]
 8119a42:	899b      	ldrh	r3, [r3, #12]
 8119a44:	b29c      	uxth	r4, r3
 8119a46:	2008      	movs	r0, #8
 8119a48:	f7f6 ffa0 	bl	811098c <lwip_htons>
 8119a4c:	4603      	mov	r3, r0
 8119a4e:	461a      	mov	r2, r3
 8119a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8119a52:	68db      	ldr	r3, [r3, #12]
 8119a54:	4322      	orrs	r2, r4
 8119a56:	b292      	uxth	r2, r2
 8119a58:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8119a5a:	2300      	movs	r3, #0
 8119a5c:	e031      	b.n	8119ac2 <tcp_write+0x6b2>
          goto memerr;
 8119a5e:	bf00      	nop
 8119a60:	e006      	b.n	8119a70 <tcp_write+0x660>
            goto memerr;
 8119a62:	bf00      	nop
 8119a64:	e004      	b.n	8119a70 <tcp_write+0x660>
        goto memerr;
 8119a66:	bf00      	nop
 8119a68:	e002      	b.n	8119a70 <tcp_write+0x660>
        goto memerr;
 8119a6a:	bf00      	nop
 8119a6c:	e000      	b.n	8119a70 <tcp_write+0x660>
      goto memerr;
 8119a6e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8119a70:	68fb      	ldr	r3, [r7, #12]
 8119a72:	8b5b      	ldrh	r3, [r3, #26]
 8119a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8119a78:	b29a      	uxth	r2, r3
 8119a7a:	68fb      	ldr	r3, [r7, #12]
 8119a7c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8119a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8119a80:	2b00      	cmp	r3, #0
 8119a82:	d002      	beq.n	8119a8a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8119a84:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8119a86:	f7fa ff07 	bl	8114898 <pbuf_free>
  }
  if (queue != NULL) {
 8119a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8119a8c:	2b00      	cmp	r3, #0
 8119a8e:	d002      	beq.n	8119a96 <tcp_write+0x686>
    tcp_segs_free(queue);
 8119a90:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8119a92:	f7fc fbc1 	bl	8116218 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8119a96:	68fb      	ldr	r3, [r7, #12]
 8119a98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119a9c:	2b00      	cmp	r3, #0
 8119a9e:	d00e      	beq.n	8119abe <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8119aa0:	68fb      	ldr	r3, [r7, #12]
 8119aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119aa4:	2b00      	cmp	r3, #0
 8119aa6:	d10a      	bne.n	8119abe <tcp_write+0x6ae>
 8119aa8:	68fb      	ldr	r3, [r7, #12]
 8119aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119aac:	2b00      	cmp	r3, #0
 8119aae:	d106      	bne.n	8119abe <tcp_write+0x6ae>
 8119ab0:	4b06      	ldr	r3, [pc, #24]	@ (8119acc <tcp_write+0x6bc>)
 8119ab2:	f240 3227 	movw	r2, #807	@ 0x327
 8119ab6:	4906      	ldr	r1, [pc, #24]	@ (8119ad0 <tcp_write+0x6c0>)
 8119ab8:	4806      	ldr	r0, [pc, #24]	@ (8119ad4 <tcp_write+0x6c4>)
 8119aba:	f002 f9af 	bl	811be1c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8119abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8119ac2:	4618      	mov	r0, r3
 8119ac4:	375c      	adds	r7, #92	@ 0x5c
 8119ac6:	46bd      	mov	sp, r7
 8119ac8:	bd90      	pop	{r4, r7, pc}
 8119aca:	bf00      	nop
 8119acc:	0811ed18 	.word	0x0811ed18
 8119ad0:	0811f0cc 	.word	0x0811f0cc
 8119ad4:	0811edac 	.word	0x0811edac

08119ad8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8119ad8:	b590      	push	{r4, r7, lr}
 8119ada:	b08b      	sub	sp, #44	@ 0x2c
 8119adc:	af02      	add	r7, sp, #8
 8119ade:	6078      	str	r0, [r7, #4]
 8119ae0:	460b      	mov	r3, r1
 8119ae2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8119ae4:	2300      	movs	r3, #0
 8119ae6:	61fb      	str	r3, [r7, #28]
 8119ae8:	2300      	movs	r3, #0
 8119aea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8119aec:	2300      	movs	r3, #0
 8119aee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8119af0:	687b      	ldr	r3, [r7, #4]
 8119af2:	2b00      	cmp	r3, #0
 8119af4:	d106      	bne.n	8119b04 <tcp_split_unsent_seg+0x2c>
 8119af6:	4b95      	ldr	r3, [pc, #596]	@ (8119d4c <tcp_split_unsent_seg+0x274>)
 8119af8:	f240 324b 	movw	r2, #843	@ 0x34b
 8119afc:	4994      	ldr	r1, [pc, #592]	@ (8119d50 <tcp_split_unsent_seg+0x278>)
 8119afe:	4895      	ldr	r0, [pc, #596]	@ (8119d54 <tcp_split_unsent_seg+0x27c>)
 8119b00:	f002 f98c 	bl	811be1c <iprintf>

  useg = pcb->unsent;
 8119b04:	687b      	ldr	r3, [r7, #4]
 8119b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119b08:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8119b0a:	697b      	ldr	r3, [r7, #20]
 8119b0c:	2b00      	cmp	r3, #0
 8119b0e:	d102      	bne.n	8119b16 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8119b10:	f04f 33ff 	mov.w	r3, #4294967295
 8119b14:	e116      	b.n	8119d44 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8119b16:	887b      	ldrh	r3, [r7, #2]
 8119b18:	2b00      	cmp	r3, #0
 8119b1a:	d109      	bne.n	8119b30 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8119b1c:	4b8b      	ldr	r3, [pc, #556]	@ (8119d4c <tcp_split_unsent_seg+0x274>)
 8119b1e:	f240 3253 	movw	r2, #851	@ 0x353
 8119b22:	498d      	ldr	r1, [pc, #564]	@ (8119d58 <tcp_split_unsent_seg+0x280>)
 8119b24:	488b      	ldr	r0, [pc, #556]	@ (8119d54 <tcp_split_unsent_seg+0x27c>)
 8119b26:	f002 f979 	bl	811be1c <iprintf>
    return ERR_VAL;
 8119b2a:	f06f 0305 	mvn.w	r3, #5
 8119b2e:	e109      	b.n	8119d44 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8119b30:	697b      	ldr	r3, [r7, #20]
 8119b32:	891b      	ldrh	r3, [r3, #8]
 8119b34:	887a      	ldrh	r2, [r7, #2]
 8119b36:	429a      	cmp	r2, r3
 8119b38:	d301      	bcc.n	8119b3e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8119b3a:	2300      	movs	r3, #0
 8119b3c:	e102      	b.n	8119d44 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8119b3e:	687b      	ldr	r3, [r7, #4]
 8119b40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119b42:	887a      	ldrh	r2, [r7, #2]
 8119b44:	429a      	cmp	r2, r3
 8119b46:	d906      	bls.n	8119b56 <tcp_split_unsent_seg+0x7e>
 8119b48:	4b80      	ldr	r3, [pc, #512]	@ (8119d4c <tcp_split_unsent_seg+0x274>)
 8119b4a:	f240 325b 	movw	r2, #859	@ 0x35b
 8119b4e:	4983      	ldr	r1, [pc, #524]	@ (8119d5c <tcp_split_unsent_seg+0x284>)
 8119b50:	4880      	ldr	r0, [pc, #512]	@ (8119d54 <tcp_split_unsent_seg+0x27c>)
 8119b52:	f002 f963 	bl	811be1c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8119b56:	697b      	ldr	r3, [r7, #20]
 8119b58:	891b      	ldrh	r3, [r3, #8]
 8119b5a:	2b00      	cmp	r3, #0
 8119b5c:	d106      	bne.n	8119b6c <tcp_split_unsent_seg+0x94>
 8119b5e:	4b7b      	ldr	r3, [pc, #492]	@ (8119d4c <tcp_split_unsent_seg+0x274>)
 8119b60:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8119b64:	497e      	ldr	r1, [pc, #504]	@ (8119d60 <tcp_split_unsent_seg+0x288>)
 8119b66:	487b      	ldr	r0, [pc, #492]	@ (8119d54 <tcp_split_unsent_seg+0x27c>)
 8119b68:	f002 f958 	bl	811be1c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8119b6c:	697b      	ldr	r3, [r7, #20]
 8119b6e:	7a9b      	ldrb	r3, [r3, #10]
 8119b70:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8119b72:	7bfb      	ldrb	r3, [r7, #15]
 8119b74:	009b      	lsls	r3, r3, #2
 8119b76:	b2db      	uxtb	r3, r3
 8119b78:	f003 0304 	and.w	r3, r3, #4
 8119b7c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8119b7e:	697b      	ldr	r3, [r7, #20]
 8119b80:	891a      	ldrh	r2, [r3, #8]
 8119b82:	887b      	ldrh	r3, [r7, #2]
 8119b84:	1ad3      	subs	r3, r2, r3
 8119b86:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8119b88:	7bbb      	ldrb	r3, [r7, #14]
 8119b8a:	b29a      	uxth	r2, r3
 8119b8c:	89bb      	ldrh	r3, [r7, #12]
 8119b8e:	4413      	add	r3, r2
 8119b90:	b29b      	uxth	r3, r3
 8119b92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8119b96:	4619      	mov	r1, r3
 8119b98:	2036      	movs	r0, #54	@ 0x36
 8119b9a:	f7fa fb99 	bl	81142d0 <pbuf_alloc>
 8119b9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8119ba0:	693b      	ldr	r3, [r7, #16]
 8119ba2:	2b00      	cmp	r3, #0
 8119ba4:	f000 80b7 	beq.w	8119d16 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8119ba8:	697b      	ldr	r3, [r7, #20]
 8119baa:	685b      	ldr	r3, [r3, #4]
 8119bac:	891a      	ldrh	r2, [r3, #8]
 8119bae:	697b      	ldr	r3, [r7, #20]
 8119bb0:	891b      	ldrh	r3, [r3, #8]
 8119bb2:	1ad3      	subs	r3, r2, r3
 8119bb4:	b29a      	uxth	r2, r3
 8119bb6:	887b      	ldrh	r3, [r7, #2]
 8119bb8:	4413      	add	r3, r2
 8119bba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8119bbc:	697b      	ldr	r3, [r7, #20]
 8119bbe:	6858      	ldr	r0, [r3, #4]
 8119bc0:	693b      	ldr	r3, [r7, #16]
 8119bc2:	685a      	ldr	r2, [r3, #4]
 8119bc4:	7bbb      	ldrb	r3, [r7, #14]
 8119bc6:	18d1      	adds	r1, r2, r3
 8119bc8:	897b      	ldrh	r3, [r7, #10]
 8119bca:	89ba      	ldrh	r2, [r7, #12]
 8119bcc:	f7fb f85a 	bl	8114c84 <pbuf_copy_partial>
 8119bd0:	4603      	mov	r3, r0
 8119bd2:	461a      	mov	r2, r3
 8119bd4:	89bb      	ldrh	r3, [r7, #12]
 8119bd6:	4293      	cmp	r3, r2
 8119bd8:	f040 809f 	bne.w	8119d1a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8119bdc:	697b      	ldr	r3, [r7, #20]
 8119bde:	68db      	ldr	r3, [r3, #12]
 8119be0:	899b      	ldrh	r3, [r3, #12]
 8119be2:	b29b      	uxth	r3, r3
 8119be4:	4618      	mov	r0, r3
 8119be6:	f7f6 fed1 	bl	811098c <lwip_htons>
 8119bea:	4603      	mov	r3, r0
 8119bec:	b2db      	uxtb	r3, r3
 8119bee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8119bf2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8119bf4:	2300      	movs	r3, #0
 8119bf6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8119bf8:	7efb      	ldrb	r3, [r7, #27]
 8119bfa:	f003 0308 	and.w	r3, r3, #8
 8119bfe:	2b00      	cmp	r3, #0
 8119c00:	d007      	beq.n	8119c12 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8119c02:	7efb      	ldrb	r3, [r7, #27]
 8119c04:	f023 0308 	bic.w	r3, r3, #8
 8119c08:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8119c0a:	7ebb      	ldrb	r3, [r7, #26]
 8119c0c:	f043 0308 	orr.w	r3, r3, #8
 8119c10:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8119c12:	7efb      	ldrb	r3, [r7, #27]
 8119c14:	f003 0301 	and.w	r3, r3, #1
 8119c18:	2b00      	cmp	r3, #0
 8119c1a:	d007      	beq.n	8119c2c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8119c1c:	7efb      	ldrb	r3, [r7, #27]
 8119c1e:	f023 0301 	bic.w	r3, r3, #1
 8119c22:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8119c24:	7ebb      	ldrb	r3, [r7, #26]
 8119c26:	f043 0301 	orr.w	r3, r3, #1
 8119c2a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8119c2c:	697b      	ldr	r3, [r7, #20]
 8119c2e:	68db      	ldr	r3, [r3, #12]
 8119c30:	685b      	ldr	r3, [r3, #4]
 8119c32:	4618      	mov	r0, r3
 8119c34:	f7f6 febf 	bl	81109b6 <lwip_htonl>
 8119c38:	4602      	mov	r2, r0
 8119c3a:	887b      	ldrh	r3, [r7, #2]
 8119c3c:	18d1      	adds	r1, r2, r3
 8119c3e:	7eba      	ldrb	r2, [r7, #26]
 8119c40:	7bfb      	ldrb	r3, [r7, #15]
 8119c42:	9300      	str	r3, [sp, #0]
 8119c44:	460b      	mov	r3, r1
 8119c46:	6939      	ldr	r1, [r7, #16]
 8119c48:	6878      	ldr	r0, [r7, #4]
 8119c4a:	f7ff fa51 	bl	81190f0 <tcp_create_segment>
 8119c4e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8119c50:	69fb      	ldr	r3, [r7, #28]
 8119c52:	2b00      	cmp	r3, #0
 8119c54:	d063      	beq.n	8119d1e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8119c56:	697b      	ldr	r3, [r7, #20]
 8119c58:	685b      	ldr	r3, [r3, #4]
 8119c5a:	4618      	mov	r0, r3
 8119c5c:	f7fa feaa 	bl	81149b4 <pbuf_clen>
 8119c60:	4603      	mov	r3, r0
 8119c62:	461a      	mov	r2, r3
 8119c64:	687b      	ldr	r3, [r7, #4]
 8119c66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119c6a:	1a9b      	subs	r3, r3, r2
 8119c6c:	b29a      	uxth	r2, r3
 8119c6e:	687b      	ldr	r3, [r7, #4]
 8119c70:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8119c74:	697b      	ldr	r3, [r7, #20]
 8119c76:	6858      	ldr	r0, [r3, #4]
 8119c78:	697b      	ldr	r3, [r7, #20]
 8119c7a:	685b      	ldr	r3, [r3, #4]
 8119c7c:	891a      	ldrh	r2, [r3, #8]
 8119c7e:	89bb      	ldrh	r3, [r7, #12]
 8119c80:	1ad3      	subs	r3, r2, r3
 8119c82:	b29b      	uxth	r3, r3
 8119c84:	4619      	mov	r1, r3
 8119c86:	f7fa fc83 	bl	8114590 <pbuf_realloc>
  useg->len -= remainder;
 8119c8a:	697b      	ldr	r3, [r7, #20]
 8119c8c:	891a      	ldrh	r2, [r3, #8]
 8119c8e:	89bb      	ldrh	r3, [r7, #12]
 8119c90:	1ad3      	subs	r3, r2, r3
 8119c92:	b29a      	uxth	r2, r3
 8119c94:	697b      	ldr	r3, [r7, #20]
 8119c96:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8119c98:	697b      	ldr	r3, [r7, #20]
 8119c9a:	68db      	ldr	r3, [r3, #12]
 8119c9c:	899b      	ldrh	r3, [r3, #12]
 8119c9e:	b29c      	uxth	r4, r3
 8119ca0:	7efb      	ldrb	r3, [r7, #27]
 8119ca2:	b29b      	uxth	r3, r3
 8119ca4:	4618      	mov	r0, r3
 8119ca6:	f7f6 fe71 	bl	811098c <lwip_htons>
 8119caa:	4603      	mov	r3, r0
 8119cac:	461a      	mov	r2, r3
 8119cae:	697b      	ldr	r3, [r7, #20]
 8119cb0:	68db      	ldr	r3, [r3, #12]
 8119cb2:	4322      	orrs	r2, r4
 8119cb4:	b292      	uxth	r2, r2
 8119cb6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8119cb8:	697b      	ldr	r3, [r7, #20]
 8119cba:	685b      	ldr	r3, [r3, #4]
 8119cbc:	4618      	mov	r0, r3
 8119cbe:	f7fa fe79 	bl	81149b4 <pbuf_clen>
 8119cc2:	4603      	mov	r3, r0
 8119cc4:	461a      	mov	r2, r3
 8119cc6:	687b      	ldr	r3, [r7, #4]
 8119cc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119ccc:	4413      	add	r3, r2
 8119cce:	b29a      	uxth	r2, r3
 8119cd0:	687b      	ldr	r3, [r7, #4]
 8119cd2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8119cd6:	69fb      	ldr	r3, [r7, #28]
 8119cd8:	685b      	ldr	r3, [r3, #4]
 8119cda:	4618      	mov	r0, r3
 8119cdc:	f7fa fe6a 	bl	81149b4 <pbuf_clen>
 8119ce0:	4603      	mov	r3, r0
 8119ce2:	461a      	mov	r2, r3
 8119ce4:	687b      	ldr	r3, [r7, #4]
 8119ce6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119cea:	4413      	add	r3, r2
 8119cec:	b29a      	uxth	r2, r3
 8119cee:	687b      	ldr	r3, [r7, #4]
 8119cf0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8119cf4:	697b      	ldr	r3, [r7, #20]
 8119cf6:	681a      	ldr	r2, [r3, #0]
 8119cf8:	69fb      	ldr	r3, [r7, #28]
 8119cfa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8119cfc:	697b      	ldr	r3, [r7, #20]
 8119cfe:	69fa      	ldr	r2, [r7, #28]
 8119d00:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8119d02:	69fb      	ldr	r3, [r7, #28]
 8119d04:	681b      	ldr	r3, [r3, #0]
 8119d06:	2b00      	cmp	r3, #0
 8119d08:	d103      	bne.n	8119d12 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8119d0a:	687b      	ldr	r3, [r7, #4]
 8119d0c:	2200      	movs	r2, #0
 8119d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8119d12:	2300      	movs	r3, #0
 8119d14:	e016      	b.n	8119d44 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8119d16:	bf00      	nop
 8119d18:	e002      	b.n	8119d20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8119d1a:	bf00      	nop
 8119d1c:	e000      	b.n	8119d20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8119d1e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8119d20:	69fb      	ldr	r3, [r7, #28]
 8119d22:	2b00      	cmp	r3, #0
 8119d24:	d006      	beq.n	8119d34 <tcp_split_unsent_seg+0x25c>
 8119d26:	4b09      	ldr	r3, [pc, #36]	@ (8119d4c <tcp_split_unsent_seg+0x274>)
 8119d28:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8119d2c:	490d      	ldr	r1, [pc, #52]	@ (8119d64 <tcp_split_unsent_seg+0x28c>)
 8119d2e:	4809      	ldr	r0, [pc, #36]	@ (8119d54 <tcp_split_unsent_seg+0x27c>)
 8119d30:	f002 f874 	bl	811be1c <iprintf>
  if (p != NULL) {
 8119d34:	693b      	ldr	r3, [r7, #16]
 8119d36:	2b00      	cmp	r3, #0
 8119d38:	d002      	beq.n	8119d40 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8119d3a:	6938      	ldr	r0, [r7, #16]
 8119d3c:	f7fa fdac 	bl	8114898 <pbuf_free>
  }

  return ERR_MEM;
 8119d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8119d44:	4618      	mov	r0, r3
 8119d46:	3724      	adds	r7, #36	@ 0x24
 8119d48:	46bd      	mov	sp, r7
 8119d4a:	bd90      	pop	{r4, r7, pc}
 8119d4c:	0811ed18 	.word	0x0811ed18
 8119d50:	0811f0ec 	.word	0x0811f0ec
 8119d54:	0811edac 	.word	0x0811edac
 8119d58:	0811f110 	.word	0x0811f110
 8119d5c:	0811f134 	.word	0x0811f134
 8119d60:	0811f144 	.word	0x0811f144
 8119d64:	0811f154 	.word	0x0811f154

08119d68 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8119d68:	b590      	push	{r4, r7, lr}
 8119d6a:	b085      	sub	sp, #20
 8119d6c:	af00      	add	r7, sp, #0
 8119d6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8119d70:	687b      	ldr	r3, [r7, #4]
 8119d72:	2b00      	cmp	r3, #0
 8119d74:	d106      	bne.n	8119d84 <tcp_send_fin+0x1c>
 8119d76:	4b21      	ldr	r3, [pc, #132]	@ (8119dfc <tcp_send_fin+0x94>)
 8119d78:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8119d7c:	4920      	ldr	r1, [pc, #128]	@ (8119e00 <tcp_send_fin+0x98>)
 8119d7e:	4821      	ldr	r0, [pc, #132]	@ (8119e04 <tcp_send_fin+0x9c>)
 8119d80:	f002 f84c 	bl	811be1c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8119d84:	687b      	ldr	r3, [r7, #4]
 8119d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119d88:	2b00      	cmp	r3, #0
 8119d8a:	d02e      	beq.n	8119dea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8119d8c:	687b      	ldr	r3, [r7, #4]
 8119d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119d90:	60fb      	str	r3, [r7, #12]
 8119d92:	e002      	b.n	8119d9a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8119d94:	68fb      	ldr	r3, [r7, #12]
 8119d96:	681b      	ldr	r3, [r3, #0]
 8119d98:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8119d9a:	68fb      	ldr	r3, [r7, #12]
 8119d9c:	681b      	ldr	r3, [r3, #0]
 8119d9e:	2b00      	cmp	r3, #0
 8119da0:	d1f8      	bne.n	8119d94 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8119da2:	68fb      	ldr	r3, [r7, #12]
 8119da4:	68db      	ldr	r3, [r3, #12]
 8119da6:	899b      	ldrh	r3, [r3, #12]
 8119da8:	b29b      	uxth	r3, r3
 8119daa:	4618      	mov	r0, r3
 8119dac:	f7f6 fdee 	bl	811098c <lwip_htons>
 8119db0:	4603      	mov	r3, r0
 8119db2:	b2db      	uxtb	r3, r3
 8119db4:	f003 0307 	and.w	r3, r3, #7
 8119db8:	2b00      	cmp	r3, #0
 8119dba:	d116      	bne.n	8119dea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8119dbc:	68fb      	ldr	r3, [r7, #12]
 8119dbe:	68db      	ldr	r3, [r3, #12]
 8119dc0:	899b      	ldrh	r3, [r3, #12]
 8119dc2:	b29c      	uxth	r4, r3
 8119dc4:	2001      	movs	r0, #1
 8119dc6:	f7f6 fde1 	bl	811098c <lwip_htons>
 8119dca:	4603      	mov	r3, r0
 8119dcc:	461a      	mov	r2, r3
 8119dce:	68fb      	ldr	r3, [r7, #12]
 8119dd0:	68db      	ldr	r3, [r3, #12]
 8119dd2:	4322      	orrs	r2, r4
 8119dd4:	b292      	uxth	r2, r2
 8119dd6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8119dd8:	687b      	ldr	r3, [r7, #4]
 8119dda:	8b5b      	ldrh	r3, [r3, #26]
 8119ddc:	f043 0320 	orr.w	r3, r3, #32
 8119de0:	b29a      	uxth	r2, r3
 8119de2:	687b      	ldr	r3, [r7, #4]
 8119de4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8119de6:	2300      	movs	r3, #0
 8119de8:	e004      	b.n	8119df4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8119dea:	2101      	movs	r1, #1
 8119dec:	6878      	ldr	r0, [r7, #4]
 8119dee:	f000 f80b 	bl	8119e08 <tcp_enqueue_flags>
 8119df2:	4603      	mov	r3, r0
}
 8119df4:	4618      	mov	r0, r3
 8119df6:	3714      	adds	r7, #20
 8119df8:	46bd      	mov	sp, r7
 8119dfa:	bd90      	pop	{r4, r7, pc}
 8119dfc:	0811ed18 	.word	0x0811ed18
 8119e00:	0811f160 	.word	0x0811f160
 8119e04:	0811edac 	.word	0x0811edac

08119e08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8119e08:	b580      	push	{r7, lr}
 8119e0a:	b08a      	sub	sp, #40	@ 0x28
 8119e0c:	af02      	add	r7, sp, #8
 8119e0e:	6078      	str	r0, [r7, #4]
 8119e10:	460b      	mov	r3, r1
 8119e12:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8119e14:	2300      	movs	r3, #0
 8119e16:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8119e18:	2300      	movs	r3, #0
 8119e1a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8119e1c:	78fb      	ldrb	r3, [r7, #3]
 8119e1e:	f003 0303 	and.w	r3, r3, #3
 8119e22:	2b00      	cmp	r3, #0
 8119e24:	d106      	bne.n	8119e34 <tcp_enqueue_flags+0x2c>
 8119e26:	4b67      	ldr	r3, [pc, #412]	@ (8119fc4 <tcp_enqueue_flags+0x1bc>)
 8119e28:	f240 4211 	movw	r2, #1041	@ 0x411
 8119e2c:	4966      	ldr	r1, [pc, #408]	@ (8119fc8 <tcp_enqueue_flags+0x1c0>)
 8119e2e:	4867      	ldr	r0, [pc, #412]	@ (8119fcc <tcp_enqueue_flags+0x1c4>)
 8119e30:	f001 fff4 	bl	811be1c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8119e34:	687b      	ldr	r3, [r7, #4]
 8119e36:	2b00      	cmp	r3, #0
 8119e38:	d106      	bne.n	8119e48 <tcp_enqueue_flags+0x40>
 8119e3a:	4b62      	ldr	r3, [pc, #392]	@ (8119fc4 <tcp_enqueue_flags+0x1bc>)
 8119e3c:	f240 4213 	movw	r2, #1043	@ 0x413
 8119e40:	4963      	ldr	r1, [pc, #396]	@ (8119fd0 <tcp_enqueue_flags+0x1c8>)
 8119e42:	4862      	ldr	r0, [pc, #392]	@ (8119fcc <tcp_enqueue_flags+0x1c4>)
 8119e44:	f001 ffea 	bl	811be1c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8119e48:	78fb      	ldrb	r3, [r7, #3]
 8119e4a:	f003 0302 	and.w	r3, r3, #2
 8119e4e:	2b00      	cmp	r3, #0
 8119e50:	d001      	beq.n	8119e56 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8119e52:	2301      	movs	r3, #1
 8119e54:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8119e56:	7ffb      	ldrb	r3, [r7, #31]
 8119e58:	009b      	lsls	r3, r3, #2
 8119e5a:	b2db      	uxtb	r3, r3
 8119e5c:	f003 0304 	and.w	r3, r3, #4
 8119e60:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8119e62:	7dfb      	ldrb	r3, [r7, #23]
 8119e64:	b29b      	uxth	r3, r3
 8119e66:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8119e6a:	4619      	mov	r1, r3
 8119e6c:	2036      	movs	r0, #54	@ 0x36
 8119e6e:	f7fa fa2f 	bl	81142d0 <pbuf_alloc>
 8119e72:	6138      	str	r0, [r7, #16]
 8119e74:	693b      	ldr	r3, [r7, #16]
 8119e76:	2b00      	cmp	r3, #0
 8119e78:	d109      	bne.n	8119e8e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8119e7a:	687b      	ldr	r3, [r7, #4]
 8119e7c:	8b5b      	ldrh	r3, [r3, #26]
 8119e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8119e82:	b29a      	uxth	r2, r3
 8119e84:	687b      	ldr	r3, [r7, #4]
 8119e86:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8119e88:	f04f 33ff 	mov.w	r3, #4294967295
 8119e8c:	e095      	b.n	8119fba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8119e8e:	693b      	ldr	r3, [r7, #16]
 8119e90:	895a      	ldrh	r2, [r3, #10]
 8119e92:	7dfb      	ldrb	r3, [r7, #23]
 8119e94:	b29b      	uxth	r3, r3
 8119e96:	429a      	cmp	r2, r3
 8119e98:	d206      	bcs.n	8119ea8 <tcp_enqueue_flags+0xa0>
 8119e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8119fc4 <tcp_enqueue_flags+0x1bc>)
 8119e9c:	f240 4239 	movw	r2, #1081	@ 0x439
 8119ea0:	494c      	ldr	r1, [pc, #304]	@ (8119fd4 <tcp_enqueue_flags+0x1cc>)
 8119ea2:	484a      	ldr	r0, [pc, #296]	@ (8119fcc <tcp_enqueue_flags+0x1c4>)
 8119ea4:	f001 ffba 	bl	811be1c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8119ea8:	687b      	ldr	r3, [r7, #4]
 8119eaa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8119eac:	78fa      	ldrb	r2, [r7, #3]
 8119eae:	7ffb      	ldrb	r3, [r7, #31]
 8119eb0:	9300      	str	r3, [sp, #0]
 8119eb2:	460b      	mov	r3, r1
 8119eb4:	6939      	ldr	r1, [r7, #16]
 8119eb6:	6878      	ldr	r0, [r7, #4]
 8119eb8:	f7ff f91a 	bl	81190f0 <tcp_create_segment>
 8119ebc:	60f8      	str	r0, [r7, #12]
 8119ebe:	68fb      	ldr	r3, [r7, #12]
 8119ec0:	2b00      	cmp	r3, #0
 8119ec2:	d109      	bne.n	8119ed8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8119ec4:	687b      	ldr	r3, [r7, #4]
 8119ec6:	8b5b      	ldrh	r3, [r3, #26]
 8119ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8119ecc:	b29a      	uxth	r2, r3
 8119ece:	687b      	ldr	r3, [r7, #4]
 8119ed0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8119ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8119ed6:	e070      	b.n	8119fba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8119ed8:	68fb      	ldr	r3, [r7, #12]
 8119eda:	68db      	ldr	r3, [r3, #12]
 8119edc:	f003 0303 	and.w	r3, r3, #3
 8119ee0:	2b00      	cmp	r3, #0
 8119ee2:	d006      	beq.n	8119ef2 <tcp_enqueue_flags+0xea>
 8119ee4:	4b37      	ldr	r3, [pc, #220]	@ (8119fc4 <tcp_enqueue_flags+0x1bc>)
 8119ee6:	f240 4242 	movw	r2, #1090	@ 0x442
 8119eea:	493b      	ldr	r1, [pc, #236]	@ (8119fd8 <tcp_enqueue_flags+0x1d0>)
 8119eec:	4837      	ldr	r0, [pc, #220]	@ (8119fcc <tcp_enqueue_flags+0x1c4>)
 8119eee:	f001 ff95 	bl	811be1c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8119ef2:	68fb      	ldr	r3, [r7, #12]
 8119ef4:	891b      	ldrh	r3, [r3, #8]
 8119ef6:	2b00      	cmp	r3, #0
 8119ef8:	d006      	beq.n	8119f08 <tcp_enqueue_flags+0x100>
 8119efa:	4b32      	ldr	r3, [pc, #200]	@ (8119fc4 <tcp_enqueue_flags+0x1bc>)
 8119efc:	f240 4243 	movw	r2, #1091	@ 0x443
 8119f00:	4936      	ldr	r1, [pc, #216]	@ (8119fdc <tcp_enqueue_flags+0x1d4>)
 8119f02:	4832      	ldr	r0, [pc, #200]	@ (8119fcc <tcp_enqueue_flags+0x1c4>)
 8119f04:	f001 ff8a 	bl	811be1c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8119f08:	687b      	ldr	r3, [r7, #4]
 8119f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119f0c:	2b00      	cmp	r3, #0
 8119f0e:	d103      	bne.n	8119f18 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8119f10:	687b      	ldr	r3, [r7, #4]
 8119f12:	68fa      	ldr	r2, [r7, #12]
 8119f14:	66da      	str	r2, [r3, #108]	@ 0x6c
 8119f16:	e00d      	b.n	8119f34 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8119f18:	687b      	ldr	r3, [r7, #4]
 8119f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119f1c:	61bb      	str	r3, [r7, #24]
 8119f1e:	e002      	b.n	8119f26 <tcp_enqueue_flags+0x11e>
 8119f20:	69bb      	ldr	r3, [r7, #24]
 8119f22:	681b      	ldr	r3, [r3, #0]
 8119f24:	61bb      	str	r3, [r7, #24]
 8119f26:	69bb      	ldr	r3, [r7, #24]
 8119f28:	681b      	ldr	r3, [r3, #0]
 8119f2a:	2b00      	cmp	r3, #0
 8119f2c:	d1f8      	bne.n	8119f20 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8119f2e:	69bb      	ldr	r3, [r7, #24]
 8119f30:	68fa      	ldr	r2, [r7, #12]
 8119f32:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8119f34:	687b      	ldr	r3, [r7, #4]
 8119f36:	2200      	movs	r2, #0
 8119f38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8119f3c:	78fb      	ldrb	r3, [r7, #3]
 8119f3e:	f003 0302 	and.w	r3, r3, #2
 8119f42:	2b00      	cmp	r3, #0
 8119f44:	d104      	bne.n	8119f50 <tcp_enqueue_flags+0x148>
 8119f46:	78fb      	ldrb	r3, [r7, #3]
 8119f48:	f003 0301 	and.w	r3, r3, #1
 8119f4c:	2b00      	cmp	r3, #0
 8119f4e:	d004      	beq.n	8119f5a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8119f50:	687b      	ldr	r3, [r7, #4]
 8119f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8119f54:	1c5a      	adds	r2, r3, #1
 8119f56:	687b      	ldr	r3, [r7, #4]
 8119f58:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8119f5a:	78fb      	ldrb	r3, [r7, #3]
 8119f5c:	f003 0301 	and.w	r3, r3, #1
 8119f60:	2b00      	cmp	r3, #0
 8119f62:	d006      	beq.n	8119f72 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8119f64:	687b      	ldr	r3, [r7, #4]
 8119f66:	8b5b      	ldrh	r3, [r3, #26]
 8119f68:	f043 0320 	orr.w	r3, r3, #32
 8119f6c:	b29a      	uxth	r2, r3
 8119f6e:	687b      	ldr	r3, [r7, #4]
 8119f70:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8119f72:	68fb      	ldr	r3, [r7, #12]
 8119f74:	685b      	ldr	r3, [r3, #4]
 8119f76:	4618      	mov	r0, r3
 8119f78:	f7fa fd1c 	bl	81149b4 <pbuf_clen>
 8119f7c:	4603      	mov	r3, r0
 8119f7e:	461a      	mov	r2, r3
 8119f80:	687b      	ldr	r3, [r7, #4]
 8119f82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119f86:	4413      	add	r3, r2
 8119f88:	b29a      	uxth	r2, r3
 8119f8a:	687b      	ldr	r3, [r7, #4]
 8119f8c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8119f90:	687b      	ldr	r3, [r7, #4]
 8119f92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119f96:	2b00      	cmp	r3, #0
 8119f98:	d00e      	beq.n	8119fb8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8119f9a:	687b      	ldr	r3, [r7, #4]
 8119f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119f9e:	2b00      	cmp	r3, #0
 8119fa0:	d10a      	bne.n	8119fb8 <tcp_enqueue_flags+0x1b0>
 8119fa2:	687b      	ldr	r3, [r7, #4]
 8119fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119fa6:	2b00      	cmp	r3, #0
 8119fa8:	d106      	bne.n	8119fb8 <tcp_enqueue_flags+0x1b0>
 8119faa:	4b06      	ldr	r3, [pc, #24]	@ (8119fc4 <tcp_enqueue_flags+0x1bc>)
 8119fac:	f240 4265 	movw	r2, #1125	@ 0x465
 8119fb0:	490b      	ldr	r1, [pc, #44]	@ (8119fe0 <tcp_enqueue_flags+0x1d8>)
 8119fb2:	4806      	ldr	r0, [pc, #24]	@ (8119fcc <tcp_enqueue_flags+0x1c4>)
 8119fb4:	f001 ff32 	bl	811be1c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8119fb8:	2300      	movs	r3, #0
}
 8119fba:	4618      	mov	r0, r3
 8119fbc:	3720      	adds	r7, #32
 8119fbe:	46bd      	mov	sp, r7
 8119fc0:	bd80      	pop	{r7, pc}
 8119fc2:	bf00      	nop
 8119fc4:	0811ed18 	.word	0x0811ed18
 8119fc8:	0811f17c 	.word	0x0811f17c
 8119fcc:	0811edac 	.word	0x0811edac
 8119fd0:	0811f1d4 	.word	0x0811f1d4
 8119fd4:	0811f1f4 	.word	0x0811f1f4
 8119fd8:	0811f230 	.word	0x0811f230
 8119fdc:	0811f248 	.word	0x0811f248
 8119fe0:	0811f274 	.word	0x0811f274

08119fe4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8119fe4:	b5b0      	push	{r4, r5, r7, lr}
 8119fe6:	b08a      	sub	sp, #40	@ 0x28
 8119fe8:	af00      	add	r7, sp, #0
 8119fea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8119fec:	687b      	ldr	r3, [r7, #4]
 8119fee:	2b00      	cmp	r3, #0
 8119ff0:	d106      	bne.n	811a000 <tcp_output+0x1c>
 8119ff2:	4b8a      	ldr	r3, [pc, #552]	@ (811a21c <tcp_output+0x238>)
 8119ff4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8119ff8:	4989      	ldr	r1, [pc, #548]	@ (811a220 <tcp_output+0x23c>)
 8119ffa:	488a      	ldr	r0, [pc, #552]	@ (811a224 <tcp_output+0x240>)
 8119ffc:	f001 ff0e 	bl	811be1c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 811a000:	687b      	ldr	r3, [r7, #4]
 811a002:	7d1b      	ldrb	r3, [r3, #20]
 811a004:	2b01      	cmp	r3, #1
 811a006:	d106      	bne.n	811a016 <tcp_output+0x32>
 811a008:	4b84      	ldr	r3, [pc, #528]	@ (811a21c <tcp_output+0x238>)
 811a00a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 811a00e:	4986      	ldr	r1, [pc, #536]	@ (811a228 <tcp_output+0x244>)
 811a010:	4884      	ldr	r0, [pc, #528]	@ (811a224 <tcp_output+0x240>)
 811a012:	f001 ff03 	bl	811be1c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 811a016:	4b85      	ldr	r3, [pc, #532]	@ (811a22c <tcp_output+0x248>)
 811a018:	681b      	ldr	r3, [r3, #0]
 811a01a:	687a      	ldr	r2, [r7, #4]
 811a01c:	429a      	cmp	r2, r3
 811a01e:	d101      	bne.n	811a024 <tcp_output+0x40>
    return ERR_OK;
 811a020:	2300      	movs	r3, #0
 811a022:	e1ce      	b.n	811a3c2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 811a024:	687b      	ldr	r3, [r7, #4]
 811a026:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811a02a:	687b      	ldr	r3, [r7, #4]
 811a02c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811a030:	4293      	cmp	r3, r2
 811a032:	bf28      	it	cs
 811a034:	4613      	movcs	r3, r2
 811a036:	b29b      	uxth	r3, r3
 811a038:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 811a03a:	687b      	ldr	r3, [r7, #4]
 811a03c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a03e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 811a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a042:	2b00      	cmp	r3, #0
 811a044:	d10b      	bne.n	811a05e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 811a046:	687b      	ldr	r3, [r7, #4]
 811a048:	8b5b      	ldrh	r3, [r3, #26]
 811a04a:	f003 0302 	and.w	r3, r3, #2
 811a04e:	2b00      	cmp	r3, #0
 811a050:	f000 81aa 	beq.w	811a3a8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 811a054:	6878      	ldr	r0, [r7, #4]
 811a056:	f000 fdcb 	bl	811abf0 <tcp_send_empty_ack>
 811a05a:	4603      	mov	r3, r0
 811a05c:	e1b1      	b.n	811a3c2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 811a05e:	6879      	ldr	r1, [r7, #4]
 811a060:	687b      	ldr	r3, [r7, #4]
 811a062:	3304      	adds	r3, #4
 811a064:	461a      	mov	r2, r3
 811a066:	6878      	ldr	r0, [r7, #4]
 811a068:	f7ff f826 	bl	81190b8 <tcp_route>
 811a06c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 811a06e:	697b      	ldr	r3, [r7, #20]
 811a070:	2b00      	cmp	r3, #0
 811a072:	d102      	bne.n	811a07a <tcp_output+0x96>
    return ERR_RTE;
 811a074:	f06f 0303 	mvn.w	r3, #3
 811a078:	e1a3      	b.n	811a3c2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 811a07a:	687b      	ldr	r3, [r7, #4]
 811a07c:	2b00      	cmp	r3, #0
 811a07e:	d003      	beq.n	811a088 <tcp_output+0xa4>
 811a080:	687b      	ldr	r3, [r7, #4]
 811a082:	681b      	ldr	r3, [r3, #0]
 811a084:	2b00      	cmp	r3, #0
 811a086:	d111      	bne.n	811a0ac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 811a088:	697b      	ldr	r3, [r7, #20]
 811a08a:	2b00      	cmp	r3, #0
 811a08c:	d002      	beq.n	811a094 <tcp_output+0xb0>
 811a08e:	697b      	ldr	r3, [r7, #20]
 811a090:	3304      	adds	r3, #4
 811a092:	e000      	b.n	811a096 <tcp_output+0xb2>
 811a094:	2300      	movs	r3, #0
 811a096:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 811a098:	693b      	ldr	r3, [r7, #16]
 811a09a:	2b00      	cmp	r3, #0
 811a09c:	d102      	bne.n	811a0a4 <tcp_output+0xc0>
      return ERR_RTE;
 811a09e:	f06f 0303 	mvn.w	r3, #3
 811a0a2:	e18e      	b.n	811a3c2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 811a0a4:	693b      	ldr	r3, [r7, #16]
 811a0a6:	681a      	ldr	r2, [r3, #0]
 811a0a8:	687b      	ldr	r3, [r7, #4]
 811a0aa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 811a0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a0ae:	68db      	ldr	r3, [r3, #12]
 811a0b0:	685b      	ldr	r3, [r3, #4]
 811a0b2:	4618      	mov	r0, r3
 811a0b4:	f7f6 fc7f 	bl	81109b6 <lwip_htonl>
 811a0b8:	4602      	mov	r2, r0
 811a0ba:	687b      	ldr	r3, [r7, #4]
 811a0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811a0be:	1ad3      	subs	r3, r2, r3
 811a0c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a0c2:	8912      	ldrh	r2, [r2, #8]
 811a0c4:	4413      	add	r3, r2
 811a0c6:	69ba      	ldr	r2, [r7, #24]
 811a0c8:	429a      	cmp	r2, r3
 811a0ca:	d227      	bcs.n	811a11c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 811a0cc:	687b      	ldr	r3, [r7, #4]
 811a0ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811a0d2:	461a      	mov	r2, r3
 811a0d4:	69bb      	ldr	r3, [r7, #24]
 811a0d6:	4293      	cmp	r3, r2
 811a0d8:	d114      	bne.n	811a104 <tcp_output+0x120>
 811a0da:	687b      	ldr	r3, [r7, #4]
 811a0dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a0de:	2b00      	cmp	r3, #0
 811a0e0:	d110      	bne.n	811a104 <tcp_output+0x120>
 811a0e2:	687b      	ldr	r3, [r7, #4]
 811a0e4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 811a0e8:	2b00      	cmp	r3, #0
 811a0ea:	d10b      	bne.n	811a104 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 811a0ec:	687b      	ldr	r3, [r7, #4]
 811a0ee:	2200      	movs	r2, #0
 811a0f0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 811a0f4:	687b      	ldr	r3, [r7, #4]
 811a0f6:	2201      	movs	r2, #1
 811a0f8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 811a0fc:	687b      	ldr	r3, [r7, #4]
 811a0fe:	2200      	movs	r2, #0
 811a100:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 811a104:	687b      	ldr	r3, [r7, #4]
 811a106:	8b5b      	ldrh	r3, [r3, #26]
 811a108:	f003 0302 	and.w	r3, r3, #2
 811a10c:	2b00      	cmp	r3, #0
 811a10e:	f000 814d 	beq.w	811a3ac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 811a112:	6878      	ldr	r0, [r7, #4]
 811a114:	f000 fd6c 	bl	811abf0 <tcp_send_empty_ack>
 811a118:	4603      	mov	r3, r0
 811a11a:	e152      	b.n	811a3c2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 811a11c:	687b      	ldr	r3, [r7, #4]
 811a11e:	2200      	movs	r2, #0
 811a120:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 811a124:	687b      	ldr	r3, [r7, #4]
 811a126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a128:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 811a12a:	6a3b      	ldr	r3, [r7, #32]
 811a12c:	2b00      	cmp	r3, #0
 811a12e:	f000 811c 	beq.w	811a36a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 811a132:	e002      	b.n	811a13a <tcp_output+0x156>
 811a134:	6a3b      	ldr	r3, [r7, #32]
 811a136:	681b      	ldr	r3, [r3, #0]
 811a138:	623b      	str	r3, [r7, #32]
 811a13a:	6a3b      	ldr	r3, [r7, #32]
 811a13c:	681b      	ldr	r3, [r3, #0]
 811a13e:	2b00      	cmp	r3, #0
 811a140:	d1f8      	bne.n	811a134 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 811a142:	e112      	b.n	811a36a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 811a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a146:	68db      	ldr	r3, [r3, #12]
 811a148:	899b      	ldrh	r3, [r3, #12]
 811a14a:	b29b      	uxth	r3, r3
 811a14c:	4618      	mov	r0, r3
 811a14e:	f7f6 fc1d 	bl	811098c <lwip_htons>
 811a152:	4603      	mov	r3, r0
 811a154:	b2db      	uxtb	r3, r3
 811a156:	f003 0304 	and.w	r3, r3, #4
 811a15a:	2b00      	cmp	r3, #0
 811a15c:	d006      	beq.n	811a16c <tcp_output+0x188>
 811a15e:	4b2f      	ldr	r3, [pc, #188]	@ (811a21c <tcp_output+0x238>)
 811a160:	f240 5236 	movw	r2, #1334	@ 0x536
 811a164:	4932      	ldr	r1, [pc, #200]	@ (811a230 <tcp_output+0x24c>)
 811a166:	482f      	ldr	r0, [pc, #188]	@ (811a224 <tcp_output+0x240>)
 811a168:	f001 fe58 	bl	811be1c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811a16c:	687b      	ldr	r3, [r7, #4]
 811a16e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a170:	2b00      	cmp	r3, #0
 811a172:	d01f      	beq.n	811a1b4 <tcp_output+0x1d0>
 811a174:	687b      	ldr	r3, [r7, #4]
 811a176:	8b5b      	ldrh	r3, [r3, #26]
 811a178:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 811a17c:	2b00      	cmp	r3, #0
 811a17e:	d119      	bne.n	811a1b4 <tcp_output+0x1d0>
 811a180:	687b      	ldr	r3, [r7, #4]
 811a182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a184:	2b00      	cmp	r3, #0
 811a186:	d00b      	beq.n	811a1a0 <tcp_output+0x1bc>
 811a188:	687b      	ldr	r3, [r7, #4]
 811a18a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a18c:	681b      	ldr	r3, [r3, #0]
 811a18e:	2b00      	cmp	r3, #0
 811a190:	d110      	bne.n	811a1b4 <tcp_output+0x1d0>
 811a192:	687b      	ldr	r3, [r7, #4]
 811a194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a196:	891a      	ldrh	r2, [r3, #8]
 811a198:	687b      	ldr	r3, [r7, #4]
 811a19a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811a19c:	429a      	cmp	r2, r3
 811a19e:	d209      	bcs.n	811a1b4 <tcp_output+0x1d0>
 811a1a0:	687b      	ldr	r3, [r7, #4]
 811a1a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 811a1a6:	2b00      	cmp	r3, #0
 811a1a8:	d004      	beq.n	811a1b4 <tcp_output+0x1d0>
 811a1aa:	687b      	ldr	r3, [r7, #4]
 811a1ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811a1b0:	2b0f      	cmp	r3, #15
 811a1b2:	d901      	bls.n	811a1b8 <tcp_output+0x1d4>
 811a1b4:	2301      	movs	r3, #1
 811a1b6:	e000      	b.n	811a1ba <tcp_output+0x1d6>
 811a1b8:	2300      	movs	r3, #0
 811a1ba:	2b00      	cmp	r3, #0
 811a1bc:	d106      	bne.n	811a1cc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 811a1be:	687b      	ldr	r3, [r7, #4]
 811a1c0:	8b5b      	ldrh	r3, [r3, #26]
 811a1c2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811a1c6:	2b00      	cmp	r3, #0
 811a1c8:	f000 80e4 	beq.w	811a394 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 811a1cc:	687b      	ldr	r3, [r7, #4]
 811a1ce:	7d1b      	ldrb	r3, [r3, #20]
 811a1d0:	2b02      	cmp	r3, #2
 811a1d2:	d00d      	beq.n	811a1f0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 811a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a1d6:	68db      	ldr	r3, [r3, #12]
 811a1d8:	899b      	ldrh	r3, [r3, #12]
 811a1da:	b29c      	uxth	r4, r3
 811a1dc:	2010      	movs	r0, #16
 811a1de:	f7f6 fbd5 	bl	811098c <lwip_htons>
 811a1e2:	4603      	mov	r3, r0
 811a1e4:	461a      	mov	r2, r3
 811a1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a1e8:	68db      	ldr	r3, [r3, #12]
 811a1ea:	4322      	orrs	r2, r4
 811a1ec:	b292      	uxth	r2, r2
 811a1ee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 811a1f0:	697a      	ldr	r2, [r7, #20]
 811a1f2:	6879      	ldr	r1, [r7, #4]
 811a1f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811a1f6:	f000 f909 	bl	811a40c <tcp_output_segment>
 811a1fa:	4603      	mov	r3, r0
 811a1fc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 811a1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811a202:	2b00      	cmp	r3, #0
 811a204:	d016      	beq.n	811a234 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811a206:	687b      	ldr	r3, [r7, #4]
 811a208:	8b5b      	ldrh	r3, [r3, #26]
 811a20a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811a20e:	b29a      	uxth	r2, r3
 811a210:	687b      	ldr	r3, [r7, #4]
 811a212:	835a      	strh	r2, [r3, #26]
      return err;
 811a214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811a218:	e0d3      	b.n	811a3c2 <tcp_output+0x3de>
 811a21a:	bf00      	nop
 811a21c:	0811ed18 	.word	0x0811ed18
 811a220:	0811f29c 	.word	0x0811f29c
 811a224:	0811edac 	.word	0x0811edac
 811a228:	0811f2b4 	.word	0x0811f2b4
 811a22c:	10011d60 	.word	0x10011d60
 811a230:	0811f2dc 	.word	0x0811f2dc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 811a234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a236:	681a      	ldr	r2, [r3, #0]
 811a238:	687b      	ldr	r3, [r7, #4]
 811a23a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 811a23c:	687b      	ldr	r3, [r7, #4]
 811a23e:	7d1b      	ldrb	r3, [r3, #20]
 811a240:	2b02      	cmp	r3, #2
 811a242:	d006      	beq.n	811a252 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811a244:	687b      	ldr	r3, [r7, #4]
 811a246:	8b5b      	ldrh	r3, [r3, #26]
 811a248:	f023 0303 	bic.w	r3, r3, #3
 811a24c:	b29a      	uxth	r2, r3
 811a24e:	687b      	ldr	r3, [r7, #4]
 811a250:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811a252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a254:	68db      	ldr	r3, [r3, #12]
 811a256:	685b      	ldr	r3, [r3, #4]
 811a258:	4618      	mov	r0, r3
 811a25a:	f7f6 fbac 	bl	81109b6 <lwip_htonl>
 811a25e:	4604      	mov	r4, r0
 811a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a262:	891b      	ldrh	r3, [r3, #8]
 811a264:	461d      	mov	r5, r3
 811a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a268:	68db      	ldr	r3, [r3, #12]
 811a26a:	899b      	ldrh	r3, [r3, #12]
 811a26c:	b29b      	uxth	r3, r3
 811a26e:	4618      	mov	r0, r3
 811a270:	f7f6 fb8c 	bl	811098c <lwip_htons>
 811a274:	4603      	mov	r3, r0
 811a276:	b2db      	uxtb	r3, r3
 811a278:	f003 0303 	and.w	r3, r3, #3
 811a27c:	2b00      	cmp	r3, #0
 811a27e:	d001      	beq.n	811a284 <tcp_output+0x2a0>
 811a280:	2301      	movs	r3, #1
 811a282:	e000      	b.n	811a286 <tcp_output+0x2a2>
 811a284:	2300      	movs	r3, #0
 811a286:	442b      	add	r3, r5
 811a288:	4423      	add	r3, r4
 811a28a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 811a28c:	687b      	ldr	r3, [r7, #4]
 811a28e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811a290:	68bb      	ldr	r3, [r7, #8]
 811a292:	1ad3      	subs	r3, r2, r3
 811a294:	2b00      	cmp	r3, #0
 811a296:	da02      	bge.n	811a29e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 811a298:	687b      	ldr	r3, [r7, #4]
 811a29a:	68ba      	ldr	r2, [r7, #8]
 811a29c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 811a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2a0:	891b      	ldrh	r3, [r3, #8]
 811a2a2:	461c      	mov	r4, r3
 811a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2a6:	68db      	ldr	r3, [r3, #12]
 811a2a8:	899b      	ldrh	r3, [r3, #12]
 811a2aa:	b29b      	uxth	r3, r3
 811a2ac:	4618      	mov	r0, r3
 811a2ae:	f7f6 fb6d 	bl	811098c <lwip_htons>
 811a2b2:	4603      	mov	r3, r0
 811a2b4:	b2db      	uxtb	r3, r3
 811a2b6:	f003 0303 	and.w	r3, r3, #3
 811a2ba:	2b00      	cmp	r3, #0
 811a2bc:	d001      	beq.n	811a2c2 <tcp_output+0x2de>
 811a2be:	2301      	movs	r3, #1
 811a2c0:	e000      	b.n	811a2c4 <tcp_output+0x2e0>
 811a2c2:	2300      	movs	r3, #0
 811a2c4:	4423      	add	r3, r4
 811a2c6:	2b00      	cmp	r3, #0
 811a2c8:	d049      	beq.n	811a35e <tcp_output+0x37a>
      seg->next = NULL;
 811a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2cc:	2200      	movs	r2, #0
 811a2ce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 811a2d0:	687b      	ldr	r3, [r7, #4]
 811a2d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a2d4:	2b00      	cmp	r3, #0
 811a2d6:	d105      	bne.n	811a2e4 <tcp_output+0x300>
        pcb->unacked = seg;
 811a2d8:	687b      	ldr	r3, [r7, #4]
 811a2da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a2dc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 811a2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2e0:	623b      	str	r3, [r7, #32]
 811a2e2:	e03f      	b.n	811a364 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 811a2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2e6:	68db      	ldr	r3, [r3, #12]
 811a2e8:	685b      	ldr	r3, [r3, #4]
 811a2ea:	4618      	mov	r0, r3
 811a2ec:	f7f6 fb63 	bl	81109b6 <lwip_htonl>
 811a2f0:	4604      	mov	r4, r0
 811a2f2:	6a3b      	ldr	r3, [r7, #32]
 811a2f4:	68db      	ldr	r3, [r3, #12]
 811a2f6:	685b      	ldr	r3, [r3, #4]
 811a2f8:	4618      	mov	r0, r3
 811a2fa:	f7f6 fb5c 	bl	81109b6 <lwip_htonl>
 811a2fe:	4603      	mov	r3, r0
 811a300:	1ae3      	subs	r3, r4, r3
 811a302:	2b00      	cmp	r3, #0
 811a304:	da24      	bge.n	811a350 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 811a306:	687b      	ldr	r3, [r7, #4]
 811a308:	3370      	adds	r3, #112	@ 0x70
 811a30a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811a30c:	e002      	b.n	811a314 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 811a30e:	69fb      	ldr	r3, [r7, #28]
 811a310:	681b      	ldr	r3, [r3, #0]
 811a312:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811a314:	69fb      	ldr	r3, [r7, #28]
 811a316:	681b      	ldr	r3, [r3, #0]
 811a318:	2b00      	cmp	r3, #0
 811a31a:	d011      	beq.n	811a340 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811a31c:	69fb      	ldr	r3, [r7, #28]
 811a31e:	681b      	ldr	r3, [r3, #0]
 811a320:	68db      	ldr	r3, [r3, #12]
 811a322:	685b      	ldr	r3, [r3, #4]
 811a324:	4618      	mov	r0, r3
 811a326:	f7f6 fb46 	bl	81109b6 <lwip_htonl>
 811a32a:	4604      	mov	r4, r0
 811a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a32e:	68db      	ldr	r3, [r3, #12]
 811a330:	685b      	ldr	r3, [r3, #4]
 811a332:	4618      	mov	r0, r3
 811a334:	f7f6 fb3f 	bl	81109b6 <lwip_htonl>
 811a338:	4603      	mov	r3, r0
 811a33a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 811a33c:	2b00      	cmp	r3, #0
 811a33e:	dbe6      	blt.n	811a30e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 811a340:	69fb      	ldr	r3, [r7, #28]
 811a342:	681a      	ldr	r2, [r3, #0]
 811a344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a346:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 811a348:	69fb      	ldr	r3, [r7, #28]
 811a34a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a34c:	601a      	str	r2, [r3, #0]
 811a34e:	e009      	b.n	811a364 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 811a350:	6a3b      	ldr	r3, [r7, #32]
 811a352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a354:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 811a356:	6a3b      	ldr	r3, [r7, #32]
 811a358:	681b      	ldr	r3, [r3, #0]
 811a35a:	623b      	str	r3, [r7, #32]
 811a35c:	e002      	b.n	811a364 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 811a35e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811a360:	f7fb ff6f 	bl	8116242 <tcp_seg_free>
    }
    seg = pcb->unsent;
 811a364:	687b      	ldr	r3, [r7, #4]
 811a366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a368:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 811a36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a36c:	2b00      	cmp	r3, #0
 811a36e:	d012      	beq.n	811a396 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 811a370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a372:	68db      	ldr	r3, [r3, #12]
 811a374:	685b      	ldr	r3, [r3, #4]
 811a376:	4618      	mov	r0, r3
 811a378:	f7f6 fb1d 	bl	81109b6 <lwip_htonl>
 811a37c:	4602      	mov	r2, r0
 811a37e:	687b      	ldr	r3, [r7, #4]
 811a380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811a382:	1ad3      	subs	r3, r2, r3
 811a384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a386:	8912      	ldrh	r2, [r2, #8]
 811a388:	4413      	add	r3, r2
  while (seg != NULL &&
 811a38a:	69ba      	ldr	r2, [r7, #24]
 811a38c:	429a      	cmp	r2, r3
 811a38e:	f4bf aed9 	bcs.w	811a144 <tcp_output+0x160>
 811a392:	e000      	b.n	811a396 <tcp_output+0x3b2>
      break;
 811a394:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 811a396:	687b      	ldr	r3, [r7, #4]
 811a398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a39a:	2b00      	cmp	r3, #0
 811a39c:	d108      	bne.n	811a3b0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811a39e:	687b      	ldr	r3, [r7, #4]
 811a3a0:	2200      	movs	r2, #0
 811a3a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 811a3a6:	e004      	b.n	811a3b2 <tcp_output+0x3ce>
    goto output_done;
 811a3a8:	bf00      	nop
 811a3aa:	e002      	b.n	811a3b2 <tcp_output+0x3ce>
    goto output_done;
 811a3ac:	bf00      	nop
 811a3ae:	e000      	b.n	811a3b2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 811a3b0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 811a3b2:	687b      	ldr	r3, [r7, #4]
 811a3b4:	8b5b      	ldrh	r3, [r3, #26]
 811a3b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 811a3ba:	b29a      	uxth	r2, r3
 811a3bc:	687b      	ldr	r3, [r7, #4]
 811a3be:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 811a3c0:	2300      	movs	r3, #0
}
 811a3c2:	4618      	mov	r0, r3
 811a3c4:	3728      	adds	r7, #40	@ 0x28
 811a3c6:	46bd      	mov	sp, r7
 811a3c8:	bdb0      	pop	{r4, r5, r7, pc}
 811a3ca:	bf00      	nop

0811a3cc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 811a3cc:	b580      	push	{r7, lr}
 811a3ce:	b082      	sub	sp, #8
 811a3d0:	af00      	add	r7, sp, #0
 811a3d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 811a3d4:	687b      	ldr	r3, [r7, #4]
 811a3d6:	2b00      	cmp	r3, #0
 811a3d8:	d106      	bne.n	811a3e8 <tcp_output_segment_busy+0x1c>
 811a3da:	4b09      	ldr	r3, [pc, #36]	@ (811a400 <tcp_output_segment_busy+0x34>)
 811a3dc:	f240 529a 	movw	r2, #1434	@ 0x59a
 811a3e0:	4908      	ldr	r1, [pc, #32]	@ (811a404 <tcp_output_segment_busy+0x38>)
 811a3e2:	4809      	ldr	r0, [pc, #36]	@ (811a408 <tcp_output_segment_busy+0x3c>)
 811a3e4:	f001 fd1a 	bl	811be1c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 811a3e8:	687b      	ldr	r3, [r7, #4]
 811a3ea:	685b      	ldr	r3, [r3, #4]
 811a3ec:	7b9b      	ldrb	r3, [r3, #14]
 811a3ee:	2b01      	cmp	r3, #1
 811a3f0:	d001      	beq.n	811a3f6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 811a3f2:	2301      	movs	r3, #1
 811a3f4:	e000      	b.n	811a3f8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 811a3f6:	2300      	movs	r3, #0
}
 811a3f8:	4618      	mov	r0, r3
 811a3fa:	3708      	adds	r7, #8
 811a3fc:	46bd      	mov	sp, r7
 811a3fe:	bd80      	pop	{r7, pc}
 811a400:	0811ed18 	.word	0x0811ed18
 811a404:	0811f2f4 	.word	0x0811f2f4
 811a408:	0811edac 	.word	0x0811edac

0811a40c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 811a40c:	b5b0      	push	{r4, r5, r7, lr}
 811a40e:	b08c      	sub	sp, #48	@ 0x30
 811a410:	af04      	add	r7, sp, #16
 811a412:	60f8      	str	r0, [r7, #12]
 811a414:	60b9      	str	r1, [r7, #8]
 811a416:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 811a418:	68fb      	ldr	r3, [r7, #12]
 811a41a:	2b00      	cmp	r3, #0
 811a41c:	d106      	bne.n	811a42c <tcp_output_segment+0x20>
 811a41e:	4b64      	ldr	r3, [pc, #400]	@ (811a5b0 <tcp_output_segment+0x1a4>)
 811a420:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 811a424:	4963      	ldr	r1, [pc, #396]	@ (811a5b4 <tcp_output_segment+0x1a8>)
 811a426:	4864      	ldr	r0, [pc, #400]	@ (811a5b8 <tcp_output_segment+0x1ac>)
 811a428:	f001 fcf8 	bl	811be1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 811a42c:	68bb      	ldr	r3, [r7, #8]
 811a42e:	2b00      	cmp	r3, #0
 811a430:	d106      	bne.n	811a440 <tcp_output_segment+0x34>
 811a432:	4b5f      	ldr	r3, [pc, #380]	@ (811a5b0 <tcp_output_segment+0x1a4>)
 811a434:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 811a438:	4960      	ldr	r1, [pc, #384]	@ (811a5bc <tcp_output_segment+0x1b0>)
 811a43a:	485f      	ldr	r0, [pc, #380]	@ (811a5b8 <tcp_output_segment+0x1ac>)
 811a43c:	f001 fcee 	bl	811be1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 811a440:	687b      	ldr	r3, [r7, #4]
 811a442:	2b00      	cmp	r3, #0
 811a444:	d106      	bne.n	811a454 <tcp_output_segment+0x48>
 811a446:	4b5a      	ldr	r3, [pc, #360]	@ (811a5b0 <tcp_output_segment+0x1a4>)
 811a448:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 811a44c:	495c      	ldr	r1, [pc, #368]	@ (811a5c0 <tcp_output_segment+0x1b4>)
 811a44e:	485a      	ldr	r0, [pc, #360]	@ (811a5b8 <tcp_output_segment+0x1ac>)
 811a450:	f001 fce4 	bl	811be1c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 811a454:	68f8      	ldr	r0, [r7, #12]
 811a456:	f7ff ffb9 	bl	811a3cc <tcp_output_segment_busy>
 811a45a:	4603      	mov	r3, r0
 811a45c:	2b00      	cmp	r3, #0
 811a45e:	d001      	beq.n	811a464 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 811a460:	2300      	movs	r3, #0
 811a462:	e0a1      	b.n	811a5a8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 811a464:	68bb      	ldr	r3, [r7, #8]
 811a466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811a468:	68fb      	ldr	r3, [r7, #12]
 811a46a:	68dc      	ldr	r4, [r3, #12]
 811a46c:	4610      	mov	r0, r2
 811a46e:	f7f6 faa2 	bl	81109b6 <lwip_htonl>
 811a472:	4603      	mov	r3, r0
 811a474:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 811a476:	68bb      	ldr	r3, [r7, #8]
 811a478:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811a47a:	68fb      	ldr	r3, [r7, #12]
 811a47c:	68dc      	ldr	r4, [r3, #12]
 811a47e:	4610      	mov	r0, r2
 811a480:	f7f6 fa84 	bl	811098c <lwip_htons>
 811a484:	4603      	mov	r3, r0
 811a486:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811a488:	68bb      	ldr	r3, [r7, #8]
 811a48a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a48c:	68ba      	ldr	r2, [r7, #8]
 811a48e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811a490:	441a      	add	r2, r3
 811a492:	68bb      	ldr	r3, [r7, #8]
 811a494:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 811a496:	68fb      	ldr	r3, [r7, #12]
 811a498:	68db      	ldr	r3, [r3, #12]
 811a49a:	3314      	adds	r3, #20
 811a49c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 811a49e:	68fb      	ldr	r3, [r7, #12]
 811a4a0:	7a9b      	ldrb	r3, [r3, #10]
 811a4a2:	f003 0301 	and.w	r3, r3, #1
 811a4a6:	2b00      	cmp	r3, #0
 811a4a8:	d015      	beq.n	811a4d6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 811a4aa:	68bb      	ldr	r3, [r7, #8]
 811a4ac:	3304      	adds	r3, #4
 811a4ae:	461a      	mov	r2, r3
 811a4b0:	6879      	ldr	r1, [r7, #4]
 811a4b2:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 811a4b6:	f7fc fa37 	bl	8116928 <tcp_eff_send_mss_netif>
 811a4ba:	4603      	mov	r3, r0
 811a4bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 811a4be:	8b7b      	ldrh	r3, [r7, #26]
 811a4c0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 811a4c4:	4618      	mov	r0, r3
 811a4c6:	f7f6 fa76 	bl	81109b6 <lwip_htonl>
 811a4ca:	4602      	mov	r2, r0
 811a4cc:	69fb      	ldr	r3, [r7, #28]
 811a4ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 811a4d0:	69fb      	ldr	r3, [r7, #28]
 811a4d2:	3304      	adds	r3, #4
 811a4d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 811a4d6:	68bb      	ldr	r3, [r7, #8]
 811a4d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811a4dc:	2b00      	cmp	r3, #0
 811a4de:	da02      	bge.n	811a4e6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 811a4e0:	68bb      	ldr	r3, [r7, #8]
 811a4e2:	2200      	movs	r2, #0
 811a4e4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 811a4e6:	68bb      	ldr	r3, [r7, #8]
 811a4e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811a4ea:	2b00      	cmp	r3, #0
 811a4ec:	d10c      	bne.n	811a508 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 811a4ee:	4b35      	ldr	r3, [pc, #212]	@ (811a5c4 <tcp_output_segment+0x1b8>)
 811a4f0:	681a      	ldr	r2, [r3, #0]
 811a4f2:	68bb      	ldr	r3, [r7, #8]
 811a4f4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 811a4f6:	68fb      	ldr	r3, [r7, #12]
 811a4f8:	68db      	ldr	r3, [r3, #12]
 811a4fa:	685b      	ldr	r3, [r3, #4]
 811a4fc:	4618      	mov	r0, r3
 811a4fe:	f7f6 fa5a 	bl	81109b6 <lwip_htonl>
 811a502:	4602      	mov	r2, r0
 811a504:	68bb      	ldr	r3, [r7, #8]
 811a506:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 811a508:	68fb      	ldr	r3, [r7, #12]
 811a50a:	68da      	ldr	r2, [r3, #12]
 811a50c:	68fb      	ldr	r3, [r7, #12]
 811a50e:	685b      	ldr	r3, [r3, #4]
 811a510:	685b      	ldr	r3, [r3, #4]
 811a512:	1ad3      	subs	r3, r2, r3
 811a514:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 811a516:	68fb      	ldr	r3, [r7, #12]
 811a518:	685b      	ldr	r3, [r3, #4]
 811a51a:	8959      	ldrh	r1, [r3, #10]
 811a51c:	68fb      	ldr	r3, [r7, #12]
 811a51e:	685b      	ldr	r3, [r3, #4]
 811a520:	8b3a      	ldrh	r2, [r7, #24]
 811a522:	1a8a      	subs	r2, r1, r2
 811a524:	b292      	uxth	r2, r2
 811a526:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 811a528:	68fb      	ldr	r3, [r7, #12]
 811a52a:	685b      	ldr	r3, [r3, #4]
 811a52c:	8919      	ldrh	r1, [r3, #8]
 811a52e:	68fb      	ldr	r3, [r7, #12]
 811a530:	685b      	ldr	r3, [r3, #4]
 811a532:	8b3a      	ldrh	r2, [r7, #24]
 811a534:	1a8a      	subs	r2, r1, r2
 811a536:	b292      	uxth	r2, r2
 811a538:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 811a53a:	68fb      	ldr	r3, [r7, #12]
 811a53c:	685b      	ldr	r3, [r3, #4]
 811a53e:	68fa      	ldr	r2, [r7, #12]
 811a540:	68d2      	ldr	r2, [r2, #12]
 811a542:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 811a544:	68fb      	ldr	r3, [r7, #12]
 811a546:	68db      	ldr	r3, [r3, #12]
 811a548:	2200      	movs	r2, #0
 811a54a:	741a      	strb	r2, [r3, #16]
 811a54c:	2200      	movs	r2, #0
 811a54e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 811a550:	68fb      	ldr	r3, [r7, #12]
 811a552:	68da      	ldr	r2, [r3, #12]
 811a554:	68fb      	ldr	r3, [r7, #12]
 811a556:	7a9b      	ldrb	r3, [r3, #10]
 811a558:	f003 0301 	and.w	r3, r3, #1
 811a55c:	2b00      	cmp	r3, #0
 811a55e:	d001      	beq.n	811a564 <tcp_output_segment+0x158>
 811a560:	2318      	movs	r3, #24
 811a562:	e000      	b.n	811a566 <tcp_output_segment+0x15a>
 811a564:	2314      	movs	r3, #20
 811a566:	4413      	add	r3, r2
 811a568:	69fa      	ldr	r2, [r7, #28]
 811a56a:	429a      	cmp	r2, r3
 811a56c:	d006      	beq.n	811a57c <tcp_output_segment+0x170>
 811a56e:	4b10      	ldr	r3, [pc, #64]	@ (811a5b0 <tcp_output_segment+0x1a4>)
 811a570:	f240 621c 	movw	r2, #1564	@ 0x61c
 811a574:	4914      	ldr	r1, [pc, #80]	@ (811a5c8 <tcp_output_segment+0x1bc>)
 811a576:	4810      	ldr	r0, [pc, #64]	@ (811a5b8 <tcp_output_segment+0x1ac>)
 811a578:	f001 fc50 	bl	811be1c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 811a57c:	68fb      	ldr	r3, [r7, #12]
 811a57e:	6858      	ldr	r0, [r3, #4]
 811a580:	68b9      	ldr	r1, [r7, #8]
 811a582:	68bb      	ldr	r3, [r7, #8]
 811a584:	1d1c      	adds	r4, r3, #4
 811a586:	68bb      	ldr	r3, [r7, #8]
 811a588:	7add      	ldrb	r5, [r3, #11]
 811a58a:	68bb      	ldr	r3, [r7, #8]
 811a58c:	7a9b      	ldrb	r3, [r3, #10]
 811a58e:	687a      	ldr	r2, [r7, #4]
 811a590:	9202      	str	r2, [sp, #8]
 811a592:	2206      	movs	r2, #6
 811a594:	9201      	str	r2, [sp, #4]
 811a596:	9300      	str	r3, [sp, #0]
 811a598:	462b      	mov	r3, r5
 811a59a:	4622      	mov	r2, r4
 811a59c:	f7f7 fe8c 	bl	81122b8 <ip4_output_if>
 811a5a0:	4603      	mov	r3, r0
 811a5a2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 811a5a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 811a5a8:	4618      	mov	r0, r3
 811a5aa:	3720      	adds	r7, #32
 811a5ac:	46bd      	mov	sp, r7
 811a5ae:	bdb0      	pop	{r4, r5, r7, pc}
 811a5b0:	0811ed18 	.word	0x0811ed18
 811a5b4:	0811f31c 	.word	0x0811f31c
 811a5b8:	0811edac 	.word	0x0811edac
 811a5bc:	0811f33c 	.word	0x0811f33c
 811a5c0:	0811f35c 	.word	0x0811f35c
 811a5c4:	10011d14 	.word	0x10011d14
 811a5c8:	0811f380 	.word	0x0811f380

0811a5cc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 811a5cc:	b5b0      	push	{r4, r5, r7, lr}
 811a5ce:	b084      	sub	sp, #16
 811a5d0:	af00      	add	r7, sp, #0
 811a5d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 811a5d4:	687b      	ldr	r3, [r7, #4]
 811a5d6:	2b00      	cmp	r3, #0
 811a5d8:	d106      	bne.n	811a5e8 <tcp_rexmit_rto_prepare+0x1c>
 811a5da:	4b31      	ldr	r3, [pc, #196]	@ (811a6a0 <tcp_rexmit_rto_prepare+0xd4>)
 811a5dc:	f240 6263 	movw	r2, #1635	@ 0x663
 811a5e0:	4930      	ldr	r1, [pc, #192]	@ (811a6a4 <tcp_rexmit_rto_prepare+0xd8>)
 811a5e2:	4831      	ldr	r0, [pc, #196]	@ (811a6a8 <tcp_rexmit_rto_prepare+0xdc>)
 811a5e4:	f001 fc1a 	bl	811be1c <iprintf>

  if (pcb->unacked == NULL) {
 811a5e8:	687b      	ldr	r3, [r7, #4]
 811a5ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a5ec:	2b00      	cmp	r3, #0
 811a5ee:	d102      	bne.n	811a5f6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 811a5f0:	f06f 0305 	mvn.w	r3, #5
 811a5f4:	e050      	b.n	811a698 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811a5f6:	687b      	ldr	r3, [r7, #4]
 811a5f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a5fa:	60fb      	str	r3, [r7, #12]
 811a5fc:	e00b      	b.n	811a616 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 811a5fe:	68f8      	ldr	r0, [r7, #12]
 811a600:	f7ff fee4 	bl	811a3cc <tcp_output_segment_busy>
 811a604:	4603      	mov	r3, r0
 811a606:	2b00      	cmp	r3, #0
 811a608:	d002      	beq.n	811a610 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 811a60a:	f06f 0305 	mvn.w	r3, #5
 811a60e:	e043      	b.n	811a698 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811a610:	68fb      	ldr	r3, [r7, #12]
 811a612:	681b      	ldr	r3, [r3, #0]
 811a614:	60fb      	str	r3, [r7, #12]
 811a616:	68fb      	ldr	r3, [r7, #12]
 811a618:	681b      	ldr	r3, [r3, #0]
 811a61a:	2b00      	cmp	r3, #0
 811a61c:	d1ef      	bne.n	811a5fe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 811a61e:	68f8      	ldr	r0, [r7, #12]
 811a620:	f7ff fed4 	bl	811a3cc <tcp_output_segment_busy>
 811a624:	4603      	mov	r3, r0
 811a626:	2b00      	cmp	r3, #0
 811a628:	d002      	beq.n	811a630 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 811a62a:	f06f 0305 	mvn.w	r3, #5
 811a62e:	e033      	b.n	811a698 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 811a630:	687b      	ldr	r3, [r7, #4]
 811a632:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 811a634:	68fb      	ldr	r3, [r7, #12]
 811a636:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 811a638:	687b      	ldr	r3, [r7, #4]
 811a63a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 811a63c:	687b      	ldr	r3, [r7, #4]
 811a63e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 811a640:	687b      	ldr	r3, [r7, #4]
 811a642:	2200      	movs	r2, #0
 811a644:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 811a646:	687b      	ldr	r3, [r7, #4]
 811a648:	8b5b      	ldrh	r3, [r3, #26]
 811a64a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 811a64e:	b29a      	uxth	r2, r3
 811a650:	687b      	ldr	r3, [r7, #4]
 811a652:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811a654:	68fb      	ldr	r3, [r7, #12]
 811a656:	68db      	ldr	r3, [r3, #12]
 811a658:	685b      	ldr	r3, [r3, #4]
 811a65a:	4618      	mov	r0, r3
 811a65c:	f7f6 f9ab 	bl	81109b6 <lwip_htonl>
 811a660:	4604      	mov	r4, r0
 811a662:	68fb      	ldr	r3, [r7, #12]
 811a664:	891b      	ldrh	r3, [r3, #8]
 811a666:	461d      	mov	r5, r3
 811a668:	68fb      	ldr	r3, [r7, #12]
 811a66a:	68db      	ldr	r3, [r3, #12]
 811a66c:	899b      	ldrh	r3, [r3, #12]
 811a66e:	b29b      	uxth	r3, r3
 811a670:	4618      	mov	r0, r3
 811a672:	f7f6 f98b 	bl	811098c <lwip_htons>
 811a676:	4603      	mov	r3, r0
 811a678:	b2db      	uxtb	r3, r3
 811a67a:	f003 0303 	and.w	r3, r3, #3
 811a67e:	2b00      	cmp	r3, #0
 811a680:	d001      	beq.n	811a686 <tcp_rexmit_rto_prepare+0xba>
 811a682:	2301      	movs	r3, #1
 811a684:	e000      	b.n	811a688 <tcp_rexmit_rto_prepare+0xbc>
 811a686:	2300      	movs	r3, #0
 811a688:	442b      	add	r3, r5
 811a68a:	18e2      	adds	r2, r4, r3
 811a68c:	687b      	ldr	r3, [r7, #4]
 811a68e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 811a690:	687b      	ldr	r3, [r7, #4]
 811a692:	2200      	movs	r2, #0
 811a694:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 811a696:	2300      	movs	r3, #0
}
 811a698:	4618      	mov	r0, r3
 811a69a:	3710      	adds	r7, #16
 811a69c:	46bd      	mov	sp, r7
 811a69e:	bdb0      	pop	{r4, r5, r7, pc}
 811a6a0:	0811ed18 	.word	0x0811ed18
 811a6a4:	0811f394 	.word	0x0811f394
 811a6a8:	0811edac 	.word	0x0811edac

0811a6ac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 811a6ac:	b580      	push	{r7, lr}
 811a6ae:	b082      	sub	sp, #8
 811a6b0:	af00      	add	r7, sp, #0
 811a6b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 811a6b4:	687b      	ldr	r3, [r7, #4]
 811a6b6:	2b00      	cmp	r3, #0
 811a6b8:	d106      	bne.n	811a6c8 <tcp_rexmit_rto_commit+0x1c>
 811a6ba:	4b0d      	ldr	r3, [pc, #52]	@ (811a6f0 <tcp_rexmit_rto_commit+0x44>)
 811a6bc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811a6c0:	490c      	ldr	r1, [pc, #48]	@ (811a6f4 <tcp_rexmit_rto_commit+0x48>)
 811a6c2:	480d      	ldr	r0, [pc, #52]	@ (811a6f8 <tcp_rexmit_rto_commit+0x4c>)
 811a6c4:	f001 fbaa 	bl	811be1c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 811a6c8:	687b      	ldr	r3, [r7, #4]
 811a6ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a6ce:	2bff      	cmp	r3, #255	@ 0xff
 811a6d0:	d007      	beq.n	811a6e2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 811a6d2:	687b      	ldr	r3, [r7, #4]
 811a6d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a6d8:	3301      	adds	r3, #1
 811a6da:	b2da      	uxtb	r2, r3
 811a6dc:	687b      	ldr	r3, [r7, #4]
 811a6de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 811a6e2:	6878      	ldr	r0, [r7, #4]
 811a6e4:	f7ff fc7e 	bl	8119fe4 <tcp_output>
}
 811a6e8:	bf00      	nop
 811a6ea:	3708      	adds	r7, #8
 811a6ec:	46bd      	mov	sp, r7
 811a6ee:	bd80      	pop	{r7, pc}
 811a6f0:	0811ed18 	.word	0x0811ed18
 811a6f4:	0811f3b8 	.word	0x0811f3b8
 811a6f8:	0811edac 	.word	0x0811edac

0811a6fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 811a6fc:	b580      	push	{r7, lr}
 811a6fe:	b082      	sub	sp, #8
 811a700:	af00      	add	r7, sp, #0
 811a702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 811a704:	687b      	ldr	r3, [r7, #4]
 811a706:	2b00      	cmp	r3, #0
 811a708:	d106      	bne.n	811a718 <tcp_rexmit_rto+0x1c>
 811a70a:	4b0a      	ldr	r3, [pc, #40]	@ (811a734 <tcp_rexmit_rto+0x38>)
 811a70c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 811a710:	4909      	ldr	r1, [pc, #36]	@ (811a738 <tcp_rexmit_rto+0x3c>)
 811a712:	480a      	ldr	r0, [pc, #40]	@ (811a73c <tcp_rexmit_rto+0x40>)
 811a714:	f001 fb82 	bl	811be1c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 811a718:	6878      	ldr	r0, [r7, #4]
 811a71a:	f7ff ff57 	bl	811a5cc <tcp_rexmit_rto_prepare>
 811a71e:	4603      	mov	r3, r0
 811a720:	2b00      	cmp	r3, #0
 811a722:	d102      	bne.n	811a72a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 811a724:	6878      	ldr	r0, [r7, #4]
 811a726:	f7ff ffc1 	bl	811a6ac <tcp_rexmit_rto_commit>
  }
}
 811a72a:	bf00      	nop
 811a72c:	3708      	adds	r7, #8
 811a72e:	46bd      	mov	sp, r7
 811a730:	bd80      	pop	{r7, pc}
 811a732:	bf00      	nop
 811a734:	0811ed18 	.word	0x0811ed18
 811a738:	0811f3dc 	.word	0x0811f3dc
 811a73c:	0811edac 	.word	0x0811edac

0811a740 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 811a740:	b590      	push	{r4, r7, lr}
 811a742:	b085      	sub	sp, #20
 811a744:	af00      	add	r7, sp, #0
 811a746:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 811a748:	687b      	ldr	r3, [r7, #4]
 811a74a:	2b00      	cmp	r3, #0
 811a74c:	d106      	bne.n	811a75c <tcp_rexmit+0x1c>
 811a74e:	4b2f      	ldr	r3, [pc, #188]	@ (811a80c <tcp_rexmit+0xcc>)
 811a750:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 811a754:	492e      	ldr	r1, [pc, #184]	@ (811a810 <tcp_rexmit+0xd0>)
 811a756:	482f      	ldr	r0, [pc, #188]	@ (811a814 <tcp_rexmit+0xd4>)
 811a758:	f001 fb60 	bl	811be1c <iprintf>

  if (pcb->unacked == NULL) {
 811a75c:	687b      	ldr	r3, [r7, #4]
 811a75e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a760:	2b00      	cmp	r3, #0
 811a762:	d102      	bne.n	811a76a <tcp_rexmit+0x2a>
    return ERR_VAL;
 811a764:	f06f 0305 	mvn.w	r3, #5
 811a768:	e04c      	b.n	811a804 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 811a76a:	687b      	ldr	r3, [r7, #4]
 811a76c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a76e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 811a770:	68b8      	ldr	r0, [r7, #8]
 811a772:	f7ff fe2b 	bl	811a3cc <tcp_output_segment_busy>
 811a776:	4603      	mov	r3, r0
 811a778:	2b00      	cmp	r3, #0
 811a77a:	d002      	beq.n	811a782 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 811a77c:	f06f 0305 	mvn.w	r3, #5
 811a780:	e040      	b.n	811a804 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 811a782:	68bb      	ldr	r3, [r7, #8]
 811a784:	681a      	ldr	r2, [r3, #0]
 811a786:	687b      	ldr	r3, [r7, #4]
 811a788:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 811a78a:	687b      	ldr	r3, [r7, #4]
 811a78c:	336c      	adds	r3, #108	@ 0x6c
 811a78e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811a790:	e002      	b.n	811a798 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 811a792:	68fb      	ldr	r3, [r7, #12]
 811a794:	681b      	ldr	r3, [r3, #0]
 811a796:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811a798:	68fb      	ldr	r3, [r7, #12]
 811a79a:	681b      	ldr	r3, [r3, #0]
 811a79c:	2b00      	cmp	r3, #0
 811a79e:	d011      	beq.n	811a7c4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811a7a0:	68fb      	ldr	r3, [r7, #12]
 811a7a2:	681b      	ldr	r3, [r3, #0]
 811a7a4:	68db      	ldr	r3, [r3, #12]
 811a7a6:	685b      	ldr	r3, [r3, #4]
 811a7a8:	4618      	mov	r0, r3
 811a7aa:	f7f6 f904 	bl	81109b6 <lwip_htonl>
 811a7ae:	4604      	mov	r4, r0
 811a7b0:	68bb      	ldr	r3, [r7, #8]
 811a7b2:	68db      	ldr	r3, [r3, #12]
 811a7b4:	685b      	ldr	r3, [r3, #4]
 811a7b6:	4618      	mov	r0, r3
 811a7b8:	f7f6 f8fd 	bl	81109b6 <lwip_htonl>
 811a7bc:	4603      	mov	r3, r0
 811a7be:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 811a7c0:	2b00      	cmp	r3, #0
 811a7c2:	dbe6      	blt.n	811a792 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 811a7c4:	68fb      	ldr	r3, [r7, #12]
 811a7c6:	681a      	ldr	r2, [r3, #0]
 811a7c8:	68bb      	ldr	r3, [r7, #8]
 811a7ca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 811a7cc:	68fb      	ldr	r3, [r7, #12]
 811a7ce:	68ba      	ldr	r2, [r7, #8]
 811a7d0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 811a7d2:	68bb      	ldr	r3, [r7, #8]
 811a7d4:	681b      	ldr	r3, [r3, #0]
 811a7d6:	2b00      	cmp	r3, #0
 811a7d8:	d103      	bne.n	811a7e2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811a7da:	687b      	ldr	r3, [r7, #4]
 811a7dc:	2200      	movs	r2, #0
 811a7de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 811a7e2:	687b      	ldr	r3, [r7, #4]
 811a7e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a7e8:	2bff      	cmp	r3, #255	@ 0xff
 811a7ea:	d007      	beq.n	811a7fc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 811a7ec:	687b      	ldr	r3, [r7, #4]
 811a7ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a7f2:	3301      	adds	r3, #1
 811a7f4:	b2da      	uxtb	r2, r3
 811a7f6:	687b      	ldr	r3, [r7, #4]
 811a7f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 811a7fc:	687b      	ldr	r3, [r7, #4]
 811a7fe:	2200      	movs	r2, #0
 811a800:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 811a802:	2300      	movs	r3, #0
}
 811a804:	4618      	mov	r0, r3
 811a806:	3714      	adds	r7, #20
 811a808:	46bd      	mov	sp, r7
 811a80a:	bd90      	pop	{r4, r7, pc}
 811a80c:	0811ed18 	.word	0x0811ed18
 811a810:	0811f3f8 	.word	0x0811f3f8
 811a814:	0811edac 	.word	0x0811edac

0811a818 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 811a818:	b580      	push	{r7, lr}
 811a81a:	b082      	sub	sp, #8
 811a81c:	af00      	add	r7, sp, #0
 811a81e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 811a820:	687b      	ldr	r3, [r7, #4]
 811a822:	2b00      	cmp	r3, #0
 811a824:	d106      	bne.n	811a834 <tcp_rexmit_fast+0x1c>
 811a826:	4b2a      	ldr	r3, [pc, #168]	@ (811a8d0 <tcp_rexmit_fast+0xb8>)
 811a828:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 811a82c:	4929      	ldr	r1, [pc, #164]	@ (811a8d4 <tcp_rexmit_fast+0xbc>)
 811a82e:	482a      	ldr	r0, [pc, #168]	@ (811a8d8 <tcp_rexmit_fast+0xc0>)
 811a830:	f001 faf4 	bl	811be1c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 811a834:	687b      	ldr	r3, [r7, #4]
 811a836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a838:	2b00      	cmp	r3, #0
 811a83a:	d044      	beq.n	811a8c6 <tcp_rexmit_fast+0xae>
 811a83c:	687b      	ldr	r3, [r7, #4]
 811a83e:	8b5b      	ldrh	r3, [r3, #26]
 811a840:	f003 0304 	and.w	r3, r3, #4
 811a844:	2b00      	cmp	r3, #0
 811a846:	d13e      	bne.n	811a8c6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 811a848:	6878      	ldr	r0, [r7, #4]
 811a84a:	f7ff ff79 	bl	811a740 <tcp_rexmit>
 811a84e:	4603      	mov	r3, r0
 811a850:	2b00      	cmp	r3, #0
 811a852:	d138      	bne.n	811a8c6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 811a854:	687b      	ldr	r3, [r7, #4]
 811a856:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811a85a:	687b      	ldr	r3, [r7, #4]
 811a85c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811a860:	4293      	cmp	r3, r2
 811a862:	bf28      	it	cs
 811a864:	4613      	movcs	r3, r2
 811a866:	b29b      	uxth	r3, r3
 811a868:	0fda      	lsrs	r2, r3, #31
 811a86a:	4413      	add	r3, r2
 811a86c:	105b      	asrs	r3, r3, #1
 811a86e:	b29a      	uxth	r2, r3
 811a870:	687b      	ldr	r3, [r7, #4]
 811a872:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 811a876:	687b      	ldr	r3, [r7, #4]
 811a878:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 811a87c:	461a      	mov	r2, r3
 811a87e:	687b      	ldr	r3, [r7, #4]
 811a880:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811a882:	005b      	lsls	r3, r3, #1
 811a884:	429a      	cmp	r2, r3
 811a886:	d206      	bcs.n	811a896 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 811a888:	687b      	ldr	r3, [r7, #4]
 811a88a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811a88c:	005b      	lsls	r3, r3, #1
 811a88e:	b29a      	uxth	r2, r3
 811a890:	687b      	ldr	r3, [r7, #4]
 811a892:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 811a896:	687b      	ldr	r3, [r7, #4]
 811a898:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811a89c:	687b      	ldr	r3, [r7, #4]
 811a89e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811a8a0:	4619      	mov	r1, r3
 811a8a2:	0049      	lsls	r1, r1, #1
 811a8a4:	440b      	add	r3, r1
 811a8a6:	b29b      	uxth	r3, r3
 811a8a8:	4413      	add	r3, r2
 811a8aa:	b29a      	uxth	r2, r3
 811a8ac:	687b      	ldr	r3, [r7, #4]
 811a8ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 811a8b2:	687b      	ldr	r3, [r7, #4]
 811a8b4:	8b5b      	ldrh	r3, [r3, #26]
 811a8b6:	f043 0304 	orr.w	r3, r3, #4
 811a8ba:	b29a      	uxth	r2, r3
 811a8bc:	687b      	ldr	r3, [r7, #4]
 811a8be:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 811a8c0:	687b      	ldr	r3, [r7, #4]
 811a8c2:	2200      	movs	r2, #0
 811a8c4:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 811a8c6:	bf00      	nop
 811a8c8:	3708      	adds	r7, #8
 811a8ca:	46bd      	mov	sp, r7
 811a8cc:	bd80      	pop	{r7, pc}
 811a8ce:	bf00      	nop
 811a8d0:	0811ed18 	.word	0x0811ed18
 811a8d4:	0811f410 	.word	0x0811f410
 811a8d8:	0811edac 	.word	0x0811edac

0811a8dc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 811a8dc:	b580      	push	{r7, lr}
 811a8de:	b086      	sub	sp, #24
 811a8e0:	af00      	add	r7, sp, #0
 811a8e2:	60f8      	str	r0, [r7, #12]
 811a8e4:	607b      	str	r3, [r7, #4]
 811a8e6:	460b      	mov	r3, r1
 811a8e8:	817b      	strh	r3, [r7, #10]
 811a8ea:	4613      	mov	r3, r2
 811a8ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 811a8ee:	897a      	ldrh	r2, [r7, #10]
 811a8f0:	893b      	ldrh	r3, [r7, #8]
 811a8f2:	4413      	add	r3, r2
 811a8f4:	b29b      	uxth	r3, r3
 811a8f6:	3314      	adds	r3, #20
 811a8f8:	b29b      	uxth	r3, r3
 811a8fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811a8fe:	4619      	mov	r1, r3
 811a900:	2022      	movs	r0, #34	@ 0x22
 811a902:	f7f9 fce5 	bl	81142d0 <pbuf_alloc>
 811a906:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 811a908:	697b      	ldr	r3, [r7, #20]
 811a90a:	2b00      	cmp	r3, #0
 811a90c:	d04d      	beq.n	811a9aa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 811a90e:	897b      	ldrh	r3, [r7, #10]
 811a910:	3313      	adds	r3, #19
 811a912:	697a      	ldr	r2, [r7, #20]
 811a914:	8952      	ldrh	r2, [r2, #10]
 811a916:	4293      	cmp	r3, r2
 811a918:	db06      	blt.n	811a928 <tcp_output_alloc_header_common+0x4c>
 811a91a:	4b26      	ldr	r3, [pc, #152]	@ (811a9b4 <tcp_output_alloc_header_common+0xd8>)
 811a91c:	f240 7223 	movw	r2, #1827	@ 0x723
 811a920:	4925      	ldr	r1, [pc, #148]	@ (811a9b8 <tcp_output_alloc_header_common+0xdc>)
 811a922:	4826      	ldr	r0, [pc, #152]	@ (811a9bc <tcp_output_alloc_header_common+0xe0>)
 811a924:	f001 fa7a 	bl	811be1c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 811a928:	697b      	ldr	r3, [r7, #20]
 811a92a:	685b      	ldr	r3, [r3, #4]
 811a92c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 811a92e:	8c3b      	ldrh	r3, [r7, #32]
 811a930:	4618      	mov	r0, r3
 811a932:	f7f6 f82b 	bl	811098c <lwip_htons>
 811a936:	4603      	mov	r3, r0
 811a938:	461a      	mov	r2, r3
 811a93a:	693b      	ldr	r3, [r7, #16]
 811a93c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 811a93e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811a940:	4618      	mov	r0, r3
 811a942:	f7f6 f823 	bl	811098c <lwip_htons>
 811a946:	4603      	mov	r3, r0
 811a948:	461a      	mov	r2, r3
 811a94a:	693b      	ldr	r3, [r7, #16]
 811a94c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 811a94e:	693b      	ldr	r3, [r7, #16]
 811a950:	687a      	ldr	r2, [r7, #4]
 811a952:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 811a954:	68f8      	ldr	r0, [r7, #12]
 811a956:	f7f6 f82e 	bl	81109b6 <lwip_htonl>
 811a95a:	4602      	mov	r2, r0
 811a95c:	693b      	ldr	r3, [r7, #16]
 811a95e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 811a960:	897b      	ldrh	r3, [r7, #10]
 811a962:	089b      	lsrs	r3, r3, #2
 811a964:	b29b      	uxth	r3, r3
 811a966:	3305      	adds	r3, #5
 811a968:	b29b      	uxth	r3, r3
 811a96a:	031b      	lsls	r3, r3, #12
 811a96c:	b29a      	uxth	r2, r3
 811a96e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811a972:	b29b      	uxth	r3, r3
 811a974:	4313      	orrs	r3, r2
 811a976:	b29b      	uxth	r3, r3
 811a978:	4618      	mov	r0, r3
 811a97a:	f7f6 f807 	bl	811098c <lwip_htons>
 811a97e:	4603      	mov	r3, r0
 811a980:	461a      	mov	r2, r3
 811a982:	693b      	ldr	r3, [r7, #16]
 811a984:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 811a986:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811a988:	4618      	mov	r0, r3
 811a98a:	f7f5 ffff 	bl	811098c <lwip_htons>
 811a98e:	4603      	mov	r3, r0
 811a990:	461a      	mov	r2, r3
 811a992:	693b      	ldr	r3, [r7, #16]
 811a994:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 811a996:	693b      	ldr	r3, [r7, #16]
 811a998:	2200      	movs	r2, #0
 811a99a:	741a      	strb	r2, [r3, #16]
 811a99c:	2200      	movs	r2, #0
 811a99e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 811a9a0:	693b      	ldr	r3, [r7, #16]
 811a9a2:	2200      	movs	r2, #0
 811a9a4:	749a      	strb	r2, [r3, #18]
 811a9a6:	2200      	movs	r2, #0
 811a9a8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 811a9aa:	697b      	ldr	r3, [r7, #20]
}
 811a9ac:	4618      	mov	r0, r3
 811a9ae:	3718      	adds	r7, #24
 811a9b0:	46bd      	mov	sp, r7
 811a9b2:	bd80      	pop	{r7, pc}
 811a9b4:	0811ed18 	.word	0x0811ed18
 811a9b8:	0811f430 	.word	0x0811f430
 811a9bc:	0811edac 	.word	0x0811edac

0811a9c0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 811a9c0:	b5b0      	push	{r4, r5, r7, lr}
 811a9c2:	b08a      	sub	sp, #40	@ 0x28
 811a9c4:	af04      	add	r7, sp, #16
 811a9c6:	60f8      	str	r0, [r7, #12]
 811a9c8:	607b      	str	r3, [r7, #4]
 811a9ca:	460b      	mov	r3, r1
 811a9cc:	817b      	strh	r3, [r7, #10]
 811a9ce:	4613      	mov	r3, r2
 811a9d0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 811a9d2:	68fb      	ldr	r3, [r7, #12]
 811a9d4:	2b00      	cmp	r3, #0
 811a9d6:	d106      	bne.n	811a9e6 <tcp_output_alloc_header+0x26>
 811a9d8:	4b15      	ldr	r3, [pc, #84]	@ (811aa30 <tcp_output_alloc_header+0x70>)
 811a9da:	f240 7242 	movw	r2, #1858	@ 0x742
 811a9de:	4915      	ldr	r1, [pc, #84]	@ (811aa34 <tcp_output_alloc_header+0x74>)
 811a9e0:	4815      	ldr	r0, [pc, #84]	@ (811aa38 <tcp_output_alloc_header+0x78>)
 811a9e2:	f001 fa1b 	bl	811be1c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 811a9e6:	68fb      	ldr	r3, [r7, #12]
 811a9e8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 811a9ea:	68fb      	ldr	r3, [r7, #12]
 811a9ec:	8adb      	ldrh	r3, [r3, #22]
 811a9ee:	68fa      	ldr	r2, [r7, #12]
 811a9f0:	8b12      	ldrh	r2, [r2, #24]
 811a9f2:	68f9      	ldr	r1, [r7, #12]
 811a9f4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 811a9f6:	893d      	ldrh	r5, [r7, #8]
 811a9f8:	897c      	ldrh	r4, [r7, #10]
 811a9fa:	9103      	str	r1, [sp, #12]
 811a9fc:	2110      	movs	r1, #16
 811a9fe:	9102      	str	r1, [sp, #8]
 811aa00:	9201      	str	r2, [sp, #4]
 811aa02:	9300      	str	r3, [sp, #0]
 811aa04:	687b      	ldr	r3, [r7, #4]
 811aa06:	462a      	mov	r2, r5
 811aa08:	4621      	mov	r1, r4
 811aa0a:	f7ff ff67 	bl	811a8dc <tcp_output_alloc_header_common>
 811aa0e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 811aa10:	697b      	ldr	r3, [r7, #20]
 811aa12:	2b00      	cmp	r3, #0
 811aa14:	d006      	beq.n	811aa24 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811aa16:	68fb      	ldr	r3, [r7, #12]
 811aa18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811aa1a:	68fa      	ldr	r2, [r7, #12]
 811aa1c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811aa1e:	441a      	add	r2, r3
 811aa20:	68fb      	ldr	r3, [r7, #12]
 811aa22:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 811aa24:	697b      	ldr	r3, [r7, #20]
}
 811aa26:	4618      	mov	r0, r3
 811aa28:	3718      	adds	r7, #24
 811aa2a:	46bd      	mov	sp, r7
 811aa2c:	bdb0      	pop	{r4, r5, r7, pc}
 811aa2e:	bf00      	nop
 811aa30:	0811ed18 	.word	0x0811ed18
 811aa34:	0811f460 	.word	0x0811f460
 811aa38:	0811edac 	.word	0x0811edac

0811aa3c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 811aa3c:	b580      	push	{r7, lr}
 811aa3e:	b088      	sub	sp, #32
 811aa40:	af00      	add	r7, sp, #0
 811aa42:	60f8      	str	r0, [r7, #12]
 811aa44:	60b9      	str	r1, [r7, #8]
 811aa46:	4611      	mov	r1, r2
 811aa48:	461a      	mov	r2, r3
 811aa4a:	460b      	mov	r3, r1
 811aa4c:	71fb      	strb	r3, [r7, #7]
 811aa4e:	4613      	mov	r3, r2
 811aa50:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 811aa52:	2300      	movs	r3, #0
 811aa54:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 811aa56:	68bb      	ldr	r3, [r7, #8]
 811aa58:	2b00      	cmp	r3, #0
 811aa5a:	d106      	bne.n	811aa6a <tcp_output_fill_options+0x2e>
 811aa5c:	4b12      	ldr	r3, [pc, #72]	@ (811aaa8 <tcp_output_fill_options+0x6c>)
 811aa5e:	f240 7256 	movw	r2, #1878	@ 0x756
 811aa62:	4912      	ldr	r1, [pc, #72]	@ (811aaac <tcp_output_fill_options+0x70>)
 811aa64:	4812      	ldr	r0, [pc, #72]	@ (811aab0 <tcp_output_fill_options+0x74>)
 811aa66:	f001 f9d9 	bl	811be1c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 811aa6a:	68bb      	ldr	r3, [r7, #8]
 811aa6c:	685b      	ldr	r3, [r3, #4]
 811aa6e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 811aa70:	69bb      	ldr	r3, [r7, #24]
 811aa72:	3314      	adds	r3, #20
 811aa74:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 811aa76:	8bfb      	ldrh	r3, [r7, #30]
 811aa78:	009b      	lsls	r3, r3, #2
 811aa7a:	461a      	mov	r2, r3
 811aa7c:	79fb      	ldrb	r3, [r7, #7]
 811aa7e:	009b      	lsls	r3, r3, #2
 811aa80:	f003 0304 	and.w	r3, r3, #4
 811aa84:	4413      	add	r3, r2
 811aa86:	3314      	adds	r3, #20
 811aa88:	69ba      	ldr	r2, [r7, #24]
 811aa8a:	4413      	add	r3, r2
 811aa8c:	697a      	ldr	r2, [r7, #20]
 811aa8e:	429a      	cmp	r2, r3
 811aa90:	d006      	beq.n	811aaa0 <tcp_output_fill_options+0x64>
 811aa92:	4b05      	ldr	r3, [pc, #20]	@ (811aaa8 <tcp_output_fill_options+0x6c>)
 811aa94:	f240 7275 	movw	r2, #1909	@ 0x775
 811aa98:	4906      	ldr	r1, [pc, #24]	@ (811aab4 <tcp_output_fill_options+0x78>)
 811aa9a:	4805      	ldr	r0, [pc, #20]	@ (811aab0 <tcp_output_fill_options+0x74>)
 811aa9c:	f001 f9be 	bl	811be1c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 811aaa0:	bf00      	nop
 811aaa2:	3720      	adds	r7, #32
 811aaa4:	46bd      	mov	sp, r7
 811aaa6:	bd80      	pop	{r7, pc}
 811aaa8:	0811ed18 	.word	0x0811ed18
 811aaac:	0811f488 	.word	0x0811f488
 811aab0:	0811edac 	.word	0x0811edac
 811aab4:	0811f380 	.word	0x0811f380

0811aab8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 811aab8:	b580      	push	{r7, lr}
 811aaba:	b08a      	sub	sp, #40	@ 0x28
 811aabc:	af04      	add	r7, sp, #16
 811aabe:	60f8      	str	r0, [r7, #12]
 811aac0:	60b9      	str	r1, [r7, #8]
 811aac2:	607a      	str	r2, [r7, #4]
 811aac4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 811aac6:	68bb      	ldr	r3, [r7, #8]
 811aac8:	2b00      	cmp	r3, #0
 811aaca:	d106      	bne.n	811aada <tcp_output_control_segment+0x22>
 811aacc:	4b1c      	ldr	r3, [pc, #112]	@ (811ab40 <tcp_output_control_segment+0x88>)
 811aace:	f240 7287 	movw	r2, #1927	@ 0x787
 811aad2:	491c      	ldr	r1, [pc, #112]	@ (811ab44 <tcp_output_control_segment+0x8c>)
 811aad4:	481c      	ldr	r0, [pc, #112]	@ (811ab48 <tcp_output_control_segment+0x90>)
 811aad6:	f001 f9a1 	bl	811be1c <iprintf>

  netif = tcp_route(pcb, src, dst);
 811aada:	683a      	ldr	r2, [r7, #0]
 811aadc:	6879      	ldr	r1, [r7, #4]
 811aade:	68f8      	ldr	r0, [r7, #12]
 811aae0:	f7fe faea 	bl	81190b8 <tcp_route>
 811aae4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 811aae6:	693b      	ldr	r3, [r7, #16]
 811aae8:	2b00      	cmp	r3, #0
 811aaea:	d102      	bne.n	811aaf2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 811aaec:	23fc      	movs	r3, #252	@ 0xfc
 811aaee:	75fb      	strb	r3, [r7, #23]
 811aaf0:	e01c      	b.n	811ab2c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 811aaf2:	68fb      	ldr	r3, [r7, #12]
 811aaf4:	2b00      	cmp	r3, #0
 811aaf6:	d006      	beq.n	811ab06 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 811aaf8:	68fb      	ldr	r3, [r7, #12]
 811aafa:	7adb      	ldrb	r3, [r3, #11]
 811aafc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 811aafe:	68fb      	ldr	r3, [r7, #12]
 811ab00:	7a9b      	ldrb	r3, [r3, #10]
 811ab02:	757b      	strb	r3, [r7, #21]
 811ab04:	e003      	b.n	811ab0e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 811ab06:	23ff      	movs	r3, #255	@ 0xff
 811ab08:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 811ab0a:	2300      	movs	r3, #0
 811ab0c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 811ab0e:	7dba      	ldrb	r2, [r7, #22]
 811ab10:	693b      	ldr	r3, [r7, #16]
 811ab12:	9302      	str	r3, [sp, #8]
 811ab14:	2306      	movs	r3, #6
 811ab16:	9301      	str	r3, [sp, #4]
 811ab18:	7d7b      	ldrb	r3, [r7, #21]
 811ab1a:	9300      	str	r3, [sp, #0]
 811ab1c:	4613      	mov	r3, r2
 811ab1e:	683a      	ldr	r2, [r7, #0]
 811ab20:	6879      	ldr	r1, [r7, #4]
 811ab22:	68b8      	ldr	r0, [r7, #8]
 811ab24:	f7f7 fbc8 	bl	81122b8 <ip4_output_if>
 811ab28:	4603      	mov	r3, r0
 811ab2a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 811ab2c:	68b8      	ldr	r0, [r7, #8]
 811ab2e:	f7f9 feb3 	bl	8114898 <pbuf_free>
  return err;
 811ab32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 811ab36:	4618      	mov	r0, r3
 811ab38:	3718      	adds	r7, #24
 811ab3a:	46bd      	mov	sp, r7
 811ab3c:	bd80      	pop	{r7, pc}
 811ab3e:	bf00      	nop
 811ab40:	0811ed18 	.word	0x0811ed18
 811ab44:	0811f4b0 	.word	0x0811f4b0
 811ab48:	0811edac 	.word	0x0811edac

0811ab4c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 811ab4c:	b590      	push	{r4, r7, lr}
 811ab4e:	b08b      	sub	sp, #44	@ 0x2c
 811ab50:	af04      	add	r7, sp, #16
 811ab52:	60f8      	str	r0, [r7, #12]
 811ab54:	60b9      	str	r1, [r7, #8]
 811ab56:	607a      	str	r2, [r7, #4]
 811ab58:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 811ab5a:	683b      	ldr	r3, [r7, #0]
 811ab5c:	2b00      	cmp	r3, #0
 811ab5e:	d106      	bne.n	811ab6e <tcp_rst+0x22>
 811ab60:	4b1f      	ldr	r3, [pc, #124]	@ (811abe0 <tcp_rst+0x94>)
 811ab62:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 811ab66:	491f      	ldr	r1, [pc, #124]	@ (811abe4 <tcp_rst+0x98>)
 811ab68:	481f      	ldr	r0, [pc, #124]	@ (811abe8 <tcp_rst+0x9c>)
 811ab6a:	f001 f957 	bl	811be1c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 811ab6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ab70:	2b00      	cmp	r3, #0
 811ab72:	d106      	bne.n	811ab82 <tcp_rst+0x36>
 811ab74:	4b1a      	ldr	r3, [pc, #104]	@ (811abe0 <tcp_rst+0x94>)
 811ab76:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 811ab7a:	491c      	ldr	r1, [pc, #112]	@ (811abec <tcp_rst+0xa0>)
 811ab7c:	481a      	ldr	r0, [pc, #104]	@ (811abe8 <tcp_rst+0x9c>)
 811ab7e:	f001 f94d 	bl	811be1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811ab82:	2300      	movs	r3, #0
 811ab84:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 811ab86:	f24d 0316 	movw	r3, #53270	@ 0xd016
 811ab8a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 811ab8c:	7dfb      	ldrb	r3, [r7, #23]
 811ab8e:	b29c      	uxth	r4, r3
 811ab90:	68b8      	ldr	r0, [r7, #8]
 811ab92:	f7f5 ff10 	bl	81109b6 <lwip_htonl>
 811ab96:	4602      	mov	r2, r0
 811ab98:	8abb      	ldrh	r3, [r7, #20]
 811ab9a:	9303      	str	r3, [sp, #12]
 811ab9c:	2314      	movs	r3, #20
 811ab9e:	9302      	str	r3, [sp, #8]
 811aba0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 811aba2:	9301      	str	r3, [sp, #4]
 811aba4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811aba6:	9300      	str	r3, [sp, #0]
 811aba8:	4613      	mov	r3, r2
 811abaa:	2200      	movs	r2, #0
 811abac:	4621      	mov	r1, r4
 811abae:	6878      	ldr	r0, [r7, #4]
 811abb0:	f7ff fe94 	bl	811a8dc <tcp_output_alloc_header_common>
 811abb4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 811abb6:	693b      	ldr	r3, [r7, #16]
 811abb8:	2b00      	cmp	r3, #0
 811abba:	d00c      	beq.n	811abd6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811abbc:	7dfb      	ldrb	r3, [r7, #23]
 811abbe:	2200      	movs	r2, #0
 811abc0:	6939      	ldr	r1, [r7, #16]
 811abc2:	68f8      	ldr	r0, [r7, #12]
 811abc4:	f7ff ff3a 	bl	811aa3c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 811abc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811abca:	683a      	ldr	r2, [r7, #0]
 811abcc:	6939      	ldr	r1, [r7, #16]
 811abce:	68f8      	ldr	r0, [r7, #12]
 811abd0:	f7ff ff72 	bl	811aab8 <tcp_output_control_segment>
 811abd4:	e000      	b.n	811abd8 <tcp_rst+0x8c>
    return;
 811abd6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 811abd8:	371c      	adds	r7, #28
 811abda:	46bd      	mov	sp, r7
 811abdc:	bd90      	pop	{r4, r7, pc}
 811abde:	bf00      	nop
 811abe0:	0811ed18 	.word	0x0811ed18
 811abe4:	0811f4dc 	.word	0x0811f4dc
 811abe8:	0811edac 	.word	0x0811edac
 811abec:	0811f4f8 	.word	0x0811f4f8

0811abf0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 811abf0:	b590      	push	{r4, r7, lr}
 811abf2:	b087      	sub	sp, #28
 811abf4:	af00      	add	r7, sp, #0
 811abf6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 811abf8:	2300      	movs	r3, #0
 811abfa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 811abfc:	2300      	movs	r3, #0
 811abfe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 811ac00:	687b      	ldr	r3, [r7, #4]
 811ac02:	2b00      	cmp	r3, #0
 811ac04:	d106      	bne.n	811ac14 <tcp_send_empty_ack+0x24>
 811ac06:	4b28      	ldr	r3, [pc, #160]	@ (811aca8 <tcp_send_empty_ack+0xb8>)
 811ac08:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 811ac0c:	4927      	ldr	r1, [pc, #156]	@ (811acac <tcp_send_empty_ack+0xbc>)
 811ac0e:	4828      	ldr	r0, [pc, #160]	@ (811acb0 <tcp_send_empty_ack+0xc0>)
 811ac10:	f001 f904 	bl	811be1c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811ac14:	7dfb      	ldrb	r3, [r7, #23]
 811ac16:	009b      	lsls	r3, r3, #2
 811ac18:	b2db      	uxtb	r3, r3
 811ac1a:	f003 0304 	and.w	r3, r3, #4
 811ac1e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 811ac20:	7d7b      	ldrb	r3, [r7, #21]
 811ac22:	b29c      	uxth	r4, r3
 811ac24:	687b      	ldr	r3, [r7, #4]
 811ac26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811ac28:	4618      	mov	r0, r3
 811ac2a:	f7f5 fec4 	bl	81109b6 <lwip_htonl>
 811ac2e:	4603      	mov	r3, r0
 811ac30:	2200      	movs	r2, #0
 811ac32:	4621      	mov	r1, r4
 811ac34:	6878      	ldr	r0, [r7, #4]
 811ac36:	f7ff fec3 	bl	811a9c0 <tcp_output_alloc_header>
 811ac3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811ac3c:	693b      	ldr	r3, [r7, #16]
 811ac3e:	2b00      	cmp	r3, #0
 811ac40:	d109      	bne.n	811ac56 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811ac42:	687b      	ldr	r3, [r7, #4]
 811ac44:	8b5b      	ldrh	r3, [r3, #26]
 811ac46:	f043 0303 	orr.w	r3, r3, #3
 811ac4a:	b29a      	uxth	r2, r3
 811ac4c:	687b      	ldr	r3, [r7, #4]
 811ac4e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 811ac50:	f06f 0301 	mvn.w	r3, #1
 811ac54:	e023      	b.n	811ac9e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 811ac56:	7dbb      	ldrb	r3, [r7, #22]
 811ac58:	7dfa      	ldrb	r2, [r7, #23]
 811ac5a:	6939      	ldr	r1, [r7, #16]
 811ac5c:	6878      	ldr	r0, [r7, #4]
 811ac5e:	f7ff feed 	bl	811aa3c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811ac62:	687a      	ldr	r2, [r7, #4]
 811ac64:	687b      	ldr	r3, [r7, #4]
 811ac66:	3304      	adds	r3, #4
 811ac68:	6939      	ldr	r1, [r7, #16]
 811ac6a:	6878      	ldr	r0, [r7, #4]
 811ac6c:	f7ff ff24 	bl	811aab8 <tcp_output_control_segment>
 811ac70:	4603      	mov	r3, r0
 811ac72:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 811ac74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ac78:	2b00      	cmp	r3, #0
 811ac7a:	d007      	beq.n	811ac8c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811ac7c:	687b      	ldr	r3, [r7, #4]
 811ac7e:	8b5b      	ldrh	r3, [r3, #26]
 811ac80:	f043 0303 	orr.w	r3, r3, #3
 811ac84:	b29a      	uxth	r2, r3
 811ac86:	687b      	ldr	r3, [r7, #4]
 811ac88:	835a      	strh	r2, [r3, #26]
 811ac8a:	e006      	b.n	811ac9a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811ac8c:	687b      	ldr	r3, [r7, #4]
 811ac8e:	8b5b      	ldrh	r3, [r3, #26]
 811ac90:	f023 0303 	bic.w	r3, r3, #3
 811ac94:	b29a      	uxth	r2, r3
 811ac96:	687b      	ldr	r3, [r7, #4]
 811ac98:	835a      	strh	r2, [r3, #26]
  }

  return err;
 811ac9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811ac9e:	4618      	mov	r0, r3
 811aca0:	371c      	adds	r7, #28
 811aca2:	46bd      	mov	sp, r7
 811aca4:	bd90      	pop	{r4, r7, pc}
 811aca6:	bf00      	nop
 811aca8:	0811ed18 	.word	0x0811ed18
 811acac:	0811f514 	.word	0x0811f514
 811acb0:	0811edac 	.word	0x0811edac

0811acb4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 811acb4:	b590      	push	{r4, r7, lr}
 811acb6:	b087      	sub	sp, #28
 811acb8:	af00      	add	r7, sp, #0
 811acba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811acbc:	2300      	movs	r3, #0
 811acbe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 811acc0:	687b      	ldr	r3, [r7, #4]
 811acc2:	2b00      	cmp	r3, #0
 811acc4:	d106      	bne.n	811acd4 <tcp_keepalive+0x20>
 811acc6:	4b18      	ldr	r3, [pc, #96]	@ (811ad28 <tcp_keepalive+0x74>)
 811acc8:	f640 0224 	movw	r2, #2084	@ 0x824
 811accc:	4917      	ldr	r1, [pc, #92]	@ (811ad2c <tcp_keepalive+0x78>)
 811acce:	4818      	ldr	r0, [pc, #96]	@ (811ad30 <tcp_keepalive+0x7c>)
 811acd0:	f001 f8a4 	bl	811be1c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 811acd4:	7dfb      	ldrb	r3, [r7, #23]
 811acd6:	b29c      	uxth	r4, r3
 811acd8:	687b      	ldr	r3, [r7, #4]
 811acda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811acdc:	3b01      	subs	r3, #1
 811acde:	4618      	mov	r0, r3
 811ace0:	f7f5 fe69 	bl	81109b6 <lwip_htonl>
 811ace4:	4603      	mov	r3, r0
 811ace6:	2200      	movs	r2, #0
 811ace8:	4621      	mov	r1, r4
 811acea:	6878      	ldr	r0, [r7, #4]
 811acec:	f7ff fe68 	bl	811a9c0 <tcp_output_alloc_header>
 811acf0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811acf2:	693b      	ldr	r3, [r7, #16]
 811acf4:	2b00      	cmp	r3, #0
 811acf6:	d102      	bne.n	811acfe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 811acf8:	f04f 33ff 	mov.w	r3, #4294967295
 811acfc:	e010      	b.n	811ad20 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811acfe:	7dfb      	ldrb	r3, [r7, #23]
 811ad00:	2200      	movs	r2, #0
 811ad02:	6939      	ldr	r1, [r7, #16]
 811ad04:	6878      	ldr	r0, [r7, #4]
 811ad06:	f7ff fe99 	bl	811aa3c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811ad0a:	687a      	ldr	r2, [r7, #4]
 811ad0c:	687b      	ldr	r3, [r7, #4]
 811ad0e:	3304      	adds	r3, #4
 811ad10:	6939      	ldr	r1, [r7, #16]
 811ad12:	6878      	ldr	r0, [r7, #4]
 811ad14:	f7ff fed0 	bl	811aab8 <tcp_output_control_segment>
 811ad18:	4603      	mov	r3, r0
 811ad1a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 811ad1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811ad20:	4618      	mov	r0, r3
 811ad22:	371c      	adds	r7, #28
 811ad24:	46bd      	mov	sp, r7
 811ad26:	bd90      	pop	{r4, r7, pc}
 811ad28:	0811ed18 	.word	0x0811ed18
 811ad2c:	0811f534 	.word	0x0811f534
 811ad30:	0811edac 	.word	0x0811edac

0811ad34 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 811ad34:	b590      	push	{r4, r7, lr}
 811ad36:	b08b      	sub	sp, #44	@ 0x2c
 811ad38:	af00      	add	r7, sp, #0
 811ad3a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811ad3c:	2300      	movs	r3, #0
 811ad3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 811ad42:	687b      	ldr	r3, [r7, #4]
 811ad44:	2b00      	cmp	r3, #0
 811ad46:	d106      	bne.n	811ad56 <tcp_zero_window_probe+0x22>
 811ad48:	4b4c      	ldr	r3, [pc, #304]	@ (811ae7c <tcp_zero_window_probe+0x148>)
 811ad4a:	f640 024f 	movw	r2, #2127	@ 0x84f
 811ad4e:	494c      	ldr	r1, [pc, #304]	@ (811ae80 <tcp_zero_window_probe+0x14c>)
 811ad50:	484c      	ldr	r0, [pc, #304]	@ (811ae84 <tcp_zero_window_probe+0x150>)
 811ad52:	f001 f863 	bl	811be1c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 811ad56:	687b      	ldr	r3, [r7, #4]
 811ad58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ad5a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 811ad5c:	6a3b      	ldr	r3, [r7, #32]
 811ad5e:	2b00      	cmp	r3, #0
 811ad60:	d101      	bne.n	811ad66 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 811ad62:	2300      	movs	r3, #0
 811ad64:	e086      	b.n	811ae74 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 811ad66:	687b      	ldr	r3, [r7, #4]
 811ad68:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 811ad6c:	2bff      	cmp	r3, #255	@ 0xff
 811ad6e:	d007      	beq.n	811ad80 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 811ad70:	687b      	ldr	r3, [r7, #4]
 811ad72:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 811ad76:	3301      	adds	r3, #1
 811ad78:	b2da      	uxtb	r2, r3
 811ad7a:	687b      	ldr	r3, [r7, #4]
 811ad7c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 811ad80:	6a3b      	ldr	r3, [r7, #32]
 811ad82:	68db      	ldr	r3, [r3, #12]
 811ad84:	899b      	ldrh	r3, [r3, #12]
 811ad86:	b29b      	uxth	r3, r3
 811ad88:	4618      	mov	r0, r3
 811ad8a:	f7f5 fdff 	bl	811098c <lwip_htons>
 811ad8e:	4603      	mov	r3, r0
 811ad90:	b2db      	uxtb	r3, r3
 811ad92:	f003 0301 	and.w	r3, r3, #1
 811ad96:	2b00      	cmp	r3, #0
 811ad98:	d005      	beq.n	811ada6 <tcp_zero_window_probe+0x72>
 811ad9a:	6a3b      	ldr	r3, [r7, #32]
 811ad9c:	891b      	ldrh	r3, [r3, #8]
 811ad9e:	2b00      	cmp	r3, #0
 811ada0:	d101      	bne.n	811ada6 <tcp_zero_window_probe+0x72>
 811ada2:	2301      	movs	r3, #1
 811ada4:	e000      	b.n	811ada8 <tcp_zero_window_probe+0x74>
 811ada6:	2300      	movs	r3, #0
 811ada8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 811adaa:	7ffb      	ldrb	r3, [r7, #31]
 811adac:	2b00      	cmp	r3, #0
 811adae:	bf0c      	ite	eq
 811adb0:	2301      	moveq	r3, #1
 811adb2:	2300      	movne	r3, #0
 811adb4:	b2db      	uxtb	r3, r3
 811adb6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 811adb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811adbc:	b299      	uxth	r1, r3
 811adbe:	6a3b      	ldr	r3, [r7, #32]
 811adc0:	68db      	ldr	r3, [r3, #12]
 811adc2:	685b      	ldr	r3, [r3, #4]
 811adc4:	8bba      	ldrh	r2, [r7, #28]
 811adc6:	6878      	ldr	r0, [r7, #4]
 811adc8:	f7ff fdfa 	bl	811a9c0 <tcp_output_alloc_header>
 811adcc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 811adce:	69bb      	ldr	r3, [r7, #24]
 811add0:	2b00      	cmp	r3, #0
 811add2:	d102      	bne.n	811adda <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 811add4:	f04f 33ff 	mov.w	r3, #4294967295
 811add8:	e04c      	b.n	811ae74 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 811adda:	69bb      	ldr	r3, [r7, #24]
 811addc:	685b      	ldr	r3, [r3, #4]
 811adde:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 811ade0:	7ffb      	ldrb	r3, [r7, #31]
 811ade2:	2b00      	cmp	r3, #0
 811ade4:	d011      	beq.n	811ae0a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 811ade6:	697b      	ldr	r3, [r7, #20]
 811ade8:	899b      	ldrh	r3, [r3, #12]
 811adea:	b29b      	uxth	r3, r3
 811adec:	b21b      	sxth	r3, r3
 811adee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811adf2:	b21c      	sxth	r4, r3
 811adf4:	2011      	movs	r0, #17
 811adf6:	f7f5 fdc9 	bl	811098c <lwip_htons>
 811adfa:	4603      	mov	r3, r0
 811adfc:	b21b      	sxth	r3, r3
 811adfe:	4323      	orrs	r3, r4
 811ae00:	b21b      	sxth	r3, r3
 811ae02:	b29a      	uxth	r2, r3
 811ae04:	697b      	ldr	r3, [r7, #20]
 811ae06:	819a      	strh	r2, [r3, #12]
 811ae08:	e010      	b.n	811ae2c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 811ae0a:	69bb      	ldr	r3, [r7, #24]
 811ae0c:	685b      	ldr	r3, [r3, #4]
 811ae0e:	3314      	adds	r3, #20
 811ae10:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 811ae12:	6a3b      	ldr	r3, [r7, #32]
 811ae14:	6858      	ldr	r0, [r3, #4]
 811ae16:	6a3b      	ldr	r3, [r7, #32]
 811ae18:	685b      	ldr	r3, [r3, #4]
 811ae1a:	891a      	ldrh	r2, [r3, #8]
 811ae1c:	6a3b      	ldr	r3, [r7, #32]
 811ae1e:	891b      	ldrh	r3, [r3, #8]
 811ae20:	1ad3      	subs	r3, r2, r3
 811ae22:	b29b      	uxth	r3, r3
 811ae24:	2201      	movs	r2, #1
 811ae26:	6939      	ldr	r1, [r7, #16]
 811ae28:	f7f9 ff2c 	bl	8114c84 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 811ae2c:	6a3b      	ldr	r3, [r7, #32]
 811ae2e:	68db      	ldr	r3, [r3, #12]
 811ae30:	685b      	ldr	r3, [r3, #4]
 811ae32:	4618      	mov	r0, r3
 811ae34:	f7f5 fdbf 	bl	81109b6 <lwip_htonl>
 811ae38:	4603      	mov	r3, r0
 811ae3a:	3301      	adds	r3, #1
 811ae3c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 811ae3e:	687b      	ldr	r3, [r7, #4]
 811ae40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811ae42:	68fb      	ldr	r3, [r7, #12]
 811ae44:	1ad3      	subs	r3, r2, r3
 811ae46:	2b00      	cmp	r3, #0
 811ae48:	da02      	bge.n	811ae50 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 811ae4a:	687b      	ldr	r3, [r7, #4]
 811ae4c:	68fa      	ldr	r2, [r7, #12]
 811ae4e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811ae50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811ae54:	2200      	movs	r2, #0
 811ae56:	69b9      	ldr	r1, [r7, #24]
 811ae58:	6878      	ldr	r0, [r7, #4]
 811ae5a:	f7ff fdef 	bl	811aa3c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811ae5e:	687a      	ldr	r2, [r7, #4]
 811ae60:	687b      	ldr	r3, [r7, #4]
 811ae62:	3304      	adds	r3, #4
 811ae64:	69b9      	ldr	r1, [r7, #24]
 811ae66:	6878      	ldr	r0, [r7, #4]
 811ae68:	f7ff fe26 	bl	811aab8 <tcp_output_control_segment>
 811ae6c:	4603      	mov	r3, r0
 811ae6e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 811ae70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 811ae74:	4618      	mov	r0, r3
 811ae76:	372c      	adds	r7, #44	@ 0x2c
 811ae78:	46bd      	mov	sp, r7
 811ae7a:	bd90      	pop	{r4, r7, pc}
 811ae7c:	0811ed18 	.word	0x0811ed18
 811ae80:	0811f550 	.word	0x0811f550
 811ae84:	0811edac 	.word	0x0811edac

0811ae88 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 811ae88:	b580      	push	{r7, lr}
 811ae8a:	b084      	sub	sp, #16
 811ae8c:	af00      	add	r7, sp, #0
 811ae8e:	6078      	str	r0, [r7, #4]
 811ae90:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 811ae92:	f000 fb01 	bl	811b498 <sys_timeouts_sleeptime>
 811ae96:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 811ae98:	68fb      	ldr	r3, [r7, #12]
 811ae9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811ae9e:	d10b      	bne.n	811aeb8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 811aea0:	4813      	ldr	r0, [pc, #76]	@ (811aef0 <tcpip_timeouts_mbox_fetch+0x68>)
 811aea2:	f7fa f83a 	bl	8114f1a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 811aea6:	2200      	movs	r2, #0
 811aea8:	6839      	ldr	r1, [r7, #0]
 811aeaa:	6878      	ldr	r0, [r7, #4]
 811aeac:	f7f9 ffc2 	bl	8114e34 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 811aeb0:	480f      	ldr	r0, [pc, #60]	@ (811aef0 <tcpip_timeouts_mbox_fetch+0x68>)
 811aeb2:	f7fa f823 	bl	8114efc <sys_mutex_lock>
    return;
 811aeb6:	e018      	b.n	811aeea <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 811aeb8:	68fb      	ldr	r3, [r7, #12]
 811aeba:	2b00      	cmp	r3, #0
 811aebc:	d102      	bne.n	811aec4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 811aebe:	f000 fab1 	bl	811b424 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 811aec2:	e7e6      	b.n	811ae92 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 811aec4:	480a      	ldr	r0, [pc, #40]	@ (811aef0 <tcpip_timeouts_mbox_fetch+0x68>)
 811aec6:	f7fa f828 	bl	8114f1a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 811aeca:	68fa      	ldr	r2, [r7, #12]
 811aecc:	6839      	ldr	r1, [r7, #0]
 811aece:	6878      	ldr	r0, [r7, #4]
 811aed0:	f7f9 ffb0 	bl	8114e34 <sys_arch_mbox_fetch>
 811aed4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 811aed6:	4806      	ldr	r0, [pc, #24]	@ (811aef0 <tcpip_timeouts_mbox_fetch+0x68>)
 811aed8:	f7fa f810 	bl	8114efc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 811aedc:	68bb      	ldr	r3, [r7, #8]
 811aede:	f1b3 3fff 	cmp.w	r3, #4294967295
 811aee2:	d102      	bne.n	811aeea <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 811aee4:	f000 fa9e 	bl	811b424 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 811aee8:	e7d3      	b.n	811ae92 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 811aeea:	3710      	adds	r7, #16
 811aeec:	46bd      	mov	sp, r7
 811aeee:	bd80      	pop	{r7, pc}
 811aef0:	10011d70 	.word	0x10011d70

0811aef4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 811aef4:	b580      	push	{r7, lr}
 811aef6:	b084      	sub	sp, #16
 811aef8:	af00      	add	r7, sp, #0
 811aefa:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 811aefc:	4810      	ldr	r0, [pc, #64]	@ (811af40 <tcpip_thread+0x4c>)
 811aefe:	f7f9 fffd 	bl	8114efc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 811af02:	4b10      	ldr	r3, [pc, #64]	@ (811af44 <tcpip_thread+0x50>)
 811af04:	681b      	ldr	r3, [r3, #0]
 811af06:	2b00      	cmp	r3, #0
 811af08:	d005      	beq.n	811af16 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 811af0a:	4b0e      	ldr	r3, [pc, #56]	@ (811af44 <tcpip_thread+0x50>)
 811af0c:	681b      	ldr	r3, [r3, #0]
 811af0e:	4a0e      	ldr	r2, [pc, #56]	@ (811af48 <tcpip_thread+0x54>)
 811af10:	6812      	ldr	r2, [r2, #0]
 811af12:	4610      	mov	r0, r2
 811af14:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 811af16:	f107 030c 	add.w	r3, r7, #12
 811af1a:	4619      	mov	r1, r3
 811af1c:	480b      	ldr	r0, [pc, #44]	@ (811af4c <tcpip_thread+0x58>)
 811af1e:	f7ff ffb3 	bl	811ae88 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 811af22:	68fb      	ldr	r3, [r7, #12]
 811af24:	2b00      	cmp	r3, #0
 811af26:	d106      	bne.n	811af36 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 811af28:	4b09      	ldr	r3, [pc, #36]	@ (811af50 <tcpip_thread+0x5c>)
 811af2a:	2291      	movs	r2, #145	@ 0x91
 811af2c:	4909      	ldr	r1, [pc, #36]	@ (811af54 <tcpip_thread+0x60>)
 811af2e:	480a      	ldr	r0, [pc, #40]	@ (811af58 <tcpip_thread+0x64>)
 811af30:	f000 ff74 	bl	811be1c <iprintf>
      continue;
 811af34:	e003      	b.n	811af3e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 811af36:	68fb      	ldr	r3, [r7, #12]
 811af38:	4618      	mov	r0, r3
 811af3a:	f000 f80f 	bl	811af5c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 811af3e:	e7ea      	b.n	811af16 <tcpip_thread+0x22>
 811af40:	10011d70 	.word	0x10011d70
 811af44:	10011d64 	.word	0x10011d64
 811af48:	10011d68 	.word	0x10011d68
 811af4c:	10011d6c 	.word	0x10011d6c
 811af50:	0811f574 	.word	0x0811f574
 811af54:	0811f5e4 	.word	0x0811f5e4
 811af58:	0811f604 	.word	0x0811f604

0811af5c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 811af5c:	b580      	push	{r7, lr}
 811af5e:	b082      	sub	sp, #8
 811af60:	af00      	add	r7, sp, #0
 811af62:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 811af64:	687b      	ldr	r3, [r7, #4]
 811af66:	781b      	ldrb	r3, [r3, #0]
 811af68:	2b02      	cmp	r3, #2
 811af6a:	d026      	beq.n	811afba <tcpip_thread_handle_msg+0x5e>
 811af6c:	2b02      	cmp	r3, #2
 811af6e:	dc2b      	bgt.n	811afc8 <tcpip_thread_handle_msg+0x6c>
 811af70:	2b00      	cmp	r3, #0
 811af72:	d002      	beq.n	811af7a <tcpip_thread_handle_msg+0x1e>
 811af74:	2b01      	cmp	r3, #1
 811af76:	d015      	beq.n	811afa4 <tcpip_thread_handle_msg+0x48>
 811af78:	e026      	b.n	811afc8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 811af7a:	687b      	ldr	r3, [r7, #4]
 811af7c:	68db      	ldr	r3, [r3, #12]
 811af7e:	687a      	ldr	r2, [r7, #4]
 811af80:	6850      	ldr	r0, [r2, #4]
 811af82:	687a      	ldr	r2, [r7, #4]
 811af84:	6892      	ldr	r2, [r2, #8]
 811af86:	4611      	mov	r1, r2
 811af88:	4798      	blx	r3
 811af8a:	4603      	mov	r3, r0
 811af8c:	2b00      	cmp	r3, #0
 811af8e:	d004      	beq.n	811af9a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 811af90:	687b      	ldr	r3, [r7, #4]
 811af92:	685b      	ldr	r3, [r3, #4]
 811af94:	4618      	mov	r0, r3
 811af96:	f7f9 fc7f 	bl	8114898 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 811af9a:	6879      	ldr	r1, [r7, #4]
 811af9c:	2009      	movs	r0, #9
 811af9e:	f7f8 fdd7 	bl	8113b50 <memp_free>
      break;
 811afa2:	e018      	b.n	811afd6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 811afa4:	687b      	ldr	r3, [r7, #4]
 811afa6:	685b      	ldr	r3, [r3, #4]
 811afa8:	687a      	ldr	r2, [r7, #4]
 811afaa:	6892      	ldr	r2, [r2, #8]
 811afac:	4610      	mov	r0, r2
 811afae:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 811afb0:	6879      	ldr	r1, [r7, #4]
 811afb2:	2008      	movs	r0, #8
 811afb4:	f7f8 fdcc 	bl	8113b50 <memp_free>
      break;
 811afb8:	e00d      	b.n	811afd6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 811afba:	687b      	ldr	r3, [r7, #4]
 811afbc:	685b      	ldr	r3, [r3, #4]
 811afbe:	687a      	ldr	r2, [r7, #4]
 811afc0:	6892      	ldr	r2, [r2, #8]
 811afc2:	4610      	mov	r0, r2
 811afc4:	4798      	blx	r3
      break;
 811afc6:	e006      	b.n	811afd6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 811afc8:	4b05      	ldr	r3, [pc, #20]	@ (811afe0 <tcpip_thread_handle_msg+0x84>)
 811afca:	22cf      	movs	r2, #207	@ 0xcf
 811afcc:	4905      	ldr	r1, [pc, #20]	@ (811afe4 <tcpip_thread_handle_msg+0x88>)
 811afce:	4806      	ldr	r0, [pc, #24]	@ (811afe8 <tcpip_thread_handle_msg+0x8c>)
 811afd0:	f000 ff24 	bl	811be1c <iprintf>
      break;
 811afd4:	bf00      	nop
  }
}
 811afd6:	bf00      	nop
 811afd8:	3708      	adds	r7, #8
 811afda:	46bd      	mov	sp, r7
 811afdc:	bd80      	pop	{r7, pc}
 811afde:	bf00      	nop
 811afe0:	0811f574 	.word	0x0811f574
 811afe4:	0811f5e4 	.word	0x0811f5e4
 811afe8:	0811f604 	.word	0x0811f604

0811afec <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 811afec:	b580      	push	{r7, lr}
 811afee:	b086      	sub	sp, #24
 811aff0:	af00      	add	r7, sp, #0
 811aff2:	60f8      	str	r0, [r7, #12]
 811aff4:	60b9      	str	r1, [r7, #8]
 811aff6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 811aff8:	481a      	ldr	r0, [pc, #104]	@ (811b064 <tcpip_inpkt+0x78>)
 811affa:	f7f9 ff4c 	bl	8114e96 <sys_mbox_valid>
 811affe:	4603      	mov	r3, r0
 811b000:	2b00      	cmp	r3, #0
 811b002:	d105      	bne.n	811b010 <tcpip_inpkt+0x24>
 811b004:	4b18      	ldr	r3, [pc, #96]	@ (811b068 <tcpip_inpkt+0x7c>)
 811b006:	22fc      	movs	r2, #252	@ 0xfc
 811b008:	4918      	ldr	r1, [pc, #96]	@ (811b06c <tcpip_inpkt+0x80>)
 811b00a:	4819      	ldr	r0, [pc, #100]	@ (811b070 <tcpip_inpkt+0x84>)
 811b00c:	f000 ff06 	bl	811be1c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 811b010:	2009      	movs	r0, #9
 811b012:	f7f8 fd27 	bl	8113a64 <memp_malloc>
 811b016:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 811b018:	697b      	ldr	r3, [r7, #20]
 811b01a:	2b00      	cmp	r3, #0
 811b01c:	d102      	bne.n	811b024 <tcpip_inpkt+0x38>
    return ERR_MEM;
 811b01e:	f04f 33ff 	mov.w	r3, #4294967295
 811b022:	e01a      	b.n	811b05a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 811b024:	697b      	ldr	r3, [r7, #20]
 811b026:	2200      	movs	r2, #0
 811b028:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 811b02a:	697b      	ldr	r3, [r7, #20]
 811b02c:	68fa      	ldr	r2, [r7, #12]
 811b02e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 811b030:	697b      	ldr	r3, [r7, #20]
 811b032:	68ba      	ldr	r2, [r7, #8]
 811b034:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 811b036:	697b      	ldr	r3, [r7, #20]
 811b038:	687a      	ldr	r2, [r7, #4]
 811b03a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 811b03c:	6979      	ldr	r1, [r7, #20]
 811b03e:	4809      	ldr	r0, [pc, #36]	@ (811b064 <tcpip_inpkt+0x78>)
 811b040:	f7f9 fede 	bl	8114e00 <sys_mbox_trypost>
 811b044:	4603      	mov	r3, r0
 811b046:	2b00      	cmp	r3, #0
 811b048:	d006      	beq.n	811b058 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 811b04a:	6979      	ldr	r1, [r7, #20]
 811b04c:	2009      	movs	r0, #9
 811b04e:	f7f8 fd7f 	bl	8113b50 <memp_free>
    return ERR_MEM;
 811b052:	f04f 33ff 	mov.w	r3, #4294967295
 811b056:	e000      	b.n	811b05a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 811b058:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 811b05a:	4618      	mov	r0, r3
 811b05c:	3718      	adds	r7, #24
 811b05e:	46bd      	mov	sp, r7
 811b060:	bd80      	pop	{r7, pc}
 811b062:	bf00      	nop
 811b064:	10011d6c 	.word	0x10011d6c
 811b068:	0811f574 	.word	0x0811f574
 811b06c:	0811f62c 	.word	0x0811f62c
 811b070:	0811f604 	.word	0x0811f604

0811b074 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 811b074:	b580      	push	{r7, lr}
 811b076:	b082      	sub	sp, #8
 811b078:	af00      	add	r7, sp, #0
 811b07a:	6078      	str	r0, [r7, #4]
 811b07c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 811b07e:	683b      	ldr	r3, [r7, #0]
 811b080:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b084:	f003 0318 	and.w	r3, r3, #24
 811b088:	2b00      	cmp	r3, #0
 811b08a:	d006      	beq.n	811b09a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 811b08c:	4a08      	ldr	r2, [pc, #32]	@ (811b0b0 <tcpip_input+0x3c>)
 811b08e:	6839      	ldr	r1, [r7, #0]
 811b090:	6878      	ldr	r0, [r7, #4]
 811b092:	f7ff ffab 	bl	811afec <tcpip_inpkt>
 811b096:	4603      	mov	r3, r0
 811b098:	e005      	b.n	811b0a6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 811b09a:	4a06      	ldr	r2, [pc, #24]	@ (811b0b4 <tcpip_input+0x40>)
 811b09c:	6839      	ldr	r1, [r7, #0]
 811b09e:	6878      	ldr	r0, [r7, #4]
 811b0a0:	f7ff ffa4 	bl	811afec <tcpip_inpkt>
 811b0a4:	4603      	mov	r3, r0
}
 811b0a6:	4618      	mov	r0, r3
 811b0a8:	3708      	adds	r7, #8
 811b0aa:	46bd      	mov	sp, r7
 811b0ac:	bd80      	pop	{r7, pc}
 811b0ae:	bf00      	nop
 811b0b0:	08111881 	.word	0x08111881
 811b0b4:	08112071 	.word	0x08112071

0811b0b8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 811b0b8:	b580      	push	{r7, lr}
 811b0ba:	b084      	sub	sp, #16
 811b0bc:	af00      	add	r7, sp, #0
 811b0be:	6078      	str	r0, [r7, #4]
 811b0c0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 811b0c2:	4819      	ldr	r0, [pc, #100]	@ (811b128 <tcpip_try_callback+0x70>)
 811b0c4:	f7f9 fee7 	bl	8114e96 <sys_mbox_valid>
 811b0c8:	4603      	mov	r3, r0
 811b0ca:	2b00      	cmp	r3, #0
 811b0cc:	d106      	bne.n	811b0dc <tcpip_try_callback+0x24>
 811b0ce:	4b17      	ldr	r3, [pc, #92]	@ (811b12c <tcpip_try_callback+0x74>)
 811b0d0:	f240 125d 	movw	r2, #349	@ 0x15d
 811b0d4:	4916      	ldr	r1, [pc, #88]	@ (811b130 <tcpip_try_callback+0x78>)
 811b0d6:	4817      	ldr	r0, [pc, #92]	@ (811b134 <tcpip_try_callback+0x7c>)
 811b0d8:	f000 fea0 	bl	811be1c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 811b0dc:	2008      	movs	r0, #8
 811b0de:	f7f8 fcc1 	bl	8113a64 <memp_malloc>
 811b0e2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 811b0e4:	68fb      	ldr	r3, [r7, #12]
 811b0e6:	2b00      	cmp	r3, #0
 811b0e8:	d102      	bne.n	811b0f0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 811b0ea:	f04f 33ff 	mov.w	r3, #4294967295
 811b0ee:	e017      	b.n	811b120 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 811b0f0:	68fb      	ldr	r3, [r7, #12]
 811b0f2:	2201      	movs	r2, #1
 811b0f4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 811b0f6:	68fb      	ldr	r3, [r7, #12]
 811b0f8:	687a      	ldr	r2, [r7, #4]
 811b0fa:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 811b0fc:	68fb      	ldr	r3, [r7, #12]
 811b0fe:	683a      	ldr	r2, [r7, #0]
 811b100:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 811b102:	68f9      	ldr	r1, [r7, #12]
 811b104:	4808      	ldr	r0, [pc, #32]	@ (811b128 <tcpip_try_callback+0x70>)
 811b106:	f7f9 fe7b 	bl	8114e00 <sys_mbox_trypost>
 811b10a:	4603      	mov	r3, r0
 811b10c:	2b00      	cmp	r3, #0
 811b10e:	d006      	beq.n	811b11e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 811b110:	68f9      	ldr	r1, [r7, #12]
 811b112:	2008      	movs	r0, #8
 811b114:	f7f8 fd1c 	bl	8113b50 <memp_free>
    return ERR_MEM;
 811b118:	f04f 33ff 	mov.w	r3, #4294967295
 811b11c:	e000      	b.n	811b120 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 811b11e:	2300      	movs	r3, #0
}
 811b120:	4618      	mov	r0, r3
 811b122:	3710      	adds	r7, #16
 811b124:	46bd      	mov	sp, r7
 811b126:	bd80      	pop	{r7, pc}
 811b128:	10011d6c 	.word	0x10011d6c
 811b12c:	0811f574 	.word	0x0811f574
 811b130:	0811f62c 	.word	0x0811f62c
 811b134:	0811f604 	.word	0x0811f604

0811b138 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 811b138:	b580      	push	{r7, lr}
 811b13a:	b084      	sub	sp, #16
 811b13c:	af02      	add	r7, sp, #8
 811b13e:	6078      	str	r0, [r7, #4]
 811b140:	6039      	str	r1, [r7, #0]
  lwip_init();
 811b142:	f7f6 fee3 	bl	8111f0c <lwip_init>

  tcpip_init_done = initfunc;
 811b146:	4a17      	ldr	r2, [pc, #92]	@ (811b1a4 <tcpip_init+0x6c>)
 811b148:	687b      	ldr	r3, [r7, #4]
 811b14a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 811b14c:	4a16      	ldr	r2, [pc, #88]	@ (811b1a8 <tcpip_init+0x70>)
 811b14e:	683b      	ldr	r3, [r7, #0]
 811b150:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 811b152:	2106      	movs	r1, #6
 811b154:	4815      	ldr	r0, [pc, #84]	@ (811b1ac <tcpip_init+0x74>)
 811b156:	f7f9 fe39 	bl	8114dcc <sys_mbox_new>
 811b15a:	4603      	mov	r3, r0
 811b15c:	2b00      	cmp	r3, #0
 811b15e:	d006      	beq.n	811b16e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 811b160:	4b13      	ldr	r3, [pc, #76]	@ (811b1b0 <tcpip_init+0x78>)
 811b162:	f240 2261 	movw	r2, #609	@ 0x261
 811b166:	4913      	ldr	r1, [pc, #76]	@ (811b1b4 <tcpip_init+0x7c>)
 811b168:	4813      	ldr	r0, [pc, #76]	@ (811b1b8 <tcpip_init+0x80>)
 811b16a:	f000 fe57 	bl	811be1c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 811b16e:	4813      	ldr	r0, [pc, #76]	@ (811b1bc <tcpip_init+0x84>)
 811b170:	f7f9 feae 	bl	8114ed0 <sys_mutex_new>
 811b174:	4603      	mov	r3, r0
 811b176:	2b00      	cmp	r3, #0
 811b178:	d006      	beq.n	811b188 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 811b17a:	4b0d      	ldr	r3, [pc, #52]	@ (811b1b0 <tcpip_init+0x78>)
 811b17c:	f240 2265 	movw	r2, #613	@ 0x265
 811b180:	490f      	ldr	r1, [pc, #60]	@ (811b1c0 <tcpip_init+0x88>)
 811b182:	480d      	ldr	r0, [pc, #52]	@ (811b1b8 <tcpip_init+0x80>)
 811b184:	f000 fe4a 	bl	811be1c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 811b188:	2318      	movs	r3, #24
 811b18a:	9300      	str	r3, [sp, #0]
 811b18c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811b190:	2200      	movs	r2, #0
 811b192:	490c      	ldr	r1, [pc, #48]	@ (811b1c4 <tcpip_init+0x8c>)
 811b194:	480c      	ldr	r0, [pc, #48]	@ (811b1c8 <tcpip_init+0x90>)
 811b196:	f7f9 fecd 	bl	8114f34 <sys_thread_new>
}
 811b19a:	bf00      	nop
 811b19c:	3708      	adds	r7, #8
 811b19e:	46bd      	mov	sp, r7
 811b1a0:	bd80      	pop	{r7, pc}
 811b1a2:	bf00      	nop
 811b1a4:	10011d64 	.word	0x10011d64
 811b1a8:	10011d68 	.word	0x10011d68
 811b1ac:	10011d6c 	.word	0x10011d6c
 811b1b0:	0811f574 	.word	0x0811f574
 811b1b4:	0811f63c 	.word	0x0811f63c
 811b1b8:	0811f604 	.word	0x0811f604
 811b1bc:	10011d70 	.word	0x10011d70
 811b1c0:	0811f660 	.word	0x0811f660
 811b1c4:	0811aef5 	.word	0x0811aef5
 811b1c8:	0811f684 	.word	0x0811f684

0811b1cc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 811b1cc:	b580      	push	{r7, lr}
 811b1ce:	b082      	sub	sp, #8
 811b1d0:	af00      	add	r7, sp, #0
 811b1d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 811b1d4:	f7f9 ff36 	bl	8115044 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 811b1d8:	4b0a      	ldr	r3, [pc, #40]	@ (811b204 <tcpip_tcp_timer+0x38>)
 811b1da:	681b      	ldr	r3, [r3, #0]
 811b1dc:	2b00      	cmp	r3, #0
 811b1de:	d103      	bne.n	811b1e8 <tcpip_tcp_timer+0x1c>
 811b1e0:	4b09      	ldr	r3, [pc, #36]	@ (811b208 <tcpip_tcp_timer+0x3c>)
 811b1e2:	681b      	ldr	r3, [r3, #0]
 811b1e4:	2b00      	cmp	r3, #0
 811b1e6:	d005      	beq.n	811b1f4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 811b1e8:	2200      	movs	r2, #0
 811b1ea:	4908      	ldr	r1, [pc, #32]	@ (811b20c <tcpip_tcp_timer+0x40>)
 811b1ec:	20fa      	movs	r0, #250	@ 0xfa
 811b1ee:	f000 f8f3 	bl	811b3d8 <sys_timeout>
 811b1f2:	e003      	b.n	811b1fc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 811b1f4:	4b06      	ldr	r3, [pc, #24]	@ (811b210 <tcpip_tcp_timer+0x44>)
 811b1f6:	2200      	movs	r2, #0
 811b1f8:	601a      	str	r2, [r3, #0]
  }
}
 811b1fa:	bf00      	nop
 811b1fc:	bf00      	nop
 811b1fe:	3708      	adds	r7, #8
 811b200:	46bd      	mov	sp, r7
 811b202:	bd80      	pop	{r7, pc}
 811b204:	10011d20 	.word	0x10011d20
 811b208:	10011d24 	.word	0x10011d24
 811b20c:	0811b1cd 	.word	0x0811b1cd
 811b210:	10011d7c 	.word	0x10011d7c

0811b214 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 811b214:	b580      	push	{r7, lr}
 811b216:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 811b218:	4b0a      	ldr	r3, [pc, #40]	@ (811b244 <tcp_timer_needed+0x30>)
 811b21a:	681b      	ldr	r3, [r3, #0]
 811b21c:	2b00      	cmp	r3, #0
 811b21e:	d10f      	bne.n	811b240 <tcp_timer_needed+0x2c>
 811b220:	4b09      	ldr	r3, [pc, #36]	@ (811b248 <tcp_timer_needed+0x34>)
 811b222:	681b      	ldr	r3, [r3, #0]
 811b224:	2b00      	cmp	r3, #0
 811b226:	d103      	bne.n	811b230 <tcp_timer_needed+0x1c>
 811b228:	4b08      	ldr	r3, [pc, #32]	@ (811b24c <tcp_timer_needed+0x38>)
 811b22a:	681b      	ldr	r3, [r3, #0]
 811b22c:	2b00      	cmp	r3, #0
 811b22e:	d007      	beq.n	811b240 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 811b230:	4b04      	ldr	r3, [pc, #16]	@ (811b244 <tcp_timer_needed+0x30>)
 811b232:	2201      	movs	r2, #1
 811b234:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 811b236:	2200      	movs	r2, #0
 811b238:	4905      	ldr	r1, [pc, #20]	@ (811b250 <tcp_timer_needed+0x3c>)
 811b23a:	20fa      	movs	r0, #250	@ 0xfa
 811b23c:	f000 f8cc 	bl	811b3d8 <sys_timeout>
  }
}
 811b240:	bf00      	nop
 811b242:	bd80      	pop	{r7, pc}
 811b244:	10011d7c 	.word	0x10011d7c
 811b248:	10011d20 	.word	0x10011d20
 811b24c:	10011d24 	.word	0x10011d24
 811b250:	0811b1cd 	.word	0x0811b1cd

0811b254 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 811b254:	b580      	push	{r7, lr}
 811b256:	b086      	sub	sp, #24
 811b258:	af00      	add	r7, sp, #0
 811b25a:	60f8      	str	r0, [r7, #12]
 811b25c:	60b9      	str	r1, [r7, #8]
 811b25e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 811b260:	200a      	movs	r0, #10
 811b262:	f7f8 fbff 	bl	8113a64 <memp_malloc>
 811b266:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 811b268:	693b      	ldr	r3, [r7, #16]
 811b26a:	2b00      	cmp	r3, #0
 811b26c:	d109      	bne.n	811b282 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 811b26e:	693b      	ldr	r3, [r7, #16]
 811b270:	2b00      	cmp	r3, #0
 811b272:	d151      	bne.n	811b318 <sys_timeout_abs+0xc4>
 811b274:	4b2a      	ldr	r3, [pc, #168]	@ (811b320 <sys_timeout_abs+0xcc>)
 811b276:	22be      	movs	r2, #190	@ 0xbe
 811b278:	492a      	ldr	r1, [pc, #168]	@ (811b324 <sys_timeout_abs+0xd0>)
 811b27a:	482b      	ldr	r0, [pc, #172]	@ (811b328 <sys_timeout_abs+0xd4>)
 811b27c:	f000 fdce 	bl	811be1c <iprintf>
    return;
 811b280:	e04a      	b.n	811b318 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 811b282:	693b      	ldr	r3, [r7, #16]
 811b284:	2200      	movs	r2, #0
 811b286:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 811b288:	693b      	ldr	r3, [r7, #16]
 811b28a:	68ba      	ldr	r2, [r7, #8]
 811b28c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 811b28e:	693b      	ldr	r3, [r7, #16]
 811b290:	687a      	ldr	r2, [r7, #4]
 811b292:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 811b294:	693b      	ldr	r3, [r7, #16]
 811b296:	68fa      	ldr	r2, [r7, #12]
 811b298:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 811b29a:	4b24      	ldr	r3, [pc, #144]	@ (811b32c <sys_timeout_abs+0xd8>)
 811b29c:	681b      	ldr	r3, [r3, #0]
 811b29e:	2b00      	cmp	r3, #0
 811b2a0:	d103      	bne.n	811b2aa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 811b2a2:	4a22      	ldr	r2, [pc, #136]	@ (811b32c <sys_timeout_abs+0xd8>)
 811b2a4:	693b      	ldr	r3, [r7, #16]
 811b2a6:	6013      	str	r3, [r2, #0]
    return;
 811b2a8:	e037      	b.n	811b31a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 811b2aa:	693b      	ldr	r3, [r7, #16]
 811b2ac:	685a      	ldr	r2, [r3, #4]
 811b2ae:	4b1f      	ldr	r3, [pc, #124]	@ (811b32c <sys_timeout_abs+0xd8>)
 811b2b0:	681b      	ldr	r3, [r3, #0]
 811b2b2:	685b      	ldr	r3, [r3, #4]
 811b2b4:	1ad3      	subs	r3, r2, r3
 811b2b6:	0fdb      	lsrs	r3, r3, #31
 811b2b8:	f003 0301 	and.w	r3, r3, #1
 811b2bc:	b2db      	uxtb	r3, r3
 811b2be:	2b00      	cmp	r3, #0
 811b2c0:	d007      	beq.n	811b2d2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 811b2c2:	4b1a      	ldr	r3, [pc, #104]	@ (811b32c <sys_timeout_abs+0xd8>)
 811b2c4:	681a      	ldr	r2, [r3, #0]
 811b2c6:	693b      	ldr	r3, [r7, #16]
 811b2c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 811b2ca:	4a18      	ldr	r2, [pc, #96]	@ (811b32c <sys_timeout_abs+0xd8>)
 811b2cc:	693b      	ldr	r3, [r7, #16]
 811b2ce:	6013      	str	r3, [r2, #0]
 811b2d0:	e023      	b.n	811b31a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 811b2d2:	4b16      	ldr	r3, [pc, #88]	@ (811b32c <sys_timeout_abs+0xd8>)
 811b2d4:	681b      	ldr	r3, [r3, #0]
 811b2d6:	617b      	str	r3, [r7, #20]
 811b2d8:	e01a      	b.n	811b310 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 811b2da:	697b      	ldr	r3, [r7, #20]
 811b2dc:	681b      	ldr	r3, [r3, #0]
 811b2de:	2b00      	cmp	r3, #0
 811b2e0:	d00b      	beq.n	811b2fa <sys_timeout_abs+0xa6>
 811b2e2:	693b      	ldr	r3, [r7, #16]
 811b2e4:	685a      	ldr	r2, [r3, #4]
 811b2e6:	697b      	ldr	r3, [r7, #20]
 811b2e8:	681b      	ldr	r3, [r3, #0]
 811b2ea:	685b      	ldr	r3, [r3, #4]
 811b2ec:	1ad3      	subs	r3, r2, r3
 811b2ee:	0fdb      	lsrs	r3, r3, #31
 811b2f0:	f003 0301 	and.w	r3, r3, #1
 811b2f4:	b2db      	uxtb	r3, r3
 811b2f6:	2b00      	cmp	r3, #0
 811b2f8:	d007      	beq.n	811b30a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 811b2fa:	697b      	ldr	r3, [r7, #20]
 811b2fc:	681a      	ldr	r2, [r3, #0]
 811b2fe:	693b      	ldr	r3, [r7, #16]
 811b300:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 811b302:	697b      	ldr	r3, [r7, #20]
 811b304:	693a      	ldr	r2, [r7, #16]
 811b306:	601a      	str	r2, [r3, #0]
        break;
 811b308:	e007      	b.n	811b31a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 811b30a:	697b      	ldr	r3, [r7, #20]
 811b30c:	681b      	ldr	r3, [r3, #0]
 811b30e:	617b      	str	r3, [r7, #20]
 811b310:	697b      	ldr	r3, [r7, #20]
 811b312:	2b00      	cmp	r3, #0
 811b314:	d1e1      	bne.n	811b2da <sys_timeout_abs+0x86>
 811b316:	e000      	b.n	811b31a <sys_timeout_abs+0xc6>
    return;
 811b318:	bf00      	nop
      }
    }
  }
}
 811b31a:	3718      	adds	r7, #24
 811b31c:	46bd      	mov	sp, r7
 811b31e:	bd80      	pop	{r7, pc}
 811b320:	0811f694 	.word	0x0811f694
 811b324:	0811f708 	.word	0x0811f708
 811b328:	0811f748 	.word	0x0811f748
 811b32c:	10011d74 	.word	0x10011d74

0811b330 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 811b330:	b580      	push	{r7, lr}
 811b332:	b086      	sub	sp, #24
 811b334:	af00      	add	r7, sp, #0
 811b336:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 811b338:	687b      	ldr	r3, [r7, #4]
 811b33a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 811b33c:	697b      	ldr	r3, [r7, #20]
 811b33e:	685b      	ldr	r3, [r3, #4]
 811b340:	4798      	blx	r3

  now = sys_now();
 811b342:	f7e9 f911 	bl	8104568 <sys_now>
 811b346:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 811b348:	697b      	ldr	r3, [r7, #20]
 811b34a:	681a      	ldr	r2, [r3, #0]
 811b34c:	4b0f      	ldr	r3, [pc, #60]	@ (811b38c <lwip_cyclic_timer+0x5c>)
 811b34e:	681b      	ldr	r3, [r3, #0]
 811b350:	4413      	add	r3, r2
 811b352:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 811b354:	68fa      	ldr	r2, [r7, #12]
 811b356:	693b      	ldr	r3, [r7, #16]
 811b358:	1ad3      	subs	r3, r2, r3
 811b35a:	0fdb      	lsrs	r3, r3, #31
 811b35c:	f003 0301 	and.w	r3, r3, #1
 811b360:	b2db      	uxtb	r3, r3
 811b362:	2b00      	cmp	r3, #0
 811b364:	d009      	beq.n	811b37a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 811b366:	697b      	ldr	r3, [r7, #20]
 811b368:	681a      	ldr	r2, [r3, #0]
 811b36a:	693b      	ldr	r3, [r7, #16]
 811b36c:	4413      	add	r3, r2
 811b36e:	687a      	ldr	r2, [r7, #4]
 811b370:	4907      	ldr	r1, [pc, #28]	@ (811b390 <lwip_cyclic_timer+0x60>)
 811b372:	4618      	mov	r0, r3
 811b374:	f7ff ff6e 	bl	811b254 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 811b378:	e004      	b.n	811b384 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 811b37a:	687a      	ldr	r2, [r7, #4]
 811b37c:	4904      	ldr	r1, [pc, #16]	@ (811b390 <lwip_cyclic_timer+0x60>)
 811b37e:	68f8      	ldr	r0, [r7, #12]
 811b380:	f7ff ff68 	bl	811b254 <sys_timeout_abs>
}
 811b384:	bf00      	nop
 811b386:	3718      	adds	r7, #24
 811b388:	46bd      	mov	sp, r7
 811b38a:	bd80      	pop	{r7, pc}
 811b38c:	10011d78 	.word	0x10011d78
 811b390:	0811b331 	.word	0x0811b331

0811b394 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 811b394:	b580      	push	{r7, lr}
 811b396:	b082      	sub	sp, #8
 811b398:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 811b39a:	2301      	movs	r3, #1
 811b39c:	607b      	str	r3, [r7, #4]
 811b39e:	e00e      	b.n	811b3be <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 811b3a0:	4a0b      	ldr	r2, [pc, #44]	@ (811b3d0 <sys_timeouts_init+0x3c>)
 811b3a2:	687b      	ldr	r3, [r7, #4]
 811b3a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 811b3a8:	687b      	ldr	r3, [r7, #4]
 811b3aa:	00db      	lsls	r3, r3, #3
 811b3ac:	4a08      	ldr	r2, [pc, #32]	@ (811b3d0 <sys_timeouts_init+0x3c>)
 811b3ae:	4413      	add	r3, r2
 811b3b0:	461a      	mov	r2, r3
 811b3b2:	4908      	ldr	r1, [pc, #32]	@ (811b3d4 <sys_timeouts_init+0x40>)
 811b3b4:	f000 f810 	bl	811b3d8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 811b3b8:	687b      	ldr	r3, [r7, #4]
 811b3ba:	3301      	adds	r3, #1
 811b3bc:	607b      	str	r3, [r7, #4]
 811b3be:	687b      	ldr	r3, [r7, #4]
 811b3c0:	2b02      	cmp	r3, #2
 811b3c2:	d9ed      	bls.n	811b3a0 <sys_timeouts_init+0xc>
  }
}
 811b3c4:	bf00      	nop
 811b3c6:	bf00      	nop
 811b3c8:	3708      	adds	r7, #8
 811b3ca:	46bd      	mov	sp, r7
 811b3cc:	bd80      	pop	{r7, pc}
 811b3ce:	bf00      	nop
 811b3d0:	0811fd1c 	.word	0x0811fd1c
 811b3d4:	0811b331 	.word	0x0811b331

0811b3d8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 811b3d8:	b580      	push	{r7, lr}
 811b3da:	b086      	sub	sp, #24
 811b3dc:	af00      	add	r7, sp, #0
 811b3de:	60f8      	str	r0, [r7, #12]
 811b3e0:	60b9      	str	r1, [r7, #8]
 811b3e2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 811b3e4:	68fb      	ldr	r3, [r7, #12]
 811b3e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811b3ea:	d306      	bcc.n	811b3fa <sys_timeout+0x22>
 811b3ec:	4b0a      	ldr	r3, [pc, #40]	@ (811b418 <sys_timeout+0x40>)
 811b3ee:	f240 1229 	movw	r2, #297	@ 0x129
 811b3f2:	490a      	ldr	r1, [pc, #40]	@ (811b41c <sys_timeout+0x44>)
 811b3f4:	480a      	ldr	r0, [pc, #40]	@ (811b420 <sys_timeout+0x48>)
 811b3f6:	f000 fd11 	bl	811be1c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 811b3fa:	f7e9 f8b5 	bl	8104568 <sys_now>
 811b3fe:	4602      	mov	r2, r0
 811b400:	68fb      	ldr	r3, [r7, #12]
 811b402:	4413      	add	r3, r2
 811b404:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 811b406:	687a      	ldr	r2, [r7, #4]
 811b408:	68b9      	ldr	r1, [r7, #8]
 811b40a:	6978      	ldr	r0, [r7, #20]
 811b40c:	f7ff ff22 	bl	811b254 <sys_timeout_abs>
#endif
}
 811b410:	bf00      	nop
 811b412:	3718      	adds	r7, #24
 811b414:	46bd      	mov	sp, r7
 811b416:	bd80      	pop	{r7, pc}
 811b418:	0811f694 	.word	0x0811f694
 811b41c:	0811f770 	.word	0x0811f770
 811b420:	0811f748 	.word	0x0811f748

0811b424 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 811b424:	b580      	push	{r7, lr}
 811b426:	b084      	sub	sp, #16
 811b428:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 811b42a:	f7e9 f89d 	bl	8104568 <sys_now>
 811b42e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 811b430:	4b17      	ldr	r3, [pc, #92]	@ (811b490 <sys_check_timeouts+0x6c>)
 811b432:	681b      	ldr	r3, [r3, #0]
 811b434:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 811b436:	68bb      	ldr	r3, [r7, #8]
 811b438:	2b00      	cmp	r3, #0
 811b43a:	d022      	beq.n	811b482 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 811b43c:	68bb      	ldr	r3, [r7, #8]
 811b43e:	685b      	ldr	r3, [r3, #4]
 811b440:	68fa      	ldr	r2, [r7, #12]
 811b442:	1ad3      	subs	r3, r2, r3
 811b444:	0fdb      	lsrs	r3, r3, #31
 811b446:	f003 0301 	and.w	r3, r3, #1
 811b44a:	b2db      	uxtb	r3, r3
 811b44c:	2b00      	cmp	r3, #0
 811b44e:	d11a      	bne.n	811b486 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 811b450:	68bb      	ldr	r3, [r7, #8]
 811b452:	681b      	ldr	r3, [r3, #0]
 811b454:	4a0e      	ldr	r2, [pc, #56]	@ (811b490 <sys_check_timeouts+0x6c>)
 811b456:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 811b458:	68bb      	ldr	r3, [r7, #8]
 811b45a:	689b      	ldr	r3, [r3, #8]
 811b45c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 811b45e:	68bb      	ldr	r3, [r7, #8]
 811b460:	68db      	ldr	r3, [r3, #12]
 811b462:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 811b464:	68bb      	ldr	r3, [r7, #8]
 811b466:	685b      	ldr	r3, [r3, #4]
 811b468:	4a0a      	ldr	r2, [pc, #40]	@ (811b494 <sys_check_timeouts+0x70>)
 811b46a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 811b46c:	68b9      	ldr	r1, [r7, #8]
 811b46e:	200a      	movs	r0, #10
 811b470:	f7f8 fb6e 	bl	8113b50 <memp_free>
    if (handler != NULL) {
 811b474:	687b      	ldr	r3, [r7, #4]
 811b476:	2b00      	cmp	r3, #0
 811b478:	d0da      	beq.n	811b430 <sys_check_timeouts+0xc>
      handler(arg);
 811b47a:	687b      	ldr	r3, [r7, #4]
 811b47c:	6838      	ldr	r0, [r7, #0]
 811b47e:	4798      	blx	r3
  do {
 811b480:	e7d6      	b.n	811b430 <sys_check_timeouts+0xc>
      return;
 811b482:	bf00      	nop
 811b484:	e000      	b.n	811b488 <sys_check_timeouts+0x64>
      return;
 811b486:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 811b488:	3710      	adds	r7, #16
 811b48a:	46bd      	mov	sp, r7
 811b48c:	bd80      	pop	{r7, pc}
 811b48e:	bf00      	nop
 811b490:	10011d74 	.word	0x10011d74
 811b494:	10011d78 	.word	0x10011d78

0811b498 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 811b498:	b580      	push	{r7, lr}
 811b49a:	b082      	sub	sp, #8
 811b49c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 811b49e:	4b16      	ldr	r3, [pc, #88]	@ (811b4f8 <sys_timeouts_sleeptime+0x60>)
 811b4a0:	681b      	ldr	r3, [r3, #0]
 811b4a2:	2b00      	cmp	r3, #0
 811b4a4:	d102      	bne.n	811b4ac <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 811b4a6:	f04f 33ff 	mov.w	r3, #4294967295
 811b4aa:	e020      	b.n	811b4ee <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 811b4ac:	f7e9 f85c 	bl	8104568 <sys_now>
 811b4b0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 811b4b2:	4b11      	ldr	r3, [pc, #68]	@ (811b4f8 <sys_timeouts_sleeptime+0x60>)
 811b4b4:	681b      	ldr	r3, [r3, #0]
 811b4b6:	685a      	ldr	r2, [r3, #4]
 811b4b8:	687b      	ldr	r3, [r7, #4]
 811b4ba:	1ad3      	subs	r3, r2, r3
 811b4bc:	0fdb      	lsrs	r3, r3, #31
 811b4be:	f003 0301 	and.w	r3, r3, #1
 811b4c2:	b2db      	uxtb	r3, r3
 811b4c4:	2b00      	cmp	r3, #0
 811b4c6:	d001      	beq.n	811b4cc <sys_timeouts_sleeptime+0x34>
    return 0;
 811b4c8:	2300      	movs	r3, #0
 811b4ca:	e010      	b.n	811b4ee <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 811b4cc:	4b0a      	ldr	r3, [pc, #40]	@ (811b4f8 <sys_timeouts_sleeptime+0x60>)
 811b4ce:	681b      	ldr	r3, [r3, #0]
 811b4d0:	685a      	ldr	r2, [r3, #4]
 811b4d2:	687b      	ldr	r3, [r7, #4]
 811b4d4:	1ad3      	subs	r3, r2, r3
 811b4d6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 811b4d8:	683b      	ldr	r3, [r7, #0]
 811b4da:	2b00      	cmp	r3, #0
 811b4dc:	da06      	bge.n	811b4ec <sys_timeouts_sleeptime+0x54>
 811b4de:	4b07      	ldr	r3, [pc, #28]	@ (811b4fc <sys_timeouts_sleeptime+0x64>)
 811b4e0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 811b4e4:	4906      	ldr	r1, [pc, #24]	@ (811b500 <sys_timeouts_sleeptime+0x68>)
 811b4e6:	4807      	ldr	r0, [pc, #28]	@ (811b504 <sys_timeouts_sleeptime+0x6c>)
 811b4e8:	f000 fc98 	bl	811be1c <iprintf>
    return ret;
 811b4ec:	683b      	ldr	r3, [r7, #0]
  }
}
 811b4ee:	4618      	mov	r0, r3
 811b4f0:	3708      	adds	r7, #8
 811b4f2:	46bd      	mov	sp, r7
 811b4f4:	bd80      	pop	{r7, pc}
 811b4f6:	bf00      	nop
 811b4f8:	10011d74 	.word	0x10011d74
 811b4fc:	0811f694 	.word	0x0811f694
 811b500:	0811f7a8 	.word	0x0811f7a8
 811b504:	0811f748 	.word	0x0811f748

0811b508 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 811b508:	b580      	push	{r7, lr}
 811b50a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 811b50c:	f000 fb86 	bl	811bc1c <rand>
 811b510:	4603      	mov	r3, r0
 811b512:	b29b      	uxth	r3, r3
 811b514:	f3c3 030d 	ubfx	r3, r3, #0, #14
 811b518:	b29b      	uxth	r3, r3
 811b51a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 811b51e:	b29a      	uxth	r2, r3
 811b520:	4b01      	ldr	r3, [pc, #4]	@ (811b528 <udp_init+0x20>)
 811b522:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 811b524:	bf00      	nop
 811b526:	bd80      	pop	{r7, pc}
 811b528:	10000030 	.word	0x10000030

0811b52c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 811b52c:	b580      	push	{r7, lr}
 811b52e:	b084      	sub	sp, #16
 811b530:	af00      	add	r7, sp, #0
 811b532:	60f8      	str	r0, [r7, #12]
 811b534:	60b9      	str	r1, [r7, #8]
 811b536:	4613      	mov	r3, r2
 811b538:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 811b53a:	68fb      	ldr	r3, [r7, #12]
 811b53c:	2b00      	cmp	r3, #0
 811b53e:	d105      	bne.n	811b54c <udp_input_local_match+0x20>
 811b540:	4b27      	ldr	r3, [pc, #156]	@ (811b5e0 <udp_input_local_match+0xb4>)
 811b542:	2287      	movs	r2, #135	@ 0x87
 811b544:	4927      	ldr	r1, [pc, #156]	@ (811b5e4 <udp_input_local_match+0xb8>)
 811b546:	4828      	ldr	r0, [pc, #160]	@ (811b5e8 <udp_input_local_match+0xbc>)
 811b548:	f000 fc68 	bl	811be1c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 811b54c:	68bb      	ldr	r3, [r7, #8]
 811b54e:	2b00      	cmp	r3, #0
 811b550:	d105      	bne.n	811b55e <udp_input_local_match+0x32>
 811b552:	4b23      	ldr	r3, [pc, #140]	@ (811b5e0 <udp_input_local_match+0xb4>)
 811b554:	2288      	movs	r2, #136	@ 0x88
 811b556:	4925      	ldr	r1, [pc, #148]	@ (811b5ec <udp_input_local_match+0xc0>)
 811b558:	4823      	ldr	r0, [pc, #140]	@ (811b5e8 <udp_input_local_match+0xbc>)
 811b55a:	f000 fc5f 	bl	811be1c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811b55e:	68fb      	ldr	r3, [r7, #12]
 811b560:	7a1b      	ldrb	r3, [r3, #8]
 811b562:	2b00      	cmp	r3, #0
 811b564:	d00b      	beq.n	811b57e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811b566:	68fb      	ldr	r3, [r7, #12]
 811b568:	7a1a      	ldrb	r2, [r3, #8]
 811b56a:	4b21      	ldr	r3, [pc, #132]	@ (811b5f0 <udp_input_local_match+0xc4>)
 811b56c:	685b      	ldr	r3, [r3, #4]
 811b56e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811b572:	3301      	adds	r3, #1
 811b574:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811b576:	429a      	cmp	r2, r3
 811b578:	d001      	beq.n	811b57e <udp_input_local_match+0x52>
    return 0;
 811b57a:	2300      	movs	r3, #0
 811b57c:	e02b      	b.n	811b5d6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 811b57e:	79fb      	ldrb	r3, [r7, #7]
 811b580:	2b00      	cmp	r3, #0
 811b582:	d018      	beq.n	811b5b6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 811b584:	68fb      	ldr	r3, [r7, #12]
 811b586:	2b00      	cmp	r3, #0
 811b588:	d013      	beq.n	811b5b2 <udp_input_local_match+0x86>
 811b58a:	68fb      	ldr	r3, [r7, #12]
 811b58c:	681b      	ldr	r3, [r3, #0]
 811b58e:	2b00      	cmp	r3, #0
 811b590:	d00f      	beq.n	811b5b2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 811b592:	4b17      	ldr	r3, [pc, #92]	@ (811b5f0 <udp_input_local_match+0xc4>)
 811b594:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 811b596:	f1b3 3fff 	cmp.w	r3, #4294967295
 811b59a:	d00a      	beq.n	811b5b2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 811b59c:	68fb      	ldr	r3, [r7, #12]
 811b59e:	681a      	ldr	r2, [r3, #0]
 811b5a0:	4b13      	ldr	r3, [pc, #76]	@ (811b5f0 <udp_input_local_match+0xc4>)
 811b5a2:	695b      	ldr	r3, [r3, #20]
 811b5a4:	405a      	eors	r2, r3
 811b5a6:	68bb      	ldr	r3, [r7, #8]
 811b5a8:	3308      	adds	r3, #8
 811b5aa:	681b      	ldr	r3, [r3, #0]
 811b5ac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 811b5ae:	2b00      	cmp	r3, #0
 811b5b0:	d110      	bne.n	811b5d4 <udp_input_local_match+0xa8>
          return 1;
 811b5b2:	2301      	movs	r3, #1
 811b5b4:	e00f      	b.n	811b5d6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811b5b6:	68fb      	ldr	r3, [r7, #12]
 811b5b8:	2b00      	cmp	r3, #0
 811b5ba:	d009      	beq.n	811b5d0 <udp_input_local_match+0xa4>
 811b5bc:	68fb      	ldr	r3, [r7, #12]
 811b5be:	681b      	ldr	r3, [r3, #0]
 811b5c0:	2b00      	cmp	r3, #0
 811b5c2:	d005      	beq.n	811b5d0 <udp_input_local_match+0xa4>
 811b5c4:	68fb      	ldr	r3, [r7, #12]
 811b5c6:	681a      	ldr	r2, [r3, #0]
 811b5c8:	4b09      	ldr	r3, [pc, #36]	@ (811b5f0 <udp_input_local_match+0xc4>)
 811b5ca:	695b      	ldr	r3, [r3, #20]
 811b5cc:	429a      	cmp	r2, r3
 811b5ce:	d101      	bne.n	811b5d4 <udp_input_local_match+0xa8>
        return 1;
 811b5d0:	2301      	movs	r3, #1
 811b5d2:	e000      	b.n	811b5d6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 811b5d4:	2300      	movs	r3, #0
}
 811b5d6:	4618      	mov	r0, r3
 811b5d8:	3710      	adds	r7, #16
 811b5da:	46bd      	mov	sp, r7
 811b5dc:	bd80      	pop	{r7, pc}
 811b5de:	bf00      	nop
 811b5e0:	0811f7bc 	.word	0x0811f7bc
 811b5e4:	0811f82c 	.word	0x0811f82c
 811b5e8:	0811f850 	.word	0x0811f850
 811b5ec:	0811f878 	.word	0x0811f878
 811b5f0:	1000b244 	.word	0x1000b244

0811b5f4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 811b5f4:	b590      	push	{r4, r7, lr}
 811b5f6:	b08d      	sub	sp, #52	@ 0x34
 811b5f8:	af02      	add	r7, sp, #8
 811b5fa:	6078      	str	r0, [r7, #4]
 811b5fc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 811b5fe:	2300      	movs	r3, #0
 811b600:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 811b602:	687b      	ldr	r3, [r7, #4]
 811b604:	2b00      	cmp	r3, #0
 811b606:	d105      	bne.n	811b614 <udp_input+0x20>
 811b608:	4b7c      	ldr	r3, [pc, #496]	@ (811b7fc <udp_input+0x208>)
 811b60a:	22cf      	movs	r2, #207	@ 0xcf
 811b60c:	497c      	ldr	r1, [pc, #496]	@ (811b800 <udp_input+0x20c>)
 811b60e:	487d      	ldr	r0, [pc, #500]	@ (811b804 <udp_input+0x210>)
 811b610:	f000 fc04 	bl	811be1c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 811b614:	683b      	ldr	r3, [r7, #0]
 811b616:	2b00      	cmp	r3, #0
 811b618:	d105      	bne.n	811b626 <udp_input+0x32>
 811b61a:	4b78      	ldr	r3, [pc, #480]	@ (811b7fc <udp_input+0x208>)
 811b61c:	22d0      	movs	r2, #208	@ 0xd0
 811b61e:	497a      	ldr	r1, [pc, #488]	@ (811b808 <udp_input+0x214>)
 811b620:	4878      	ldr	r0, [pc, #480]	@ (811b804 <udp_input+0x210>)
 811b622:	f000 fbfb 	bl	811be1c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 811b626:	687b      	ldr	r3, [r7, #4]
 811b628:	895b      	ldrh	r3, [r3, #10]
 811b62a:	2b07      	cmp	r3, #7
 811b62c:	d803      	bhi.n	811b636 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 811b62e:	6878      	ldr	r0, [r7, #4]
 811b630:	f7f9 f932 	bl	8114898 <pbuf_free>
    goto end;
 811b634:	e0de      	b.n	811b7f4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 811b636:	687b      	ldr	r3, [r7, #4]
 811b638:	685b      	ldr	r3, [r3, #4]
 811b63a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 811b63c:	4b73      	ldr	r3, [pc, #460]	@ (811b80c <udp_input+0x218>)
 811b63e:	695b      	ldr	r3, [r3, #20]
 811b640:	4a72      	ldr	r2, [pc, #456]	@ (811b80c <udp_input+0x218>)
 811b642:	6812      	ldr	r2, [r2, #0]
 811b644:	4611      	mov	r1, r2
 811b646:	4618      	mov	r0, r3
 811b648:	f7f6 ff0e 	bl	8112468 <ip4_addr_isbroadcast_u32>
 811b64c:	4603      	mov	r3, r0
 811b64e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 811b650:	697b      	ldr	r3, [r7, #20]
 811b652:	881b      	ldrh	r3, [r3, #0]
 811b654:	b29b      	uxth	r3, r3
 811b656:	4618      	mov	r0, r3
 811b658:	f7f5 f998 	bl	811098c <lwip_htons>
 811b65c:	4603      	mov	r3, r0
 811b65e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 811b660:	697b      	ldr	r3, [r7, #20]
 811b662:	885b      	ldrh	r3, [r3, #2]
 811b664:	b29b      	uxth	r3, r3
 811b666:	4618      	mov	r0, r3
 811b668:	f7f5 f990 	bl	811098c <lwip_htons>
 811b66c:	4603      	mov	r3, r0
 811b66e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 811b670:	2300      	movs	r3, #0
 811b672:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 811b674:	2300      	movs	r3, #0
 811b676:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 811b678:	2300      	movs	r3, #0
 811b67a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 811b67c:	4b64      	ldr	r3, [pc, #400]	@ (811b810 <udp_input+0x21c>)
 811b67e:	681b      	ldr	r3, [r3, #0]
 811b680:	627b      	str	r3, [r7, #36]	@ 0x24
 811b682:	e054      	b.n	811b72e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 811b684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b686:	8a5b      	ldrh	r3, [r3, #18]
 811b688:	89fa      	ldrh	r2, [r7, #14]
 811b68a:	429a      	cmp	r2, r3
 811b68c:	d14a      	bne.n	811b724 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 811b68e:	7cfb      	ldrb	r3, [r7, #19]
 811b690:	461a      	mov	r2, r3
 811b692:	6839      	ldr	r1, [r7, #0]
 811b694:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811b696:	f7ff ff49 	bl	811b52c <udp_input_local_match>
 811b69a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 811b69c:	2b00      	cmp	r3, #0
 811b69e:	d041      	beq.n	811b724 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 811b6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b6a2:	7c1b      	ldrb	r3, [r3, #16]
 811b6a4:	f003 0304 	and.w	r3, r3, #4
 811b6a8:	2b00      	cmp	r3, #0
 811b6aa:	d11d      	bne.n	811b6e8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 811b6ac:	69fb      	ldr	r3, [r7, #28]
 811b6ae:	2b00      	cmp	r3, #0
 811b6b0:	d102      	bne.n	811b6b8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 811b6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b6b4:	61fb      	str	r3, [r7, #28]
 811b6b6:	e017      	b.n	811b6e8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 811b6b8:	7cfb      	ldrb	r3, [r7, #19]
 811b6ba:	2b00      	cmp	r3, #0
 811b6bc:	d014      	beq.n	811b6e8 <udp_input+0xf4>
 811b6be:	4b53      	ldr	r3, [pc, #332]	@ (811b80c <udp_input+0x218>)
 811b6c0:	695b      	ldr	r3, [r3, #20]
 811b6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 811b6c6:	d10f      	bne.n	811b6e8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 811b6c8:	69fb      	ldr	r3, [r7, #28]
 811b6ca:	681a      	ldr	r2, [r3, #0]
 811b6cc:	683b      	ldr	r3, [r7, #0]
 811b6ce:	3304      	adds	r3, #4
 811b6d0:	681b      	ldr	r3, [r3, #0]
 811b6d2:	429a      	cmp	r2, r3
 811b6d4:	d008      	beq.n	811b6e8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 811b6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b6d8:	681a      	ldr	r2, [r3, #0]
 811b6da:	683b      	ldr	r3, [r7, #0]
 811b6dc:	3304      	adds	r3, #4
 811b6de:	681b      	ldr	r3, [r3, #0]
 811b6e0:	429a      	cmp	r2, r3
 811b6e2:	d101      	bne.n	811b6e8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 811b6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b6e6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 811b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b6ea:	8a9b      	ldrh	r3, [r3, #20]
 811b6ec:	8a3a      	ldrh	r2, [r7, #16]
 811b6ee:	429a      	cmp	r2, r3
 811b6f0:	d118      	bne.n	811b724 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 811b6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b6f4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 811b6f6:	2b00      	cmp	r3, #0
 811b6f8:	d005      	beq.n	811b706 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 811b6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b6fc:	685a      	ldr	r2, [r3, #4]
 811b6fe:	4b43      	ldr	r3, [pc, #268]	@ (811b80c <udp_input+0x218>)
 811b700:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 811b702:	429a      	cmp	r2, r3
 811b704:	d10e      	bne.n	811b724 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 811b706:	6a3b      	ldr	r3, [r7, #32]
 811b708:	2b00      	cmp	r3, #0
 811b70a:	d014      	beq.n	811b736 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 811b70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b70e:	68da      	ldr	r2, [r3, #12]
 811b710:	6a3b      	ldr	r3, [r7, #32]
 811b712:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 811b714:	4b3e      	ldr	r3, [pc, #248]	@ (811b810 <udp_input+0x21c>)
 811b716:	681a      	ldr	r2, [r3, #0]
 811b718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b71a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 811b71c:	4a3c      	ldr	r2, [pc, #240]	@ (811b810 <udp_input+0x21c>)
 811b71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b720:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 811b722:	e008      	b.n	811b736 <udp_input+0x142>
      }
    }

    prev = pcb;
 811b724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b726:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 811b728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b72a:	68db      	ldr	r3, [r3, #12]
 811b72c:	627b      	str	r3, [r7, #36]	@ 0x24
 811b72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b730:	2b00      	cmp	r3, #0
 811b732:	d1a7      	bne.n	811b684 <udp_input+0x90>
 811b734:	e000      	b.n	811b738 <udp_input+0x144>
        break;
 811b736:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 811b738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b73a:	2b00      	cmp	r3, #0
 811b73c:	d101      	bne.n	811b742 <udp_input+0x14e>
    pcb = uncon_pcb;
 811b73e:	69fb      	ldr	r3, [r7, #28]
 811b740:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 811b742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b744:	2b00      	cmp	r3, #0
 811b746:	d002      	beq.n	811b74e <udp_input+0x15a>
    for_us = 1;
 811b748:	2301      	movs	r3, #1
 811b74a:	76fb      	strb	r3, [r7, #27]
 811b74c:	e00a      	b.n	811b764 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 811b74e:	683b      	ldr	r3, [r7, #0]
 811b750:	3304      	adds	r3, #4
 811b752:	681a      	ldr	r2, [r3, #0]
 811b754:	4b2d      	ldr	r3, [pc, #180]	@ (811b80c <udp_input+0x218>)
 811b756:	695b      	ldr	r3, [r3, #20]
 811b758:	429a      	cmp	r2, r3
 811b75a:	bf0c      	ite	eq
 811b75c:	2301      	moveq	r3, #1
 811b75e:	2300      	movne	r3, #0
 811b760:	b2db      	uxtb	r3, r3
 811b762:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 811b764:	7efb      	ldrb	r3, [r7, #27]
 811b766:	2b00      	cmp	r3, #0
 811b768:	d041      	beq.n	811b7ee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 811b76a:	2108      	movs	r1, #8
 811b76c:	6878      	ldr	r0, [r7, #4]
 811b76e:	f7f9 f80d 	bl	811478c <pbuf_remove_header>
 811b772:	4603      	mov	r3, r0
 811b774:	2b00      	cmp	r3, #0
 811b776:	d00a      	beq.n	811b78e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 811b778:	4b20      	ldr	r3, [pc, #128]	@ (811b7fc <udp_input+0x208>)
 811b77a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 811b77e:	4925      	ldr	r1, [pc, #148]	@ (811b814 <udp_input+0x220>)
 811b780:	4820      	ldr	r0, [pc, #128]	@ (811b804 <udp_input+0x210>)
 811b782:	f000 fb4b 	bl	811be1c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 811b786:	6878      	ldr	r0, [r7, #4]
 811b788:	f7f9 f886 	bl	8114898 <pbuf_free>
      goto end;
 811b78c:	e032      	b.n	811b7f4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 811b78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b790:	2b00      	cmp	r3, #0
 811b792:	d012      	beq.n	811b7ba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 811b794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b796:	699b      	ldr	r3, [r3, #24]
 811b798:	2b00      	cmp	r3, #0
 811b79a:	d00a      	beq.n	811b7b2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 811b79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b79e:	699c      	ldr	r4, [r3, #24]
 811b7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b7a2:	69d8      	ldr	r0, [r3, #28]
 811b7a4:	8a3b      	ldrh	r3, [r7, #16]
 811b7a6:	9300      	str	r3, [sp, #0]
 811b7a8:	4b1b      	ldr	r3, [pc, #108]	@ (811b818 <udp_input+0x224>)
 811b7aa:	687a      	ldr	r2, [r7, #4]
 811b7ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811b7ae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 811b7b0:	e021      	b.n	811b7f6 <udp_input+0x202>
        pbuf_free(p);
 811b7b2:	6878      	ldr	r0, [r7, #4]
 811b7b4:	f7f9 f870 	bl	8114898 <pbuf_free>
        goto end;
 811b7b8:	e01c      	b.n	811b7f4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 811b7ba:	7cfb      	ldrb	r3, [r7, #19]
 811b7bc:	2b00      	cmp	r3, #0
 811b7be:	d112      	bne.n	811b7e6 <udp_input+0x1f2>
 811b7c0:	4b12      	ldr	r3, [pc, #72]	@ (811b80c <udp_input+0x218>)
 811b7c2:	695b      	ldr	r3, [r3, #20]
 811b7c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 811b7c8:	2be0      	cmp	r3, #224	@ 0xe0
 811b7ca:	d00c      	beq.n	811b7e6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 811b7cc:	4b0f      	ldr	r3, [pc, #60]	@ (811b80c <udp_input+0x218>)
 811b7ce:	899b      	ldrh	r3, [r3, #12]
 811b7d0:	3308      	adds	r3, #8
 811b7d2:	b29b      	uxth	r3, r3
 811b7d4:	b21b      	sxth	r3, r3
 811b7d6:	4619      	mov	r1, r3
 811b7d8:	6878      	ldr	r0, [r7, #4]
 811b7da:	f7f9 f84a 	bl	8114872 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 811b7de:	2103      	movs	r1, #3
 811b7e0:	6878      	ldr	r0, [r7, #4]
 811b7e2:	f7f6 fa43 	bl	8111c6c <icmp_dest_unreach>
      pbuf_free(p);
 811b7e6:	6878      	ldr	r0, [r7, #4]
 811b7e8:	f7f9 f856 	bl	8114898 <pbuf_free>
  return;
 811b7ec:	e003      	b.n	811b7f6 <udp_input+0x202>
    pbuf_free(p);
 811b7ee:	6878      	ldr	r0, [r7, #4]
 811b7f0:	f7f9 f852 	bl	8114898 <pbuf_free>
  return;
 811b7f4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 811b7f6:	372c      	adds	r7, #44	@ 0x2c
 811b7f8:	46bd      	mov	sp, r7
 811b7fa:	bd90      	pop	{r4, r7, pc}
 811b7fc:	0811f7bc 	.word	0x0811f7bc
 811b800:	0811f8a0 	.word	0x0811f8a0
 811b804:	0811f850 	.word	0x0811f850
 811b808:	0811f8b8 	.word	0x0811f8b8
 811b80c:	1000b244 	.word	0x1000b244
 811b810:	10011d80 	.word	0x10011d80
 811b814:	0811f8d4 	.word	0x0811f8d4
 811b818:	1000b254 	.word	0x1000b254

0811b81c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811b81c:	b480      	push	{r7}
 811b81e:	b085      	sub	sp, #20
 811b820:	af00      	add	r7, sp, #0
 811b822:	6078      	str	r0, [r7, #4]
 811b824:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 811b826:	687b      	ldr	r3, [r7, #4]
 811b828:	2b00      	cmp	r3, #0
 811b82a:	d01e      	beq.n	811b86a <udp_netif_ip_addr_changed+0x4e>
 811b82c:	687b      	ldr	r3, [r7, #4]
 811b82e:	681b      	ldr	r3, [r3, #0]
 811b830:	2b00      	cmp	r3, #0
 811b832:	d01a      	beq.n	811b86a <udp_netif_ip_addr_changed+0x4e>
 811b834:	683b      	ldr	r3, [r7, #0]
 811b836:	2b00      	cmp	r3, #0
 811b838:	d017      	beq.n	811b86a <udp_netif_ip_addr_changed+0x4e>
 811b83a:	683b      	ldr	r3, [r7, #0]
 811b83c:	681b      	ldr	r3, [r3, #0]
 811b83e:	2b00      	cmp	r3, #0
 811b840:	d013      	beq.n	811b86a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 811b842:	4b0d      	ldr	r3, [pc, #52]	@ (811b878 <udp_netif_ip_addr_changed+0x5c>)
 811b844:	681b      	ldr	r3, [r3, #0]
 811b846:	60fb      	str	r3, [r7, #12]
 811b848:	e00c      	b.n	811b864 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 811b84a:	68fb      	ldr	r3, [r7, #12]
 811b84c:	681a      	ldr	r2, [r3, #0]
 811b84e:	687b      	ldr	r3, [r7, #4]
 811b850:	681b      	ldr	r3, [r3, #0]
 811b852:	429a      	cmp	r2, r3
 811b854:	d103      	bne.n	811b85e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 811b856:	683b      	ldr	r3, [r7, #0]
 811b858:	681a      	ldr	r2, [r3, #0]
 811b85a:	68fb      	ldr	r3, [r7, #12]
 811b85c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 811b85e:	68fb      	ldr	r3, [r7, #12]
 811b860:	68db      	ldr	r3, [r3, #12]
 811b862:	60fb      	str	r3, [r7, #12]
 811b864:	68fb      	ldr	r3, [r7, #12]
 811b866:	2b00      	cmp	r3, #0
 811b868:	d1ef      	bne.n	811b84a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 811b86a:	bf00      	nop
 811b86c:	3714      	adds	r7, #20
 811b86e:	46bd      	mov	sp, r7
 811b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b874:	4770      	bx	lr
 811b876:	bf00      	nop
 811b878:	10011d80 	.word	0x10011d80

0811b87c <_ZdlPvj>:
 811b87c:	f000 b8da 	b.w	811ba34 <_ZdlPv>

0811b880 <_Znwj>:
 811b880:	2801      	cmp	r0, #1
 811b882:	bf38      	it	cc
 811b884:	2001      	movcc	r0, #1
 811b886:	b510      	push	{r4, lr}
 811b888:	4604      	mov	r4, r0
 811b88a:	4620      	mov	r0, r4
 811b88c:	f000 f908 	bl	811baa0 <malloc>
 811b890:	b100      	cbz	r0, 811b894 <_Znwj+0x14>
 811b892:	bd10      	pop	{r4, pc}
 811b894:	f000 f8d0 	bl	811ba38 <_ZSt15get_new_handlerv>
 811b898:	b908      	cbnz	r0, 811b89e <_Znwj+0x1e>
 811b89a:	f000 f8f9 	bl	811ba90 <abort>
 811b89e:	4780      	blx	r0
 811b8a0:	e7f3      	b.n	811b88a <_Znwj+0xa>

0811b8a2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 811b8a2:	68c3      	ldr	r3, [r0, #12]
 811b8a4:	689a      	ldr	r2, [r3, #8]
 811b8a6:	60c2      	str	r2, [r0, #12]
 811b8a8:	b510      	push	{r4, lr}
 811b8aa:	b102      	cbz	r2, 811b8ae <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 811b8ac:	6050      	str	r0, [r2, #4]
 811b8ae:	6842      	ldr	r2, [r0, #4]
 811b8b0:	605a      	str	r2, [r3, #4]
 811b8b2:	680c      	ldr	r4, [r1, #0]
 811b8b4:	4284      	cmp	r4, r0
 811b8b6:	d103      	bne.n	811b8c0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 811b8b8:	600b      	str	r3, [r1, #0]
 811b8ba:	6098      	str	r0, [r3, #8]
 811b8bc:	6043      	str	r3, [r0, #4]
 811b8be:	bd10      	pop	{r4, pc}
 811b8c0:	6891      	ldr	r1, [r2, #8]
 811b8c2:	4281      	cmp	r1, r0
 811b8c4:	bf0c      	ite	eq
 811b8c6:	6093      	streq	r3, [r2, #8]
 811b8c8:	60d3      	strne	r3, [r2, #12]
 811b8ca:	e7f6      	b.n	811b8ba <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0811b8cc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 811b8cc:	6883      	ldr	r3, [r0, #8]
 811b8ce:	68da      	ldr	r2, [r3, #12]
 811b8d0:	6082      	str	r2, [r0, #8]
 811b8d2:	b510      	push	{r4, lr}
 811b8d4:	b102      	cbz	r2, 811b8d8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 811b8d6:	6050      	str	r0, [r2, #4]
 811b8d8:	6842      	ldr	r2, [r0, #4]
 811b8da:	605a      	str	r2, [r3, #4]
 811b8dc:	680c      	ldr	r4, [r1, #0]
 811b8de:	4284      	cmp	r4, r0
 811b8e0:	d103      	bne.n	811b8ea <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 811b8e2:	600b      	str	r3, [r1, #0]
 811b8e4:	60d8      	str	r0, [r3, #12]
 811b8e6:	6043      	str	r3, [r0, #4]
 811b8e8:	bd10      	pop	{r4, pc}
 811b8ea:	68d1      	ldr	r1, [r2, #12]
 811b8ec:	4281      	cmp	r1, r0
 811b8ee:	bf0c      	ite	eq
 811b8f0:	60d3      	streq	r3, [r2, #12]
 811b8f2:	6093      	strne	r3, [r2, #8]
 811b8f4:	e7f6      	b.n	811b8e4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0811b8f6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 811b8f6:	68c3      	ldr	r3, [r0, #12]
 811b8f8:	b123      	cbz	r3, 811b904 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 811b8fa:	4618      	mov	r0, r3
 811b8fc:	689b      	ldr	r3, [r3, #8]
 811b8fe:	2b00      	cmp	r3, #0
 811b900:	d1fb      	bne.n	811b8fa <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 811b902:	4770      	bx	lr
 811b904:	6843      	ldr	r3, [r0, #4]
 811b906:	68da      	ldr	r2, [r3, #12]
 811b908:	4282      	cmp	r2, r0
 811b90a:	d004      	beq.n	811b916 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 811b90c:	68c2      	ldr	r2, [r0, #12]
 811b90e:	4293      	cmp	r3, r2
 811b910:	bf18      	it	ne
 811b912:	4618      	movne	r0, r3
 811b914:	4770      	bx	lr
 811b916:	4618      	mov	r0, r3
 811b918:	685b      	ldr	r3, [r3, #4]
 811b91a:	e7f4      	b.n	811b906 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

0811b91c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 811b91c:	7802      	ldrb	r2, [r0, #0]
 811b91e:	4603      	mov	r3, r0
 811b920:	b92a      	cbnz	r2, 811b92e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 811b922:	6842      	ldr	r2, [r0, #4]
 811b924:	6852      	ldr	r2, [r2, #4]
 811b926:	4282      	cmp	r2, r0
 811b928:	d101      	bne.n	811b92e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 811b92a:	68d0      	ldr	r0, [r2, #12]
 811b92c:	4770      	bx	lr
 811b92e:	689a      	ldr	r2, [r3, #8]
 811b930:	b122      	cbz	r2, 811b93c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 811b932:	4610      	mov	r0, r2
 811b934:	68d2      	ldr	r2, [r2, #12]
 811b936:	2a00      	cmp	r2, #0
 811b938:	d1fb      	bne.n	811b932 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 811b93a:	4770      	bx	lr
 811b93c:	6858      	ldr	r0, [r3, #4]
 811b93e:	6882      	ldr	r2, [r0, #8]
 811b940:	429a      	cmp	r2, r3
 811b942:	d000      	beq.n	811b946 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 811b944:	4770      	bx	lr
 811b946:	4603      	mov	r3, r0
 811b948:	6840      	ldr	r0, [r0, #4]
 811b94a:	e7f8      	b.n	811b93e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0811b94c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 811b94c:	f7ff bfd3 	b.w	811b8f6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0811b950 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 811b950:	f7ff bfe4 	b.w	811b91c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0811b954 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 811b954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811b958:	461d      	mov	r5, r3
 811b95a:	1d1f      	adds	r7, r3, #4
 811b95c:	2300      	movs	r3, #0
 811b95e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 811b962:	460c      	mov	r4, r1
 811b964:	604a      	str	r2, [r1, #4]
 811b966:	700b      	strb	r3, [r1, #0]
 811b968:	b1a0      	cbz	r0, 811b994 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 811b96a:	4295      	cmp	r5, r2
 811b96c:	6091      	str	r1, [r2, #8]
 811b96e:	d102      	bne.n	811b976 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 811b970:	6069      	str	r1, [r5, #4]
 811b972:	60ec      	str	r4, [r5, #12]
 811b974:	e003      	b.n	811b97e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 811b976:	68ab      	ldr	r3, [r5, #8]
 811b978:	4293      	cmp	r3, r2
 811b97a:	bf08      	it	eq
 811b97c:	60a9      	streq	r1, [r5, #8]
 811b97e:	f04f 0900 	mov.w	r9, #0
 811b982:	f04f 0801 	mov.w	r8, #1
 811b986:	686b      	ldr	r3, [r5, #4]
 811b988:	42a3      	cmp	r3, r4
 811b98a:	d132      	bne.n	811b9f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 811b98c:	2201      	movs	r2, #1
 811b98e:	701a      	strb	r2, [r3, #0]
 811b990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811b994:	60d1      	str	r1, [r2, #12]
 811b996:	68eb      	ldr	r3, [r5, #12]
 811b998:	4293      	cmp	r3, r2
 811b99a:	d1f0      	bne.n	811b97e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 811b99c:	e7e9      	b.n	811b972 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 811b99e:	68c3      	ldr	r3, [r0, #12]
 811b9a0:	42a3      	cmp	r3, r4
 811b9a2:	d103      	bne.n	811b9ac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 811b9a4:	4639      	mov	r1, r7
 811b9a6:	f7ff ff7c 	bl	811b8a2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 811b9aa:	4604      	mov	r4, r0
 811b9ac:	6863      	ldr	r3, [r4, #4]
 811b9ae:	4639      	mov	r1, r7
 811b9b0:	f883 8000 	strb.w	r8, [r3]
 811b9b4:	4630      	mov	r0, r6
 811b9b6:	f886 9000 	strb.w	r9, [r6]
 811b9ba:	f7ff ff87 	bl	811b8cc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 811b9be:	e7e2      	b.n	811b986 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 811b9c0:	b133      	cbz	r3, 811b9d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 811b9c2:	781a      	ldrb	r2, [r3, #0]
 811b9c4:	b922      	cbnz	r2, 811b9d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 811b9c6:	f880 8000 	strb.w	r8, [r0]
 811b9ca:	f883 8000 	strb.w	r8, [r3]
 811b9ce:	e021      	b.n	811ba14 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 811b9d0:	6883      	ldr	r3, [r0, #8]
 811b9d2:	42a3      	cmp	r3, r4
 811b9d4:	d103      	bne.n	811b9de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 811b9d6:	4639      	mov	r1, r7
 811b9d8:	f7ff ff78 	bl	811b8cc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 811b9dc:	4604      	mov	r4, r0
 811b9de:	6863      	ldr	r3, [r4, #4]
 811b9e0:	4639      	mov	r1, r7
 811b9e2:	f883 8000 	strb.w	r8, [r3]
 811b9e6:	4630      	mov	r0, r6
 811b9e8:	f886 9000 	strb.w	r9, [r6]
 811b9ec:	f7ff ff59 	bl	811b8a2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 811b9f0:	e7c9      	b.n	811b986 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 811b9f2:	6860      	ldr	r0, [r4, #4]
 811b9f4:	7802      	ldrb	r2, [r0, #0]
 811b9f6:	2a00      	cmp	r2, #0
 811b9f8:	d1c8      	bne.n	811b98c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 811b9fa:	6846      	ldr	r6, [r0, #4]
 811b9fc:	68b3      	ldr	r3, [r6, #8]
 811b9fe:	4283      	cmp	r3, r0
 811ba00:	d1de      	bne.n	811b9c0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 811ba02:	68f2      	ldr	r2, [r6, #12]
 811ba04:	2a00      	cmp	r2, #0
 811ba06:	d0ca      	beq.n	811b99e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 811ba08:	7811      	ldrb	r1, [r2, #0]
 811ba0a:	2900      	cmp	r1, #0
 811ba0c:	d1c7      	bne.n	811b99e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 811ba0e:	2101      	movs	r1, #1
 811ba10:	7019      	strb	r1, [r3, #0]
 811ba12:	7011      	strb	r1, [r2, #0]
 811ba14:	f886 9000 	strb.w	r9, [r6]
 811ba18:	4634      	mov	r4, r6
 811ba1a:	e7b4      	b.n	811b986 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

0811ba1c <_ZSt17__throw_bad_allocv>:
 811ba1c:	b508      	push	{r3, lr}
 811ba1e:	f000 f837 	bl	811ba90 <abort>

0811ba22 <_ZSt28__throw_bad_array_new_lengthv>:
 811ba22:	b508      	push	{r3, lr}
 811ba24:	f000 f834 	bl	811ba90 <abort>

0811ba28 <_ZSt20__throw_length_errorPKc>:
 811ba28:	b508      	push	{r3, lr}
 811ba2a:	f000 f831 	bl	811ba90 <abort>

0811ba2e <_ZSt25__throw_bad_function_callv>:
 811ba2e:	b508      	push	{r3, lr}
 811ba30:	f000 f82e 	bl	811ba90 <abort>

0811ba34 <_ZdlPv>:
 811ba34:	f000 b83c 	b.w	811bab0 <free>

0811ba38 <_ZSt15get_new_handlerv>:
 811ba38:	4b02      	ldr	r3, [pc, #8]	@ (811ba44 <_ZSt15get_new_handlerv+0xc>)
 811ba3a:	6818      	ldr	r0, [r3, #0]
 811ba3c:	f3bf 8f5b 	dmb	ish
 811ba40:	4770      	bx	lr
 811ba42:	bf00      	nop
 811ba44:	10011d84 	.word	0x10011d84

0811ba48 <roundf>:
 811ba48:	ee10 0a10 	vmov	r0, s0
 811ba4c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 811ba50:	3a7f      	subs	r2, #127	@ 0x7f
 811ba52:	2a16      	cmp	r2, #22
 811ba54:	dc15      	bgt.n	811ba82 <roundf+0x3a>
 811ba56:	2a00      	cmp	r2, #0
 811ba58:	da08      	bge.n	811ba6c <roundf+0x24>
 811ba5a:	3201      	adds	r2, #1
 811ba5c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 811ba60:	d101      	bne.n	811ba66 <roundf+0x1e>
 811ba62:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 811ba66:	ee00 3a10 	vmov	s0, r3
 811ba6a:	4770      	bx	lr
 811ba6c:	4907      	ldr	r1, [pc, #28]	@ (811ba8c <roundf+0x44>)
 811ba6e:	4111      	asrs	r1, r2
 811ba70:	4201      	tst	r1, r0
 811ba72:	d0fa      	beq.n	811ba6a <roundf+0x22>
 811ba74:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 811ba78:	4113      	asrs	r3, r2
 811ba7a:	4403      	add	r3, r0
 811ba7c:	ea23 0301 	bic.w	r3, r3, r1
 811ba80:	e7f1      	b.n	811ba66 <roundf+0x1e>
 811ba82:	2a80      	cmp	r2, #128	@ 0x80
 811ba84:	d1f1      	bne.n	811ba6a <roundf+0x22>
 811ba86:	ee30 0a00 	vadd.f32	s0, s0, s0
 811ba8a:	4770      	bx	lr
 811ba8c:	007fffff 	.word	0x007fffff

0811ba90 <abort>:
 811ba90:	b508      	push	{r3, lr}
 811ba92:	2006      	movs	r0, #6
 811ba94:	f000 fa84 	bl	811bfa0 <raise>
 811ba98:	2001      	movs	r0, #1
 811ba9a:	f7e5 f8c3 	bl	8100c24 <_exit>
	...

0811baa0 <malloc>:
 811baa0:	4b02      	ldr	r3, [pc, #8]	@ (811baac <malloc+0xc>)
 811baa2:	4601      	mov	r1, r0
 811baa4:	6818      	ldr	r0, [r3, #0]
 811baa6:	f000 b82d 	b.w	811bb04 <_malloc_r>
 811baaa:	bf00      	nop
 811baac:	10000040 	.word	0x10000040

0811bab0 <free>:
 811bab0:	4b02      	ldr	r3, [pc, #8]	@ (811babc <free+0xc>)
 811bab2:	4601      	mov	r1, r0
 811bab4:	6818      	ldr	r0, [r3, #0]
 811bab6:	f000 bb8f 	b.w	811c1d8 <_free_r>
 811baba:	bf00      	nop
 811babc:	10000040 	.word	0x10000040

0811bac0 <sbrk_aligned>:
 811bac0:	b570      	push	{r4, r5, r6, lr}
 811bac2:	4e0f      	ldr	r6, [pc, #60]	@ (811bb00 <sbrk_aligned+0x40>)
 811bac4:	460c      	mov	r4, r1
 811bac6:	6831      	ldr	r1, [r6, #0]
 811bac8:	4605      	mov	r5, r0
 811baca:	b911      	cbnz	r1, 811bad2 <sbrk_aligned+0x12>
 811bacc:	f000 fb0e 	bl	811c0ec <_sbrk_r>
 811bad0:	6030      	str	r0, [r6, #0]
 811bad2:	4621      	mov	r1, r4
 811bad4:	4628      	mov	r0, r5
 811bad6:	f000 fb09 	bl	811c0ec <_sbrk_r>
 811bada:	1c43      	adds	r3, r0, #1
 811badc:	d103      	bne.n	811bae6 <sbrk_aligned+0x26>
 811bade:	f04f 34ff 	mov.w	r4, #4294967295
 811bae2:	4620      	mov	r0, r4
 811bae4:	bd70      	pop	{r4, r5, r6, pc}
 811bae6:	1cc4      	adds	r4, r0, #3
 811bae8:	f024 0403 	bic.w	r4, r4, #3
 811baec:	42a0      	cmp	r0, r4
 811baee:	d0f8      	beq.n	811bae2 <sbrk_aligned+0x22>
 811baf0:	1a21      	subs	r1, r4, r0
 811baf2:	4628      	mov	r0, r5
 811baf4:	f000 fafa 	bl	811c0ec <_sbrk_r>
 811baf8:	3001      	adds	r0, #1
 811bafa:	d1f2      	bne.n	811bae2 <sbrk_aligned+0x22>
 811bafc:	e7ef      	b.n	811bade <sbrk_aligned+0x1e>
 811bafe:	bf00      	nop
 811bb00:	10011d88 	.word	0x10011d88

0811bb04 <_malloc_r>:
 811bb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811bb08:	1ccd      	adds	r5, r1, #3
 811bb0a:	f025 0503 	bic.w	r5, r5, #3
 811bb0e:	3508      	adds	r5, #8
 811bb10:	2d0c      	cmp	r5, #12
 811bb12:	bf38      	it	cc
 811bb14:	250c      	movcc	r5, #12
 811bb16:	2d00      	cmp	r5, #0
 811bb18:	4606      	mov	r6, r0
 811bb1a:	db01      	blt.n	811bb20 <_malloc_r+0x1c>
 811bb1c:	42a9      	cmp	r1, r5
 811bb1e:	d904      	bls.n	811bb2a <_malloc_r+0x26>
 811bb20:	230c      	movs	r3, #12
 811bb22:	6033      	str	r3, [r6, #0]
 811bb24:	2000      	movs	r0, #0
 811bb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811bb2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 811bc00 <_malloc_r+0xfc>
 811bb2e:	f000 f869 	bl	811bc04 <__malloc_lock>
 811bb32:	f8d8 3000 	ldr.w	r3, [r8]
 811bb36:	461c      	mov	r4, r3
 811bb38:	bb44      	cbnz	r4, 811bb8c <_malloc_r+0x88>
 811bb3a:	4629      	mov	r1, r5
 811bb3c:	4630      	mov	r0, r6
 811bb3e:	f7ff ffbf 	bl	811bac0 <sbrk_aligned>
 811bb42:	1c43      	adds	r3, r0, #1
 811bb44:	4604      	mov	r4, r0
 811bb46:	d158      	bne.n	811bbfa <_malloc_r+0xf6>
 811bb48:	f8d8 4000 	ldr.w	r4, [r8]
 811bb4c:	4627      	mov	r7, r4
 811bb4e:	2f00      	cmp	r7, #0
 811bb50:	d143      	bne.n	811bbda <_malloc_r+0xd6>
 811bb52:	2c00      	cmp	r4, #0
 811bb54:	d04b      	beq.n	811bbee <_malloc_r+0xea>
 811bb56:	6823      	ldr	r3, [r4, #0]
 811bb58:	4639      	mov	r1, r7
 811bb5a:	4630      	mov	r0, r6
 811bb5c:	eb04 0903 	add.w	r9, r4, r3
 811bb60:	f000 fac4 	bl	811c0ec <_sbrk_r>
 811bb64:	4581      	cmp	r9, r0
 811bb66:	d142      	bne.n	811bbee <_malloc_r+0xea>
 811bb68:	6821      	ldr	r1, [r4, #0]
 811bb6a:	1a6d      	subs	r5, r5, r1
 811bb6c:	4629      	mov	r1, r5
 811bb6e:	4630      	mov	r0, r6
 811bb70:	f7ff ffa6 	bl	811bac0 <sbrk_aligned>
 811bb74:	3001      	adds	r0, #1
 811bb76:	d03a      	beq.n	811bbee <_malloc_r+0xea>
 811bb78:	6823      	ldr	r3, [r4, #0]
 811bb7a:	442b      	add	r3, r5
 811bb7c:	6023      	str	r3, [r4, #0]
 811bb7e:	f8d8 3000 	ldr.w	r3, [r8]
 811bb82:	685a      	ldr	r2, [r3, #4]
 811bb84:	bb62      	cbnz	r2, 811bbe0 <_malloc_r+0xdc>
 811bb86:	f8c8 7000 	str.w	r7, [r8]
 811bb8a:	e00f      	b.n	811bbac <_malloc_r+0xa8>
 811bb8c:	6822      	ldr	r2, [r4, #0]
 811bb8e:	1b52      	subs	r2, r2, r5
 811bb90:	d420      	bmi.n	811bbd4 <_malloc_r+0xd0>
 811bb92:	2a0b      	cmp	r2, #11
 811bb94:	d917      	bls.n	811bbc6 <_malloc_r+0xc2>
 811bb96:	1961      	adds	r1, r4, r5
 811bb98:	42a3      	cmp	r3, r4
 811bb9a:	6025      	str	r5, [r4, #0]
 811bb9c:	bf18      	it	ne
 811bb9e:	6059      	strne	r1, [r3, #4]
 811bba0:	6863      	ldr	r3, [r4, #4]
 811bba2:	bf08      	it	eq
 811bba4:	f8c8 1000 	streq.w	r1, [r8]
 811bba8:	5162      	str	r2, [r4, r5]
 811bbaa:	604b      	str	r3, [r1, #4]
 811bbac:	4630      	mov	r0, r6
 811bbae:	f000 f82f 	bl	811bc10 <__malloc_unlock>
 811bbb2:	f104 000b 	add.w	r0, r4, #11
 811bbb6:	1d23      	adds	r3, r4, #4
 811bbb8:	f020 0007 	bic.w	r0, r0, #7
 811bbbc:	1ac2      	subs	r2, r0, r3
 811bbbe:	bf1c      	itt	ne
 811bbc0:	1a1b      	subne	r3, r3, r0
 811bbc2:	50a3      	strne	r3, [r4, r2]
 811bbc4:	e7af      	b.n	811bb26 <_malloc_r+0x22>
 811bbc6:	6862      	ldr	r2, [r4, #4]
 811bbc8:	42a3      	cmp	r3, r4
 811bbca:	bf0c      	ite	eq
 811bbcc:	f8c8 2000 	streq.w	r2, [r8]
 811bbd0:	605a      	strne	r2, [r3, #4]
 811bbd2:	e7eb      	b.n	811bbac <_malloc_r+0xa8>
 811bbd4:	4623      	mov	r3, r4
 811bbd6:	6864      	ldr	r4, [r4, #4]
 811bbd8:	e7ae      	b.n	811bb38 <_malloc_r+0x34>
 811bbda:	463c      	mov	r4, r7
 811bbdc:	687f      	ldr	r7, [r7, #4]
 811bbde:	e7b6      	b.n	811bb4e <_malloc_r+0x4a>
 811bbe0:	461a      	mov	r2, r3
 811bbe2:	685b      	ldr	r3, [r3, #4]
 811bbe4:	42a3      	cmp	r3, r4
 811bbe6:	d1fb      	bne.n	811bbe0 <_malloc_r+0xdc>
 811bbe8:	2300      	movs	r3, #0
 811bbea:	6053      	str	r3, [r2, #4]
 811bbec:	e7de      	b.n	811bbac <_malloc_r+0xa8>
 811bbee:	230c      	movs	r3, #12
 811bbf0:	6033      	str	r3, [r6, #0]
 811bbf2:	4630      	mov	r0, r6
 811bbf4:	f000 f80c 	bl	811bc10 <__malloc_unlock>
 811bbf8:	e794      	b.n	811bb24 <_malloc_r+0x20>
 811bbfa:	6005      	str	r5, [r0, #0]
 811bbfc:	e7d6      	b.n	811bbac <_malloc_r+0xa8>
 811bbfe:	bf00      	nop
 811bc00:	10011d8c 	.word	0x10011d8c

0811bc04 <__malloc_lock>:
 811bc04:	4801      	ldr	r0, [pc, #4]	@ (811bc0c <__malloc_lock+0x8>)
 811bc06:	f000 bab8 	b.w	811c17a <__retarget_lock_acquire_recursive>
 811bc0a:	bf00      	nop
 811bc0c:	10011ed0 	.word	0x10011ed0

0811bc10 <__malloc_unlock>:
 811bc10:	4801      	ldr	r0, [pc, #4]	@ (811bc18 <__malloc_unlock+0x8>)
 811bc12:	f000 bab3 	b.w	811c17c <__retarget_lock_release_recursive>
 811bc16:	bf00      	nop
 811bc18:	10011ed0 	.word	0x10011ed0

0811bc1c <rand>:
 811bc1c:	4b16      	ldr	r3, [pc, #88]	@ (811bc78 <rand+0x5c>)
 811bc1e:	b510      	push	{r4, lr}
 811bc20:	681c      	ldr	r4, [r3, #0]
 811bc22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 811bc24:	b9b3      	cbnz	r3, 811bc54 <rand+0x38>
 811bc26:	2018      	movs	r0, #24
 811bc28:	f7ff ff3a 	bl	811baa0 <malloc>
 811bc2c:	4602      	mov	r2, r0
 811bc2e:	6320      	str	r0, [r4, #48]	@ 0x30
 811bc30:	b920      	cbnz	r0, 811bc3c <rand+0x20>
 811bc32:	4b12      	ldr	r3, [pc, #72]	@ (811bc7c <rand+0x60>)
 811bc34:	4812      	ldr	r0, [pc, #72]	@ (811bc80 <rand+0x64>)
 811bc36:	2152      	movs	r1, #82	@ 0x52
 811bc38:	f000 fab0 	bl	811c19c <__assert_func>
 811bc3c:	4911      	ldr	r1, [pc, #68]	@ (811bc84 <rand+0x68>)
 811bc3e:	4b12      	ldr	r3, [pc, #72]	@ (811bc88 <rand+0x6c>)
 811bc40:	e9c0 1300 	strd	r1, r3, [r0]
 811bc44:	4b11      	ldr	r3, [pc, #68]	@ (811bc8c <rand+0x70>)
 811bc46:	6083      	str	r3, [r0, #8]
 811bc48:	230b      	movs	r3, #11
 811bc4a:	8183      	strh	r3, [r0, #12]
 811bc4c:	2100      	movs	r1, #0
 811bc4e:	2001      	movs	r0, #1
 811bc50:	e9c2 0104 	strd	r0, r1, [r2, #16]
 811bc54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 811bc56:	480e      	ldr	r0, [pc, #56]	@ (811bc90 <rand+0x74>)
 811bc58:	690b      	ldr	r3, [r1, #16]
 811bc5a:	694c      	ldr	r4, [r1, #20]
 811bc5c:	4a0d      	ldr	r2, [pc, #52]	@ (811bc94 <rand+0x78>)
 811bc5e:	4358      	muls	r0, r3
 811bc60:	fb02 0004 	mla	r0, r2, r4, r0
 811bc64:	fba3 3202 	umull	r3, r2, r3, r2
 811bc68:	3301      	adds	r3, #1
 811bc6a:	eb40 0002 	adc.w	r0, r0, r2
 811bc6e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 811bc72:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 811bc76:	bd10      	pop	{r4, pc}
 811bc78:	10000040 	.word	0x10000040
 811bc7c:	0811fd34 	.word	0x0811fd34
 811bc80:	0811fd4b 	.word	0x0811fd4b
 811bc84:	abcd330e 	.word	0xabcd330e
 811bc88:	e66d1234 	.word	0xe66d1234
 811bc8c:	0005deec 	.word	0x0005deec
 811bc90:	5851f42d 	.word	0x5851f42d
 811bc94:	4c957f2d 	.word	0x4c957f2d

0811bc98 <std>:
 811bc98:	2300      	movs	r3, #0
 811bc9a:	b510      	push	{r4, lr}
 811bc9c:	4604      	mov	r4, r0
 811bc9e:	e9c0 3300 	strd	r3, r3, [r0]
 811bca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811bca6:	6083      	str	r3, [r0, #8]
 811bca8:	8181      	strh	r1, [r0, #12]
 811bcaa:	6643      	str	r3, [r0, #100]	@ 0x64
 811bcac:	81c2      	strh	r2, [r0, #14]
 811bcae:	6183      	str	r3, [r0, #24]
 811bcb0:	4619      	mov	r1, r3
 811bcb2:	2208      	movs	r2, #8
 811bcb4:	305c      	adds	r0, #92	@ 0x5c
 811bcb6:	f000 f930 	bl	811bf1a <memset>
 811bcba:	4b0d      	ldr	r3, [pc, #52]	@ (811bcf0 <std+0x58>)
 811bcbc:	6263      	str	r3, [r4, #36]	@ 0x24
 811bcbe:	4b0d      	ldr	r3, [pc, #52]	@ (811bcf4 <std+0x5c>)
 811bcc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 811bcc2:	4b0d      	ldr	r3, [pc, #52]	@ (811bcf8 <std+0x60>)
 811bcc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 811bcc6:	4b0d      	ldr	r3, [pc, #52]	@ (811bcfc <std+0x64>)
 811bcc8:	6323      	str	r3, [r4, #48]	@ 0x30
 811bcca:	4b0d      	ldr	r3, [pc, #52]	@ (811bd00 <std+0x68>)
 811bccc:	6224      	str	r4, [r4, #32]
 811bcce:	429c      	cmp	r4, r3
 811bcd0:	d006      	beq.n	811bce0 <std+0x48>
 811bcd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 811bcd6:	4294      	cmp	r4, r2
 811bcd8:	d002      	beq.n	811bce0 <std+0x48>
 811bcda:	33d0      	adds	r3, #208	@ 0xd0
 811bcdc:	429c      	cmp	r4, r3
 811bcde:	d105      	bne.n	811bcec <std+0x54>
 811bce0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 811bce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811bce8:	f000 ba46 	b.w	811c178 <__retarget_lock_init_recursive>
 811bcec:	bd10      	pop	{r4, pc}
 811bcee:	bf00      	nop
 811bcf0:	0811be41 	.word	0x0811be41
 811bcf4:	0811be63 	.word	0x0811be63
 811bcf8:	0811be9b 	.word	0x0811be9b
 811bcfc:	0811bebf 	.word	0x0811bebf
 811bd00:	10011d90 	.word	0x10011d90

0811bd04 <stdio_exit_handler>:
 811bd04:	4a02      	ldr	r2, [pc, #8]	@ (811bd10 <stdio_exit_handler+0xc>)
 811bd06:	4903      	ldr	r1, [pc, #12]	@ (811bd14 <stdio_exit_handler+0x10>)
 811bd08:	4803      	ldr	r0, [pc, #12]	@ (811bd18 <stdio_exit_handler+0x14>)
 811bd0a:	f000 b869 	b.w	811bde0 <_fwalk_sglue>
 811bd0e:	bf00      	nop
 811bd10:	10000034 	.word	0x10000034
 811bd14:	0811c915 	.word	0x0811c915
 811bd18:	10000044 	.word	0x10000044

0811bd1c <cleanup_stdio>:
 811bd1c:	6841      	ldr	r1, [r0, #4]
 811bd1e:	4b0c      	ldr	r3, [pc, #48]	@ (811bd50 <cleanup_stdio+0x34>)
 811bd20:	4299      	cmp	r1, r3
 811bd22:	b510      	push	{r4, lr}
 811bd24:	4604      	mov	r4, r0
 811bd26:	d001      	beq.n	811bd2c <cleanup_stdio+0x10>
 811bd28:	f000 fdf4 	bl	811c914 <_fflush_r>
 811bd2c:	68a1      	ldr	r1, [r4, #8]
 811bd2e:	4b09      	ldr	r3, [pc, #36]	@ (811bd54 <cleanup_stdio+0x38>)
 811bd30:	4299      	cmp	r1, r3
 811bd32:	d002      	beq.n	811bd3a <cleanup_stdio+0x1e>
 811bd34:	4620      	mov	r0, r4
 811bd36:	f000 fded 	bl	811c914 <_fflush_r>
 811bd3a:	68e1      	ldr	r1, [r4, #12]
 811bd3c:	4b06      	ldr	r3, [pc, #24]	@ (811bd58 <cleanup_stdio+0x3c>)
 811bd3e:	4299      	cmp	r1, r3
 811bd40:	d004      	beq.n	811bd4c <cleanup_stdio+0x30>
 811bd42:	4620      	mov	r0, r4
 811bd44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811bd48:	f000 bde4 	b.w	811c914 <_fflush_r>
 811bd4c:	bd10      	pop	{r4, pc}
 811bd4e:	bf00      	nop
 811bd50:	10011d90 	.word	0x10011d90
 811bd54:	10011df8 	.word	0x10011df8
 811bd58:	10011e60 	.word	0x10011e60

0811bd5c <global_stdio_init.part.0>:
 811bd5c:	b510      	push	{r4, lr}
 811bd5e:	4b0b      	ldr	r3, [pc, #44]	@ (811bd8c <global_stdio_init.part.0+0x30>)
 811bd60:	4c0b      	ldr	r4, [pc, #44]	@ (811bd90 <global_stdio_init.part.0+0x34>)
 811bd62:	4a0c      	ldr	r2, [pc, #48]	@ (811bd94 <global_stdio_init.part.0+0x38>)
 811bd64:	601a      	str	r2, [r3, #0]
 811bd66:	4620      	mov	r0, r4
 811bd68:	2200      	movs	r2, #0
 811bd6a:	2104      	movs	r1, #4
 811bd6c:	f7ff ff94 	bl	811bc98 <std>
 811bd70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 811bd74:	2201      	movs	r2, #1
 811bd76:	2109      	movs	r1, #9
 811bd78:	f7ff ff8e 	bl	811bc98 <std>
 811bd7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 811bd80:	2202      	movs	r2, #2
 811bd82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811bd86:	2112      	movs	r1, #18
 811bd88:	f7ff bf86 	b.w	811bc98 <std>
 811bd8c:	10011ec8 	.word	0x10011ec8
 811bd90:	10011d90 	.word	0x10011d90
 811bd94:	0811bd05 	.word	0x0811bd05

0811bd98 <__sfp_lock_acquire>:
 811bd98:	4801      	ldr	r0, [pc, #4]	@ (811bda0 <__sfp_lock_acquire+0x8>)
 811bd9a:	f000 b9ee 	b.w	811c17a <__retarget_lock_acquire_recursive>
 811bd9e:	bf00      	nop
 811bda0:	10011ed1 	.word	0x10011ed1

0811bda4 <__sfp_lock_release>:
 811bda4:	4801      	ldr	r0, [pc, #4]	@ (811bdac <__sfp_lock_release+0x8>)
 811bda6:	f000 b9e9 	b.w	811c17c <__retarget_lock_release_recursive>
 811bdaa:	bf00      	nop
 811bdac:	10011ed1 	.word	0x10011ed1

0811bdb0 <__sinit>:
 811bdb0:	b510      	push	{r4, lr}
 811bdb2:	4604      	mov	r4, r0
 811bdb4:	f7ff fff0 	bl	811bd98 <__sfp_lock_acquire>
 811bdb8:	6a23      	ldr	r3, [r4, #32]
 811bdba:	b11b      	cbz	r3, 811bdc4 <__sinit+0x14>
 811bdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811bdc0:	f7ff bff0 	b.w	811bda4 <__sfp_lock_release>
 811bdc4:	4b04      	ldr	r3, [pc, #16]	@ (811bdd8 <__sinit+0x28>)
 811bdc6:	6223      	str	r3, [r4, #32]
 811bdc8:	4b04      	ldr	r3, [pc, #16]	@ (811bddc <__sinit+0x2c>)
 811bdca:	681b      	ldr	r3, [r3, #0]
 811bdcc:	2b00      	cmp	r3, #0
 811bdce:	d1f5      	bne.n	811bdbc <__sinit+0xc>
 811bdd0:	f7ff ffc4 	bl	811bd5c <global_stdio_init.part.0>
 811bdd4:	e7f2      	b.n	811bdbc <__sinit+0xc>
 811bdd6:	bf00      	nop
 811bdd8:	0811bd1d 	.word	0x0811bd1d
 811bddc:	10011ec8 	.word	0x10011ec8

0811bde0 <_fwalk_sglue>:
 811bde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811bde4:	4607      	mov	r7, r0
 811bde6:	4688      	mov	r8, r1
 811bde8:	4614      	mov	r4, r2
 811bdea:	2600      	movs	r6, #0
 811bdec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 811bdf0:	f1b9 0901 	subs.w	r9, r9, #1
 811bdf4:	d505      	bpl.n	811be02 <_fwalk_sglue+0x22>
 811bdf6:	6824      	ldr	r4, [r4, #0]
 811bdf8:	2c00      	cmp	r4, #0
 811bdfa:	d1f7      	bne.n	811bdec <_fwalk_sglue+0xc>
 811bdfc:	4630      	mov	r0, r6
 811bdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811be02:	89ab      	ldrh	r3, [r5, #12]
 811be04:	2b01      	cmp	r3, #1
 811be06:	d907      	bls.n	811be18 <_fwalk_sglue+0x38>
 811be08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811be0c:	3301      	adds	r3, #1
 811be0e:	d003      	beq.n	811be18 <_fwalk_sglue+0x38>
 811be10:	4629      	mov	r1, r5
 811be12:	4638      	mov	r0, r7
 811be14:	47c0      	blx	r8
 811be16:	4306      	orrs	r6, r0
 811be18:	3568      	adds	r5, #104	@ 0x68
 811be1a:	e7e9      	b.n	811bdf0 <_fwalk_sglue+0x10>

0811be1c <iprintf>:
 811be1c:	b40f      	push	{r0, r1, r2, r3}
 811be1e:	b507      	push	{r0, r1, r2, lr}
 811be20:	4906      	ldr	r1, [pc, #24]	@ (811be3c <iprintf+0x20>)
 811be22:	ab04      	add	r3, sp, #16
 811be24:	6808      	ldr	r0, [r1, #0]
 811be26:	f853 2b04 	ldr.w	r2, [r3], #4
 811be2a:	6881      	ldr	r1, [r0, #8]
 811be2c:	9301      	str	r3, [sp, #4]
 811be2e:	f000 fa47 	bl	811c2c0 <_vfiprintf_r>
 811be32:	b003      	add	sp, #12
 811be34:	f85d eb04 	ldr.w	lr, [sp], #4
 811be38:	b004      	add	sp, #16
 811be3a:	4770      	bx	lr
 811be3c:	10000040 	.word	0x10000040

0811be40 <__sread>:
 811be40:	b510      	push	{r4, lr}
 811be42:	460c      	mov	r4, r1
 811be44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811be48:	f000 f92a 	bl	811c0a0 <_read_r>
 811be4c:	2800      	cmp	r0, #0
 811be4e:	bfab      	itete	ge
 811be50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 811be52:	89a3      	ldrhlt	r3, [r4, #12]
 811be54:	181b      	addge	r3, r3, r0
 811be56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 811be5a:	bfac      	ite	ge
 811be5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 811be5e:	81a3      	strhlt	r3, [r4, #12]
 811be60:	bd10      	pop	{r4, pc}

0811be62 <__swrite>:
 811be62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811be66:	461f      	mov	r7, r3
 811be68:	898b      	ldrh	r3, [r1, #12]
 811be6a:	05db      	lsls	r3, r3, #23
 811be6c:	4605      	mov	r5, r0
 811be6e:	460c      	mov	r4, r1
 811be70:	4616      	mov	r6, r2
 811be72:	d505      	bpl.n	811be80 <__swrite+0x1e>
 811be74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811be78:	2302      	movs	r3, #2
 811be7a:	2200      	movs	r2, #0
 811be7c:	f000 f8fe 	bl	811c07c <_lseek_r>
 811be80:	89a3      	ldrh	r3, [r4, #12]
 811be82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811be86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 811be8a:	81a3      	strh	r3, [r4, #12]
 811be8c:	4632      	mov	r2, r6
 811be8e:	463b      	mov	r3, r7
 811be90:	4628      	mov	r0, r5
 811be92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811be96:	f000 b939 	b.w	811c10c <_write_r>

0811be9a <__sseek>:
 811be9a:	b510      	push	{r4, lr}
 811be9c:	460c      	mov	r4, r1
 811be9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811bea2:	f000 f8eb 	bl	811c07c <_lseek_r>
 811bea6:	1c43      	adds	r3, r0, #1
 811bea8:	89a3      	ldrh	r3, [r4, #12]
 811beaa:	bf15      	itete	ne
 811beac:	6560      	strne	r0, [r4, #84]	@ 0x54
 811beae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 811beb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 811beb6:	81a3      	strheq	r3, [r4, #12]
 811beb8:	bf18      	it	ne
 811beba:	81a3      	strhne	r3, [r4, #12]
 811bebc:	bd10      	pop	{r4, pc}

0811bebe <__sclose>:
 811bebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811bec2:	f000 b875 	b.w	811bfb0 <_close_r>

0811bec6 <memcmp>:
 811bec6:	b510      	push	{r4, lr}
 811bec8:	3901      	subs	r1, #1
 811beca:	4402      	add	r2, r0
 811becc:	4290      	cmp	r0, r2
 811bece:	d101      	bne.n	811bed4 <memcmp+0xe>
 811bed0:	2000      	movs	r0, #0
 811bed2:	e005      	b.n	811bee0 <memcmp+0x1a>
 811bed4:	7803      	ldrb	r3, [r0, #0]
 811bed6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 811beda:	42a3      	cmp	r3, r4
 811bedc:	d001      	beq.n	811bee2 <memcmp+0x1c>
 811bede:	1b18      	subs	r0, r3, r4
 811bee0:	bd10      	pop	{r4, pc}
 811bee2:	3001      	adds	r0, #1
 811bee4:	e7f2      	b.n	811becc <memcmp+0x6>

0811bee6 <memmove>:
 811bee6:	4288      	cmp	r0, r1
 811bee8:	b510      	push	{r4, lr}
 811beea:	eb01 0402 	add.w	r4, r1, r2
 811beee:	d902      	bls.n	811bef6 <memmove+0x10>
 811bef0:	4284      	cmp	r4, r0
 811bef2:	4623      	mov	r3, r4
 811bef4:	d807      	bhi.n	811bf06 <memmove+0x20>
 811bef6:	1e43      	subs	r3, r0, #1
 811bef8:	42a1      	cmp	r1, r4
 811befa:	d008      	beq.n	811bf0e <memmove+0x28>
 811befc:	f811 2b01 	ldrb.w	r2, [r1], #1
 811bf00:	f803 2f01 	strb.w	r2, [r3, #1]!
 811bf04:	e7f8      	b.n	811bef8 <memmove+0x12>
 811bf06:	4402      	add	r2, r0
 811bf08:	4601      	mov	r1, r0
 811bf0a:	428a      	cmp	r2, r1
 811bf0c:	d100      	bne.n	811bf10 <memmove+0x2a>
 811bf0e:	bd10      	pop	{r4, pc}
 811bf10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811bf14:	f802 4d01 	strb.w	r4, [r2, #-1]!
 811bf18:	e7f7      	b.n	811bf0a <memmove+0x24>

0811bf1a <memset>:
 811bf1a:	4402      	add	r2, r0
 811bf1c:	4603      	mov	r3, r0
 811bf1e:	4293      	cmp	r3, r2
 811bf20:	d100      	bne.n	811bf24 <memset+0xa>
 811bf22:	4770      	bx	lr
 811bf24:	f803 1b01 	strb.w	r1, [r3], #1
 811bf28:	e7f9      	b.n	811bf1e <memset+0x4>

0811bf2a <strncpy>:
 811bf2a:	b510      	push	{r4, lr}
 811bf2c:	3901      	subs	r1, #1
 811bf2e:	4603      	mov	r3, r0
 811bf30:	b132      	cbz	r2, 811bf40 <strncpy+0x16>
 811bf32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 811bf36:	f803 4b01 	strb.w	r4, [r3], #1
 811bf3a:	3a01      	subs	r2, #1
 811bf3c:	2c00      	cmp	r4, #0
 811bf3e:	d1f7      	bne.n	811bf30 <strncpy+0x6>
 811bf40:	441a      	add	r2, r3
 811bf42:	2100      	movs	r1, #0
 811bf44:	4293      	cmp	r3, r2
 811bf46:	d100      	bne.n	811bf4a <strncpy+0x20>
 811bf48:	bd10      	pop	{r4, pc}
 811bf4a:	f803 1b01 	strb.w	r1, [r3], #1
 811bf4e:	e7f9      	b.n	811bf44 <strncpy+0x1a>

0811bf50 <_raise_r>:
 811bf50:	291f      	cmp	r1, #31
 811bf52:	b538      	push	{r3, r4, r5, lr}
 811bf54:	4605      	mov	r5, r0
 811bf56:	460c      	mov	r4, r1
 811bf58:	d904      	bls.n	811bf64 <_raise_r+0x14>
 811bf5a:	2316      	movs	r3, #22
 811bf5c:	6003      	str	r3, [r0, #0]
 811bf5e:	f04f 30ff 	mov.w	r0, #4294967295
 811bf62:	bd38      	pop	{r3, r4, r5, pc}
 811bf64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 811bf66:	b112      	cbz	r2, 811bf6e <_raise_r+0x1e>
 811bf68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 811bf6c:	b94b      	cbnz	r3, 811bf82 <_raise_r+0x32>
 811bf6e:	4628      	mov	r0, r5
 811bf70:	f000 f8ba 	bl	811c0e8 <_getpid_r>
 811bf74:	4622      	mov	r2, r4
 811bf76:	4601      	mov	r1, r0
 811bf78:	4628      	mov	r0, r5
 811bf7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811bf7e:	f000 b8a1 	b.w	811c0c4 <_kill_r>
 811bf82:	2b01      	cmp	r3, #1
 811bf84:	d00a      	beq.n	811bf9c <_raise_r+0x4c>
 811bf86:	1c59      	adds	r1, r3, #1
 811bf88:	d103      	bne.n	811bf92 <_raise_r+0x42>
 811bf8a:	2316      	movs	r3, #22
 811bf8c:	6003      	str	r3, [r0, #0]
 811bf8e:	2001      	movs	r0, #1
 811bf90:	e7e7      	b.n	811bf62 <_raise_r+0x12>
 811bf92:	2100      	movs	r1, #0
 811bf94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 811bf98:	4620      	mov	r0, r4
 811bf9a:	4798      	blx	r3
 811bf9c:	2000      	movs	r0, #0
 811bf9e:	e7e0      	b.n	811bf62 <_raise_r+0x12>

0811bfa0 <raise>:
 811bfa0:	4b02      	ldr	r3, [pc, #8]	@ (811bfac <raise+0xc>)
 811bfa2:	4601      	mov	r1, r0
 811bfa4:	6818      	ldr	r0, [r3, #0]
 811bfa6:	f7ff bfd3 	b.w	811bf50 <_raise_r>
 811bfaa:	bf00      	nop
 811bfac:	10000040 	.word	0x10000040

0811bfb0 <_close_r>:
 811bfb0:	b538      	push	{r3, r4, r5, lr}
 811bfb2:	4d06      	ldr	r5, [pc, #24]	@ (811bfcc <_close_r+0x1c>)
 811bfb4:	2300      	movs	r3, #0
 811bfb6:	4604      	mov	r4, r0
 811bfb8:	4608      	mov	r0, r1
 811bfba:	602b      	str	r3, [r5, #0]
 811bfbc:	f7e4 fe76 	bl	8100cac <_close>
 811bfc0:	1c43      	adds	r3, r0, #1
 811bfc2:	d102      	bne.n	811bfca <_close_r+0x1a>
 811bfc4:	682b      	ldr	r3, [r5, #0]
 811bfc6:	b103      	cbz	r3, 811bfca <_close_r+0x1a>
 811bfc8:	6023      	str	r3, [r4, #0]
 811bfca:	bd38      	pop	{r3, r4, r5, pc}
 811bfcc:	10011ecc 	.word	0x10011ecc

0811bfd0 <_reclaim_reent>:
 811bfd0:	4b29      	ldr	r3, [pc, #164]	@ (811c078 <_reclaim_reent+0xa8>)
 811bfd2:	681b      	ldr	r3, [r3, #0]
 811bfd4:	4283      	cmp	r3, r0
 811bfd6:	b570      	push	{r4, r5, r6, lr}
 811bfd8:	4604      	mov	r4, r0
 811bfda:	d04b      	beq.n	811c074 <_reclaim_reent+0xa4>
 811bfdc:	69c3      	ldr	r3, [r0, #28]
 811bfde:	b1ab      	cbz	r3, 811c00c <_reclaim_reent+0x3c>
 811bfe0:	68db      	ldr	r3, [r3, #12]
 811bfe2:	b16b      	cbz	r3, 811c000 <_reclaim_reent+0x30>
 811bfe4:	2500      	movs	r5, #0
 811bfe6:	69e3      	ldr	r3, [r4, #28]
 811bfe8:	68db      	ldr	r3, [r3, #12]
 811bfea:	5959      	ldr	r1, [r3, r5]
 811bfec:	2900      	cmp	r1, #0
 811bfee:	d13b      	bne.n	811c068 <_reclaim_reent+0x98>
 811bff0:	3504      	adds	r5, #4
 811bff2:	2d80      	cmp	r5, #128	@ 0x80
 811bff4:	d1f7      	bne.n	811bfe6 <_reclaim_reent+0x16>
 811bff6:	69e3      	ldr	r3, [r4, #28]
 811bff8:	4620      	mov	r0, r4
 811bffa:	68d9      	ldr	r1, [r3, #12]
 811bffc:	f000 f8ec 	bl	811c1d8 <_free_r>
 811c000:	69e3      	ldr	r3, [r4, #28]
 811c002:	6819      	ldr	r1, [r3, #0]
 811c004:	b111      	cbz	r1, 811c00c <_reclaim_reent+0x3c>
 811c006:	4620      	mov	r0, r4
 811c008:	f000 f8e6 	bl	811c1d8 <_free_r>
 811c00c:	6961      	ldr	r1, [r4, #20]
 811c00e:	b111      	cbz	r1, 811c016 <_reclaim_reent+0x46>
 811c010:	4620      	mov	r0, r4
 811c012:	f000 f8e1 	bl	811c1d8 <_free_r>
 811c016:	69e1      	ldr	r1, [r4, #28]
 811c018:	b111      	cbz	r1, 811c020 <_reclaim_reent+0x50>
 811c01a:	4620      	mov	r0, r4
 811c01c:	f000 f8dc 	bl	811c1d8 <_free_r>
 811c020:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 811c022:	b111      	cbz	r1, 811c02a <_reclaim_reent+0x5a>
 811c024:	4620      	mov	r0, r4
 811c026:	f000 f8d7 	bl	811c1d8 <_free_r>
 811c02a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811c02c:	b111      	cbz	r1, 811c034 <_reclaim_reent+0x64>
 811c02e:	4620      	mov	r0, r4
 811c030:	f000 f8d2 	bl	811c1d8 <_free_r>
 811c034:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 811c036:	b111      	cbz	r1, 811c03e <_reclaim_reent+0x6e>
 811c038:	4620      	mov	r0, r4
 811c03a:	f000 f8cd 	bl	811c1d8 <_free_r>
 811c03e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 811c040:	b111      	cbz	r1, 811c048 <_reclaim_reent+0x78>
 811c042:	4620      	mov	r0, r4
 811c044:	f000 f8c8 	bl	811c1d8 <_free_r>
 811c048:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 811c04a:	b111      	cbz	r1, 811c052 <_reclaim_reent+0x82>
 811c04c:	4620      	mov	r0, r4
 811c04e:	f000 f8c3 	bl	811c1d8 <_free_r>
 811c052:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 811c054:	b111      	cbz	r1, 811c05c <_reclaim_reent+0x8c>
 811c056:	4620      	mov	r0, r4
 811c058:	f000 f8be 	bl	811c1d8 <_free_r>
 811c05c:	6a23      	ldr	r3, [r4, #32]
 811c05e:	b14b      	cbz	r3, 811c074 <_reclaim_reent+0xa4>
 811c060:	4620      	mov	r0, r4
 811c062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 811c066:	4718      	bx	r3
 811c068:	680e      	ldr	r6, [r1, #0]
 811c06a:	4620      	mov	r0, r4
 811c06c:	f000 f8b4 	bl	811c1d8 <_free_r>
 811c070:	4631      	mov	r1, r6
 811c072:	e7bb      	b.n	811bfec <_reclaim_reent+0x1c>
 811c074:	bd70      	pop	{r4, r5, r6, pc}
 811c076:	bf00      	nop
 811c078:	10000040 	.word	0x10000040

0811c07c <_lseek_r>:
 811c07c:	b538      	push	{r3, r4, r5, lr}
 811c07e:	4d07      	ldr	r5, [pc, #28]	@ (811c09c <_lseek_r+0x20>)
 811c080:	4604      	mov	r4, r0
 811c082:	4608      	mov	r0, r1
 811c084:	4611      	mov	r1, r2
 811c086:	2200      	movs	r2, #0
 811c088:	602a      	str	r2, [r5, #0]
 811c08a:	461a      	mov	r2, r3
 811c08c:	f7e4 fe35 	bl	8100cfa <_lseek>
 811c090:	1c43      	adds	r3, r0, #1
 811c092:	d102      	bne.n	811c09a <_lseek_r+0x1e>
 811c094:	682b      	ldr	r3, [r5, #0]
 811c096:	b103      	cbz	r3, 811c09a <_lseek_r+0x1e>
 811c098:	6023      	str	r3, [r4, #0]
 811c09a:	bd38      	pop	{r3, r4, r5, pc}
 811c09c:	10011ecc 	.word	0x10011ecc

0811c0a0 <_read_r>:
 811c0a0:	b538      	push	{r3, r4, r5, lr}
 811c0a2:	4d07      	ldr	r5, [pc, #28]	@ (811c0c0 <_read_r+0x20>)
 811c0a4:	4604      	mov	r4, r0
 811c0a6:	4608      	mov	r0, r1
 811c0a8:	4611      	mov	r1, r2
 811c0aa:	2200      	movs	r2, #0
 811c0ac:	602a      	str	r2, [r5, #0]
 811c0ae:	461a      	mov	r2, r3
 811c0b0:	f7e4 fdc3 	bl	8100c3a <_read>
 811c0b4:	1c43      	adds	r3, r0, #1
 811c0b6:	d102      	bne.n	811c0be <_read_r+0x1e>
 811c0b8:	682b      	ldr	r3, [r5, #0]
 811c0ba:	b103      	cbz	r3, 811c0be <_read_r+0x1e>
 811c0bc:	6023      	str	r3, [r4, #0]
 811c0be:	bd38      	pop	{r3, r4, r5, pc}
 811c0c0:	10011ecc 	.word	0x10011ecc

0811c0c4 <_kill_r>:
 811c0c4:	b538      	push	{r3, r4, r5, lr}
 811c0c6:	4d07      	ldr	r5, [pc, #28]	@ (811c0e4 <_kill_r+0x20>)
 811c0c8:	2300      	movs	r3, #0
 811c0ca:	4604      	mov	r4, r0
 811c0cc:	4608      	mov	r0, r1
 811c0ce:	4611      	mov	r1, r2
 811c0d0:	602b      	str	r3, [r5, #0]
 811c0d2:	f7e4 fd95 	bl	8100c00 <_kill>
 811c0d6:	1c43      	adds	r3, r0, #1
 811c0d8:	d102      	bne.n	811c0e0 <_kill_r+0x1c>
 811c0da:	682b      	ldr	r3, [r5, #0]
 811c0dc:	b103      	cbz	r3, 811c0e0 <_kill_r+0x1c>
 811c0de:	6023      	str	r3, [r4, #0]
 811c0e0:	bd38      	pop	{r3, r4, r5, pc}
 811c0e2:	bf00      	nop
 811c0e4:	10011ecc 	.word	0x10011ecc

0811c0e8 <_getpid_r>:
 811c0e8:	f7e4 bd82 	b.w	8100bf0 <_getpid>

0811c0ec <_sbrk_r>:
 811c0ec:	b538      	push	{r3, r4, r5, lr}
 811c0ee:	4d06      	ldr	r5, [pc, #24]	@ (811c108 <_sbrk_r+0x1c>)
 811c0f0:	2300      	movs	r3, #0
 811c0f2:	4604      	mov	r4, r0
 811c0f4:	4608      	mov	r0, r1
 811c0f6:	602b      	str	r3, [r5, #0]
 811c0f8:	f7e4 fe0c 	bl	8100d14 <_sbrk>
 811c0fc:	1c43      	adds	r3, r0, #1
 811c0fe:	d102      	bne.n	811c106 <_sbrk_r+0x1a>
 811c100:	682b      	ldr	r3, [r5, #0]
 811c102:	b103      	cbz	r3, 811c106 <_sbrk_r+0x1a>
 811c104:	6023      	str	r3, [r4, #0]
 811c106:	bd38      	pop	{r3, r4, r5, pc}
 811c108:	10011ecc 	.word	0x10011ecc

0811c10c <_write_r>:
 811c10c:	b538      	push	{r3, r4, r5, lr}
 811c10e:	4d07      	ldr	r5, [pc, #28]	@ (811c12c <_write_r+0x20>)
 811c110:	4604      	mov	r4, r0
 811c112:	4608      	mov	r0, r1
 811c114:	4611      	mov	r1, r2
 811c116:	2200      	movs	r2, #0
 811c118:	602a      	str	r2, [r5, #0]
 811c11a:	461a      	mov	r2, r3
 811c11c:	f7e4 fdaa 	bl	8100c74 <_write>
 811c120:	1c43      	adds	r3, r0, #1
 811c122:	d102      	bne.n	811c12a <_write_r+0x1e>
 811c124:	682b      	ldr	r3, [r5, #0]
 811c126:	b103      	cbz	r3, 811c12a <_write_r+0x1e>
 811c128:	6023      	str	r3, [r4, #0]
 811c12a:	bd38      	pop	{r3, r4, r5, pc}
 811c12c:	10011ecc 	.word	0x10011ecc

0811c130 <__libc_init_array>:
 811c130:	b570      	push	{r4, r5, r6, lr}
 811c132:	4d0d      	ldr	r5, [pc, #52]	@ (811c168 <__libc_init_array+0x38>)
 811c134:	4c0d      	ldr	r4, [pc, #52]	@ (811c16c <__libc_init_array+0x3c>)
 811c136:	1b64      	subs	r4, r4, r5
 811c138:	10a4      	asrs	r4, r4, #2
 811c13a:	2600      	movs	r6, #0
 811c13c:	42a6      	cmp	r6, r4
 811c13e:	d109      	bne.n	811c154 <__libc_init_array+0x24>
 811c140:	4d0b      	ldr	r5, [pc, #44]	@ (811c170 <__libc_init_array+0x40>)
 811c142:	4c0c      	ldr	r4, [pc, #48]	@ (811c174 <__libc_init_array+0x44>)
 811c144:	f000 fd38 	bl	811cbb8 <_init>
 811c148:	1b64      	subs	r4, r4, r5
 811c14a:	10a4      	asrs	r4, r4, #2
 811c14c:	2600      	movs	r6, #0
 811c14e:	42a6      	cmp	r6, r4
 811c150:	d105      	bne.n	811c15e <__libc_init_array+0x2e>
 811c152:	bd70      	pop	{r4, r5, r6, pc}
 811c154:	f855 3b04 	ldr.w	r3, [r5], #4
 811c158:	4798      	blx	r3
 811c15a:	3601      	adds	r6, #1
 811c15c:	e7ee      	b.n	811c13c <__libc_init_array+0xc>
 811c15e:	f855 3b04 	ldr.w	r3, [r5], #4
 811c162:	4798      	blx	r3
 811c164:	3601      	adds	r6, #1
 811c166:	e7f2      	b.n	811c14e <__libc_init_array+0x1e>
 811c168:	0811fe1c 	.word	0x0811fe1c
 811c16c:	0811fe1c 	.word	0x0811fe1c
 811c170:	0811fe1c 	.word	0x0811fe1c
 811c174:	0811fe24 	.word	0x0811fe24

0811c178 <__retarget_lock_init_recursive>:
 811c178:	4770      	bx	lr

0811c17a <__retarget_lock_acquire_recursive>:
 811c17a:	4770      	bx	lr

0811c17c <__retarget_lock_release_recursive>:
 811c17c:	4770      	bx	lr

0811c17e <memcpy>:
 811c17e:	440a      	add	r2, r1
 811c180:	4291      	cmp	r1, r2
 811c182:	f100 33ff 	add.w	r3, r0, #4294967295
 811c186:	d100      	bne.n	811c18a <memcpy+0xc>
 811c188:	4770      	bx	lr
 811c18a:	b510      	push	{r4, lr}
 811c18c:	f811 4b01 	ldrb.w	r4, [r1], #1
 811c190:	f803 4f01 	strb.w	r4, [r3, #1]!
 811c194:	4291      	cmp	r1, r2
 811c196:	d1f9      	bne.n	811c18c <memcpy+0xe>
 811c198:	bd10      	pop	{r4, pc}
	...

0811c19c <__assert_func>:
 811c19c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811c19e:	4614      	mov	r4, r2
 811c1a0:	461a      	mov	r2, r3
 811c1a2:	4b09      	ldr	r3, [pc, #36]	@ (811c1c8 <__assert_func+0x2c>)
 811c1a4:	681b      	ldr	r3, [r3, #0]
 811c1a6:	4605      	mov	r5, r0
 811c1a8:	68d8      	ldr	r0, [r3, #12]
 811c1aa:	b954      	cbnz	r4, 811c1c2 <__assert_func+0x26>
 811c1ac:	4b07      	ldr	r3, [pc, #28]	@ (811c1cc <__assert_func+0x30>)
 811c1ae:	461c      	mov	r4, r3
 811c1b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 811c1b4:	9100      	str	r1, [sp, #0]
 811c1b6:	462b      	mov	r3, r5
 811c1b8:	4905      	ldr	r1, [pc, #20]	@ (811c1d0 <__assert_func+0x34>)
 811c1ba:	f000 fbd3 	bl	811c964 <fiprintf>
 811c1be:	f7ff fc67 	bl	811ba90 <abort>
 811c1c2:	4b04      	ldr	r3, [pc, #16]	@ (811c1d4 <__assert_func+0x38>)
 811c1c4:	e7f4      	b.n	811c1b0 <__assert_func+0x14>
 811c1c6:	bf00      	nop
 811c1c8:	10000040 	.word	0x10000040
 811c1cc:	0811fdde 	.word	0x0811fdde
 811c1d0:	0811fdb0 	.word	0x0811fdb0
 811c1d4:	0811fda3 	.word	0x0811fda3

0811c1d8 <_free_r>:
 811c1d8:	b538      	push	{r3, r4, r5, lr}
 811c1da:	4605      	mov	r5, r0
 811c1dc:	2900      	cmp	r1, #0
 811c1de:	d041      	beq.n	811c264 <_free_r+0x8c>
 811c1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811c1e4:	1f0c      	subs	r4, r1, #4
 811c1e6:	2b00      	cmp	r3, #0
 811c1e8:	bfb8      	it	lt
 811c1ea:	18e4      	addlt	r4, r4, r3
 811c1ec:	f7ff fd0a 	bl	811bc04 <__malloc_lock>
 811c1f0:	4a1d      	ldr	r2, [pc, #116]	@ (811c268 <_free_r+0x90>)
 811c1f2:	6813      	ldr	r3, [r2, #0]
 811c1f4:	b933      	cbnz	r3, 811c204 <_free_r+0x2c>
 811c1f6:	6063      	str	r3, [r4, #4]
 811c1f8:	6014      	str	r4, [r2, #0]
 811c1fa:	4628      	mov	r0, r5
 811c1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811c200:	f7ff bd06 	b.w	811bc10 <__malloc_unlock>
 811c204:	42a3      	cmp	r3, r4
 811c206:	d908      	bls.n	811c21a <_free_r+0x42>
 811c208:	6820      	ldr	r0, [r4, #0]
 811c20a:	1821      	adds	r1, r4, r0
 811c20c:	428b      	cmp	r3, r1
 811c20e:	bf01      	itttt	eq
 811c210:	6819      	ldreq	r1, [r3, #0]
 811c212:	685b      	ldreq	r3, [r3, #4]
 811c214:	1809      	addeq	r1, r1, r0
 811c216:	6021      	streq	r1, [r4, #0]
 811c218:	e7ed      	b.n	811c1f6 <_free_r+0x1e>
 811c21a:	461a      	mov	r2, r3
 811c21c:	685b      	ldr	r3, [r3, #4]
 811c21e:	b10b      	cbz	r3, 811c224 <_free_r+0x4c>
 811c220:	42a3      	cmp	r3, r4
 811c222:	d9fa      	bls.n	811c21a <_free_r+0x42>
 811c224:	6811      	ldr	r1, [r2, #0]
 811c226:	1850      	adds	r0, r2, r1
 811c228:	42a0      	cmp	r0, r4
 811c22a:	d10b      	bne.n	811c244 <_free_r+0x6c>
 811c22c:	6820      	ldr	r0, [r4, #0]
 811c22e:	4401      	add	r1, r0
 811c230:	1850      	adds	r0, r2, r1
 811c232:	4283      	cmp	r3, r0
 811c234:	6011      	str	r1, [r2, #0]
 811c236:	d1e0      	bne.n	811c1fa <_free_r+0x22>
 811c238:	6818      	ldr	r0, [r3, #0]
 811c23a:	685b      	ldr	r3, [r3, #4]
 811c23c:	6053      	str	r3, [r2, #4]
 811c23e:	4408      	add	r0, r1
 811c240:	6010      	str	r0, [r2, #0]
 811c242:	e7da      	b.n	811c1fa <_free_r+0x22>
 811c244:	d902      	bls.n	811c24c <_free_r+0x74>
 811c246:	230c      	movs	r3, #12
 811c248:	602b      	str	r3, [r5, #0]
 811c24a:	e7d6      	b.n	811c1fa <_free_r+0x22>
 811c24c:	6820      	ldr	r0, [r4, #0]
 811c24e:	1821      	adds	r1, r4, r0
 811c250:	428b      	cmp	r3, r1
 811c252:	bf04      	itt	eq
 811c254:	6819      	ldreq	r1, [r3, #0]
 811c256:	685b      	ldreq	r3, [r3, #4]
 811c258:	6063      	str	r3, [r4, #4]
 811c25a:	bf04      	itt	eq
 811c25c:	1809      	addeq	r1, r1, r0
 811c25e:	6021      	streq	r1, [r4, #0]
 811c260:	6054      	str	r4, [r2, #4]
 811c262:	e7ca      	b.n	811c1fa <_free_r+0x22>
 811c264:	bd38      	pop	{r3, r4, r5, pc}
 811c266:	bf00      	nop
 811c268:	10011d8c 	.word	0x10011d8c

0811c26c <__sfputc_r>:
 811c26c:	6893      	ldr	r3, [r2, #8]
 811c26e:	3b01      	subs	r3, #1
 811c270:	2b00      	cmp	r3, #0
 811c272:	b410      	push	{r4}
 811c274:	6093      	str	r3, [r2, #8]
 811c276:	da08      	bge.n	811c28a <__sfputc_r+0x1e>
 811c278:	6994      	ldr	r4, [r2, #24]
 811c27a:	42a3      	cmp	r3, r4
 811c27c:	db01      	blt.n	811c282 <__sfputc_r+0x16>
 811c27e:	290a      	cmp	r1, #10
 811c280:	d103      	bne.n	811c28a <__sfputc_r+0x1e>
 811c282:	f85d 4b04 	ldr.w	r4, [sp], #4
 811c286:	f000 bb7f 	b.w	811c988 <__swbuf_r>
 811c28a:	6813      	ldr	r3, [r2, #0]
 811c28c:	1c58      	adds	r0, r3, #1
 811c28e:	6010      	str	r0, [r2, #0]
 811c290:	7019      	strb	r1, [r3, #0]
 811c292:	4608      	mov	r0, r1
 811c294:	f85d 4b04 	ldr.w	r4, [sp], #4
 811c298:	4770      	bx	lr

0811c29a <__sfputs_r>:
 811c29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811c29c:	4606      	mov	r6, r0
 811c29e:	460f      	mov	r7, r1
 811c2a0:	4614      	mov	r4, r2
 811c2a2:	18d5      	adds	r5, r2, r3
 811c2a4:	42ac      	cmp	r4, r5
 811c2a6:	d101      	bne.n	811c2ac <__sfputs_r+0x12>
 811c2a8:	2000      	movs	r0, #0
 811c2aa:	e007      	b.n	811c2bc <__sfputs_r+0x22>
 811c2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 811c2b0:	463a      	mov	r2, r7
 811c2b2:	4630      	mov	r0, r6
 811c2b4:	f7ff ffda 	bl	811c26c <__sfputc_r>
 811c2b8:	1c43      	adds	r3, r0, #1
 811c2ba:	d1f3      	bne.n	811c2a4 <__sfputs_r+0xa>
 811c2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0811c2c0 <_vfiprintf_r>:
 811c2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811c2c4:	460d      	mov	r5, r1
 811c2c6:	b09d      	sub	sp, #116	@ 0x74
 811c2c8:	4614      	mov	r4, r2
 811c2ca:	4698      	mov	r8, r3
 811c2cc:	4606      	mov	r6, r0
 811c2ce:	b118      	cbz	r0, 811c2d8 <_vfiprintf_r+0x18>
 811c2d0:	6a03      	ldr	r3, [r0, #32]
 811c2d2:	b90b      	cbnz	r3, 811c2d8 <_vfiprintf_r+0x18>
 811c2d4:	f7ff fd6c 	bl	811bdb0 <__sinit>
 811c2d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811c2da:	07d9      	lsls	r1, r3, #31
 811c2dc:	d405      	bmi.n	811c2ea <_vfiprintf_r+0x2a>
 811c2de:	89ab      	ldrh	r3, [r5, #12]
 811c2e0:	059a      	lsls	r2, r3, #22
 811c2e2:	d402      	bmi.n	811c2ea <_vfiprintf_r+0x2a>
 811c2e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811c2e6:	f7ff ff48 	bl	811c17a <__retarget_lock_acquire_recursive>
 811c2ea:	89ab      	ldrh	r3, [r5, #12]
 811c2ec:	071b      	lsls	r3, r3, #28
 811c2ee:	d501      	bpl.n	811c2f4 <_vfiprintf_r+0x34>
 811c2f0:	692b      	ldr	r3, [r5, #16]
 811c2f2:	b99b      	cbnz	r3, 811c31c <_vfiprintf_r+0x5c>
 811c2f4:	4629      	mov	r1, r5
 811c2f6:	4630      	mov	r0, r6
 811c2f8:	f000 fb84 	bl	811ca04 <__swsetup_r>
 811c2fc:	b170      	cbz	r0, 811c31c <_vfiprintf_r+0x5c>
 811c2fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811c300:	07dc      	lsls	r4, r3, #31
 811c302:	d504      	bpl.n	811c30e <_vfiprintf_r+0x4e>
 811c304:	f04f 30ff 	mov.w	r0, #4294967295
 811c308:	b01d      	add	sp, #116	@ 0x74
 811c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811c30e:	89ab      	ldrh	r3, [r5, #12]
 811c310:	0598      	lsls	r0, r3, #22
 811c312:	d4f7      	bmi.n	811c304 <_vfiprintf_r+0x44>
 811c314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811c316:	f7ff ff31 	bl	811c17c <__retarget_lock_release_recursive>
 811c31a:	e7f3      	b.n	811c304 <_vfiprintf_r+0x44>
 811c31c:	2300      	movs	r3, #0
 811c31e:	9309      	str	r3, [sp, #36]	@ 0x24
 811c320:	2320      	movs	r3, #32
 811c322:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 811c326:	f8cd 800c 	str.w	r8, [sp, #12]
 811c32a:	2330      	movs	r3, #48	@ 0x30
 811c32c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 811c4dc <_vfiprintf_r+0x21c>
 811c330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 811c334:	f04f 0901 	mov.w	r9, #1
 811c338:	4623      	mov	r3, r4
 811c33a:	469a      	mov	sl, r3
 811c33c:	f813 2b01 	ldrb.w	r2, [r3], #1
 811c340:	b10a      	cbz	r2, 811c346 <_vfiprintf_r+0x86>
 811c342:	2a25      	cmp	r2, #37	@ 0x25
 811c344:	d1f9      	bne.n	811c33a <_vfiprintf_r+0x7a>
 811c346:	ebba 0b04 	subs.w	fp, sl, r4
 811c34a:	d00b      	beq.n	811c364 <_vfiprintf_r+0xa4>
 811c34c:	465b      	mov	r3, fp
 811c34e:	4622      	mov	r2, r4
 811c350:	4629      	mov	r1, r5
 811c352:	4630      	mov	r0, r6
 811c354:	f7ff ffa1 	bl	811c29a <__sfputs_r>
 811c358:	3001      	adds	r0, #1
 811c35a:	f000 80a7 	beq.w	811c4ac <_vfiprintf_r+0x1ec>
 811c35e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 811c360:	445a      	add	r2, fp
 811c362:	9209      	str	r2, [sp, #36]	@ 0x24
 811c364:	f89a 3000 	ldrb.w	r3, [sl]
 811c368:	2b00      	cmp	r3, #0
 811c36a:	f000 809f 	beq.w	811c4ac <_vfiprintf_r+0x1ec>
 811c36e:	2300      	movs	r3, #0
 811c370:	f04f 32ff 	mov.w	r2, #4294967295
 811c374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811c378:	f10a 0a01 	add.w	sl, sl, #1
 811c37c:	9304      	str	r3, [sp, #16]
 811c37e:	9307      	str	r3, [sp, #28]
 811c380:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 811c384:	931a      	str	r3, [sp, #104]	@ 0x68
 811c386:	4654      	mov	r4, sl
 811c388:	2205      	movs	r2, #5
 811c38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 811c38e:	4853      	ldr	r0, [pc, #332]	@ (811c4dc <_vfiprintf_r+0x21c>)
 811c390:	f7e3 ffae 	bl	81002f0 <memchr>
 811c394:	9a04      	ldr	r2, [sp, #16]
 811c396:	b9d8      	cbnz	r0, 811c3d0 <_vfiprintf_r+0x110>
 811c398:	06d1      	lsls	r1, r2, #27
 811c39a:	bf44      	itt	mi
 811c39c:	2320      	movmi	r3, #32
 811c39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811c3a2:	0713      	lsls	r3, r2, #28
 811c3a4:	bf44      	itt	mi
 811c3a6:	232b      	movmi	r3, #43	@ 0x2b
 811c3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811c3ac:	f89a 3000 	ldrb.w	r3, [sl]
 811c3b0:	2b2a      	cmp	r3, #42	@ 0x2a
 811c3b2:	d015      	beq.n	811c3e0 <_vfiprintf_r+0x120>
 811c3b4:	9a07      	ldr	r2, [sp, #28]
 811c3b6:	4654      	mov	r4, sl
 811c3b8:	2000      	movs	r0, #0
 811c3ba:	f04f 0c0a 	mov.w	ip, #10
 811c3be:	4621      	mov	r1, r4
 811c3c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 811c3c4:	3b30      	subs	r3, #48	@ 0x30
 811c3c6:	2b09      	cmp	r3, #9
 811c3c8:	d94b      	bls.n	811c462 <_vfiprintf_r+0x1a2>
 811c3ca:	b1b0      	cbz	r0, 811c3fa <_vfiprintf_r+0x13a>
 811c3cc:	9207      	str	r2, [sp, #28]
 811c3ce:	e014      	b.n	811c3fa <_vfiprintf_r+0x13a>
 811c3d0:	eba0 0308 	sub.w	r3, r0, r8
 811c3d4:	fa09 f303 	lsl.w	r3, r9, r3
 811c3d8:	4313      	orrs	r3, r2
 811c3da:	9304      	str	r3, [sp, #16]
 811c3dc:	46a2      	mov	sl, r4
 811c3de:	e7d2      	b.n	811c386 <_vfiprintf_r+0xc6>
 811c3e0:	9b03      	ldr	r3, [sp, #12]
 811c3e2:	1d19      	adds	r1, r3, #4
 811c3e4:	681b      	ldr	r3, [r3, #0]
 811c3e6:	9103      	str	r1, [sp, #12]
 811c3e8:	2b00      	cmp	r3, #0
 811c3ea:	bfbb      	ittet	lt
 811c3ec:	425b      	neglt	r3, r3
 811c3ee:	f042 0202 	orrlt.w	r2, r2, #2
 811c3f2:	9307      	strge	r3, [sp, #28]
 811c3f4:	9307      	strlt	r3, [sp, #28]
 811c3f6:	bfb8      	it	lt
 811c3f8:	9204      	strlt	r2, [sp, #16]
 811c3fa:	7823      	ldrb	r3, [r4, #0]
 811c3fc:	2b2e      	cmp	r3, #46	@ 0x2e
 811c3fe:	d10a      	bne.n	811c416 <_vfiprintf_r+0x156>
 811c400:	7863      	ldrb	r3, [r4, #1]
 811c402:	2b2a      	cmp	r3, #42	@ 0x2a
 811c404:	d132      	bne.n	811c46c <_vfiprintf_r+0x1ac>
 811c406:	9b03      	ldr	r3, [sp, #12]
 811c408:	1d1a      	adds	r2, r3, #4
 811c40a:	681b      	ldr	r3, [r3, #0]
 811c40c:	9203      	str	r2, [sp, #12]
 811c40e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 811c412:	3402      	adds	r4, #2
 811c414:	9305      	str	r3, [sp, #20]
 811c416:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 811c4ec <_vfiprintf_r+0x22c>
 811c41a:	7821      	ldrb	r1, [r4, #0]
 811c41c:	2203      	movs	r2, #3
 811c41e:	4650      	mov	r0, sl
 811c420:	f7e3 ff66 	bl	81002f0 <memchr>
 811c424:	b138      	cbz	r0, 811c436 <_vfiprintf_r+0x176>
 811c426:	9b04      	ldr	r3, [sp, #16]
 811c428:	eba0 000a 	sub.w	r0, r0, sl
 811c42c:	2240      	movs	r2, #64	@ 0x40
 811c42e:	4082      	lsls	r2, r0
 811c430:	4313      	orrs	r3, r2
 811c432:	3401      	adds	r4, #1
 811c434:	9304      	str	r3, [sp, #16]
 811c436:	f814 1b01 	ldrb.w	r1, [r4], #1
 811c43a:	4829      	ldr	r0, [pc, #164]	@ (811c4e0 <_vfiprintf_r+0x220>)
 811c43c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 811c440:	2206      	movs	r2, #6
 811c442:	f7e3 ff55 	bl	81002f0 <memchr>
 811c446:	2800      	cmp	r0, #0
 811c448:	d03f      	beq.n	811c4ca <_vfiprintf_r+0x20a>
 811c44a:	4b26      	ldr	r3, [pc, #152]	@ (811c4e4 <_vfiprintf_r+0x224>)
 811c44c:	bb1b      	cbnz	r3, 811c496 <_vfiprintf_r+0x1d6>
 811c44e:	9b03      	ldr	r3, [sp, #12]
 811c450:	3307      	adds	r3, #7
 811c452:	f023 0307 	bic.w	r3, r3, #7
 811c456:	3308      	adds	r3, #8
 811c458:	9303      	str	r3, [sp, #12]
 811c45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811c45c:	443b      	add	r3, r7
 811c45e:	9309      	str	r3, [sp, #36]	@ 0x24
 811c460:	e76a      	b.n	811c338 <_vfiprintf_r+0x78>
 811c462:	fb0c 3202 	mla	r2, ip, r2, r3
 811c466:	460c      	mov	r4, r1
 811c468:	2001      	movs	r0, #1
 811c46a:	e7a8      	b.n	811c3be <_vfiprintf_r+0xfe>
 811c46c:	2300      	movs	r3, #0
 811c46e:	3401      	adds	r4, #1
 811c470:	9305      	str	r3, [sp, #20]
 811c472:	4619      	mov	r1, r3
 811c474:	f04f 0c0a 	mov.w	ip, #10
 811c478:	4620      	mov	r0, r4
 811c47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 811c47e:	3a30      	subs	r2, #48	@ 0x30
 811c480:	2a09      	cmp	r2, #9
 811c482:	d903      	bls.n	811c48c <_vfiprintf_r+0x1cc>
 811c484:	2b00      	cmp	r3, #0
 811c486:	d0c6      	beq.n	811c416 <_vfiprintf_r+0x156>
 811c488:	9105      	str	r1, [sp, #20]
 811c48a:	e7c4      	b.n	811c416 <_vfiprintf_r+0x156>
 811c48c:	fb0c 2101 	mla	r1, ip, r1, r2
 811c490:	4604      	mov	r4, r0
 811c492:	2301      	movs	r3, #1
 811c494:	e7f0      	b.n	811c478 <_vfiprintf_r+0x1b8>
 811c496:	ab03      	add	r3, sp, #12
 811c498:	9300      	str	r3, [sp, #0]
 811c49a:	462a      	mov	r2, r5
 811c49c:	4b12      	ldr	r3, [pc, #72]	@ (811c4e8 <_vfiprintf_r+0x228>)
 811c49e:	a904      	add	r1, sp, #16
 811c4a0:	4630      	mov	r0, r6
 811c4a2:	f3af 8000 	nop.w
 811c4a6:	4607      	mov	r7, r0
 811c4a8:	1c78      	adds	r0, r7, #1
 811c4aa:	d1d6      	bne.n	811c45a <_vfiprintf_r+0x19a>
 811c4ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811c4ae:	07d9      	lsls	r1, r3, #31
 811c4b0:	d405      	bmi.n	811c4be <_vfiprintf_r+0x1fe>
 811c4b2:	89ab      	ldrh	r3, [r5, #12]
 811c4b4:	059a      	lsls	r2, r3, #22
 811c4b6:	d402      	bmi.n	811c4be <_vfiprintf_r+0x1fe>
 811c4b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811c4ba:	f7ff fe5f 	bl	811c17c <__retarget_lock_release_recursive>
 811c4be:	89ab      	ldrh	r3, [r5, #12]
 811c4c0:	065b      	lsls	r3, r3, #25
 811c4c2:	f53f af1f 	bmi.w	811c304 <_vfiprintf_r+0x44>
 811c4c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 811c4c8:	e71e      	b.n	811c308 <_vfiprintf_r+0x48>
 811c4ca:	ab03      	add	r3, sp, #12
 811c4cc:	9300      	str	r3, [sp, #0]
 811c4ce:	462a      	mov	r2, r5
 811c4d0:	4b05      	ldr	r3, [pc, #20]	@ (811c4e8 <_vfiprintf_r+0x228>)
 811c4d2:	a904      	add	r1, sp, #16
 811c4d4:	4630      	mov	r0, r6
 811c4d6:	f000 f879 	bl	811c5cc <_printf_i>
 811c4da:	e7e4      	b.n	811c4a6 <_vfiprintf_r+0x1e6>
 811c4dc:	0811fddf 	.word	0x0811fddf
 811c4e0:	0811fde9 	.word	0x0811fde9
 811c4e4:	00000000 	.word	0x00000000
 811c4e8:	0811c29b 	.word	0x0811c29b
 811c4ec:	0811fde5 	.word	0x0811fde5

0811c4f0 <_printf_common>:
 811c4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811c4f4:	4616      	mov	r6, r2
 811c4f6:	4698      	mov	r8, r3
 811c4f8:	688a      	ldr	r2, [r1, #8]
 811c4fa:	690b      	ldr	r3, [r1, #16]
 811c4fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 811c500:	4293      	cmp	r3, r2
 811c502:	bfb8      	it	lt
 811c504:	4613      	movlt	r3, r2
 811c506:	6033      	str	r3, [r6, #0]
 811c508:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 811c50c:	4607      	mov	r7, r0
 811c50e:	460c      	mov	r4, r1
 811c510:	b10a      	cbz	r2, 811c516 <_printf_common+0x26>
 811c512:	3301      	adds	r3, #1
 811c514:	6033      	str	r3, [r6, #0]
 811c516:	6823      	ldr	r3, [r4, #0]
 811c518:	0699      	lsls	r1, r3, #26
 811c51a:	bf42      	ittt	mi
 811c51c:	6833      	ldrmi	r3, [r6, #0]
 811c51e:	3302      	addmi	r3, #2
 811c520:	6033      	strmi	r3, [r6, #0]
 811c522:	6825      	ldr	r5, [r4, #0]
 811c524:	f015 0506 	ands.w	r5, r5, #6
 811c528:	d106      	bne.n	811c538 <_printf_common+0x48>
 811c52a:	f104 0a19 	add.w	sl, r4, #25
 811c52e:	68e3      	ldr	r3, [r4, #12]
 811c530:	6832      	ldr	r2, [r6, #0]
 811c532:	1a9b      	subs	r3, r3, r2
 811c534:	42ab      	cmp	r3, r5
 811c536:	dc26      	bgt.n	811c586 <_printf_common+0x96>
 811c538:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 811c53c:	6822      	ldr	r2, [r4, #0]
 811c53e:	3b00      	subs	r3, #0
 811c540:	bf18      	it	ne
 811c542:	2301      	movne	r3, #1
 811c544:	0692      	lsls	r2, r2, #26
 811c546:	d42b      	bmi.n	811c5a0 <_printf_common+0xb0>
 811c548:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 811c54c:	4641      	mov	r1, r8
 811c54e:	4638      	mov	r0, r7
 811c550:	47c8      	blx	r9
 811c552:	3001      	adds	r0, #1
 811c554:	d01e      	beq.n	811c594 <_printf_common+0xa4>
 811c556:	6823      	ldr	r3, [r4, #0]
 811c558:	6922      	ldr	r2, [r4, #16]
 811c55a:	f003 0306 	and.w	r3, r3, #6
 811c55e:	2b04      	cmp	r3, #4
 811c560:	bf02      	ittt	eq
 811c562:	68e5      	ldreq	r5, [r4, #12]
 811c564:	6833      	ldreq	r3, [r6, #0]
 811c566:	1aed      	subeq	r5, r5, r3
 811c568:	68a3      	ldr	r3, [r4, #8]
 811c56a:	bf0c      	ite	eq
 811c56c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 811c570:	2500      	movne	r5, #0
 811c572:	4293      	cmp	r3, r2
 811c574:	bfc4      	itt	gt
 811c576:	1a9b      	subgt	r3, r3, r2
 811c578:	18ed      	addgt	r5, r5, r3
 811c57a:	2600      	movs	r6, #0
 811c57c:	341a      	adds	r4, #26
 811c57e:	42b5      	cmp	r5, r6
 811c580:	d11a      	bne.n	811c5b8 <_printf_common+0xc8>
 811c582:	2000      	movs	r0, #0
 811c584:	e008      	b.n	811c598 <_printf_common+0xa8>
 811c586:	2301      	movs	r3, #1
 811c588:	4652      	mov	r2, sl
 811c58a:	4641      	mov	r1, r8
 811c58c:	4638      	mov	r0, r7
 811c58e:	47c8      	blx	r9
 811c590:	3001      	adds	r0, #1
 811c592:	d103      	bne.n	811c59c <_printf_common+0xac>
 811c594:	f04f 30ff 	mov.w	r0, #4294967295
 811c598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811c59c:	3501      	adds	r5, #1
 811c59e:	e7c6      	b.n	811c52e <_printf_common+0x3e>
 811c5a0:	18e1      	adds	r1, r4, r3
 811c5a2:	1c5a      	adds	r2, r3, #1
 811c5a4:	2030      	movs	r0, #48	@ 0x30
 811c5a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 811c5aa:	4422      	add	r2, r4
 811c5ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 811c5b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 811c5b4:	3302      	adds	r3, #2
 811c5b6:	e7c7      	b.n	811c548 <_printf_common+0x58>
 811c5b8:	2301      	movs	r3, #1
 811c5ba:	4622      	mov	r2, r4
 811c5bc:	4641      	mov	r1, r8
 811c5be:	4638      	mov	r0, r7
 811c5c0:	47c8      	blx	r9
 811c5c2:	3001      	adds	r0, #1
 811c5c4:	d0e6      	beq.n	811c594 <_printf_common+0xa4>
 811c5c6:	3601      	adds	r6, #1
 811c5c8:	e7d9      	b.n	811c57e <_printf_common+0x8e>
	...

0811c5cc <_printf_i>:
 811c5cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 811c5d0:	7e0f      	ldrb	r7, [r1, #24]
 811c5d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 811c5d4:	2f78      	cmp	r7, #120	@ 0x78
 811c5d6:	4691      	mov	r9, r2
 811c5d8:	4680      	mov	r8, r0
 811c5da:	460c      	mov	r4, r1
 811c5dc:	469a      	mov	sl, r3
 811c5de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 811c5e2:	d807      	bhi.n	811c5f4 <_printf_i+0x28>
 811c5e4:	2f62      	cmp	r7, #98	@ 0x62
 811c5e6:	d80a      	bhi.n	811c5fe <_printf_i+0x32>
 811c5e8:	2f00      	cmp	r7, #0
 811c5ea:	f000 80d2 	beq.w	811c792 <_printf_i+0x1c6>
 811c5ee:	2f58      	cmp	r7, #88	@ 0x58
 811c5f0:	f000 80b9 	beq.w	811c766 <_printf_i+0x19a>
 811c5f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 811c5f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 811c5fc:	e03a      	b.n	811c674 <_printf_i+0xa8>
 811c5fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 811c602:	2b15      	cmp	r3, #21
 811c604:	d8f6      	bhi.n	811c5f4 <_printf_i+0x28>
 811c606:	a101      	add	r1, pc, #4	@ (adr r1, 811c60c <_printf_i+0x40>)
 811c608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 811c60c:	0811c665 	.word	0x0811c665
 811c610:	0811c679 	.word	0x0811c679
 811c614:	0811c5f5 	.word	0x0811c5f5
 811c618:	0811c5f5 	.word	0x0811c5f5
 811c61c:	0811c5f5 	.word	0x0811c5f5
 811c620:	0811c5f5 	.word	0x0811c5f5
 811c624:	0811c679 	.word	0x0811c679
 811c628:	0811c5f5 	.word	0x0811c5f5
 811c62c:	0811c5f5 	.word	0x0811c5f5
 811c630:	0811c5f5 	.word	0x0811c5f5
 811c634:	0811c5f5 	.word	0x0811c5f5
 811c638:	0811c779 	.word	0x0811c779
 811c63c:	0811c6a3 	.word	0x0811c6a3
 811c640:	0811c733 	.word	0x0811c733
 811c644:	0811c5f5 	.word	0x0811c5f5
 811c648:	0811c5f5 	.word	0x0811c5f5
 811c64c:	0811c79b 	.word	0x0811c79b
 811c650:	0811c5f5 	.word	0x0811c5f5
 811c654:	0811c6a3 	.word	0x0811c6a3
 811c658:	0811c5f5 	.word	0x0811c5f5
 811c65c:	0811c5f5 	.word	0x0811c5f5
 811c660:	0811c73b 	.word	0x0811c73b
 811c664:	6833      	ldr	r3, [r6, #0]
 811c666:	1d1a      	adds	r2, r3, #4
 811c668:	681b      	ldr	r3, [r3, #0]
 811c66a:	6032      	str	r2, [r6, #0]
 811c66c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 811c670:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 811c674:	2301      	movs	r3, #1
 811c676:	e09d      	b.n	811c7b4 <_printf_i+0x1e8>
 811c678:	6833      	ldr	r3, [r6, #0]
 811c67a:	6820      	ldr	r0, [r4, #0]
 811c67c:	1d19      	adds	r1, r3, #4
 811c67e:	6031      	str	r1, [r6, #0]
 811c680:	0606      	lsls	r6, r0, #24
 811c682:	d501      	bpl.n	811c688 <_printf_i+0xbc>
 811c684:	681d      	ldr	r5, [r3, #0]
 811c686:	e003      	b.n	811c690 <_printf_i+0xc4>
 811c688:	0645      	lsls	r5, r0, #25
 811c68a:	d5fb      	bpl.n	811c684 <_printf_i+0xb8>
 811c68c:	f9b3 5000 	ldrsh.w	r5, [r3]
 811c690:	2d00      	cmp	r5, #0
 811c692:	da03      	bge.n	811c69c <_printf_i+0xd0>
 811c694:	232d      	movs	r3, #45	@ 0x2d
 811c696:	426d      	negs	r5, r5
 811c698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811c69c:	4859      	ldr	r0, [pc, #356]	@ (811c804 <_printf_i+0x238>)
 811c69e:	230a      	movs	r3, #10
 811c6a0:	e011      	b.n	811c6c6 <_printf_i+0xfa>
 811c6a2:	6821      	ldr	r1, [r4, #0]
 811c6a4:	6833      	ldr	r3, [r6, #0]
 811c6a6:	0608      	lsls	r0, r1, #24
 811c6a8:	f853 5b04 	ldr.w	r5, [r3], #4
 811c6ac:	d402      	bmi.n	811c6b4 <_printf_i+0xe8>
 811c6ae:	0649      	lsls	r1, r1, #25
 811c6b0:	bf48      	it	mi
 811c6b2:	b2ad      	uxthmi	r5, r5
 811c6b4:	2f6f      	cmp	r7, #111	@ 0x6f
 811c6b6:	4853      	ldr	r0, [pc, #332]	@ (811c804 <_printf_i+0x238>)
 811c6b8:	6033      	str	r3, [r6, #0]
 811c6ba:	bf14      	ite	ne
 811c6bc:	230a      	movne	r3, #10
 811c6be:	2308      	moveq	r3, #8
 811c6c0:	2100      	movs	r1, #0
 811c6c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 811c6c6:	6866      	ldr	r6, [r4, #4]
 811c6c8:	60a6      	str	r6, [r4, #8]
 811c6ca:	2e00      	cmp	r6, #0
 811c6cc:	bfa2      	ittt	ge
 811c6ce:	6821      	ldrge	r1, [r4, #0]
 811c6d0:	f021 0104 	bicge.w	r1, r1, #4
 811c6d4:	6021      	strge	r1, [r4, #0]
 811c6d6:	b90d      	cbnz	r5, 811c6dc <_printf_i+0x110>
 811c6d8:	2e00      	cmp	r6, #0
 811c6da:	d04b      	beq.n	811c774 <_printf_i+0x1a8>
 811c6dc:	4616      	mov	r6, r2
 811c6de:	fbb5 f1f3 	udiv	r1, r5, r3
 811c6e2:	fb03 5711 	mls	r7, r3, r1, r5
 811c6e6:	5dc7      	ldrb	r7, [r0, r7]
 811c6e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 811c6ec:	462f      	mov	r7, r5
 811c6ee:	42bb      	cmp	r3, r7
 811c6f0:	460d      	mov	r5, r1
 811c6f2:	d9f4      	bls.n	811c6de <_printf_i+0x112>
 811c6f4:	2b08      	cmp	r3, #8
 811c6f6:	d10b      	bne.n	811c710 <_printf_i+0x144>
 811c6f8:	6823      	ldr	r3, [r4, #0]
 811c6fa:	07df      	lsls	r7, r3, #31
 811c6fc:	d508      	bpl.n	811c710 <_printf_i+0x144>
 811c6fe:	6923      	ldr	r3, [r4, #16]
 811c700:	6861      	ldr	r1, [r4, #4]
 811c702:	4299      	cmp	r1, r3
 811c704:	bfde      	ittt	le
 811c706:	2330      	movle	r3, #48	@ 0x30
 811c708:	f806 3c01 	strble.w	r3, [r6, #-1]
 811c70c:	f106 36ff 	addle.w	r6, r6, #4294967295
 811c710:	1b92      	subs	r2, r2, r6
 811c712:	6122      	str	r2, [r4, #16]
 811c714:	f8cd a000 	str.w	sl, [sp]
 811c718:	464b      	mov	r3, r9
 811c71a:	aa03      	add	r2, sp, #12
 811c71c:	4621      	mov	r1, r4
 811c71e:	4640      	mov	r0, r8
 811c720:	f7ff fee6 	bl	811c4f0 <_printf_common>
 811c724:	3001      	adds	r0, #1
 811c726:	d14a      	bne.n	811c7be <_printf_i+0x1f2>
 811c728:	f04f 30ff 	mov.w	r0, #4294967295
 811c72c:	b004      	add	sp, #16
 811c72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811c732:	6823      	ldr	r3, [r4, #0]
 811c734:	f043 0320 	orr.w	r3, r3, #32
 811c738:	6023      	str	r3, [r4, #0]
 811c73a:	4833      	ldr	r0, [pc, #204]	@ (811c808 <_printf_i+0x23c>)
 811c73c:	2778      	movs	r7, #120	@ 0x78
 811c73e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 811c742:	6823      	ldr	r3, [r4, #0]
 811c744:	6831      	ldr	r1, [r6, #0]
 811c746:	061f      	lsls	r7, r3, #24
 811c748:	f851 5b04 	ldr.w	r5, [r1], #4
 811c74c:	d402      	bmi.n	811c754 <_printf_i+0x188>
 811c74e:	065f      	lsls	r7, r3, #25
 811c750:	bf48      	it	mi
 811c752:	b2ad      	uxthmi	r5, r5
 811c754:	6031      	str	r1, [r6, #0]
 811c756:	07d9      	lsls	r1, r3, #31
 811c758:	bf44      	itt	mi
 811c75a:	f043 0320 	orrmi.w	r3, r3, #32
 811c75e:	6023      	strmi	r3, [r4, #0]
 811c760:	b11d      	cbz	r5, 811c76a <_printf_i+0x19e>
 811c762:	2310      	movs	r3, #16
 811c764:	e7ac      	b.n	811c6c0 <_printf_i+0xf4>
 811c766:	4827      	ldr	r0, [pc, #156]	@ (811c804 <_printf_i+0x238>)
 811c768:	e7e9      	b.n	811c73e <_printf_i+0x172>
 811c76a:	6823      	ldr	r3, [r4, #0]
 811c76c:	f023 0320 	bic.w	r3, r3, #32
 811c770:	6023      	str	r3, [r4, #0]
 811c772:	e7f6      	b.n	811c762 <_printf_i+0x196>
 811c774:	4616      	mov	r6, r2
 811c776:	e7bd      	b.n	811c6f4 <_printf_i+0x128>
 811c778:	6833      	ldr	r3, [r6, #0]
 811c77a:	6825      	ldr	r5, [r4, #0]
 811c77c:	6961      	ldr	r1, [r4, #20]
 811c77e:	1d18      	adds	r0, r3, #4
 811c780:	6030      	str	r0, [r6, #0]
 811c782:	062e      	lsls	r6, r5, #24
 811c784:	681b      	ldr	r3, [r3, #0]
 811c786:	d501      	bpl.n	811c78c <_printf_i+0x1c0>
 811c788:	6019      	str	r1, [r3, #0]
 811c78a:	e002      	b.n	811c792 <_printf_i+0x1c6>
 811c78c:	0668      	lsls	r0, r5, #25
 811c78e:	d5fb      	bpl.n	811c788 <_printf_i+0x1bc>
 811c790:	8019      	strh	r1, [r3, #0]
 811c792:	2300      	movs	r3, #0
 811c794:	6123      	str	r3, [r4, #16]
 811c796:	4616      	mov	r6, r2
 811c798:	e7bc      	b.n	811c714 <_printf_i+0x148>
 811c79a:	6833      	ldr	r3, [r6, #0]
 811c79c:	1d1a      	adds	r2, r3, #4
 811c79e:	6032      	str	r2, [r6, #0]
 811c7a0:	681e      	ldr	r6, [r3, #0]
 811c7a2:	6862      	ldr	r2, [r4, #4]
 811c7a4:	2100      	movs	r1, #0
 811c7a6:	4630      	mov	r0, r6
 811c7a8:	f7e3 fda2 	bl	81002f0 <memchr>
 811c7ac:	b108      	cbz	r0, 811c7b2 <_printf_i+0x1e6>
 811c7ae:	1b80      	subs	r0, r0, r6
 811c7b0:	6060      	str	r0, [r4, #4]
 811c7b2:	6863      	ldr	r3, [r4, #4]
 811c7b4:	6123      	str	r3, [r4, #16]
 811c7b6:	2300      	movs	r3, #0
 811c7b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811c7bc:	e7aa      	b.n	811c714 <_printf_i+0x148>
 811c7be:	6923      	ldr	r3, [r4, #16]
 811c7c0:	4632      	mov	r2, r6
 811c7c2:	4649      	mov	r1, r9
 811c7c4:	4640      	mov	r0, r8
 811c7c6:	47d0      	blx	sl
 811c7c8:	3001      	adds	r0, #1
 811c7ca:	d0ad      	beq.n	811c728 <_printf_i+0x15c>
 811c7cc:	6823      	ldr	r3, [r4, #0]
 811c7ce:	079b      	lsls	r3, r3, #30
 811c7d0:	d413      	bmi.n	811c7fa <_printf_i+0x22e>
 811c7d2:	68e0      	ldr	r0, [r4, #12]
 811c7d4:	9b03      	ldr	r3, [sp, #12]
 811c7d6:	4298      	cmp	r0, r3
 811c7d8:	bfb8      	it	lt
 811c7da:	4618      	movlt	r0, r3
 811c7dc:	e7a6      	b.n	811c72c <_printf_i+0x160>
 811c7de:	2301      	movs	r3, #1
 811c7e0:	4632      	mov	r2, r6
 811c7e2:	4649      	mov	r1, r9
 811c7e4:	4640      	mov	r0, r8
 811c7e6:	47d0      	blx	sl
 811c7e8:	3001      	adds	r0, #1
 811c7ea:	d09d      	beq.n	811c728 <_printf_i+0x15c>
 811c7ec:	3501      	adds	r5, #1
 811c7ee:	68e3      	ldr	r3, [r4, #12]
 811c7f0:	9903      	ldr	r1, [sp, #12]
 811c7f2:	1a5b      	subs	r3, r3, r1
 811c7f4:	42ab      	cmp	r3, r5
 811c7f6:	dcf2      	bgt.n	811c7de <_printf_i+0x212>
 811c7f8:	e7eb      	b.n	811c7d2 <_printf_i+0x206>
 811c7fa:	2500      	movs	r5, #0
 811c7fc:	f104 0619 	add.w	r6, r4, #25
 811c800:	e7f5      	b.n	811c7ee <_printf_i+0x222>
 811c802:	bf00      	nop
 811c804:	0811fdf0 	.word	0x0811fdf0
 811c808:	0811fe01 	.word	0x0811fe01

0811c80c <__sflush_r>:
 811c80c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 811c810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811c814:	0716      	lsls	r6, r2, #28
 811c816:	4605      	mov	r5, r0
 811c818:	460c      	mov	r4, r1
 811c81a:	d454      	bmi.n	811c8c6 <__sflush_r+0xba>
 811c81c:	684b      	ldr	r3, [r1, #4]
 811c81e:	2b00      	cmp	r3, #0
 811c820:	dc02      	bgt.n	811c828 <__sflush_r+0x1c>
 811c822:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 811c824:	2b00      	cmp	r3, #0
 811c826:	dd48      	ble.n	811c8ba <__sflush_r+0xae>
 811c828:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 811c82a:	2e00      	cmp	r6, #0
 811c82c:	d045      	beq.n	811c8ba <__sflush_r+0xae>
 811c82e:	2300      	movs	r3, #0
 811c830:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 811c834:	682f      	ldr	r7, [r5, #0]
 811c836:	6a21      	ldr	r1, [r4, #32]
 811c838:	602b      	str	r3, [r5, #0]
 811c83a:	d030      	beq.n	811c89e <__sflush_r+0x92>
 811c83c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 811c83e:	89a3      	ldrh	r3, [r4, #12]
 811c840:	0759      	lsls	r1, r3, #29
 811c842:	d505      	bpl.n	811c850 <__sflush_r+0x44>
 811c844:	6863      	ldr	r3, [r4, #4]
 811c846:	1ad2      	subs	r2, r2, r3
 811c848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 811c84a:	b10b      	cbz	r3, 811c850 <__sflush_r+0x44>
 811c84c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 811c84e:	1ad2      	subs	r2, r2, r3
 811c850:	2300      	movs	r3, #0
 811c852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 811c854:	6a21      	ldr	r1, [r4, #32]
 811c856:	4628      	mov	r0, r5
 811c858:	47b0      	blx	r6
 811c85a:	1c43      	adds	r3, r0, #1
 811c85c:	89a3      	ldrh	r3, [r4, #12]
 811c85e:	d106      	bne.n	811c86e <__sflush_r+0x62>
 811c860:	6829      	ldr	r1, [r5, #0]
 811c862:	291d      	cmp	r1, #29
 811c864:	d82b      	bhi.n	811c8be <__sflush_r+0xb2>
 811c866:	4a2a      	ldr	r2, [pc, #168]	@ (811c910 <__sflush_r+0x104>)
 811c868:	410a      	asrs	r2, r1
 811c86a:	07d6      	lsls	r6, r2, #31
 811c86c:	d427      	bmi.n	811c8be <__sflush_r+0xb2>
 811c86e:	2200      	movs	r2, #0
 811c870:	6062      	str	r2, [r4, #4]
 811c872:	04d9      	lsls	r1, r3, #19
 811c874:	6922      	ldr	r2, [r4, #16]
 811c876:	6022      	str	r2, [r4, #0]
 811c878:	d504      	bpl.n	811c884 <__sflush_r+0x78>
 811c87a:	1c42      	adds	r2, r0, #1
 811c87c:	d101      	bne.n	811c882 <__sflush_r+0x76>
 811c87e:	682b      	ldr	r3, [r5, #0]
 811c880:	b903      	cbnz	r3, 811c884 <__sflush_r+0x78>
 811c882:	6560      	str	r0, [r4, #84]	@ 0x54
 811c884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811c886:	602f      	str	r7, [r5, #0]
 811c888:	b1b9      	cbz	r1, 811c8ba <__sflush_r+0xae>
 811c88a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811c88e:	4299      	cmp	r1, r3
 811c890:	d002      	beq.n	811c898 <__sflush_r+0x8c>
 811c892:	4628      	mov	r0, r5
 811c894:	f7ff fca0 	bl	811c1d8 <_free_r>
 811c898:	2300      	movs	r3, #0
 811c89a:	6363      	str	r3, [r4, #52]	@ 0x34
 811c89c:	e00d      	b.n	811c8ba <__sflush_r+0xae>
 811c89e:	2301      	movs	r3, #1
 811c8a0:	4628      	mov	r0, r5
 811c8a2:	47b0      	blx	r6
 811c8a4:	4602      	mov	r2, r0
 811c8a6:	1c50      	adds	r0, r2, #1
 811c8a8:	d1c9      	bne.n	811c83e <__sflush_r+0x32>
 811c8aa:	682b      	ldr	r3, [r5, #0]
 811c8ac:	2b00      	cmp	r3, #0
 811c8ae:	d0c6      	beq.n	811c83e <__sflush_r+0x32>
 811c8b0:	2b1d      	cmp	r3, #29
 811c8b2:	d001      	beq.n	811c8b8 <__sflush_r+0xac>
 811c8b4:	2b16      	cmp	r3, #22
 811c8b6:	d11e      	bne.n	811c8f6 <__sflush_r+0xea>
 811c8b8:	602f      	str	r7, [r5, #0]
 811c8ba:	2000      	movs	r0, #0
 811c8bc:	e022      	b.n	811c904 <__sflush_r+0xf8>
 811c8be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811c8c2:	b21b      	sxth	r3, r3
 811c8c4:	e01b      	b.n	811c8fe <__sflush_r+0xf2>
 811c8c6:	690f      	ldr	r7, [r1, #16]
 811c8c8:	2f00      	cmp	r7, #0
 811c8ca:	d0f6      	beq.n	811c8ba <__sflush_r+0xae>
 811c8cc:	0793      	lsls	r3, r2, #30
 811c8ce:	680e      	ldr	r6, [r1, #0]
 811c8d0:	bf08      	it	eq
 811c8d2:	694b      	ldreq	r3, [r1, #20]
 811c8d4:	600f      	str	r7, [r1, #0]
 811c8d6:	bf18      	it	ne
 811c8d8:	2300      	movne	r3, #0
 811c8da:	eba6 0807 	sub.w	r8, r6, r7
 811c8de:	608b      	str	r3, [r1, #8]
 811c8e0:	f1b8 0f00 	cmp.w	r8, #0
 811c8e4:	dde9      	ble.n	811c8ba <__sflush_r+0xae>
 811c8e6:	6a21      	ldr	r1, [r4, #32]
 811c8e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 811c8ea:	4643      	mov	r3, r8
 811c8ec:	463a      	mov	r2, r7
 811c8ee:	4628      	mov	r0, r5
 811c8f0:	47b0      	blx	r6
 811c8f2:	2800      	cmp	r0, #0
 811c8f4:	dc08      	bgt.n	811c908 <__sflush_r+0xfc>
 811c8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811c8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811c8fe:	81a3      	strh	r3, [r4, #12]
 811c900:	f04f 30ff 	mov.w	r0, #4294967295
 811c904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811c908:	4407      	add	r7, r0
 811c90a:	eba8 0800 	sub.w	r8, r8, r0
 811c90e:	e7e7      	b.n	811c8e0 <__sflush_r+0xd4>
 811c910:	dfbffffe 	.word	0xdfbffffe

0811c914 <_fflush_r>:
 811c914:	b538      	push	{r3, r4, r5, lr}
 811c916:	690b      	ldr	r3, [r1, #16]
 811c918:	4605      	mov	r5, r0
 811c91a:	460c      	mov	r4, r1
 811c91c:	b913      	cbnz	r3, 811c924 <_fflush_r+0x10>
 811c91e:	2500      	movs	r5, #0
 811c920:	4628      	mov	r0, r5
 811c922:	bd38      	pop	{r3, r4, r5, pc}
 811c924:	b118      	cbz	r0, 811c92e <_fflush_r+0x1a>
 811c926:	6a03      	ldr	r3, [r0, #32]
 811c928:	b90b      	cbnz	r3, 811c92e <_fflush_r+0x1a>
 811c92a:	f7ff fa41 	bl	811bdb0 <__sinit>
 811c92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811c932:	2b00      	cmp	r3, #0
 811c934:	d0f3      	beq.n	811c91e <_fflush_r+0xa>
 811c936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 811c938:	07d0      	lsls	r0, r2, #31
 811c93a:	d404      	bmi.n	811c946 <_fflush_r+0x32>
 811c93c:	0599      	lsls	r1, r3, #22
 811c93e:	d402      	bmi.n	811c946 <_fflush_r+0x32>
 811c940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811c942:	f7ff fc1a 	bl	811c17a <__retarget_lock_acquire_recursive>
 811c946:	4628      	mov	r0, r5
 811c948:	4621      	mov	r1, r4
 811c94a:	f7ff ff5f 	bl	811c80c <__sflush_r>
 811c94e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811c950:	07da      	lsls	r2, r3, #31
 811c952:	4605      	mov	r5, r0
 811c954:	d4e4      	bmi.n	811c920 <_fflush_r+0xc>
 811c956:	89a3      	ldrh	r3, [r4, #12]
 811c958:	059b      	lsls	r3, r3, #22
 811c95a:	d4e1      	bmi.n	811c920 <_fflush_r+0xc>
 811c95c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811c95e:	f7ff fc0d 	bl	811c17c <__retarget_lock_release_recursive>
 811c962:	e7dd      	b.n	811c920 <_fflush_r+0xc>

0811c964 <fiprintf>:
 811c964:	b40e      	push	{r1, r2, r3}
 811c966:	b503      	push	{r0, r1, lr}
 811c968:	4601      	mov	r1, r0
 811c96a:	ab03      	add	r3, sp, #12
 811c96c:	4805      	ldr	r0, [pc, #20]	@ (811c984 <fiprintf+0x20>)
 811c96e:	f853 2b04 	ldr.w	r2, [r3], #4
 811c972:	6800      	ldr	r0, [r0, #0]
 811c974:	9301      	str	r3, [sp, #4]
 811c976:	f7ff fca3 	bl	811c2c0 <_vfiprintf_r>
 811c97a:	b002      	add	sp, #8
 811c97c:	f85d eb04 	ldr.w	lr, [sp], #4
 811c980:	b003      	add	sp, #12
 811c982:	4770      	bx	lr
 811c984:	10000040 	.word	0x10000040

0811c988 <__swbuf_r>:
 811c988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811c98a:	460e      	mov	r6, r1
 811c98c:	4614      	mov	r4, r2
 811c98e:	4605      	mov	r5, r0
 811c990:	b118      	cbz	r0, 811c99a <__swbuf_r+0x12>
 811c992:	6a03      	ldr	r3, [r0, #32]
 811c994:	b90b      	cbnz	r3, 811c99a <__swbuf_r+0x12>
 811c996:	f7ff fa0b 	bl	811bdb0 <__sinit>
 811c99a:	69a3      	ldr	r3, [r4, #24]
 811c99c:	60a3      	str	r3, [r4, #8]
 811c99e:	89a3      	ldrh	r3, [r4, #12]
 811c9a0:	071a      	lsls	r2, r3, #28
 811c9a2:	d501      	bpl.n	811c9a8 <__swbuf_r+0x20>
 811c9a4:	6923      	ldr	r3, [r4, #16]
 811c9a6:	b943      	cbnz	r3, 811c9ba <__swbuf_r+0x32>
 811c9a8:	4621      	mov	r1, r4
 811c9aa:	4628      	mov	r0, r5
 811c9ac:	f000 f82a 	bl	811ca04 <__swsetup_r>
 811c9b0:	b118      	cbz	r0, 811c9ba <__swbuf_r+0x32>
 811c9b2:	f04f 37ff 	mov.w	r7, #4294967295
 811c9b6:	4638      	mov	r0, r7
 811c9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811c9ba:	6823      	ldr	r3, [r4, #0]
 811c9bc:	6922      	ldr	r2, [r4, #16]
 811c9be:	1a98      	subs	r0, r3, r2
 811c9c0:	6963      	ldr	r3, [r4, #20]
 811c9c2:	b2f6      	uxtb	r6, r6
 811c9c4:	4283      	cmp	r3, r0
 811c9c6:	4637      	mov	r7, r6
 811c9c8:	dc05      	bgt.n	811c9d6 <__swbuf_r+0x4e>
 811c9ca:	4621      	mov	r1, r4
 811c9cc:	4628      	mov	r0, r5
 811c9ce:	f7ff ffa1 	bl	811c914 <_fflush_r>
 811c9d2:	2800      	cmp	r0, #0
 811c9d4:	d1ed      	bne.n	811c9b2 <__swbuf_r+0x2a>
 811c9d6:	68a3      	ldr	r3, [r4, #8]
 811c9d8:	3b01      	subs	r3, #1
 811c9da:	60a3      	str	r3, [r4, #8]
 811c9dc:	6823      	ldr	r3, [r4, #0]
 811c9de:	1c5a      	adds	r2, r3, #1
 811c9e0:	6022      	str	r2, [r4, #0]
 811c9e2:	701e      	strb	r6, [r3, #0]
 811c9e4:	6962      	ldr	r2, [r4, #20]
 811c9e6:	1c43      	adds	r3, r0, #1
 811c9e8:	429a      	cmp	r2, r3
 811c9ea:	d004      	beq.n	811c9f6 <__swbuf_r+0x6e>
 811c9ec:	89a3      	ldrh	r3, [r4, #12]
 811c9ee:	07db      	lsls	r3, r3, #31
 811c9f0:	d5e1      	bpl.n	811c9b6 <__swbuf_r+0x2e>
 811c9f2:	2e0a      	cmp	r6, #10
 811c9f4:	d1df      	bne.n	811c9b6 <__swbuf_r+0x2e>
 811c9f6:	4621      	mov	r1, r4
 811c9f8:	4628      	mov	r0, r5
 811c9fa:	f7ff ff8b 	bl	811c914 <_fflush_r>
 811c9fe:	2800      	cmp	r0, #0
 811ca00:	d0d9      	beq.n	811c9b6 <__swbuf_r+0x2e>
 811ca02:	e7d6      	b.n	811c9b2 <__swbuf_r+0x2a>

0811ca04 <__swsetup_r>:
 811ca04:	b538      	push	{r3, r4, r5, lr}
 811ca06:	4b29      	ldr	r3, [pc, #164]	@ (811caac <__swsetup_r+0xa8>)
 811ca08:	4605      	mov	r5, r0
 811ca0a:	6818      	ldr	r0, [r3, #0]
 811ca0c:	460c      	mov	r4, r1
 811ca0e:	b118      	cbz	r0, 811ca18 <__swsetup_r+0x14>
 811ca10:	6a03      	ldr	r3, [r0, #32]
 811ca12:	b90b      	cbnz	r3, 811ca18 <__swsetup_r+0x14>
 811ca14:	f7ff f9cc 	bl	811bdb0 <__sinit>
 811ca18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811ca1c:	0719      	lsls	r1, r3, #28
 811ca1e:	d422      	bmi.n	811ca66 <__swsetup_r+0x62>
 811ca20:	06da      	lsls	r2, r3, #27
 811ca22:	d407      	bmi.n	811ca34 <__swsetup_r+0x30>
 811ca24:	2209      	movs	r2, #9
 811ca26:	602a      	str	r2, [r5, #0]
 811ca28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811ca2c:	81a3      	strh	r3, [r4, #12]
 811ca2e:	f04f 30ff 	mov.w	r0, #4294967295
 811ca32:	e033      	b.n	811ca9c <__swsetup_r+0x98>
 811ca34:	0758      	lsls	r0, r3, #29
 811ca36:	d512      	bpl.n	811ca5e <__swsetup_r+0x5a>
 811ca38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811ca3a:	b141      	cbz	r1, 811ca4e <__swsetup_r+0x4a>
 811ca3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811ca40:	4299      	cmp	r1, r3
 811ca42:	d002      	beq.n	811ca4a <__swsetup_r+0x46>
 811ca44:	4628      	mov	r0, r5
 811ca46:	f7ff fbc7 	bl	811c1d8 <_free_r>
 811ca4a:	2300      	movs	r3, #0
 811ca4c:	6363      	str	r3, [r4, #52]	@ 0x34
 811ca4e:	89a3      	ldrh	r3, [r4, #12]
 811ca50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 811ca54:	81a3      	strh	r3, [r4, #12]
 811ca56:	2300      	movs	r3, #0
 811ca58:	6063      	str	r3, [r4, #4]
 811ca5a:	6923      	ldr	r3, [r4, #16]
 811ca5c:	6023      	str	r3, [r4, #0]
 811ca5e:	89a3      	ldrh	r3, [r4, #12]
 811ca60:	f043 0308 	orr.w	r3, r3, #8
 811ca64:	81a3      	strh	r3, [r4, #12]
 811ca66:	6923      	ldr	r3, [r4, #16]
 811ca68:	b94b      	cbnz	r3, 811ca7e <__swsetup_r+0x7a>
 811ca6a:	89a3      	ldrh	r3, [r4, #12]
 811ca6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 811ca70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 811ca74:	d003      	beq.n	811ca7e <__swsetup_r+0x7a>
 811ca76:	4621      	mov	r1, r4
 811ca78:	4628      	mov	r0, r5
 811ca7a:	f000 f83f 	bl	811cafc <__smakebuf_r>
 811ca7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811ca82:	f013 0201 	ands.w	r2, r3, #1
 811ca86:	d00a      	beq.n	811ca9e <__swsetup_r+0x9a>
 811ca88:	2200      	movs	r2, #0
 811ca8a:	60a2      	str	r2, [r4, #8]
 811ca8c:	6962      	ldr	r2, [r4, #20]
 811ca8e:	4252      	negs	r2, r2
 811ca90:	61a2      	str	r2, [r4, #24]
 811ca92:	6922      	ldr	r2, [r4, #16]
 811ca94:	b942      	cbnz	r2, 811caa8 <__swsetup_r+0xa4>
 811ca96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 811ca9a:	d1c5      	bne.n	811ca28 <__swsetup_r+0x24>
 811ca9c:	bd38      	pop	{r3, r4, r5, pc}
 811ca9e:	0799      	lsls	r1, r3, #30
 811caa0:	bf58      	it	pl
 811caa2:	6962      	ldrpl	r2, [r4, #20]
 811caa4:	60a2      	str	r2, [r4, #8]
 811caa6:	e7f4      	b.n	811ca92 <__swsetup_r+0x8e>
 811caa8:	2000      	movs	r0, #0
 811caaa:	e7f7      	b.n	811ca9c <__swsetup_r+0x98>
 811caac:	10000040 	.word	0x10000040

0811cab0 <__swhatbuf_r>:
 811cab0:	b570      	push	{r4, r5, r6, lr}
 811cab2:	460c      	mov	r4, r1
 811cab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811cab8:	2900      	cmp	r1, #0
 811caba:	b096      	sub	sp, #88	@ 0x58
 811cabc:	4615      	mov	r5, r2
 811cabe:	461e      	mov	r6, r3
 811cac0:	da0d      	bge.n	811cade <__swhatbuf_r+0x2e>
 811cac2:	89a3      	ldrh	r3, [r4, #12]
 811cac4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 811cac8:	f04f 0100 	mov.w	r1, #0
 811cacc:	bf14      	ite	ne
 811cace:	2340      	movne	r3, #64	@ 0x40
 811cad0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 811cad4:	2000      	movs	r0, #0
 811cad6:	6031      	str	r1, [r6, #0]
 811cad8:	602b      	str	r3, [r5, #0]
 811cada:	b016      	add	sp, #88	@ 0x58
 811cadc:	bd70      	pop	{r4, r5, r6, pc}
 811cade:	466a      	mov	r2, sp
 811cae0:	f000 f848 	bl	811cb74 <_fstat_r>
 811cae4:	2800      	cmp	r0, #0
 811cae6:	dbec      	blt.n	811cac2 <__swhatbuf_r+0x12>
 811cae8:	9901      	ldr	r1, [sp, #4]
 811caea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 811caee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 811caf2:	4259      	negs	r1, r3
 811caf4:	4159      	adcs	r1, r3
 811caf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811cafa:	e7eb      	b.n	811cad4 <__swhatbuf_r+0x24>

0811cafc <__smakebuf_r>:
 811cafc:	898b      	ldrh	r3, [r1, #12]
 811cafe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 811cb00:	079d      	lsls	r5, r3, #30
 811cb02:	4606      	mov	r6, r0
 811cb04:	460c      	mov	r4, r1
 811cb06:	d507      	bpl.n	811cb18 <__smakebuf_r+0x1c>
 811cb08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 811cb0c:	6023      	str	r3, [r4, #0]
 811cb0e:	6123      	str	r3, [r4, #16]
 811cb10:	2301      	movs	r3, #1
 811cb12:	6163      	str	r3, [r4, #20]
 811cb14:	b003      	add	sp, #12
 811cb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 811cb18:	ab01      	add	r3, sp, #4
 811cb1a:	466a      	mov	r2, sp
 811cb1c:	f7ff ffc8 	bl	811cab0 <__swhatbuf_r>
 811cb20:	9f00      	ldr	r7, [sp, #0]
 811cb22:	4605      	mov	r5, r0
 811cb24:	4639      	mov	r1, r7
 811cb26:	4630      	mov	r0, r6
 811cb28:	f7fe ffec 	bl	811bb04 <_malloc_r>
 811cb2c:	b948      	cbnz	r0, 811cb42 <__smakebuf_r+0x46>
 811cb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811cb32:	059a      	lsls	r2, r3, #22
 811cb34:	d4ee      	bmi.n	811cb14 <__smakebuf_r+0x18>
 811cb36:	f023 0303 	bic.w	r3, r3, #3
 811cb3a:	f043 0302 	orr.w	r3, r3, #2
 811cb3e:	81a3      	strh	r3, [r4, #12]
 811cb40:	e7e2      	b.n	811cb08 <__smakebuf_r+0xc>
 811cb42:	89a3      	ldrh	r3, [r4, #12]
 811cb44:	6020      	str	r0, [r4, #0]
 811cb46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811cb4a:	81a3      	strh	r3, [r4, #12]
 811cb4c:	9b01      	ldr	r3, [sp, #4]
 811cb4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 811cb52:	b15b      	cbz	r3, 811cb6c <__smakebuf_r+0x70>
 811cb54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811cb58:	4630      	mov	r0, r6
 811cb5a:	f000 f81d 	bl	811cb98 <_isatty_r>
 811cb5e:	b128      	cbz	r0, 811cb6c <__smakebuf_r+0x70>
 811cb60:	89a3      	ldrh	r3, [r4, #12]
 811cb62:	f023 0303 	bic.w	r3, r3, #3
 811cb66:	f043 0301 	orr.w	r3, r3, #1
 811cb6a:	81a3      	strh	r3, [r4, #12]
 811cb6c:	89a3      	ldrh	r3, [r4, #12]
 811cb6e:	431d      	orrs	r5, r3
 811cb70:	81a5      	strh	r5, [r4, #12]
 811cb72:	e7cf      	b.n	811cb14 <__smakebuf_r+0x18>

0811cb74 <_fstat_r>:
 811cb74:	b538      	push	{r3, r4, r5, lr}
 811cb76:	4d07      	ldr	r5, [pc, #28]	@ (811cb94 <_fstat_r+0x20>)
 811cb78:	2300      	movs	r3, #0
 811cb7a:	4604      	mov	r4, r0
 811cb7c:	4608      	mov	r0, r1
 811cb7e:	4611      	mov	r1, r2
 811cb80:	602b      	str	r3, [r5, #0]
 811cb82:	f7e4 f89f 	bl	8100cc4 <_fstat>
 811cb86:	1c43      	adds	r3, r0, #1
 811cb88:	d102      	bne.n	811cb90 <_fstat_r+0x1c>
 811cb8a:	682b      	ldr	r3, [r5, #0]
 811cb8c:	b103      	cbz	r3, 811cb90 <_fstat_r+0x1c>
 811cb8e:	6023      	str	r3, [r4, #0]
 811cb90:	bd38      	pop	{r3, r4, r5, pc}
 811cb92:	bf00      	nop
 811cb94:	10011ecc 	.word	0x10011ecc

0811cb98 <_isatty_r>:
 811cb98:	b538      	push	{r3, r4, r5, lr}
 811cb9a:	4d06      	ldr	r5, [pc, #24]	@ (811cbb4 <_isatty_r+0x1c>)
 811cb9c:	2300      	movs	r3, #0
 811cb9e:	4604      	mov	r4, r0
 811cba0:	4608      	mov	r0, r1
 811cba2:	602b      	str	r3, [r5, #0]
 811cba4:	f7e4 f89e 	bl	8100ce4 <_isatty>
 811cba8:	1c43      	adds	r3, r0, #1
 811cbaa:	d102      	bne.n	811cbb2 <_isatty_r+0x1a>
 811cbac:	682b      	ldr	r3, [r5, #0]
 811cbae:	b103      	cbz	r3, 811cbb2 <_isatty_r+0x1a>
 811cbb0:	6023      	str	r3, [r4, #0]
 811cbb2:	bd38      	pop	{r3, r4, r5, pc}
 811cbb4:	10011ecc 	.word	0x10011ecc

0811cbb8 <_init>:
 811cbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811cbba:	bf00      	nop
 811cbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811cbbe:	bc08      	pop	{r3}
 811cbc0:	469e      	mov	lr, r3
 811cbc2:	4770      	bx	lr

0811cbc4 <_fini>:
 811cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811cbc6:	bf00      	nop
 811cbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811cbca:	bc08      	pop	{r3}
 811cbcc:	469e      	mov	lr, r3
 811cbce:	4770      	bx	lr
