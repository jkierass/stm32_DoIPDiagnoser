/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/diagnose_dme_screen/Diagnose_DMEViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

Diagnose_DMEViewBase::Diagnose_DMEViewBase() :
    buttonCallback(this, &Diagnose_DMEViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &Diagnose_DMEViewBase::flexButtonCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    ContainterAdditionalData.setPosition(0, 441, 800, 39);
    Button_SendUart.setBoxWithBorderPosition(0, 0, 334, 38);
    Button_SendUart.setBorderSize(4);
    Button_SendUart.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(186, 2, 112), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(15, 255, 255));
    Button_SendUart.setWildcardText(TypedText(T___SINGLEUSE_R009));
    Unicode::snprintf(Button_SendUartBuffer, BUTTON_SENDUART_SIZE, "%s", TypedText(T___SINGLEUSE_SOLX).getText());
    Button_SendUart.setWildcardTextBuffer(Button_SendUartBuffer);
    Button_SendUart.setWildcardTextPosition(0, 7, 334, 38);
    Button_SendUart.setWildcardTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
    Button_SendUart.setAction(flexButtonCallback);
    Button_SendUart.setPosition(466, 0, 334, 38);
    ContainterAdditionalData.add(Button_SendUart);

    Text_LastReqCycle.setPosition(10, 6, 409, 32);
    Text_LastReqCycle.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Text_LastReqCycle.setLinespacing(0);
    Unicode::snprintf(Text_LastReqCycleBuffer, TEXT_LASTREQCYCLE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_FXNA).getText());
    Text_LastReqCycle.setWildcard(Text_LastReqCycleBuffer);
    Text_LastReqCycle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XO5J));
    ContainterAdditionalData.add(Text_LastReqCycle);

    add(ContainterAdditionalData);

    containerParameters.setPosition(0, 74, 800, 367);
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BARS_272X480_TOP_DIM_DARK_ID));
    scalableImage1.setPosition(0, 0, 800, 44);
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage1);

    scalableImage2.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_NARROW_NEUTRAL_ID));
    scalableImage2.setPosition(0, 44, 800, 2);
    scalableImage2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage2);

    text_BatteryVoltage.setPosition(10, 9, 390, 37);
    text_BatteryVoltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_BatteryVoltage.setLinespacing(0);
    text_BatteryVoltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G2PH));
    containerParameters.add(text_BatteryVoltage);

    text_ValueBatteryVoltage.setPosition(410, 9, 390, 35);
    text_ValueBatteryVoltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_ValueBatteryVoltage.setLinespacing(0);
    Unicode::snprintf(text_ValueBatteryVoltageBuffer, TEXT_VALUEBATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6NL7).getText());
    text_ValueBatteryVoltage.setWildcard(text_ValueBatteryVoltageBuffer);
    text_ValueBatteryVoltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IVKB));
    containerParameters.add(text_ValueBatteryVoltage);

    scalableImage1_1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BARS_272X480_TOP_DIM_DARK_ID));
    scalableImage1_1.setPosition(0, 46, 800, 44);
    scalableImage1_1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage1_1);

    scalableImage2_1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_NARROW_NEUTRAL_ID));
    scalableImage2_1.setPosition(0, 90, 800, 2);
    scalableImage2_1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage2_1);

    text_EngineRotSpeed.setPosition(10, 54, 390, 37);
    text_EngineRotSpeed.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_EngineRotSpeed.setLinespacing(0);
    text_EngineRotSpeed.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AUAL));
    containerParameters.add(text_EngineRotSpeed);

    text_ValueEngineRotSpeed.setPosition(410, 55, 390, 35);
    text_ValueEngineRotSpeed.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_ValueEngineRotSpeed.setLinespacing(0);
    Unicode::snprintf(text_ValueEngineRotSpeedBuffer, TEXT_VALUEENGINEROTSPEED_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_C30D).getText());
    text_ValueEngineRotSpeed.setWildcard(text_ValueEngineRotSpeedBuffer);
    text_ValueEngineRotSpeed.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VSAY));
    containerParameters.add(text_ValueEngineRotSpeed);

    scalableImage1_1_1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BARS_272X480_TOP_DIM_DARK_ID));
    scalableImage1_1_1.setPosition(0, 92, 800, 44);
    scalableImage1_1_1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage1_1_1);

    scalableImage2_1_1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_NARROW_NEUTRAL_ID));
    scalableImage2_1_1.setPosition(0, 136, 800, 2);
    scalableImage2_1_1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage2_1_1);

    text_CoolantTemp.setPosition(10, 101, 390, 37);
    text_CoolantTemp.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_CoolantTemp.setLinespacing(0);
    text_CoolantTemp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4RU5));
    containerParameters.add(text_CoolantTemp);

    text_ValueCoolantTemp.setPosition(410, 101, 390, 35);
    text_ValueCoolantTemp.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_ValueCoolantTemp.setLinespacing(0);
    Unicode::snprintf(text_ValueCoolantTempBuffer, TEXT_VALUECOOLANTTEMP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PH2P).getText());
    text_ValueCoolantTemp.setWildcard(text_ValueCoolantTempBuffer);
    text_ValueCoolantTemp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YXPD));
    containerParameters.add(text_ValueCoolantTemp);

    scalableImage1_1_1_1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BARS_272X480_TOP_DIM_DARK_ID));
    scalableImage1_1_1_1.setPosition(0, 138, 800, 44);
    scalableImage1_1_1_1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage1_1_1_1);

    scalableImage2_1_1_1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_NARROW_NEUTRAL_ID));
    scalableImage2_1_1_1.setPosition(0, 182, 800, 2);
    scalableImage2_1_1_1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage2_1_1_1);

    text_OilTemp.setPosition(10, 147, 390, 37);
    text_OilTemp.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_OilTemp.setLinespacing(0);
    text_OilTemp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AXG7));
    containerParameters.add(text_OilTemp);

    text_ValueOilTemp.setPosition(410, 147, 390, 35);
    text_ValueOilTemp.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_ValueOilTemp.setLinespacing(0);
    Unicode::snprintf(text_ValueOilTempBuffer, TEXT_VALUEOILTEMP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_2QCM).getText());
    text_ValueOilTemp.setWildcard(text_ValueOilTempBuffer);
    text_ValueOilTemp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7135));
    containerParameters.add(text_ValueOilTemp);

    scalableImage1_1_1_2.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BARS_272X480_TOP_DIM_DARK_ID));
    scalableImage1_1_1_2.setPosition(0, 183, 800, 44);
    scalableImage1_1_1_2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage1_1_1_2);

    scalableImage2_1_1_2.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_NARROW_NEUTRAL_ID));
    scalableImage2_1_1_2.setPosition(0, 227, 800, 2);
    scalableImage2_1_1_2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage2_1_1_2);

    text_AmbientTemp.setPosition(10, 192, 390, 37);
    text_AmbientTemp.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_AmbientTemp.setLinespacing(0);
    text_AmbientTemp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X712));
    containerParameters.add(text_AmbientTemp);

    text_ValueAmbientTemp.setPosition(410, 192, 390, 35);
    text_ValueAmbientTemp.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_ValueAmbientTemp.setLinespacing(0);
    Unicode::snprintf(text_ValueAmbientTempBuffer, TEXT_VALUEAMBIENTTEMP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7P48).getText());
    text_ValueAmbientTemp.setWildcard(text_ValueAmbientTempBuffer);
    text_ValueAmbientTemp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CRPM));
    containerParameters.add(text_ValueAmbientTemp);

    scalableImage1_1_1_3.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BARS_272X480_TOP_DIM_DARK_ID));
    scalableImage1_1_1_3.setPosition(0, 229, 800, 44);
    scalableImage1_1_1_3.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage1_1_1_3);

    scalableImage2_1_1_3.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_NARROW_NEUTRAL_ID));
    scalableImage2_1_1_3.setPosition(0, 273, 800, 2);
    scalableImage2_1_1_3.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage2_1_1_3);

    text_AirMass.setPosition(10, 238, 390, 37);
    text_AirMass.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_AirMass.setLinespacing(0);
    text_AirMass.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TWHF));
    containerParameters.add(text_AirMass);

    text_ValueAirMass.setPosition(410, 238, 390, 35);
    text_ValueAirMass.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_ValueAirMass.setLinespacing(0);
    Unicode::snprintf(text_ValueAirMassBuffer, TEXT_VALUEAIRMASS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_J2PG).getText());
    text_ValueAirMass.setWildcard(text_ValueAirMassBuffer);
    text_ValueAirMass.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F1QI));
    containerParameters.add(text_ValueAirMass);

    scalableImage1_1_1_4.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BARS_272X480_TOP_DIM_DARK_ID));
    scalableImage1_1_1_4.setPosition(0, 275, 800, 44);
    scalableImage1_1_1_4.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage1_1_1_4);

    scalableImage2_1_1_4.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_NARROW_NEUTRAL_ID));
    scalableImage2_1_1_4.setPosition(0, 319, 800, 2);
    scalableImage2_1_1_4.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage2_1_1_4);

    text_RailPress.setPosition(10, 284, 390, 37);
    text_RailPress.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_RailPress.setLinespacing(0);
    text_RailPress.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IIKH));
    containerParameters.add(text_RailPress);

    text_ValueRailPress.setPosition(410, 284, 390, 35);
    text_ValueRailPress.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_ValueRailPress.setLinespacing(0);
    Unicode::snprintf(text_ValueRailPressBuffer, TEXT_VALUERAILPRESS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_GWAZ).getText());
    text_ValueRailPress.setWildcard(text_ValueRailPressBuffer);
    text_ValueRailPress.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SNKY));
    containerParameters.add(text_ValueRailPress);

    scalableImage1_1_1_5.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BARS_272X480_TOP_DIM_DARK_ID));
    scalableImage1_1_1_5.setPosition(0, 321, 800, 44);
    scalableImage1_1_1_5.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage1_1_1_5);

    scalableImage2_1_1_5.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_NARROW_NEUTRAL_ID));
    scalableImage2_1_1_5.setPosition(0, 365, 800, 2);
    scalableImage2_1_1_5.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    containerParameters.add(scalableImage2_1_1_5);

    text_Pedal.setPosition(10, 330, 390, 37);
    text_Pedal.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_Pedal.setLinespacing(0);
    text_Pedal.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0407));
    containerParameters.add(text_Pedal);

    text_ValuePedal.setPosition(410, 330, 390, 35);
    text_ValuePedal.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_ValuePedal.setLinespacing(0);
    Unicode::snprintf(text_ValuePedalBuffer, TEXT_VALUEPEDAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_I378).getText());
    text_ValuePedal.setWildcard(text_ValuePedalBuffer);
    text_ValuePedal.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U6OD));
    containerParameters.add(text_ValuePedal);

    add(containerParameters);

    container1.setPosition(0, 0, 800, 75);
    box2.setPosition(0, -1, 800, 75);
    box2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    container1.add(box2);

    Clock.setPosition(659, 7, 124, 26);
    Clock.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Clock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JBCV));
    Clock.displayLeadingZeroForHourIndicator(true);
    Clock.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
    Clock.setTime24Hour(10, 10, 0);
    container1.add(Clock);

    Text_DME.setPosition(198, 12, 240, 52);
    Text_DME.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
    Text_DME.setLinespacing(0);
    Text_DME.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6BK9));
    container1.add(Text_DME);

    Text_Date.setPosition(657, 36, 128, 24);
    Text_Date.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Text_Date.setLinespacing(0);
    Unicode::snprintf(Text_DateBuffer, TEXT_DATE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8P2M).getText());
    Text_Date.setWildcard(Text_DateBuffer);
    Text_Date.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MRRY));
    container1.add(Text_Date);

    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ID));
    HomeIcon.setPosition(12, 9, 55, 55);
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container1.add(HomeIcon);

    ReturnIcon.setBitmap(touchgfx::Bitmap(BITMAP_RETURN_ID));
    ReturnIcon.setPosition(86, 10, 55, 55);
    ReturnIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container1.add(ReturnIcon);

    HomeButton.setXY(12, 6);
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
    HomeButton.setAction(buttonCallback);
    container1.add(HomeButton);

    ReturnButton.setXY(83, 6);
    ReturnButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
    ReturnButton.setAction(buttonCallback);
    container1.add(ReturnButton);

    Text_Temperature.setPosition(546, 10, 105, 52);
    Text_Temperature.setColor(touchgfx::Color::getColorFromRGB(247, 64, 174));
    Text_Temperature.setLinespacing(0);
    Unicode::snprintf(Text_TemperatureBuffer, TEXT_TEMPERATURE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_UF7O).getText());
    Text_Temperature.setWildcard(Text_TemperatureBuffer);
    Text_Temperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LVFG));
    container1.add(Text_Temperature);

    add(container1);

    ConnectedModalWindow.setBackground(touchgfx::BitmapId(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_WIDE_OUTLINED_LIGHT_ID), 160, 105);
    ConnectedModalWindow.setShadeColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ConnectedModalWindow.hide();
    Text_Popup.setPosition(61, 40, 377, 160);
    Text_Popup.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Text_Popup.setLinespacing(0);
    Text_Popup.setWideTextAction(WIDE_TEXT_WORDWRAP);
    Unicode::snprintf(Text_PopupBuffer, TEXT_POPUP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YSJP).getText());
    Text_Popup.setWildcard(Text_PopupBuffer);
    Text_Popup.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VBHU));
    ConnectedModalWindow.add(Text_Popup);

    ButtonHidePopup.setXY(143, 211);
    ButtonHidePopup.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_PRESSED_ID));
    ButtonHidePopup.setLabelText(touchgfx::TypedText(T___SINGLEUSE_35KC));
    ButtonHidePopup.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ButtonHidePopup.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ButtonHidePopup.setAction(buttonCallback);
    ConnectedModalWindow.add(ButtonHidePopup);

    add(ConnectedModalWindow);
}

Diagnose_DMEViewBase::~Diagnose_DMEViewBase()
{

}

void Diagnose_DMEViewBase::setupScreen()
{

}

void Diagnose_DMEViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
    {
        //SwitchToMainScreen
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
    }
    if (&src == &ReturnButton)
    {
        //SwitchToDiagnose
        //When ReturnButton clicked change screen to Diagnose
        //Go to Diagnose with no screen transition
        application().gotoDiagnoseScreenNoTransition();
    }
    if (&src == &ButtonHidePopup)
    {
        //hideConnectedPopup
        //When ButtonHidePopup clicked hide ConnectedModalWindow
        //Hide ConnectedModalWindow
        ConnectedModalWindow.setVisible(false);
        ConnectedModalWindow.invalidate();
    }
}

void Diagnose_DMEViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &Button_SendUart)
    {
        //ButtonUartClicked
        //When Button_SendUart clicked call virtual function
        //Call ButtonUartClicked
        ButtonUartClicked();
    }
}
