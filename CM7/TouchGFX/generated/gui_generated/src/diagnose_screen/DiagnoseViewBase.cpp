/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/diagnose_screen/DiagnoseViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

DiagnoseViewBase::DiagnoseViewBase() :
    buttonCallback(this, &DiagnoseViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box1);

    container1.setPosition(0, 0, 800, 75);
    box2.setPosition(0, 0, 800, 75);
    box2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    container1.add(box2);

    Clock.setPosition(659, 7, 124, 26);
    Clock.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Clock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NR0L));
    Clock.displayLeadingZeroForHourIndicator(true);
    Clock.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
    Clock.setTime24Hour(10, 10, 0);
    container1.add(Clock);

    MainTitle.setPosition(138, 12, 240, 52);
    MainTitle.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
    MainTitle.setLinespacing(0);
    MainTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_33RI));
    container1.add(MainTitle);

    Text_Date.setPosition(657, 36, 128, 24);
    Text_Date.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Text_Date.setLinespacing(0);
    Unicode::snprintf(Text_DateBuffer, TEXT_DATE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_BNDJ).getText());
    Text_Date.setWildcard(Text_DateBuffer);
    Text_Date.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BR4U));
    container1.add(Text_Date);

    Text_Temperature.setPosition(546, 10, 105, 52);
    Text_Temperature.setColor(touchgfx::Color::getColorFromRGB(247, 64, 174));
    Text_Temperature.setLinespacing(0);
    Unicode::snprintf(Text_TemperatureBuffer, TEXT_TEMPERATURE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_SASM).getText());
    Text_Temperature.setWildcard(Text_TemperatureBuffer);
    Text_Temperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X1VW));
    container1.add(Text_Temperature);

    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ID));
    HomeIcon.setPosition(12, 9, 55, 55);
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container1.add(HomeIcon);

    HomeButton.setXY(9, 7);
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
    HomeButton.setAction(buttonCallback);
    container1.add(HomeButton);

    add(container1);

    MotorButton.setXY(82, 96);
    MotorButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_ACTION_ID));
    MotorButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_JS26));
    MotorButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    MotorButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    MotorButton.setAction(buttonCallback);
    add(MotorButton);

    PowerMgmntButton.setXY(312, 96);
    PowerMgmntButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_ACTION_ID));
    PowerMgmntButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_V2G9));
    PowerMgmntButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    PowerMgmntButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(PowerMgmntButton);

    GPSButton.setXY(545, 96);
    GPSButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_ACTION_ID));
    GPSButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_2C73));
    GPSButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    GPSButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(GPSButton);

    ErrorsButton.setXY(546, 287);
    ErrorsButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_ACTION_ID));
    ErrorsButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_1B3O));
    ErrorsButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ErrorsButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(ErrorsButton);

    ClimateButton.setXY(82, 287);
    ClimateButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_ACTION_ID));
    ClimateButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_TRKD));
    ClimateButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ClimateButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(ClimateButton);

    DSCButton.setXY(312, 287);
    DSCButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_ACTION_ID));
    DSCButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_TL8J));
    DSCButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    DSCButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(DSCButton);
}

DiagnoseViewBase::~DiagnoseViewBase()
{

}

void DiagnoseViewBase::setupScreen()
{

}

void DiagnoseViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
    {
        //SwitchToMainScreen
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
    }
    if (&src == &MotorButton)
    {
        //Interaction1
        //When MotorButton clicked change screen to Diagnose_Motor1
        //Go to Diagnose_Motor1 with no screen transition
        application().gotoDiagnose_Motor1ScreenNoTransition();
    }
}
