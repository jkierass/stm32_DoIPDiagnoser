/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/date_screen/DateViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

DateViewBase::DateViewBase() :
    updateItemCallback(this, &DateViewBase::updateItemCallbackHandler),
    buttonCallback(this, &DateViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box1);

    BackgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BACKGROUNDS_480X272_SHATTERED_RAIN_ID));
    BackgroundImage.setPosition(0, 80, 800, 400);
    BackgroundImage.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(BackgroundImage);

    boxWithBorder1.setPosition(33, 225, 101, 80);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorder1.setBorderSize(2);
    add(boxWithBorder1);

    boxWithBorder1_1.setPosition(171, 225, 101, 80);
    boxWithBorder1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder1_1.setBorderColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorder1_1.setBorderSize(2);
    add(boxWithBorder1_1);

    boxWithBorder1_2.setPosition(309, 225, 101, 80);
    boxWithBorder1_2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder1_2.setBorderColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorder1_2.setBorderSize(2);
    add(boxWithBorder1_2);

    boxWithBorder1_3.setPosition(485, 225, 101, 80);
    boxWithBorder1_3.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder1_3.setBorderColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorder1_3.setBorderSize(2);
    add(boxWithBorder1_3);

    boxWithBorder1_4.setPosition(638, 225, 101, 80);
    boxWithBorder1_4.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder1_4.setBorderColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    boxWithBorder1_4.setBorderSize(2);
    add(boxWithBorder1_4);

    container1.setPosition(0, 0, 800, 75);
    Clock.setPosition(659, 7, 124, 26);
    Clock.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Clock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UXSI));
    Clock.displayLeadingZeroForHourIndicator(true);
    Clock.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
    Clock.setTime24Hour(10, 10, 0);
    container1.add(Clock);

    MainTitle.setPosition(50, 11, 447, 52);
    MainTitle.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
    MainTitle.setLinespacing(0);
    MainTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6PNS));
    container1.add(MainTitle);

    Text_Date_1.setPosition(657, 36, 128, 24);
    Text_Date_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Text_Date_1.setLinespacing(0);
    Text_Date_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6FAH));
    container1.add(Text_Date_1);

    HomeButton.setXY(23, 12);
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID));
    HomeButton.setAction(buttonCallback);
    container1.add(HomeButton);

    Text_Temperature.setPosition(546, 10, 105, 52);
    Text_Temperature.setColor(touchgfx::Color::getColorFromRGB(247, 64, 174));
    Text_Temperature.setLinespacing(0);
    Unicode::snprintf(Text_TemperatureBuffer, TEXT_TEMPERATURE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZOIX).getText());
    Text_Temperature.setWildcard(Text_TemperatureBuffer);
    Text_Temperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SKQQ));
    container1.add(Text_Temperature);

    add(container1);

    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ID));
    HomeIcon.setPosition(28, 18, 50, 48);
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(HomeIcon);

    scrollWheel_Month.setPosition(171, 225, 101, 80);
    scrollWheel_Month.setHorizontal(false);
    scrollWheel_Month.setCircular(false);
    scrollWheel_Month.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollWheel_Month.setSwipeAcceleration(10);
    scrollWheel_Month.setDragAcceleration(10);
    scrollWheel_Month.setNumberOfItems(12);
    scrollWheel_Month.setSelectedItemOffset(15);
    scrollWheel_Month.setOvershootPercentage(75);
    scrollWheel_Month.setDrawableSize(50, 0);
    scrollWheel_Month.setDrawables(scrollWheel_MonthListItems, updateItemCallback);
    scrollWheel_Month.animateToItem(1, 0);
    add(scrollWheel_Month);

    scrollWheel_Day.setPosition(33, 225, 101, 80);
    scrollWheel_Day.setHorizontal(false);
    scrollWheel_Day.setCircular(false);
    scrollWheel_Day.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollWheel_Day.setSwipeAcceleration(10);
    scrollWheel_Day.setDragAcceleration(10);
    scrollWheel_Day.setNumberOfItems(31);
    scrollWheel_Day.setSelectedItemOffset(15);
    scrollWheel_Day.setOvershootPercentage(75);
    scrollWheel_Day.setDrawableSize(50, 0);
    scrollWheel_Day.setDrawables(scrollWheel_DayListItems, updateItemCallback);
    scrollWheel_Day.animateToItem(1, 0);
    add(scrollWheel_Day);

    scrollWheel_Minute.setPosition(638, 225, 101, 80);
    scrollWheel_Minute.setHorizontal(false);
    scrollWheel_Minute.setCircular(false);
    scrollWheel_Minute.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollWheel_Minute.setSwipeAcceleration(10);
    scrollWheel_Minute.setDragAcceleration(10);
    scrollWheel_Minute.setNumberOfItems(60);
    scrollWheel_Minute.setSelectedItemOffset(15);
    scrollWheel_Minute.setOvershootPercentage(75);
    scrollWheel_Minute.setDrawableSize(50, 0);
    scrollWheel_Minute.setDrawables(scrollWheel_MinuteListItems, updateItemCallback);
    scrollWheel_Minute.animateToItem(0, 0);
    add(scrollWheel_Minute);

    scrollWheel_Hour.setPosition(482, 225, 101, 80);
    scrollWheel_Hour.setHorizontal(false);
    scrollWheel_Hour.setCircular(false);
    scrollWheel_Hour.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollWheel_Hour.setSwipeAcceleration(10);
    scrollWheel_Hour.setDragAcceleration(10);
    scrollWheel_Hour.setNumberOfItems(24);
    scrollWheel_Hour.setSelectedItemOffset(15);
    scrollWheel_Hour.setOvershootPercentage(75);
    scrollWheel_Hour.setDrawableSize(50, 0);
    scrollWheel_Hour.setDrawables(scrollWheel_HourListItems, updateItemCallback);
    scrollWheel_Hour.animateToItem(1, 0);
    add(scrollWheel_Hour);

    scrollWheel_Year.setPosition(309, 225, 101, 80);
    scrollWheel_Year.setHorizontal(false);
    scrollWheel_Year.setCircular(false);
    scrollWheel_Year.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    scrollWheel_Year.setSwipeAcceleration(10);
    scrollWheel_Year.setDragAcceleration(10);
    scrollWheel_Year.setNumberOfItems(100);
    scrollWheel_Year.setSelectedItemOffset(15);
    scrollWheel_Year.setOvershootPercentage(75);
    scrollWheel_Year.setDrawableSize(50, 0);
    scrollWheel_Year.setDrawables(scrollWheel_YearListItems, updateItemCallback);
    scrollWheel_Year.animateToItem(1, 0);
    add(scrollWheel_Year);

    text_Day.setPosition(33, 152, 101, 48);
    text_Day.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_Day.setLinespacing(0);
    text_Day.setTypedText(touchgfx::TypedText(T___SINGLEUSE_J2VA));
    add(text_Day);

    text_TimeColon.setPosition(586, 240, 52, 51);
    text_TimeColon.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
    text_TimeColon.setLinespacing(0);
    text_TimeColon.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5SP9));
    add(text_TimeColon);

    text_Hour.setPosition(478, 152, 108, 48);
    text_Hour.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_Hour.setLinespacing(0);
    text_Hour.setTypedText(touchgfx::TypedText(T___SINGLEUSE_58AR));
    add(text_Hour);

    text_Minute.setPosition(620, 152, 137, 48);
    text_Minute.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_Minute.setLinespacing(0);
    text_Minute.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DP2O));
    add(text_Minute);

    text_Month.setPosition(157, 152, 131, 48);
    text_Month.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_Month.setLinespacing(0);
    text_Month.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2H9E));
    add(text_Month);

    text_Year.setPosition(294, 152, 131, 48);
    text_Year.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    text_Year.setLinespacing(0);
    text_Year.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G3DK));
    add(text_Year);

    button_Confirm.setXY(478, 394);
    button_Confirm.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_LARGE_ROUND_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_LARGE_ROUND_ACTION_ID));
    button_Confirm.setLabelText(touchgfx::TypedText(T___SINGLEUSE_3EQW));
    button_Confirm.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    button_Confirm.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(button_Confirm);
}

DateViewBase::~DateViewBase()
{

}

void DateViewBase::setupScreen()
{
    scrollWheel_Month.initialize();
    for (int i = 0; i < scrollWheel_MonthListItems.getNumberOfDrawables(); i++)
    {
        scrollWheel_MonthListItems[i].initialize();
    }
    scrollWheel_Day.initialize();
    for (int i = 0; i < scrollWheel_DayListItems.getNumberOfDrawables(); i++)
    {
        scrollWheel_DayListItems[i].initialize();
    }
    scrollWheel_Minute.initialize();
    for (int i = 0; i < scrollWheel_MinuteListItems.getNumberOfDrawables(); i++)
    {
        scrollWheel_MinuteListItems[i].initialize();
    }
    scrollWheel_Hour.initialize();
    for (int i = 0; i < scrollWheel_HourListItems.getNumberOfDrawables(); i++)
    {
        scrollWheel_HourListItems[i].initialize();
    }
    scrollWheel_Year.initialize();
    for (int i = 0; i < scrollWheel_YearListItems.getNumberOfDrawables(); i++)
    {
        scrollWheel_YearListItems[i].initialize();
    }
}

void DateViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
    {
        //SwitchToMainScreen
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
    }
}

void DateViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollWheel_MonthListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DayElement* cc = (DayElement*)d;
        scrollWheel_MonthUpdateItem(*cc, itemIndex);
    }

    if (items == &scrollWheel_DayListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DayElement* cc = (DayElement*)d;
        scrollWheel_DayUpdateItem(*cc, itemIndex);
    }

    if (items == &scrollWheel_MinuteListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DayElement* cc = (DayElement*)d;
        scrollWheel_MinuteUpdateItem(*cc, itemIndex);
    }

    if (items == &scrollWheel_HourListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DayElement* cc = (DayElement*)d;
        scrollWheel_HourUpdateItem(*cc, itemIndex);
    }

    if (items == &scrollWheel_YearListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        DayElement* cc = (DayElement*)d;
        scrollWheel_YearUpdateItem(*cc, itemIndex);
    }
}
