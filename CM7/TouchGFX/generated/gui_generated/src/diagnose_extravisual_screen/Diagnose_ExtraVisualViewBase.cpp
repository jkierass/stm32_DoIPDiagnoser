/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/diagnose_extravisual_screen/Diagnose_ExtraVisualViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

Diagnose_ExtraVisualViewBase::Diagnose_ExtraVisualViewBase() :
    flexButtonCallback(this, &Diagnose_ExtraVisualViewBase::flexButtonCallbackHandler),
    buttonCallback(this, &Diagnose_ExtraVisualViewBase::buttonCallbackHandler),
    graphClickedCallback(this, &Diagnose_ExtraVisualViewBase::graphClickedCallbackHandler),
    graphDraggedCallback(this, &Diagnose_ExtraVisualViewBase::graphDraggedCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box3.setPosition(288, 99, 497, 154);
    box3.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(box3);

    box3_1.setPosition(288, 280, 495, 154);
    box3_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(box3_1);

    ContainterAdditionalData.setPosition(0, 441, 800, 39);
    Button_SendUart.setBoxWithBorderPosition(0, 0, 334, 38);
    Button_SendUart.setBorderSize(4);
    Button_SendUart.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(186, 2, 112), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(15, 255, 255));
    Button_SendUart.setWildcardText(TypedText(T___SINGLEUSE_Q3XK));
    Unicode::snprintf(Button_SendUartBuffer, BUTTON_SENDUART_SIZE, "%s", TypedText(T___SINGLEUSE_GZKA).getText());
    Button_SendUart.setWildcardTextBuffer(Button_SendUartBuffer);
    Button_SendUart.setWildcardTextPosition(0, 7, 334, 38);
    Button_SendUart.setWildcardTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
    Button_SendUart.setAction(flexButtonCallback);
    Button_SendUart.setPosition(466, 0, 334, 38);
    ContainterAdditionalData.add(Button_SendUart);

    Text_LastReqCycle.setPosition(12, 4, 454, 35);
    Text_LastReqCycle.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Text_LastReqCycle.setLinespacing(0);
    Unicode::snprintf(Text_LastReqCycleBuffer, TEXT_LASTREQCYCLE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RX7V).getText());
    Text_LastReqCycle.setWildcard(Text_LastReqCycleBuffer);
    Text_LastReqCycle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UH2S));
    ContainterAdditionalData.add(Text_LastReqCycle);

    add(ContainterAdditionalData);

    container1.setPosition(0, 0, 800, 75);
    box2.setPosition(0, -1, 800, 75);
    box2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    container1.add(box2);

    Clock.setPosition(659, 7, 124, 26);
    Clock.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Clock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UTO4));
    Clock.displayLeadingZeroForHourIndicator(true);
    Clock.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
    Clock.setTime24Hour(10, 10, 0);
    container1.add(Clock);

    Text_ExtraVisualDME.setPosition(180, 11, 348, 54);
    Text_ExtraVisualDME.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
    Text_ExtraVisualDME.setLinespacing(0);
    Text_ExtraVisualDME.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0UOO));
    container1.add(Text_ExtraVisualDME);

    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ID));
    HomeIcon.setPosition(12, 9, 55, 55);
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container1.add(HomeIcon);

    ReturnIcon.setBitmap(touchgfx::Bitmap(BITMAP_RETURN_ID));
    ReturnIcon.setPosition(86, 10, 55, 55);
    ReturnIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container1.add(ReturnIcon);

    HomeButton.setXY(12, 6);
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
    HomeButton.setAction(buttonCallback);
    container1.add(HomeButton);

    ReturnButton.setXY(83, 6);
    ReturnButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
    ReturnButton.setAction(buttonCallback);
    container1.add(ReturnButton);

    Text_Temperature.setPosition(546, 10, 105, 52);
    Text_Temperature.setColor(touchgfx::Color::getColorFromRGB(247, 64, 174));
    Text_Temperature.setLinespacing(0);
    Unicode::snprintf(Text_TemperatureBuffer, TEXT_TEMPERATURE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_83GD).getText());
    Text_Temperature.setWildcard(Text_TemperatureBuffer);
    Text_Temperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OP6M));
    container1.add(Text_Temperature);

    Text_Date.setPosition(657, 36, 128, 24);
    Text_Date.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Text_Date.setLinespacing(0);
    Unicode::snprintf(Text_DateBuffer, TEXT_DATE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NT4E).getText());
    Text_Date.setWildcard(Text_DateBuffer);
    Text_Date.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JXXZ));
    container1.add(Text_Date);

    add(container1);

    gauge_RPM.setBackground(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_BACKGROUNDS_ACTIVE_PRECISION_ID));
    gauge_RPM.setPosition(21, 133, 240, 240);
    gauge_RPM.setCenter(120, 120);
    gauge_RPM.setStartEndAngle(-113, 112);
    gauge_RPM.setRange(0, 10000);
    gauge_RPM.setValue(0);
    gauge_RPM.setNeedle(BITMAP_DARK_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_NEEDLES_ROUGH_ID, 10, 65);
    gauge_RPM.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge_RPM.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(gauge_RPM);

    dynamicGraph_Oil.setPosition(288, 99, 495, 154);
    dynamicGraph_Oil.setScale(10);
    dynamicGraph_Oil.setGraphAreaMargin(5, 20, 5, 15);
    dynamicGraph_Oil.setGraphAreaPadding(0, 0, 0, 0);
    dynamicGraph_Oil.setGraphRangeY(0, 400);
    dynamicGraph_Oil.setClickAction(graphClickedCallback);
    dynamicGraph_Oil.setDragAction(graphDraggedCallback);
    dynamicGraph_OilMajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(122, 222, 255));
    dynamicGraph_OilMajorYAxisGrid.setInterval(40);
    dynamicGraph_OilMajorYAxisGrid.setLineWidth(1);
    dynamicGraph_OilMajorYAxisGrid.setScale(10);
    dynamicGraph_Oil.addGraphElement(dynamicGraph_OilMajorYAxisGrid);

    dynamicGraph_OilMajorXAxisLabel.setInterval(100);
    dynamicGraph_OilMajorXAxisLabel.setLabelTypedText(touchgfx::TypedText(T___SINGLEUSE_R7X6));
    dynamicGraph_OilMajorXAxisLabel.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    dynamicGraph_OilMajorXAxisLabel.setScale(10);
    dynamicGraph_Oil.addBottomElement(dynamicGraph_OilMajorXAxisLabel);

    dynamicGraph_OilMajorYAxisLabel.setInterval(40);
    dynamicGraph_OilMajorYAxisLabel.setLabelTypedText(touchgfx::TypedText(T___SINGLEUSE_EG5Y));
    dynamicGraph_OilMajorYAxisLabel.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    dynamicGraph_OilMajorYAxisLabel.setScale(10);
    dynamicGraph_Oil.addLeftElement(dynamicGraph_OilMajorYAxisLabel);

    dynamicGraph_OilLine1Painter.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    dynamicGraph_OilLine1.setPainter(dynamicGraph_OilLine1Painter);
    dynamicGraph_OilLine1.setLineWidth(2);
    dynamicGraph_Oil.addGraphElement(dynamicGraph_OilLine1);


    add(dynamicGraph_Oil);

    dynamicGraph_Coolant.setPosition(288, 280, 495, 154);
    dynamicGraph_Coolant.setScale(10);
    dynamicGraph_Coolant.setGraphAreaMargin(5, 20, 5, 15);
    dynamicGraph_Coolant.setGraphAreaPadding(0, 0, 0, 0);
    dynamicGraph_Coolant.setGraphRangeY(0, 200);
    dynamicGraph_Coolant.setClickAction(graphClickedCallback);
    dynamicGraph_Coolant.setDragAction(graphDraggedCallback);
    dynamicGraph_CoolantMajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(122, 222, 255));
    dynamicGraph_CoolantMajorYAxisGrid.setInterval(20);
    dynamicGraph_CoolantMajorYAxisGrid.setLineWidth(1);
    dynamicGraph_CoolantMajorYAxisGrid.setScale(10);
    dynamicGraph_Coolant.addGraphElement(dynamicGraph_CoolantMajorYAxisGrid);

    dynamicGraph_CoolantMajorXAxisLabel.setInterval(100);
    dynamicGraph_CoolantMajorXAxisLabel.setLabelTypedText(touchgfx::TypedText(T___SINGLEUSE_5GGV));
    dynamicGraph_CoolantMajorXAxisLabel.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    dynamicGraph_CoolantMajorXAxisLabel.setScale(10);
    dynamicGraph_Coolant.addBottomElement(dynamicGraph_CoolantMajorXAxisLabel);

    dynamicGraph_CoolantMajorYAxisLabel.setInterval(20);
    dynamicGraph_CoolantMajorYAxisLabel.setLabelTypedText(touchgfx::TypedText(T___SINGLEUSE_B4LU));
    dynamicGraph_CoolantMajorYAxisLabel.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    dynamicGraph_CoolantMajorYAxisLabel.setScale(10);
    dynamicGraph_Coolant.addLeftElement(dynamicGraph_CoolantMajorYAxisLabel);

    dynamicGraph_CoolantLine1Painter.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    dynamicGraph_CoolantLine1.setPainter(dynamicGraph_CoolantLine1Painter);
    dynamicGraph_CoolantLine1.setLineWidth(2);
    dynamicGraph_Coolant.addGraphElement(dynamicGraph_CoolantLine1);

    add(dynamicGraph_Coolant);

    textArea1.setXY(76, 289);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(247, 64, 174));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JMFH));
    add(textArea1);

    textArea2.setPosition(288, 253, 495, 27);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(247, 64, 174));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VB59));
    add(textArea2);

    textArea2_1.setPosition(288, 74, 495, 25);
    textArea2_1.setColor(touchgfx::Color::getColorFromRGB(247, 64, 174));
    textArea2_1.setLinespacing(0);
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_K8QD));
    add(textArea2_1);

    graphValueWidget_oil.setXY(0, -30);
    add(graphValueWidget_oil);

    graphValueWidget_coolant.setXY(55, -30);
    add(graphValueWidget_coolant);

    ConnectedModalWindow.setBackground(touchgfx::BitmapId(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_WIDE_OUTLINED_LIGHT_ID), 160, 105);
    ConnectedModalWindow.setShadeColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ConnectedModalWindow.hide();
    Text_Popup.setPosition(61, 40, 377, 160);
    Text_Popup.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Text_Popup.setLinespacing(0);
    Text_Popup.setWideTextAction(WIDE_TEXT_WORDWRAP);
    Unicode::snprintf(Text_PopupBuffer, TEXT_POPUP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_TN38).getText());
    Text_Popup.setWildcard(Text_PopupBuffer);
    Text_Popup.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QASI));
    ConnectedModalWindow.add(Text_Popup);

    ButtonHidePopup.setXY(143, 211);
    ButtonHidePopup.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_ACTIVE_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_PRESSED_ID));
    ButtonHidePopup.setLabelText(touchgfx::TypedText(T___SINGLEUSE_VWOP));
    ButtonHidePopup.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ButtonHidePopup.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ButtonHidePopup.setAction(buttonCallback);
    ConnectedModalWindow.add(ButtonHidePopup);

    add(ConnectedModalWindow);
}

Diagnose_ExtraVisualViewBase::~Diagnose_ExtraVisualViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Diagnose_ExtraVisualViewBase::setupScreen()
{
    graphValueWidget_oil.initialize();
    graphValueWidget_coolant.initialize();
}

void Diagnose_ExtraVisualViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &Button_SendUart)
    {
        //ButtonUartClicked
        //When Button_SendUart clicked call virtual function
        //Call ButtonUartClicked
        ButtonUartClicked();
    }
}

void Diagnose_ExtraVisualViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
    {
        //SwitchToMainScreen
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
    }
    if (&src == &ReturnButton)
    {
        //SwitchToDiagnose
        //When ReturnButton clicked change screen to Diagnose
        //Go to Diagnose with no screen transition
        application().gotoDiagnoseScreenNoTransition();
    }
    if (&src == &ButtonHidePopup)
    {
        //hideConnectedPopup
        //When ButtonHidePopup clicked hide ConnectedModalWindow
        //Hide ConnectedModalWindow
        ConnectedModalWindow.setVisible(false);
        ConnectedModalWindow.invalidate();
    }
}

void Diagnose_ExtraVisualViewBase::graphClickedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphClickEvent& value)
{
    if (&src == &dynamicGraph_Oil)
    {
        //graphOil_Clicked
        //When dynamicGraph_Oil clicked call virtual function
        //Call graphOil_Clicked
        graphOil_Clicked(value);
    }
    if (&src == &dynamicGraph_Coolant)
    {
        //graphCoolant_Clicked
        //When dynamicGraph_Coolant clicked call virtual function
        //Call graphCoolant_Clicked
        graphCoolant_Clicked(value);
    }
}

void Diagnose_ExtraVisualViewBase::graphDraggedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphDragEvent& value)
{
    if (&src == &dynamicGraph_Oil)
    {
        //graphOil_Dragged
        //When dynamicGraph_Oil dragged call virtual function
        //Call graphOil_Dragged
        graphOil_Dragged(value);
    }
    if (&src == &dynamicGraph_Coolant)
    {
        //graphCoolant_Dragged
        //When dynamicGraph_Coolant dragged call virtual function
        //Call graphCoolant_Dragged
        graphCoolant_Dragged(value);
    }
}
