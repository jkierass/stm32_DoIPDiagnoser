/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/diagnose_motor1_screen/Diagnose_Motor1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

Diagnose_Motor1ViewBase::Diagnose_Motor1ViewBase() :
    updateItemCallback(this, &Diagnose_Motor1ViewBase::updateItemCallbackHandler),
    buttonCallback(this, &Diagnose_Motor1ViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    DiagnoseMotorList.setPosition(0, 74, 800, 406);
    DiagnoseMotorList.setHorizontal(false);
    DiagnoseMotorList.setCircular(false);
    DiagnoseMotorList.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    DiagnoseMotorList.setSwipeAcceleration(10);
    DiagnoseMotorList.setDragAcceleration(10);
    DiagnoseMotorList.setNumberOfItems(9);
    DiagnoseMotorList.setPadding(0, 0);
    DiagnoseMotorList.setSnapping(false);
    DiagnoseMotorList.setOvershootPercentage(75);
    DiagnoseMotorList.setDrawableSize(44, 0);
    DiagnoseMotorList.setDrawables(DiagnoseMotorListListItems, updateItemCallback);
    add(DiagnoseMotorList);

    container1.setPosition(0, 0, 800, 75);
    box2.setPosition(0, -1, 800, 75);
    box2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    container1.add(box2);

    Clock.setPosition(659, 7, 124, 26);
    Clock.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Clock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GF6Z));
    Clock.displayLeadingZeroForHourIndicator(true);
    Clock.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
    Clock.setTime24Hour(10, 10, 0);
    container1.add(Clock);

    Text_MotorTitile.setPosition(198, 12, 240, 52);
    Text_MotorTitile.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
    Text_MotorTitile.setLinespacing(0);
    Text_MotorTitile.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2O72));
    container1.add(Text_MotorTitile);

    Text_Date.setPosition(657, 36, 128, 24);
    Text_Date.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Text_Date.setLinespacing(0);
    Text_Date.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2LSX));
    container1.add(Text_Date);

    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ID));
    HomeIcon.setPosition(12, 9, 55, 55);
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container1.add(HomeIcon);

    ReturnIcon.setBitmap(touchgfx::Bitmap(BITMAP_RETURN_ID));
    ReturnIcon.setPosition(86, 10, 55, 55);
    ReturnIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container1.add(ReturnIcon);

    NextParameterIcon.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_50_50_66A3FF_SVG_ID));
    NextParameterIcon.setPosition(441, 11, 55, 55);
    NextParameterIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container1.add(NextParameterIcon);

    HomeButton.setXY(12, 6);
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
    HomeButton.setAction(buttonCallback);
    container1.add(HomeButton);

    ReturnButton.setXY(83, 6);
    ReturnButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
    ReturnButton.setAction(buttonCallback);
    container1.add(ReturnButton);

    NextParameter.setXY(438, 9);
    NextParameter.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
    NextParameter.setAction(buttonCallback);
    container1.add(NextParameter);

    Text_Temperature.setPosition(546, 10, 105, 52);
    Text_Temperature.setColor(touchgfx::Color::getColorFromRGB(247, 64, 174));
    Text_Temperature.setLinespacing(0);
    Unicode::snprintf(Text_TemperatureBuffer, TEXT_TEMPERATURE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QW4M).getText());
    Text_Temperature.setWildcard(Text_TemperatureBuffer);
    Text_Temperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_S3JG));
    container1.add(Text_Temperature);

    add(container1);
}

Diagnose_Motor1ViewBase::~Diagnose_Motor1ViewBase()
{

}

void Diagnose_Motor1ViewBase::setupScreen()
{
    DiagnoseMotorList.initialize();
    for (int i = 0; i < DiagnoseMotorListListItems.getNumberOfDrawables(); i++)
    {
        DiagnoseMotorListListItems[i].initialize();
    }
}

void Diagnose_Motor1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
    {
        //SwitchToMainScreen
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
    }
    if (&src == &ReturnButton)
    {
        //SwitchToDiagnose
        //When ReturnButton clicked change screen to Diagnose
        //Go to Diagnose with no screen transition
        application().gotoDiagnoseScreenNoTransition();
    }
    if (&src == &NextParameter)
    {
        //NextParams
        //When NextParameter clicked change screen to Diagnose_Motor2
        //Go to Diagnose_Motor2 with no screen transition
        application().gotoDiagnose_Motor2ScreenNoTransition();
    }
}

void Diagnose_Motor1ViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &DiagnoseMotorListListItems)
    {
        DiagnoseMotorListUpdateItem(DiagnoseMotorListListItems[containerIndex], itemIndex);
    }
}
